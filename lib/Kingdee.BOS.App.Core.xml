<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingdee.BOS.App.Core</name>
    </assembly>
    <members>
        <member name="T:Kingdee.BOS.App.Core.AbstractRepository">
            <summary>
            Abstract Repository
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            constructor
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractRepository.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Acronym.AcronymService.GetUncommonCharacter(Kingdee.BOS.Context)">
            <summary>
            获取生僻字首字母对照表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AllocateLogCleanService">
            <summary>
            分配日志自动清理计划
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogCleanService.CleanData(Kingdee.BOS.Context)">
            <summary>
            删除几个月以前数据
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.TailDiffService.CorrectTailDiff(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.TailDiffType,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            矫正尾差
            </summary>
            <param name="ctx"></param>
            <param name="dataEntitis"></param>
            <param name="bInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.TailDiffService.GetSourceObjs(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.ConvertElement.DefaultConvertPolicyElement,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertTailDiffPolicyElement)">
            <summary>
            得到源单数据
            </summary>
            <param name="bInfo"></param>
            <param name="linkObjs"></param>
            <param name="defaultPolicy"></param>
            <param name="tailDiffPolicy"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.TailDiffService.AddQueryField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.ConvertElement.DefaultConvertPolicyElement,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertTailDiffPolicyElement)">
            <summary>
            增加源单需要查询的字段
            </summary>
            <param name="sInfo"></param>
            <param name="queryParam"></param>
            <param name="defaultPolicy"></param>
            <param name="tailDiffPolicy"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.TailDiffService.GetConvertRule(System.String)">
            <summary>
            得到ConvertRuleElement
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.TailDiffService.GetBusinessInfo(System.String)">
            <summary>
            得到BusinessInfo
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Attachment.AttachmentDal">
            <summary>
            附件服务组件访问数据库接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Attachment.AttachmentDal.GetAttachment(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.ConvertElement.AttachmenLevel,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            得到附件信息
            </summary>
            <param name="ctx"></param>
            <param name="srcFromId"></param>
            <param name="level"></param>
            <param name="entryKey"></param>
            <param name="lstSrcIds"></param>
            <param name="targetFormId"></param>
            <param name="lstBillId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Attachment.AttachmentDal.CopyAttachment(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertAttachmentResultInfo})">
            <summary>
            复制附件信息
            </summary>
            <param name="ctx"></param>
            <param name="convertInfos"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Attachment.AttachmentDal.GetSrcAttachment(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertAttachmentResultInfo},Kingdee.BOS.Orm.IDataManager)">
            <summary>
            得到源单附近信息
            </summary>
            <param name="ctx"></param>
            <param name="convertInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Attachment.AttachmentDal.GetFilter(System.String,Kingdee.BOS.Core.Metadata.ConvertElement.AttachmenLevel,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            得到过滤条件
            </summary>
            <param name="formId"></param>
            <param name="entryKey"></param>
            <param name="lstIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Attachment.AttachmentDal.GetCopyedAttachmentIds(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertAttachmentResultInfo})">
            <summary>
            得到已经复制过的附件内码，在这里处理就不需要每个端都处理。
            </summary>
            <param name="ctx"></param>
            <param name="attInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BackApp.ClearBackAppTaskSchedule.ClearBackAppTask(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            清理后台计算任务数据
            </summary>
            <param name="ctx"></param>
            <param name="curDate"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BackApp.ClearBackAppTaskSchedule.ClearMoveRptNotePrintPageData(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            清理套打分本打印的页面
            </summary>
            <param name="ctx"></param>
            <param name="curDate"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BackApp.ClearBackAppTaskSchedule.ClearNormalNotePrintPageData(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            清理套打普通打印的页面
            </summary>
            <param name="ctx"></param>
            <param name="curDate"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BackApp.ClearBackAppTaskSchedule.ClearPrintCrossTaskByDateTime(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            清理跨站点打印数据
            </summary>
            <param name="ctx"></param>
            <param name="curDate"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataControlPolicyService.ExtendBatchSave(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            扩展批量数据保存
            </summary>
            <param name="ctx"></param>
            <param name="targetOrgItems"></param>
            <param name="updateTargetOrgIds"></param>
            <param name="policyId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataControlPolicyService.CreateBDCtrlOrgTable">
            <summary>
            创建控制策略属性控制表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataControlPolicyService.CreateBDCtrlPropTable">
            <summary>
            创建控制策略属性控制表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.BasePlatService">
            <summary>
            基础平台接口服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.BasePlatService.GetBasePlatSysParam(Kingdee.BOS.Context)">
            <summary>
            获取基础平台参数设置
            </summary>
            <param name="ctx">上下文</param>
            <returns>基础平台参数设置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.BasePlatService.IsGetIndividuation(Kingdee.BOS.Context)">
            <summary>
            是否获取特性化用户推送信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>推送信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.BasePlatService.SetOnlyAdminLogin(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            设置只允许管理员登录
            </summary>
            <param name="ctx">上下文</param>
            <param name="isOnlyAdminLogin">只允许管理员登录</param>
            <returns>设置结果</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.IUserRepository">
            <summary>
            用户仓储信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.IUserRepository.GetUserPasswordInfo(System.Int64)">
            <summary>
            获取用户密码
            </summary>
            <param name="userId">用户ID</param>
            <returns>返回用户加密密码</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MailVAUserEntitySaveValidator">
            <summary>
            校验重复
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MailVAUserEntitySaveValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            执行校验
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.Repository.UserRepository">
            <summary>
            user repository
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.Repository.UserRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            constructor
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.Repository.UserRepository.GetUserPasswordInfo(System.Int64)">
            <summary>
            获取用户密码
            </summary>
            <param name="userId">用户ID</param>
            <returns>返回用户加密密码</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo">
            <summary>
            业务中心拉取
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo.PushToMiddlerServerFlg">
            <summary>
            推送初始化数据到移动部门，每天推送一次
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo._smsUpdateTimeCache">
            <summary>
            拉取数据的时间缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo.Execute(Kingdee.BOS.Context,System.String)">
            <summary>
            开始拉取管理中心的短信数据到业务中心，并执行同步初始值到移动部门
            </summary>
            <param name="ctx">上下文</param>
            <param name="publicUrl">公网地址</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo.GetPubUrl(System.String)">
            <summary>
            获取公网地址，缓存供后台线程使用
            </summary>
            <param name="dbid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SmsPullMCSmsInfo.SyncInitValueToMiServer(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.Sms.SmsCntInfoSync)">
            <summary>
            同步初始值到中间服务器
            </summary>
            <param name="ctx"></param>
            <param name="syncInfo"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StaffPostAboutService">
            <summary>
            员工、岗位相关服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetStaffSuperior(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取员工直接上级人
            </summary>
            <param name="postNumber">岗位编码</param>
            <param name="userOrgId">使用组织id</param>
            <returns>直接上级人列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetExtUesrId(Kingdee.BOS.Context)">
            <summary>
            获取所有的例外用户的用户Id
            </summary>
            <param name="ctx">上下文</param>
            <returns>例外用户</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetPostRoleIntegrationConfig(Kingdee.BOS.Context)">
            <summary>
            获取岗位一体化设置
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.SaveUpdateLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            保存修改同步日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="operateName">操作名称</param>
            <param name="regUserName">修改用户</param>
            <param name="operateResult">操作结果</param>
            <param name="description">操作描述</param>
            <param name="errorCount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetPersonByPostId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取岗位对应员工对应人员Id
            </summary>
            <param name="ctx"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserIdByPersonId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            通过员工找到对应的用户ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="personids">员工id</param>
            <returns>用户Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserRoleByPostId(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
            获取岗位对应员工对应的用户对应组织下角色
            </summary>
            <param name="ctx"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserRoleByPostId(Kingdee.BOS.Context,System.Int32)">
            <summary>
            通过岗位找到对应的用户当前组织下所有角色
            1.通过岗位找到有此岗位的员工
            2.通过员工找到对应的员工对应组织
            3.通过用户找到用户角色
            </summary>
            <param name="ctx"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetAllUserRoleByPostId(Kingdee.BOS.Context,System.Int32)">
            <summary>
             通过岗位找到对应的用户其它所有组织下所有角色
            1.通过岗位找到有此岗位的员工
            2.通过员工找到对应的员工对应组织
            3.通过用户找到用户角色
            </summary>
            <param name="ctx"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetGroupAppByRoleId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            通过角色Id找到所有角色对应的许可分组
            </summary>
            <param name="ctx">上下文</param>
            <param name="roles">角色Id</param>
            <returns>角色对应分组</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetGroupAppByUserId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            通过用户Id获取许可分组信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户Id信息</param>
            <returns>用户分组信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserInfobyUserid(Kingdee.BOS.Context,System.Int64)">
            <summary>
            通过用户Id找到用户对应的角色、组织信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userid">角色Id</param>
            <returns>用户组织角色信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserInfoByRoleId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取存在此角色的所有用户Id信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="roleId">角色Id</param>
            <returns>用户列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserInfoByGroupId(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            通过Roleid GroupApp找到不存在RoleId此角色还有分组GroupApp的用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="RoleId">需要删除的角色Id</param>
            <param name="GroupApp">许可分组</param>
            <returns>用户Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetRoleIdByPostId(Kingdee.BOS.Context,System.Int64,System.Int64)">
            <summary>
            通过岗位找到岗位角色映射中的角色信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="postId">岗位Id</param>
            <param name="orgId">所属组织Id</param>
            <returns>需要添加的角色</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetFiltRoleIdByOrgId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            通过岗位找到岗位角色映射中的角色信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="postId">岗位Id</param>
            <param name="orgId">所属组织Id</param>
            <returns>需要添加的角色</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetAddRoleIdByPersonId(Kingdee.BOS.Context,System.Int64,System.Int64)">
            <summary>
            通过员工Id、岗位Id获取对应用户需要添加的角色
            </summary>
            <param name="ctx">上下文</param>
            <param name="personId">员工Id</param>
            <param name="postId">岗位Id</param>
            <returns>需要添加的角色</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetDelOrgRoleIdByPersonId(Kingdee.BOS.Context,System.Int64,System.Int64,System.Int64)">
            <summary>
            通过员工Id,岗位id找到对应组织需要删除的角色信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="personid">员工Id</param>
            <param name="PostId">岗位Id</param>
            <param name="OrgId">组织Id</param>
            <returns>需删除角色信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetDelRoleIdByPersonId(Kingdee.BOS.Context,System.Int64,System.Int64,System.Int64)">
            <summary>
            通过员工Id,岗位id找到所有组织需要删除的角色信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="personid">员工Id</param>
            <param name="PostId">岗位Id</param>
            <param name="OrgId">组织Id</param>
            <returns>需删除角色信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetUserInfoBypersonID(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            通过员工Id获取到用户信息
            用户信息 包含用户信息-> 组织->角色
            </summary>
            <param name="ctx"></param>
            <param name="personId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StaffPostAboutService.GetPersonInfoByPersonId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            通过员工找到对应的员工信息
            员工信息包含 员工的所有岗位、岗位使用组织、各岗位对应的角色
            </summary>
            <param name="ctx">上下文</param>
            <param name="personids">员工Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            后台自动运行,计划,K/3 Cloud Job Process
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.GetSyncAllocateDelayBaseData(Kingdee.BOS.Context,System.Int32@,System.Int32@)">
            <summary>
            获取延迟同步基础资料表数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="minFId">本批次最小的FID</param>
            <param name="maxFId">本批次最大的FID</param>
            <returns>按基础资料类别分类的需要同步的数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.SyncAllocate(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            同步基础资料数据
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.UpdateStatus(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
            更新表状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="minFId">本次同步的最小FID</param>
            <param name="maxFId">本次同步的最大FID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.GetLastCleanTime(Kingdee.BOS.Context)">
            <summary>
            获取延迟同步表上次的清理时间
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.NeedCleanTable(System.DateTime)">
            <summary>
            是否需要清理延迟同步表
            </summary>
            <param name="lastCleanTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.SetLastCleanTime(Kingdee.BOS.Context)">
            <summary>
            更新上次清理延迟同步表时间
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.GetNotCompleteData(Kingdee.BOS.Context)">
            <summary>
            获取未完成同步的数据
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.Clean(Kingdee.BOS.Context)">
            <summary>
            清理表
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.InsertNotCompleteData(Kingdee.BOS.Context,System.Data.DataTable)">
            <summary>
            插入未完成同步的数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="dt">未完成的数据集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallDelayService.ClearCacheCustOtherInfo(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String[])">
            <summary>
            人为同步清除下客户联系人和客户地点的基础资料缓存数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallFailDataService">
            <summary>
            同步中的基础资料异常中断后的调起服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallFailDataService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            后台自动运行,计划,K/3 Cloud Job Process
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallFailDataService.SyncFailDatas(Kingdee.BOS.Context)">
            <summary>
            同步失败的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallFailDataService.SyncFailDatas(Kingdee.BOS.Context,System.String)">
            <summary>
            执行失败的数据
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateCallFailDataService.SyncFailData(Kingdee.BOS.Context,System.Object)">
            <summary>
            同步失败的数据
            </summary>
            <param name="syncObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.UpdateAllocateTable(System.Object[],System.String,Kingdee.BOS.Context,System.DateTime,System.Int32,System.Int64,System.Nullable{System.DateTime})">
            <summary>
            更新分配的资料
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.SendMessage(Kingdee.BOS.Context,System.Boolean,System.String,System.String,System.String)">
            <summary>
            消息平台发消息通知用户
            </summary>
            <param name="ctx"></param>
            <param name="success">是否执行成功</param>
            <param name="formName">基础资料名称</param>
            <param name="baseDataName">具体同步的基础资料名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.UpdateAllocateTablePart(System.Object[],System.Collections.Generic.HashSet{System.String},System.String,Kingdee.BOS.Context,System.DateTime,System.Int32,System.Int64,System.Nullable{System.DateTime})">
            <summary>
            更新分配的资料(部分，只同步用户传入的)
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.GetAllocateRowsPart(Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.HashSet{System.String},Kingdee.BOS.Context)">
            <summary>
            获取同步资料（根据用户传入的要同步的DestId）
            </summary>
            <param name="form"></param>
            <param name="businessInfo"></param>
            <param name="dataEntitys"></param>
            <param name="destIds"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.GetFailCountFromResult(Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            从每一批次的返回结果中获取失败的数量（延用AllocateLogger.UpdateAllocLogInf中的计算逻辑）
            </summary>
            <param name="result">每个批次同步操作的返回结果</param>
            <returns>失败数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.UpdateDestOrgData(System.String,System.Data.DataRow[],Kingdee.BOS.Context,System.Int64,System.DateTime,System.Int32,System.Nullable{System.DateTime},System.Int32,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            
            </summary>
            <param name="dataEntitys"></param>
            <param name="formId"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.UpdateEntrysMasterData(Kingdee.BOS.App.Core.ValueSetter,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            更新多个单据体的masterId
            </summary>
            <param name="valueSetter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.UpdateEntrysMasterData(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,Kingdee.BOS.App.Core.FillDt,Kingdee.BOS.Context)">
            <summary>
            更新单据体的masterId
            </summary>
            <param name="valueSetter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.CreateDataTable(System.String)">
            <summary>
            创建批量插入表
            </summary>
            <param name="entryAlloctionTable"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.GetAllocateControlAll(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.HashSet{System.Object},Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            获取分配策略
            </summary>
            <param name="formId">表单DI</param>
            <param name="bdTable"></param>
            <param name="createOrg"></param>
            <param name="useOrg"></param>
            <param name="pkmasterField"></param>
            <param name="pkIds"></param>
            <param name="pkFieldType"></param>
            <param name="businessInfo"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateInfo.GetParentEntityTop(Kingdee.BOS.Core.Metadata.EntityElement.SubEntryEntity,System.Int32@)">
            <summary>
            获取顶层的单据体（多层子单据体嵌套时）
            </summary>
            <param name="subEntity">子单据体</param>
            <param name="layerCount">子单据体层数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SyncAllocateStatus.UpdateAllocateTable(System.Object[],System.String,Kingdee.BOS.Context,System.String,System.DateTime,System.Int32,System.Int64,System.Nullable{System.DateTime})">
            <summary>
            更新分配的资料禁用等信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.UserVerify.IUserVerifyErrorCounter">
            <summary>
            用户验证计数器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserVerify.IUserVerifyErrorCounter.IsMaxCount(Kingdee.BOS.Context,System.Int64)">
            <summary>
            是否已达最大验证树
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>是返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserVerify.IUserVerifyErrorCounter.Count(Kingdee.BOS.Context,System.Int64)">
            <summary>
            计数
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.UserVerify.UserVerifyErrorCounter">
            <summary>
            用户验证错误计数器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserVerify.UserVerifyErrorCounter.IsMaxCount(Kingdee.BOS.Context,System.Int64)">
            <summary>
            是否已达最大验证树
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>是返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserVerify.UserVerifyErrorCounter.Count(Kingdee.BOS.Context,System.Int64)">
            <summary>
            计数
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlPositionBosCheck">
            <summary>
            字段控件的位置重叠检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlPositionBosCheck.#ctor">
            <summary>
            字段控件的位置重叠检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlPositionBosCheck.IsIntersectsWith(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断两个矩形是否交叉,并容错处理
            </summary>
            <param name="l1"></param>
            <param name="t1"></param>
            <param name="w1"></param>
            <param name="h1"></param>
            <param name="l2"></param>
            <param name="t2"></param>
            <param name="w2"></param>
            <param name="h2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Defect.AttachmentBosCheck.#ctor">
            <summary>
            附件元数据检测。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Defect.ExpressionParentEntityKeyBosCheck">
            <summary>
            表达式父单据体的Key检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Defect.ExpressionParentEntityKeyBosCheck.InvalidExp(System.String)">
            <summary>
            判断表达式含有sum/avg/min/max/count运算函数
            </summary>
            <param name="express">计算表达式</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormBulkInsertBosCheck">
            <summary>
            批量插入属性检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormBulkInsertBosCheck.#ctor">
            <summary>
             构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormBulkInsertBosCheck.Check">
            <summary>
            检查
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Defect.UpdateActionEndlessLoopBosCheck">
            <summary>
            值更新死循环检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Defect.UpdateActionEndlessLoopBosCheck.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Fault.DomainModelRegisterClassBosCheck">
            <summary>
            检查领域模型注册插件类是否被篡改
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.Fault.DomainModelRegisterClassBosCheck.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.BFQueryUtils.GetBusinessFlowTrackers(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            GetBusinessFlowTrackers
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.BFQueryUtils.GetBusinessFlowTrackersFromFile(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            读取文件归档的数据
            </summary>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.BFDataQueryService.GetTargetEntityInfo(Kingdee.BOS.Context,System.String,System.String,System.Int64[],System.String)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">当前单据唯一标识</param>
            <param name="entityKey">单据体标识，可以为空，为空时表示整单查询</param>
            <param name="ids">entityKey不为空时为分录内码，否知为单据内码</param>
            <param name="targetFormId">指定关联查询的业务对象，可以为空，为空是表示查询所有关联的单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceIds">
            <summary>
            获取流程实例数据
            现在只读取InstanceEntry表的数据，后续看需求是否要读取完整的业务数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceIdsByBillHead(System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <param name="tidTupleEqualsFilter"></param>
            <param name="tidTupleTempTable"></param>
            <param name="tipTupleFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceIdsByBillEntry(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="tidSql"></param>
            <param name="lstTidParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceIds(System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            GetBusinessFlowTrackers
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceIdsFromFile(System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            读取文件归档的数据
            </summary>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceData">
            <summary>
            获取流程实例数据
            现在只读取InstanceEntry表的数据，后续看需求是否要读取完整的业务数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceDataByBillHead(System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <param name="tidTupleEqualsFilter"></param>
            <param name="tidTupleTempTable"></param>
            <param name="tipTupleFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.InstanceDataQueryService.GetInstanceDataByBillEntry(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="tidSql"></param>
            <param name="lstTidParam"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService._entityKey">
            <summary>
            实体标识，按分录关联查询时，_entityKey不能为空
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService._targetFormId">
            <summary>
            指定要关联查询的目标单据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.#ctor(Kingdee.BOS.Context,System.String,System.String,System.Int64[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="entityKey">单据体标识，可以为空，为空时表示整单查询</param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.GetTargetEntityInfo(System.String)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="targetFormId">指定关联查询的业务对象，可以为空，为空是表示查询所有关联的单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.GetTargetEntityInfoByBillHead(System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <param name="tidTupleEqualsFilter"></param>
            <param name="tidTupleTempTable"></param>
            <param name="tipTupleFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.GetTargetEntityInfoByBillEntry(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Tuple{System.String,Kingdee.BOS.SqlParam},System.Tuple{System.String,System.String},System.Tuple{System.String,Kingdee.BOS.SqlParam})">
            <summary>
            单据头关联流程数据
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="tidSql"></param>
            <param name="lstTidParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.GetTargetEntityInfo(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String)">
            <summary>
            GetBusinessFlowTrackers
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.GetAllTargetEntityInfoFromFile(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            读取文件归档的数据
            </summary>
            <param name="sql"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFQuery.RelationQueryService.CheckAndGetTableDefine(System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine@)">
            <summary>
            检查并获取TableDefine
            </summary>
            <param name="tableDefine"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BFSchedule.HisWBSnapUpgrateSchedule">
            <summary>
            执行计划：历史反写快照升级
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BFSchedule.HisWBSnapUpgrateSchedule.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            对反写快照进行升级处理，每次升级1万条
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WBRecordSchedule">
            <summary>
            执行计划：归档反写记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WBRecordSchedule.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            自动计划，执行入口
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService">
            <summary>
            业务流程阻断服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.BreakBusinessFlow(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowData)">
            <summary>
            阻断业务流程
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.GetRelationRowsByTId(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowData,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="sourceEntry"></param>
            <param name="sourceBillMeta"></param>
            <param name="targetEntry"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.GetRelationRowsBySId(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowData,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="sourceEntry"></param>
            <param name="targetBillMeta"></param>
            <param name="targetEntry"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.StartBreak(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowData,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowResult,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="result"></param>
            <param name="sourceEntry"></param>
            <param name="targetEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.WriteLog(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowResult,System.Collections.Generic.List{Kingdee.BOS.Core.Log.LogObject})">
            <summary>
            成功后写上机操作日志
            </summary>
            <param name="ctx"></param>
            <param name="sourceBillMeta"></param>
            <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BreakBusinessFlowService.BuilderSqlParam(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.FormMetadata,System.String,System.String,Kingdee.BOS.SqlParam,Kingdee.BOS.SqlParam,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject},Kingdee.BOS.BusinessEntity.BusinessFlow.BreakRow,System.Collections.Generic.List{Kingdee.BOS.Core.Log.LogObject})">
            <summary>
            
            </summary>
            <param name="deleteRelationSql"></param>
            <param name="updateInstEntrySql"></param>
            <param name="sSTableNameParam"></param>
            <param name="sTTableNameParam"></param>
            <param name="batchSql"></param>
            <param name="breakRow"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository">
            <summary>
            业务流程历史数据处理组件
            </summary>
            <summary>
            业务流程历史数据处理组件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._archiveFileTable">
            <summary>
            另存文件表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._archiveLogTable">
            <summary>
            日志表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._masterIdFields">
            <summary>
            业务流程实例临时表的字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instAllFields">
            <summary>
            会话级临时表字段：业务流程实例正式、历史数据汇总表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instBackUpFields">
            <summary>
            会话级临时表字段：业务流程归档数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instEntryAllFields">
            <summary>
            会话级临时表字段：业务流程路线正式、历史数据汇总表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instEntryBackUpFields">
            <summary>
            会话级临时表字段：业务流程路线归档数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instAmountAllFields">
            <summary>
            会话级临时表字段：业务流程携带量正式、历史数据汇总表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._instAmountBackUpFields">
            <summary>
            会话级临时表字段：业务流程携带量归档数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetTrackNodes(System.Collections.Generic.Dictionary{Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.List{System.Int64}},System.Boolean)">
            <summary>
            得到联查节点信息
            </summary>
            <param name="trackNodes"></param>
            <param name="isTrackDown"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetTrackDownNods(System.Collections.Generic.List{System.Tuple{System.String,System.Boolean}},Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.List{System.Int64},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}}@)">
            <summary>
            得到下查节点
            </summary>
            <param name="instEntrys"></param>
            <param name="tbDefine"></param>
            <param name="lstId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetTrackUpNodes(System.Collections.Generic.List{System.Tuple{System.String,System.Boolean}},Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.List{System.Int64},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}}@)">
            <summary>
            得到上查节点
            </summary>
            <param name="instEntrys"></param>
            <param name="tbDefine"></param>
            <param name="lstId"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._currSystemTime">
            <summary>
            当前系统时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._isBackUp">
            <summary>
            选项，是否允许归档到历史表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._monthToHis">
            <summary>
            在正式表中的保留月份，之后迁移到历史表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._monthToBK">
            <summary>
            在历史表中的保留月份，之后迁移到归档表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._monthToFile">
            <summary>
            在归档表中的保留月份，之后压缩为文件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository._dctFieldKeyToLetter">
            <summary>
            字典，使用字母替代常用字段名，减少存储空间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BackUpBFDatas">
            <summary>
            对业务流程数据进行归档清理，减少正式表格数据量
            </summary>
            <remarks>
            1. 超过6个月的正式表数据 -> 历史表;
            2. 迁移超过1年的历史表 -> 归档表;
            3. 归档表，按年进行分区分表（暂不提供）
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BackUpWriteBackSnap">
            <summary>
            归档反写记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BackUpBFInstance">
            <summary>
            归档业务流程实例数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.IsNeedMoveFileToBack">
            <summary>
            是否需要把文件还原到归档表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveFileToBack">
            <summary>
            把文件还原到归档表，每次处理50000个文件数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstToCurrTable(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            把历史表格中的业务流程数据，回迁到当前表
            </summary>
            <param name="tableName"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveSnapToCurrTable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            把历史表格中的反写快照，回迁到当前表格
            </summary>
            <param name="cids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadInstDatasWithHis(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisArgs)">
            <summary>
            合并正式表、历史表、归档表，读取指定单据的业务流程数据，输出到会话级临时表
            </summary>
            <param name="args">参数对象，含业务单据分录表格编码、内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.EntityRowsIsPushValidateBreak(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            源单行是否下推过，要联合正式表、历史表进行搜索
            </summary>
            <param name="sTableName"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.EntityRowsIsPush(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            源单行是否下推过，要联合正式表、历史表进行搜索
            </summary>
            <param name="sTableName"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.EntityRowsIsPush(System.String,System.Int64)">
            <summary>
            源单行是否下推过，要联合正式表、历史表进行搜索
            </summary>
            <param name="sTableName"></param>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.InstanceInHisTable(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            所选单据分录的业务流程实例数据，是否已经被迁移到了历史表
            </summary>
            <param name="tableName"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.SnapInHisTable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            所选单据的反写快照，是否已经迁移到了历史表
            </summary>
            <param name="cids">反写快照主键：string.Format("{0},{1},{2}", formId, linkEntityKey, id)</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetSnapIdInHis(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            得到在反写历史和归档表中的快照内码集合
            </summary>
            <param name="cids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BackUpInstances">
            <summary>
            归档业务流程
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BackUpSnaps">
            <summary>
            归档快照
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstAllToHis">
            <summary>
            备份流程实例、路线、携带到历史表
            最多循环100次，每次100条实例数据，实例数据的最后一个节点时间小于设置的时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstAllToBack">
            <summary>
            迁移历史表中的流程实例、路线、携带量到归档表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.InsertMasterIdsNeedToHis(System.String)">
            <summary>
            读取最后一次修改时间超过期限，需迁移到历史表中的流程实例，插入到临时表
            </summary>
            <param name="tmpTableMasterIds">临时表，取出符合条件的流程实例MasterId，存于此表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.InsertInstanceIdsNeedToBack(System.String)">
            <summary>
            读取迁移到历史表已经超过期限，需迁移到归档表中的流程实例，插入到临时表
            </summary>
            <param name="tmpTableMasterIds">临时表，取出符合条件的流程实例InstanceId，存于此表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.InsertInstanceIdsNeedToFile(System.String)">
            <summary>
            读取迁移到归档表已经超过期限，需压缩为文件的流程实例，插入到临时表
            按FmaterId对数据进行分组归档
            </summary>
            <param name="tmpTableMasterIds">临时表，取出符合条件的流程实例InstanceId，存于此表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstToHis(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_Instance的SQL
            </summary>
            <param name="tmpTableMasterIds">临时表，存储待迁移到His的流程实例MasterId</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstToBack(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_InstanceHis的SQL
            </summary>
            <param name="tmpTableMasterIds">临时表，存储待迁移到Back的流程实例Id</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstToFile(System.String,System.Int32,System.Int32,Kingdee.BOS.App.Data.SqlObject@,Kingdee.BOS.App.Data.SqlObject@)">
            <summary>
            生成分批迁移t_BF_InstBackUp到文件的SQL
            </summary>
            <param name="tmpTableInstIds">临时表，存储待迁移的流程实例Id</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象，读取需迁移的数据</param>
            <param name="sqlDelBck">输出SQL对象，删除已经迁移的数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveEntryToHis(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_InstanceEntry的SQL
            </summary>
            <param name="tmpTableMasterIds">临时表，存储待迁移的流程实例MasterId</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveEntryToBack(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_InstanceEntryHis的SQL
            </summary>
            <param name="tmpTableMasterIds">临时表，存储待迁移的流程实例Id</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveEntryToFile(System.String,System.Int32,System.Int32,Kingdee.BOS.App.Data.SqlObject@,Kingdee.BOS.App.Data.SqlObject@)">
            <summary>
            生成分批迁移t_BF_InstEntryBackUp的SQL
            </summary>
            <param name="tmpTableInstIds">临时表，存储待迁移的流程实例Id</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlReadData">读取待迁移数据</param>
            <param name="sqlDelBck">删除待迁移数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveAmountToHis(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_InstanceAmount数据的SQL
            </summary>
            <param name="tmpTableMasterIds">临时表，存储待迁移的流程实例MasterId</param>
            <param name="beginIndex">本批开始序号</param>
            <param name="endIndex">本批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveAmountToBack(System.String,System.Int32,System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成分批迁移t_BF_InstanceAmountHis的SQL
            </summary>
            <param name="tmpTableInstIds">临时表，存储待迁移的流程实例ID</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlObjs">输出SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveAmountToFile(System.String,System.Int32,System.Int32,Kingdee.BOS.App.Data.SqlObject@,Kingdee.BOS.App.Data.SqlObject@)">
            <summary>
            生成分批迁移t_BF_InstAmountBackUp的SQL
            </summary>
            <param name="tmpTableInstIds">临时表，存储待迁移的流程实例Id</param>
            <param name="beginIndex">分批开始序号</param>
            <param name="endIndex">分批结束序号</param>
            <param name="sqlReadData">读取待迁移数据</param>
            <param name="sqlDelBck">删除待迁移数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveSnapToHis">
            <summary>
            迁移快照到历史表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveSnapToBack">
            <summary>
            迁移快照到归档表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CompressSnaps">
            <summary>
            压缩归档的快照，节省存储空间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CompressSnaps(Kingdee.BOS.BusinessEntity.BusinessFlow.HisSnapshotType,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            压缩历史快照
            </summary>
            <param name="dtSnap">历史快照实体模型</param>
            <param name="snaps">历史快照数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.DecompressSnaps(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            解压快照数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.DecompressSnaps(Kingdee.BOS.BusinessEntity.BusinessFlow.HisSnapshotType,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            解压历史快照
            </summary>
            <param name="dtSnap">历史快照实体模型</param>
            <param name="snaps">历史快照数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CompressBFData">
            <summary>
            读取归档超过一定期限的业务流程数据，整体压缩为文件后另存起来
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.DecompressBFData(System.Collections.Generic.HashSet{System.Int64})">
            <summary>
            把已经压缩为文件的业务流程数据，反向解压，灌入临时表
            </summary>
            <param name="fileIds">文件</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveArchiveFileToBack(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.HashSet{System.Int64})">
            <summary>
            把另存为文件的业务流程数据，还原到归档表
            </summary>
            <param name="tableName"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveArchiveFileToTmpTable(System.Collections.Generic.HashSet{System.Int64},System.String,System.String,System.String)">
            <summary>
            把另存为文件的业务流程数据，还原，插入到指定的临时表中
            </summary>
            <param name="fileIds">需还原的文件内码</param>
            <param name="tmpTableInst">业务流程主表</param>
            <param name="tmpTableEntry">业务流程路线从表</param>
            <param name="tmpTableAmount">业务流程携带子表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateSerializer">
            <summary>
            构建反序列对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BuildArchiveLogObjs(Kingdee.BOS.BusinessEntity.BusinessFlow.ArchiveLogType,System.Int64,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.HashSet{System.Int64}})">
            <summary>
            构建另存日志，记录哪些目标单据，另存为那个文件了
            </summary>
            <param name="dtLog"></param>
            <param name="fileId"></param>
            <param name="dctTargetEntityIds"></param>
            <returns></returns>
            <remarks>
            数据联查时，需要根据日志，追查哪些目标单据的业务流程数据，另存为了文件
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadArchiveFiles(Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            读取所选目标单据业务流程，另存的文件
            </summary>
            <param name="tableName"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadArchiveFiles(System.Int32,System.String)">
            <summary>
            读取所选目标单据业务流程，另存的文件
            </summary>
            <param name="tTableId">目标单表格序号</param>
            <param name="tmpTableEntityIds">目标单内码临时表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadArchiveFiles(System.Int32,System.String,Kingdee.BOS.SqlParam)">
            <summary>
            读取压缩文件
            </summary>
            <param name="tTableId"></param>
            <param name="sqlCardWithC"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadMasterIdsMoveToCurr(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            从历史表中读取符合条件，需要回迁的业务流程实例MasterId, 插入到临时表中。输出临时表名
            </summary>
            <param name="tableName">目标单据实体表格编码</param>
            <param name="entityIds">目标单据实体内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveInstToCurrTable(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            把指定的业务流程实例数据(含实例、路线、携带量)，回迁到正式表。数据的创建日期调整为当前时间
            </summary>
            <param name="tmpTableMasterIds">存储了待输出的业务流程实例MasterId</param>
            <param name="instTable">流程实例表，可能是正式表、历史表</param>
            <param name="entryTable"></param>
            <param name="amountTable"></param>
            <param name="sqlObjs">输出待执行的SQL对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadMasterIdsNeedMerge(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisArgs,System.String,System.String@,System.String@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Boolean}@)">
            <summary>
            从正式表、历史表，已经另存的文件中读取符合条件的业务流程实例MasterId, 插入到临时表中。输出临时表名
            </summary>
            <param name="args">参数对象，含业务单据分录表格编码、内码集合</param>
            <param name="tmpTableInstBack">临时表，输出已经另存为文件的业务流程</param>
            <param name="tmpTableEntryBack">临时表，输出已经另存为文件的业务流程</param>
            <param name="tmpTableAmountBack">临时表，输出已经另存为文件的业务流程</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CopyInstancesToTmpTable(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisResult,System.String,System.String,System.String,System.Boolean,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisArgs)">
            <summary>
            把指定的业务流程实例数据(含实例、路线、携带量)，输出到临时表中
            </summary>
            <param name="result">包含了输出的业务流程临时表名</param>
            <param name="instTable">流程实例表，可能是正式表、历史表</param>
            <param name="entryTable"></param>
            <param name="amountTable"></param>
            <param name="isHisTable">传入的表格是否为历史数据表格</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateMasterIdTmpTable">
            <summary>
            创建临时表，用以存储待处理的业务流程MasterId
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstAllTmpTable">
            <summary>
            创建临时表，用以存储业务流程实例正式、历史数据汇总表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstBackUpTmpTable">
            <summary>
            创建临时表，用以存储从另存文件中还原的业务流程数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstEntryAllTmpTable">
            <summary>
            创建临时表，用以存储业务流程路线正式、历史数据汇总表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstEntryBackUpTmpTable">
            <summary>
            创建临时表，用以存储从另存文件中还原的业务流程路线
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstAmountAllTmpTable">
            <summary>
            创建临时表，用以存储业务流程携带量正式、历史数据汇总表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.CreateInstAmountBackUpTmpTable">
            <summary>
            创建临时表，用以存储从另存文件还原的业务流程携带量数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ReadBackUpMonths">
            <summary>
            读取业务流程系统参数，了解数据归档间隔
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.IsRequireBackUp">
            <summary>
            大于1000万强制归档
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.InsertIdsToTempTable(System.String,System.Array)">
            <summary>
            把内码（long）插入到临时表
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetBatchIds(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            取指定批次内码
            </summary>
            <param name="allIds">全部内码</param>
            <param name="count">每批数量</param>
            <param name="batchIndex">当前批次，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ExecuteStatistic(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String})">
            <summary>
            更新表格的统计信息，以提升查询性能：如果表格经常进行插入、删除，需要及时更新统计信息，否则会引起Oracle数据库的性能问题
            </summary>
            <param name="tmTableNames">表名</param>
            <remarks>
            特别注意：更新临时表统计信息，会提交事务；未避免影响事务，这里增加Suppress事务保护，需注意避免死锁
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveSnapToBack2">
            <summary>
            把历史表中的数据迁移到归档表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.MoveSnapToHis2">
            <summary>
            新版迁移快照表到历史表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ClearWBLog">
            <summary>
            清理反写日志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BillIsPush(System.String,System.String,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            单据是否下推过，返回下推过的单据内码，没有返回的内码说明没有下推过
            </summary>
            <param name="formId"></param>
            <param name="refParentEnityKey"></param>
            <param name="billIdEntryIds"></param>
            <param name="exceptTargetTbNames"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.GetSTableTuple(System.Collections.Generic.List{System.Int64},Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine)">
            <summary>
            得到需要检查的表集合
            </summary>
            <param name="entryIds"></param>
            <param name="tableDefine"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.BuildExecSql(System.Tuple{System.String,System.Boolean},System.Int64[],Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            构建验证脚本和参数
            </summary>
            <param name="tupleItem"></param>
            <param name="arrRefIds"></param>
            <param name="tableDefine"></param>
            <param name="isExcept"></param>
            <param name="exceptTargetTbNames"></param>
            <param name="isEvery"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ZipType">
            <summary>
            字符串压缩类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ZipType.NoZip">
            <summary>
            xml原文, 未压缩
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFHisDataRepository.ZipType.MSGZip">
            <summary>
            微软GZipStream压缩
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService">
            <summary>
            新版帮助助手执行计划
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.UpdateHelpAssistInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantRequestInfo)">
            <summary>
            更新新帮助手册信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="request">请求信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.GetNewHelperRed(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantRequestInfo)">
            <summary>
            更新新帮助手册信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="request">请求信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.SaveConfig(Kingdee.BOS.Context)">
            <summary>
            更新同步信息
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.GetLastTime(Kingdee.BOS.Context)">
            <summary>
            获取上次获取数据的时间
            </summary>
            <param name="ctx">上下文</param>
            <returns>上次获取数据时间</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.LastSyncConfig">
            <summary>
            上次同步时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantScheduleService.LastSyncConfig.SyncTime">
            <summary>
            上次同步时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantService.IsExistHelpAssistInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistFormInfo)">
            <summary>
            获取帮助助手信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="formInfo">请求单据(子系统)信息</param>
            <returns>帮助助手信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantService.GetHelpAssistInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistFormInfo)">
            <summary>
            获取帮助助手信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="formInfo">请求单据(子系统)信息</param>
            <returns>帮助助手信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.SaveHelpAssistantInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantantInfo})">
            <summary>
            同步从线上更新下来的数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="data">帮助助手信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.GetNewHelperRed(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.HelpAssistant.NewHelperRedInfo})">
            <summary>
            获取帮助助手红点信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="data">红点信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.DeleteOldInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            删除历史数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="helpInfo">帮助手册配置信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.InsertNewInfo(Kingdee.BOS.Context,System.String,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantantInfo)">
            <summary>
            插入配置信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="status">状态信息</param>
            <param name="helpInfo">帮助手册配置信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.InsertMainTableInfo(Kingdee.BOS.Context,System.String,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantantInfo,System.Int64)">
            <summary>
            主表插入信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="status">状态信息</param>
            <param name="helpInfo">帮助手册配置信息</param>
            <returns>插入sql信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.InsertSubTableInfo(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.HelpAssistant.ContentInfo})">
            <summary>
            子表插入信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">主表id</param>
            <param name="contents">子表帮助手册配置信息</param>
            <returns>插入sql信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.InsertDetailTableInfo(Kingdee.BOS.Context,System.Int32,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.HelpAssistant.DetailInfo})">
            <summary>
            分表插入信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="entryId">子表id</param>
            <param name="details">分表帮助手册配置信息</param>
            <returns>插入sql信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.HelpAssistantHelper.InsertNewRedInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.NewHelperRedInfo)">
            <summary>
            插入帮助助手红点信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="helpInfo">红点信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CollaborativeCloud.CollaborativeCloudMetaDataPlugIn.SetCollaborativeCloudIconName(System.Collections.Generic.List{Kingdee.BOS.LocaleValue})">
            <summary>
            单据右侧的下拉按钮
            </summary>
            <param name="localValues"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Configuration.DbConfigurationService">
            <summary>
            Db参数配置服务。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetIsCtrlFirstInRowCount(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回是否管控首次进入行数，true为管控，false为不管控，默认为false。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回是否管控首次进入行数，true为管控，false为不管控，默认为false。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetListFirstInRowCount(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回业务对象列表首次进入时每页行数，默认为200。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回业务对象列表首次进入时每页行数，默认为200。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetIsEnableWebAPIByAdmin(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回WebAPI是否允许使用Administrator登录，默认为true允许登录。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回WebAPI是否允许使用Administrator登录，默认为true允许登录。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetBuildQueryBDSqlFromLimit(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回限制WebAPI生成关联表数量(目前只限制WebAPI查询接口)，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回限制WebAPI生成关联表数量(目前只限制WebAPI查询接口)，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetWebApiLimitPolicy(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回WebAPI限流控制，默认不做限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回WebAPI限流控制，默认不做限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetImportParalleNumber(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回限制同时允许引入人数，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回限制同时允许引入人数，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetMaxImportCount(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回限制一次引入最大单据量，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回限制一次引入最大单据量，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetImportMaxMemoryUsage(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回内存使用率超过x%不允许引入数据操作，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回内存使用率超过x%不允许引入数据操作，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetExportParalleNumber(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回同时允许多少人引出，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回同时允许多少人引出，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetImportTemplateExportPageSize(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回按引入/引出模板引出分批数量，默认为3000。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回按引入/引出模板引出分批数量，默认为3000。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetMaxExportCount(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回限制最大引出数量行数，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回限制最大引出数量行数，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetMaxNotePrintBillCount(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回套打限制最大打印单据量，默认为0不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回套打限制最大打印单据量，默认为0不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetFileUploadMaxLength(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回文件上传最大大小，单位KB，默认-1不限制。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回文件上传最大大小，单位KB，默认-1不限制。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetIsConfigFileServer(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回公有云是否可配置文件服务，true为可配置，false为不可配置，默认为false不可配置。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回公有云是否可配置文件服务，true为可配置，false为不可配置，默认为false不可配置。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetIsUncheckAwsFileStorageDir(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回公有云禁止检查亚马逊云存储目录合法性，true为不检查，false为检查，默认false检查。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回公有云禁止检查亚马逊云存储目录合法性，true为不检查，false为检查，默认false检查。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Configuration.DbConfigurationService.GetIsForbidNewPythonPlugIn(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文，返回是否禁止新建Python插件，true为禁止，false为不禁止，默认false不禁止。
            </summary>
            <param name="ctx">登录上下文。</param>
            <returns>返回是否禁止新建Python插件，true为禁止，false为不禁止，默认false不禁止。</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction">
            <summary>
             附件携带默认策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.Do">
            <summary>
            附件处理逻辑
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.ResolveData(Kingdee.BOS.Core.Metadata.ConvertElement.AttachmenLevel,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty,System.String)">
            <summary>
            解析单据
            </summary>
            <param name="level"></param>
            <param name="srcEntityPKProperty"></param>
            <param name="strEntityKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.InitPropery">
             <summary>
            初始化属性
             </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.GetEntityPkFieldName(System.String)">
            <summary>
            根据实体Key，获取主键的字段名称
            </summary>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.GetTargetEntityKey(Kingdee.BOS.Core.Metadata.ConvertElement.AttachmenLevel)">
            <summary>
            得到目标实体Key,单据头对应单据头， 单据体对应单据体，子单据体对应子单据体
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.Rule">
            <summary>
            选用的单据转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.SourceBusinessInfo">
            <summary>
            来源单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.TargetBusinessInfo">
            <summary>
            目标单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.TargetExtendedDataEntities">
            <summary>
            目标单据转换数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.SourceData">
            <summary>
            序事簿上选择数的源单据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.AttachmentPolicy.AttachmentDefaultAction.Option">
            <summary>
            操作选项
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertAttachmentPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建下推动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertAttachmentPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建选单动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AppBusinessService.ClearItemClassCache">
            <summary>
            清除多类别基础资料缓存
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService">
            <summary>
             应用程序初始化服务（用于IIS重启后，应用程序预加载）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService._InitializationStatus">
            <summary>
            初始化状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService._Locks">
            <summary>
            数据中心锁
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.Initialize(System.String)">
            <summary>
            初始化
            </summary>
            <param name="requestUrl">请求地址</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.Initialize(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="dbId">数据中心Id</param>
            <param name="requestUrl">请求地址</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.InitializeHtml5MainConsole(System.String)">
            <summary>
            初始化html5主控台
            </summary>
            <param name="dbid">数据中心ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.GetHost(System.String)">
            <summary>
            根据请求地址获取host
            </summary>
            <param name="requestUrl">请求地址</param>
            <returns>host地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.GetLoginUrl(System.String)">
            <summary>
            获取登陆接口地址
            </summary>
            <param name="requestUrl">请求地址</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.ApplicationInitialization(System.Object)">
            <summary>
            应用程序初始化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.Login(System.String,Kingdee.BOS.Context)">
            <summary>
            模拟登陆
            </summary>
            <param name="loginUrl">登陆地址</param>
            <param name="dataCenterId">数据中心Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.InitializePermission(Kingdee.BOS.Context)">
            <summary>
            初始化用户权限
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.IntializeMetadata(Kingdee.BOS.Context)">
            <summary>
            初始化元数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ApplicationInitialization.ApplicationInitializationService.IntializeWNReportMetadata(Kingdee.BOS.Context)">
            <summary>
            初始化元数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ApplicationInitialization.InitializationParam">
            <summary>
            初始化数据参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ApplicationInitialization.InitializationParam.DBId">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ApplicationInitialization.InitializationParam.LoginUrl">
            <summary>
            登录URL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ApplicationInitialization.InitializationParam.WNReportUrl">
            <summary>
            WNReportUrl
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseData.BatchEditService">
            <summary>
            批量修改服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseData.BatchEditService.SaveBatchEditLog(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BaseData.BatchEdit,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BaseData.BatchEditDetail})">
            <summary>
            保存批改日志
            </summary>
            <param name="context">上下文</param>
            <param name="batch">批改记录</param>
            <param name="details">批改明细</param>
            <returns>批改记录ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseData.BatchEditService.SetBactchEditLogHasRead(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定用户未读的批改日志
            </summary>
            <param name="context">上下文</param>
            <param name="userID">用户ID</param>
            <returns>批改记录ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseData.BatchEditService.GetUnreadBactchEditLog(Kingdee.BOS.Context,System.Int64)">
            <summary>
            设置批改日志已读
            </summary>
            <param name="context">上下文</param>
            <param name="batchID">批改记录ID</param>
            <returns>设置是否成功</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.AmountFieldBosCheck">
            <summary>
            金额字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.AmountFieldBosCheck.#ctor">
            <summary>
            金额字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.AssistantFieldBosCheck">
            <summary>
            单选辅助资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.AssistantFieldBosCheck.#ctor">
            <summary>
            单选辅助资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseDataFieldBosCheck">
            <summary>
            基础资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseDataFieldBosCheck.#ctor">
            <summary>
            基础资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseDataTextFieldBosCheck">
            <summary>
            可编辑基础资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseDataTextFieldBosCheck.#ctor">
            <summary>
            可编辑基础资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BasePropertyFieldBosCheck">
            <summary>
            基础资料属性字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BasePropertyFieldBosCheck.#ctor">
            <summary>
            基础资料属性字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseQtyFieldBosCheck">
            <summary>
            基本单位数量字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BaseQtyFieldBosCheck.#ctor">
            <summary>
            基本单位数量字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BillStatusFieldBosCheck">
            <summary>
            单据状态字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.BillStatusFieldBosCheck.#ctor">
            <summary>
            单据状态字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ComboFieldBosCheck">
            <summary>
            下拉列表字段检测
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ComboFieldBosCheck.ComboFieldTypeNames">
            <summary>
            下拉列表字段类型集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ComboFieldBosCheck.#ctor">
            <summary>
            下拉列表字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DecimalFieldBosCheck">
            <summary>
            小数字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DecimalFieldBosCheck.#ctor">
            <summary>
            小数字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DependFieldInputOrderBosCheck">
            <summary>
            检查依赖字段录入顺序
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DependFieldInputOrderBosCheck.CreateCheckResult(System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            构建检查结果
            </summary>
            <param name="formId">业务对象标识</param>
            <param name="field">当前字段</param>
            <param name="controlField">控制字段或使用组织字段</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.EntityBosCheck">
            <summary>
            实体检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.EntityBosCheck.#ctor">
            <summary>
            实体检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.EntityBosCheck.AppendTable(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.String)">
            <summary>
            将搜集到的表名按其宿主存入集合中，后续用于统计是否存在重复表名
            </summary>
            <param name="tables"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.EntityVisibleFieldCountLimitBosCheck">
            <summary>
            单据体可见列数量超额检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.EntityVisibleFieldCountLimitBosCheck.#ctor">
            <summary>
            基础资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldBosCheck">
            <summary>
            字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldBosCheck.#ctor">
            <summary>
            字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldLengthBosCheck">
            <summary>
            字段长度检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldLengthBosCheck.#ctor">
            <summary>
            字段长度检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldLengthBosCheck.GetFieldDbLen(System.String,System.Int32)">
            <summary>
            将字段在数据库中的存储长度转换成设计器单位长度
            </summary>
            <param name="dataType"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormBosCheck">
            <summary>
            表单检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormBosCheck.#ctor">
            <summary>
            表单检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.SaveMkScheme(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Cvp.Mk.CvpMkSchemeSetting})">
            <summary>
            保存脱敏方案配置
            </summary>
            <param name="ctx"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.SaveMkFieldSet(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.Mk.CvpMkFieldSetting)">
            <summary>
            保存脱敏字段配置
            </summary>
            <param name="ctx"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.SaveFieldMkType(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            保存脱敏字段对应的脱敏类型
            </summary>
            <param name="ctx"></param>
            <param name="setDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.GetMkScheme(Kingdee.BOS.Context,System.String)">
            <summary>
            获取脱敏方案配置
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.GetMkRule(Kingdee.BOS.Context,System.String)">
            <summary>
            获取单条脱敏规则
            </summary>
            <param name="ctx"></param>
            <param name="mkType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpMkService.IsExistMkFielsSet(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            是否已经有配置过
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="fieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.SaveCvpInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpCreateSetting)">
            <summary>
            创建Cvp
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GetCvpInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取默认的配置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GetCvpWhiteListView(Kingdee.BOS.Context)">
            <summary>
            获取白名单设置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.SaveCvpWhiteListView(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpWhiteListView)">
            <summary>
            保存白名单
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.CreateCvpWhiteList(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpWhiteListView)">
            <summary>
            新增白名单
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.DeleteCvpWhiteList(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpWhiteListView)">
            <summary>
            删除字段
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.CheckValidFileName(System.String,System.Boolean)">
            <summary>
            检测Cvp文件名是否合法
            </summary>
            <param name="fileName">文件名，可能包含有目录</param>
            <param name="throwExp">true，则表示抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.RefreshRoot(Kingdee.BOS.Context,System.String)">
            <summary>
            刷新Root
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GetProcessDataCountByForms(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpActivateProcessPara)">
            <summary>
            获取需要同步的数据量，以便后面进行分批处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="para">cvp相关字段参数（可能包含多个单据）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.CreateOrAlterCvpTable(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Cvp.CvpActivateFieldItem},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            创建或修改表结构
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="activateFieldItems"></param>
            <param name="cvpTables"></param>
            <param name="batchSqls"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GenCreateTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Cvp.CvpActivateFieldItem},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            创建表接口
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="entity"></param>
            <param name="tableName"></param>
            <param name="activateFieldItems"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GetCvpFieldType(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段的类型
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GenAlterTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Data.DataTable,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Cvp.CvpActivateFieldItem},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            修改表结构
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="entity">当前实体</param>
            <param name="tableSchema">cvp表结构</param>
            <param name="tableName">cvp表名</param>
            <param name="activateFieldItems">需要处理的字段</param>
            <param name="batchSQL">返回sql</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GenAlertMulLangTableSQL(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            返回创建/修改实体对应多语言表格的SQL
            </summary>
            <param name="ctx"></param>
            <param name="form"></param>
            <param name="entity">当前实体</param>
            <param name="tableName">cvp主表</param>
            <param name="multiLangFields">多语言字段</param>
            <param name="batchSQL">返回的sql</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.ExitsTable(Kingdee.BOS.Context,System.String)">
            <summary>
            判断数据库中实体名称是否已经被使用
            </summary>
            <param name="tableName">实体名称</param>
            <returns></returns>
            <remarks>
            判断的依据是sysobjects中是否存在同名的记录
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.ExistsFieldInTableSchema(System.Data.DataTable,System.String)">
            <summary>
            在表格描述中，判断是否存在指定字段
            </summary>
            <param name="tableSchema"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GetPkName(System.String)">
            <summary>
            获得pk名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.GenFieldDesc(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            生成字段的描述SQL，格式为 字段名 类型 是否为NULL 默认值；如: FID INT NOT NULL DEFAULT(0);
            这样的描述可以放在创建表格的SQL中，也可以放在修改表格的SQL中；
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.UpdateDataLog(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Cvp.CvpActivateFieldItem,System.Int64,System.String)">
            <summary>
            更新数据日志状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="dynLog">数据日志实体</param>
            <param name="activateFieldItem">当前字段参数实体</param>
            <param name="dataCount">数据量</param>
            <param name="updateErrorMessage">错误日志</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.DeCvp(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            DeCvp
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">CvpId</param>
            <param name="cvpText">CvpText</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.EnCvp(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            EnCvp
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">CvpId</param>
            <param name="data">原始文本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.CreateCvpSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.Cvp.CvpCreateSetting)">
            <summary>
            创建CvpSetting
            </summary>
            <param name="ctx"></param>
            <param name="cvpSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CvpManage.CvpService.IsCvpSettingExists(Kingdee.BOS.Context,System.String)">
            <summary>
            判断CvpSetting是否存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">CvpId</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Export.ExportService">
            <summary>
            引出中心服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Export.ExportService.RelateRecordId(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            引出过滤方案关联记录Id
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Export.ExportService.SetProgressRateValue(Kingdee.BOS.Context,System.String,System.Int32,System.Int32)">
            <summary>
            设置引出进度和已引出数量
            </summary>
            <param name="ctx">上下文</param>
            <param name="schemeId">引出中心过滤方案Id</param>
            <param name="progress">引出进度条值</param>
            <param name="exportedCount">已引出数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Export.ExportService.GetExportCenterStatus(Kingdee.BOS.Context,System.String)">
            <summary>
            获取引出中心引出状态
            </summary>
            <returns>Item1:引出操作记录内码；Item2:引出状态；Item3：进度；Item4：已引出数量；Item5：消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Export.ExportService.AddExportFile(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            新增引出中心引出文件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserOftenFuncGroupService.GetUserFuncGroupTrees(Kingdee.BOS.Context)">
            <summary>
            获取当前用户常用分组数据
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserOftenFuncGroupService.DeleOfenFuncGroup(Kingdee.BOS.Context,System.Int32)">
            <summary>
            删除分组
            </summary>
            <param name="ctx"></param>
            <param name="fid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserOftenFuncGroupService.GetUserFuncDefaultGroupNode(Kingdee.BOS.Context)">
            <summary>
            获取当前用户默认分组数据
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserOftenFuncGroupService.GetUserFuncGroupTrees(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.TreeNode@)">
            <summary>
            获取当前用户常用分组数据
            </summary>
            <param name="ctx"></param>
            <param name="defatultnode">默认分组节点</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserOftenFuncGroupService.BatchUpdateFunctionGroup(Kingdee.BOS.Context,System.Int32[],System.Int32)">
            <summary>
            常用功能菜单ID，批量修改指定分组
            </summary>
            <param name="ctx"></param>
            <param name="funcid"></param>
            <param name="groupId"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService">
             <summary>
            基础平台提供的消息服务接口--功能在右上角展示
            供BOS平台进一步封装调用，其他领域最好调用基础平台提供的接口
            目前处理的消息包括
            1. 信息中心-待办流程消息
            2. 信息中心-流程消息
            3. 信息中心-普通消息
            4. 信息中心-执行计划消息
             </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.SendSimpleMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BPMsgSourceNumber,System.Collections.Generic.List{Kingdee.BOS.Core.Msg.MessageSend})">
            <summary>
            发送简单文本消息
            </summary>
            <param name="ctx"></param>
            <param name="sourceNumber"></param>
            <param name="msgSend"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.SendSimpleMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BPMsgSourceNumber,System.Collections.Generic.List{Kingdee.BOS.Core.Msg.Message},System.Int64[])">
            <summary>
            发送简单文本消息
            </summary>
            <param name="ctx"></param>
            <param name="sourceNumber"></param>
            <param name="msg"></param>
            <param name="receiverIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BasicPlatformMessageInfo)">
            <summary>
            发送消息
            </summary>
            <param name="ctx"></param>
            <param name="msgInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.GetSimpleMsgInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BasicPlatformMessageInfo)">
            <summary>
            得到简单消息信息
            </summary>
            <param name="ctx"></param>
            <param name="msgInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.GetObjectMsgInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BasicPlatformMessageInfo)">
            <summary>
            得到业务对象消息信息
            </summary>
            <param name="ctx"></param>
            <param name="msgInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.BOSBasicPlatformMessageService.UpdateMessageView(Kingdee.BOS.Context,Kingdee.BOS.Core.Msg.BasicPlatformMessageInfo,Kingdee.BOS.MessageCenter.Model.MessageSendResultInfo)">
             <summary>
            更新消息查看表，使其可以在详情中查看单据。
            到目前为止基础平台还没有实现单据主键传入到消息查看表中，并且使用基础的方式，需要配置消息模板和消息配置，
            消息配置包括业务对象，触发操作，消息级别，消息模板，消息通道，接收人，查看方式等
            这些配置信息严重影响到已有的模式，无法确定具体的影响，为了不受消息配置影响，故直接更新消息查看表主键和打开方式来实现单据查看。
            此方式也经过跟基础平台同事沟通。
             </summary>
             <param name="ctx"></param>
             <param name="msgInfo"></param>
             <param name="result"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormOperationBosCheck">
            <summary>
            表单操作检测 
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormOperationBosCheck.OperationIds">
            <summary>
            表单操作检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FormOperationBosCheck.#ctor">
            <summary>
            表单操作检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ItemClassFieldBosCheck">
            <summary>
            多类别基础资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ItemClassFieldBosCheck.#ctor">
            <summary>
            多类别基础资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ItemClassTypeFieldBosCheck">
            <summary>
            多类别基础资料列表字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ItemClassTypeFieldBosCheck.#ctor">
            <summary>
            多类别基础资料列表字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MulAssistantFieldBosCheck">
            <summary>
            多选辅助资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MulAssistantFieldBosCheck.#ctor">
            <summary>
            多选辅助资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MulBaseDataFieldBosCheck">
            <summary>
            多选基础资料字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MulBaseDataFieldBosCheck.#ctor">
            <summary>
            多选基础资料字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PriceFieldBosCheck">
            <summary>
            单价字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PriceFieldBosCheck.#ctor">
            <summary>
            单价字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.QtyFieldBosCheck">
            <summary>
            数量字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.QtyFieldBosCheck.#ctor">
            <summary>
            数量字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.RelatedFlexGroupFieldBosCheck">
            <summary>
            维度关联字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.RelatedFlexGroupFieldBosCheck.#ctor">
            <summary>
            维度关联字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.TabPageAppearanceBosCheck">
            <summary>
            页签通用控件检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.TabPageAppearanceBosCheck.#ctor">
            <summary>
            页签通用控件检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlFieldEndlessLoopBosCheck">
            <summary>
            控制字段死循环检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlFieldEndlessLoopBosCheck.#ctor">
            <summary>
            字段名唯一性检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlFieldEndlessLoopBosCheck.GetFieldDisplayNameForSave(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段的友好显示名,针对保存是返回
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ControlFieldEndlessLoopBosCheck.Analysis(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field}})">
            <summary>
            递归搜寻死循环
            </summary>
            <param name="fieldStack"></param>
            <param name="childFields"></param>
            <param name="logs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldKeyUniqueBosCheck">
            <summary>
            元数据检测插件-字段标识唯一检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldKeyUniqueBosCheck.#ctor">
            <summary>
            字段名唯一性检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldNameUniqueBosCheck">
            <summary>
            字段名唯一性检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.FieldNameUniqueBosCheck.#ctor">
            <summary>
            字段名唯一性检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataCheckPlugInBosCheck">
            <summary>
            元数据检测插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataCheckPlugInBosCheck.#ctor">
            <summary>
            元数据检测插件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataLoadCheck">
            <summary>
            元数据加载检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataLoadCheck.#ctor">
            <summary>
            元数据加载检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PropertyNameUniqueBosCheck">
            <summary>
            绑定实体属性唯一性检测
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PropertyNameUniqueBosCheck.SystemDefaultPropertyNames">
            <summary>
            系统已占用的实体属性名称(任何自定义字段都不可以使用这些名称)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PropertyNameUniqueBosCheck.#ctor">
            <summary>
            绑定实体属性唯一性检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck">
            <summary>
            基础资料主键完整性检查
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.Bas_Item">
            <summary>
            基础资料公用的序列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.Z_Bas_Item">
            <summary>
            基础资料种子表名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.SYSTEM_MAX_VALUE">
            <summary>
            系统保留的编号，所有用户都是从此编号开始
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.BaseDataFormIds">
            <summary>
            五大需要检测的基础资料
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.#ctor">
            <summary>
            基础资料主键完整性检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.CheckEntitysSequence">
            <summary>
            检测实体表的主键的序列是否有异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.CheckEntitySequenceMax(System.String,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Boolean)">
            <summary>
            检测单个实体表的主键的序列是否有异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.GetSequenceName(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            获取序列表名称
            <remarks>
            基础资料获取到的一般是 T_Bas_Item；
            其它表获取的一般是表名 如多语言 T_BD_Material_L
            </remarks>
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.GetCheckSql(System.String@,System.String@)">
            <summary>
            获取检测SQL
            </summary>
            <param name="sql">用于检测最大值</param>
            <param name="sqlUnique">用于检测重复</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.GetMaxPKValue(System.Int64,System.Text.StringBuilder)">
            <summary>
            获取最大主键值
            </summary>
            <param name="seqID">当前序列值</param>
            <param name="sbCheckResult">返回的结果</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.RepairOracleMaxValue(System.Int64,System.Int64,System.String)">
            <summary>
            Oracle序列修复
            </summary>
            <param name="seqValue">序列值</param>
            <param name="tableValue">主键最大的值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.RepairSqlMaxValue">
            <summary>
            SQLServer 序列修复
            </summary>
            <param name="seqName">序列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.SequenceUniqueBosCheck.RepairSqlMaxValueForNoHeadEntity(System.String,System.String,System.String)">
            <summary>
            SQLServer 非单据头的种子表修复
            </summary>
            <param name="tableName"></param>
            <param name="pkField"></param>
            <param name="seqName">Z开头的序列名称</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService">
            <summary>
            元数据检测服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.tasks">
            <summary>
            任务池
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.BeginCheck(Kingdee.BOS.Context,Kingdee.BOS.Core.BosCheck.MetadataCheckSettings)">
            <summary>
            启动元数据检测
            </summary>
            <param name="ctx">上下文</param>
            <param name="checkSettings">检测设置</param>
            <returns>任务内码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.StopCheck(Kingdee.BOS.Context,System.String)">
            <summary>
            停止元数据检测
            </summary>
            <param name="ctx">上下文</param>
            <param name="taskId">任务内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.GetTaskProgress(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            获取任务进度
            </summary>
            <param name="ctx">上下文</param>
            <param name="taskId">任务内码</param>
            <param name="checkResultTypes">检测结果类型集合</param>
            <returns>检测结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.GetCheckResultDetail(Kingdee.BOS.Context,System.String,System.String,System.String[])">
            <summary>
            获取检测项详情
            </summary>
            <param name="ctx">上下文</param>
            <param name="taskId">任务内码</param>
            <param name="taskEntryId">任务分录内码</param>
            <param name="checkResultTypes">检测结果类型</param>
            <returns>检测结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.AutoRepair(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            自动修复
            </summary>
            <param name="ctx">上下文</param>
            <param name="taskId">任务内码</param>
            <param name="taskDetailIds">任务检测明细内码集合</param>
            <returns>修复结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.DoCheck(Kingdee.BOS.Core.BosCheck.CheckTaskContext)">
            <summary>
            元数据检测
            </summary>
            <param name="ctx">检测任务上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.CreateCheckTask(Kingdee.BOS.Context,Kingdee.BOS.Core.BosCheck.MetadataCheckSettings)">
            <summary>
            启动检测任务
            </summary>
            <param name="ctx">上下文</param>
            <param name="checkSettings">检测设置</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.SubStr(System.String,System.Int32)">
            <summary>
            按指定长度截断字符串
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.GetCheckServices(Kingdee.BOS.Core.BosCheck.CheckTaskContext)">
            <summary>
            获取检测服务集合
            </summary>
            <param name="ctx">检测任务上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.UpdateCheckTaskStatus(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.BosCheck.BosCheckInfo.BosCheckTaskStatus,System.String)">
            <summary>
            更新任务状态
            </summary>
            <param name="ctx">检测任务上下文</param>
            <param name="taskId">任务内码</param>
            <param name="status">任务状态</param>
            <param name="log">日志</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.SaveCheckResult(Kingdee.BOS.Core.BosCheck.CheckTaskContext,Kingdee.BOS.Core.BosCheck.AbstractMetadataBosCheck,System.Collections.Generic.List{Kingdee.BOS.Core.BosCheck.BosCheckResult},System.Int32)">
            <summary>
            保存检测结果
            </summary>
            <param name="ctx">检测任务上下文</param>
            <param name="checkService">检测服务</param>
            <param name="checkResults">检测结果</param>
            <param name="progress">检测进度</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.GetToBeReapirItemList(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            获取待修复检测项
            </summary>
            <param name="ctx">上下文</param>
            <param name="taskId">任务内码</param>
            <param name="taskDetailIds">任务检测明细内码集合</param>
            <returns>修复结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheckService.UpdateCheckItemRepairStatus(Kingdee.BOS.Context,System.String[])">
            <summary>
            更新修复状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="detailIds">可修复的检测明细项内码集合</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DbForeignKeyIndexBosCheck">
            <summary>
            元数据检测插件-外键索引检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DbPrimaryKeyBosCheck">
            <summary>
            数据库表主键检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DbPrimaryKeyBosCheck.#ctor">
            <summary>
            数据库表主键检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PanelScrollSettingBosCheck">
            <summary>
            检查面板容器滚动条设置
            1 出于性能考虑，表体停靠时,父级容器（所有级次：如果中间有一个没有设置停靠则停止检测）滚动条必须设置禁用
            2 容器内，不允许同时存在多个充满（或相同停靠）的控件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PanelScrollSettingBosCheck.CreateCheckResult(System.String,Kingdee.BOS.Core.Metadata.ControlElement.ControlAppearance,Kingdee.BOS.Core.Metadata.ControlElement.ControlAppearance)">
            <summary>
            添加检测结果：检测表体停靠时容器滚动条是否禁用
            </summary>
            <param name="formId">单据ID</param>
            <param name="panelApp">容器</param>
            <param name="entryApp">表体</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.PanelScrollSettingBosCheck.CreateCheckResultForRepeat(System.String,System.Int32,Kingdee.BOS.Core.Metadata.ControlElement.ControlAppearance,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ControlElement.ControlAppearance})">
            <summary>
            添加检测结果：容器内，不允许同时存在多个充满（或相同停靠）的控件
            </summary>
            <param name="formId">单据ID</param>
            <param name="dock">停靠</param>
            <param name="container">容器</param>
            <param name="apps">相同的控件</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataBosCheckDemoPlugIn">
            <summary>
            元数据检测演示插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.MetadataBosCheckDemoPlugIn.#ctor">
            <summary>
            元数据检测插件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DbRedundantFieldBosCheck">
            <summary>
            数据库冗余字段检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.DbRedundantFieldBosCheck.#ctor">
            <summary>
            数据库冗余字段检测
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ExpressionDivideByZeroBosCheck">
            <summary>
            表达式除零检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ExpressionDivideByZeroBosCheck.#ctor">
            <summary>
            表达式除零检测
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BosCheck.MetadataCheck.ExpressionDivideByZeroBosCheck.InvalidExp(System.String,System.String)">
            <summary>
            判断表达式含有被除变量时，被除变量是否有效
            </summary>
            <param name="exp">计算表达式</param>
            <param name="preExp">前置表达式</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingAttachmentField">
            <summary>
            附件（文件服务器）字段的值映射。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.MappingValue">
            <summary>
            执行映射
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.DataEntity">
            <summary>
            目标单数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.TargetField">
            <summary>
            当前要映射的目标单字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.FieldMap">
            <summary>
            转换规则上，字段映射关系
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.FieldProperty">
            <summary>
            源单数据对象中，对应源字段的数据对象属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.SourceOrgFieldProperty">
            <summary>
            组织隔离基础资料，源组织字段在数据对象中的属性，FieldProperty则为目标组织值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.PkFieldProperty">
            <summary>
            源字段所在实体的主键。计算值函数据此区分数据行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.FormulaMode">
            <summary>
            字段取值模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.GetSourceValueFunc">
            <summary>
            携带值读取函数：不同的字段取值模式，其取值方法不一样，需要各自实现。如合计、平均、最大、最小
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField.MapValue">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.MappingValue">
            <summary>
            执行映射
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.DataEntity">
            <summary>
            目标单数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.TargetField">
            <summary>
            当前要映射的目标单字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.FieldMap">
            <summary>
            转换规则上，字段映射关系
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.FieldProperty">
            <summary>
            源字段在数据对象中的属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.SourceOrgFieldProperty">
            <summary>
            组织隔离基础资料，源组织字段在数据对象中的属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.PkFieldProperty">
            <summary>
            源字段所在实体的主键。计算值函数据此区分数据行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.FormulaMode">
            <summary>
            字段取值模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.GetSourceValueFunc">
            <summary>
            携带值读取函数：不同的字段取值模式，其取值方法不一样，需要各自实现。如合计、平均、最大、最小
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingField.MapValue">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingAttachmentField.MappingValue">
            <summary>
            执行值映射。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingAttachmentField.Context">
            <summary>
            登录上下文环境。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertTailDillPolicy">
            <summary>
            尾差策略类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertTailDillPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建下推动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertTailDillPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建选单动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction">
            <summary>
            尾差业务逻辑类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.Do">
            <summary>
            尾差处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.GetSrcFieldPropertyName(System.String)">
             <summary>
            得到源单字段属性名
             </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.Rule">
            <summary>
            选用的单据转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.SourceBusinessInfo">
            <summary>
            来源单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.TargetBusinessInfo">
            <summary>
            目标单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.TargetExtendedDataEntities">
            <summary>
            目标单据转换数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.SrcDynObjs">
            <summary>
            源单数据包集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffAction.IsEnableTailDiff">
            <summary>
            是否启用了尾差处理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper">
            <summary>
            尾差逻辑核心处理类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.HandlerTailDiff(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.TailDiffType,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject}},System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.ConvertElement.ConvertTailDiffPolicyElement,System.String)">
            <summary>
            处理尾差
            </summary>
            <param name="ctx"></param>
            <param name="tBInfo"></param>
            <param name="sBInfo"></param>
            <param name="tsData"></param>
            <param name="headObjs"></param>
            <param name="tailDiffPolicy"></param>
            <param name="srcEntryPkPropertyName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.HanderDiff(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiff},System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.Dictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject}})">
            <summary>
            处理尾差
            </summary>
            <param name="lstDiff"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.HandlerMerge(Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiff,System.Collections.Generic.Dictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject}},System.String)">
            <summary>
            处理合并的情况
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.HandlerSplit(Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiff,System.Collections.Generic.Dictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject}},System.String)">
            <summary>
            处理拆分的情况
            </summary>
            <param name="tailDiff"></param>
            <param name="tsData"></param>
            <param name="srcPkPropertyName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.GetHisObjs(Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffRow,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.String)">
            <summary>
            得到历史数据
            </summary>
            <param name="row"></param>
            <param name="dicSTIds"></param>
            <param name="hisObjs"></param>
            <param name="entryPkName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.GetTableDefine(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            得到表定义
            </summary>
            <param name="bInfo"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.GetHisLinkIds(Kingdee.BOS.Context,System.Collections.Generic.IEnumerable{System.Int64},Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.Dictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject}})">
            <summary>
            得到历史关联单据内码
            </summary>
            <param name="ctx"></param>
            <param name="sIds"></param>
            <param name="sTableDefine"></param>
            <param name="tTableDefine"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.Init(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertTailDiffPolicyElement,Kingdee.BOS.Core.Metadata.ConvertElement.TailDiffType)">
            <summary>
            初始化
            </summary>
            <param name="bInfo"></param>
            <param name="tailDiffPolicy"></param>
            <param name="diffType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.ValidFactorConfig(Kingdee.BOS.Core.Metadata.ConvertElement.TailFieldMapElement)">
            <summary>
            是否为有效配置
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.ValidBaseFatctorConfig(Kingdee.BOS.Core.Metadata.ConvertElement.TailBaseFactorFieldMapElement)">
            <summary>
            基本条件配置是否有效
            </summary>
            <param name="baseMap"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.GetBaseFactors(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.ObjectModel.Collection{Kingdee.BOS.Core.Metadata.ConvertElement.TailBaseFactorFieldMapElement})">
            <summary>
            得到基本尾差字段条件配置
            </summary>
            <param name="sInfo"></param>
            <param name="tInfo"></param>
            <param name="baseFactorMaps"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.ValidBaseFactor(Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiff,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            验证基本条件设置
            </summary>
            <param name="serviceType"></param>
            <param name="tailDiff"></param>
            <param name="srcObjs"></param>
            <param name="tarObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffHelper.SetMarkRecordField(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.CheckBoxField,Kingdee.BOS.Core.Metadata.FieldElement.TextField,System.Decimal)">
            <summary>
            记录调整的尾差
            </summary>
            <param name="dynObj"></param>
            <param name="tailField"></param>
            <param name="markField"></param>
            <param name="recordField"></param>
            <param name="tailValue"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiff">
            <summary>
            尾差
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffRow">
            <summary>
            尾差行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction">
            <summary>
            尾差处理，分析参数和加需要的字段数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.Do">
            <summary>
            增加需要处理的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.TargetBusinessInfo">
            <summary>
            下游单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.EventProxy">
            <summary>
            插件代理对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.TailDiffPolicy.TailDiffParameterAction.IsEnableTailDiff">
            <summary>
            是否启用了尾差处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingLargeRichTextField.MappingValue">
            <summary>
            把字段值填充到数据包中；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingLargeRichTextField.SourceDataEntities">
            <summary>
            源单数据行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.SafeDoService">
            <summary>
            SQL脚本执行服务。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SafeDoService.WritedownScriptLog(System.String,System.String,System.Boolean,System.String,System.DateTime,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="successed"></param>
            <param name="sql"></param>
            <param name="startTime"></param>
            <param name="ret"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider">
            <summary>
            临时表定时构建器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.TOP_TEMP_TABLE_NAME">
            <summary>
            临时表top 10000登记表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.#cctor">
             <summary>
            static constructor
             </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider._lastRefreshTime">
            <summary>
            最后一次刷新时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider._timerTimeSpan">
            <summary>
            默认1个小时
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.TopCount">
            <summary>
            top 数量
            默认10000
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.GetTopSizeRecordTableName(Kingdee.BOS.Context)">
            <summary>
            获取临时表top大小登记表
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.Refresh(Kingdee.BOS.Context)">
            <summary>
            刷新
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.CreateTable(Kingdee.BOS.Context)">
            <summary>
            刷新
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.DataBase.SqlServerTempTblTopSizeProvider.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DBEncryptService.Execute(Kingdee.BOS.Context,System.String,Kingdee.BOS.SqlParam)">
            <summary>
            执行更新语句，返回更新结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">更新SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DBEncryptService.Execute(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            执行更新语句，返回更新结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">更新SQL语句</param>
            <param name="paramList">SQL中包含的参数集合，顺序必须与SQL中使用顺序一致</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DBEncryptService.ExecuteReader(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Collections.Generic.List{Kingdee.BOS.EncryptFieldInfo})">
            <summary>
            执行查询语句，返回查询结果
            </summary>
            <param name="ctx"></param>
            <param name="strSQL"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DBEncryptService.ExecuteDynamicObject(Kingdee.BOS.Context,System.String,System.Collections.Generic.IEnumerable{Kingdee.BOS.EncryptFieldInfo},Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IDictionary{System.String,System.Type},System.Data.CommandType,Kingdee.BOS.SqlParam[])">
            <summary>
            执行指定的SQL并返回默认的一批使用DynamicObject集合描述的数据。
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="strSQL">要执行的SQL语句</param>
            <param name="dt">如果指定此参数，那么执行后的SQL将自动按此类型填充数据。否则将根据返回的记录集自动创建类型。</param>
            <param name="propertyTypeMaps">如果指定此参数，可以设定某个字段应该的数据类型。</param>
            <param name="cmdType">指定SQL的类型</param>
            <param name="paramList">参数类型</param>
            <returns>一组动态实体对象。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DBEncryptService.ExecuteBatch(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject})">
            <summary>
            执行批量查询语句
            </summary>
            <param name="ctx"></param>
            <param name="sqlArray"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageNotifier">
            <summary>
            缓存对象的分布式消息通知处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageNotifier.PublishMessage(Kingdee.BOS.Core.DistributedMessage.DistributedMessageItem)">
            <summary>
            公告消息
            </summary>
            <param name="dMessageItem">消息项信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageNotifier.ReceiveMessage(Kingdee.BOS.Core.DistributedMessage.DistributedMessageItem)">
            <summary>
            接收消息
            </summary>
            <param name="dMessageItem">消息项信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageNotifier.NoticeMcToUpdateCacheNoValidate(Kingdee.BOS.Core.DistributedMessage.DistributedMessageItem)">
            <summary>
            通知管理中心更新其他APP站点缓存,没有校验，强制通知更新
            </summary>
            <param name="dMessageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageNotifier.Convert(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            通知管理中心更新其他APP站点缓存,没有校验，强制通知更新
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageService">
            <summary>
            缓存式分布消息服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageService.PublishHandleMessage(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            推送处理消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="name">
            处理名称
            IDistributedMessageHandler 实例的全类名
            示例:Kingdee.BOS.App.MessageCenter.DistributedMessage.MessageNotifierDistributedMessageHandler
            </param>
            <param name="strParas">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.CachedDistributedMessageService.UpdateCacheObject(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            更新缓存处理
            </summary>
            <param name="cacheItem">缓存项</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DistributedMessage.DefaultDistributedMessageHandlerProvider">
            <summary>
             默认处理程序Provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.DefaultDistributedMessageHandlerProvider.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DistributedMessage.DefaultDistributedMessageHandlerProvider.Register(System.String)">
            <summary>
            注册
            </summary>
            <param name="typeFullName">类全名</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.DistributedMessage.DefaultDistributedMessageHandlerProvider.Instance">
            <summary>
            当前实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EncryptionKeyService">
            <summary>
            密钥管理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.EncryptionKeyService.KD_SECRETKEY_KEY">
            <summary>
            用于加密密钥的根密钥（这个为固定的）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.EncryptionKeyService.KD_EncryptField">
            <summary>
            加密字段类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.EncryptionKeyService.KD_ROOT_SECRET_PART1">
            <summary>
            根密钥1
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.GetSecretKey(Kingdee.BOS.Context,System.String)">
            <summary>
            根据密钥类型获取解密的密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">密钥类型</param>
            <returns>返回密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.GetEncryptFieldSecretKeyFromCache(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            获取EncryptField类型的密钥,是否抛异常（目前 用于数据库加密文本字段、金额数据库加密字段）
            </summary>
            <param name="ctx">上下文</param>
            <param name="throwExp">是否抛异常</param>
            <returns>返回密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.CreateSecretSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.Encrypt.SecretSetting)">
            <summary>
            创建数据加密设置
            </summary>
            <param name="ctx"></param>
            <param name="secretSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.GetSecretSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取加密密钥设置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.GetSecretSettingEn(Kingdee.BOS.Context,System.String)">
            <summary>
            获取数据加密配置（没有解密）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.ExistFieldEncryptKey(Kingdee.BOS.Context)">
            <summary>
            平台启用字段加密（是否存在字段加密密钥）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.ReSetRootSecretKey(Kingdee.BOS.Context)">
            <summary>
            刷新根密钥
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.CreateFilePartPath">
            <summary>
            获取加密文件随机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EncryptionKeyService.DeleteSecretPartFile(System.String)">
            <summary>
            删除加密文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ExcelPrint.ExcelPrintService.GetExcelTemplate(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取模板清单
            </summary>
            <param name="ctx">环境变量</param>
            <param name="strExcelID">ExcelID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ExcelPrint.ExcelPrintService.SaveExcelTemplate(Kingdee.BOS.Context,System.String,System.Byte[])">
            <summary>
            保存模板
            </summary>
            <param name="ctx">环境变量</param>
            <param name="strExcelID">ExcelID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FileServer.FileServerService.GetKdFiles(System.Collections.Generic.List{System.String})">
            <summary>
            传入文件ID列表，返回指定文件 KDFile 文件信息对象，包括 T_BAS_FileServerFileinfo 文件信息及相关拓展信息。
            </summary>
            <param name="fileIds">文件ID列表</param>
            <returns>返回指定文件 KDFile 文件信息对象，包括 T_BAS_FileServerFileinfo 文件信息及相关拓展信息。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.GroupService.GetGroupIds(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.GroupField)">
            <summary>
            获取有权限的分组id列表
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="groupField"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InitImplementation.InitDataService">
            <summary>
            初始化数据服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitDataService.GetInitDataTemplateKeys(Kingdee.BOS.Context,System.String)">
            <summary>
            获取初始化内置模板字段标识
            </summary>
            <param name="ctx"></param>
            <param name="strObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitDataService.LoadInitDataFieldMapConfig(Kingdee.BOS.Context,System.String)">
            <summary>
            加载指定用户的初始字段映射
            </summary>
            <param name="ctx"></param>
            <param name="strObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitDataService.SaveInitDataFieldMapConfig(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            保存用户引入字段映射设置
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="userId"></param>
            <param name="mappingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonDataService.GetCloudHostUrl(Kingdee.BOS.Context)">
            <summary>
            获取金蝶云星空服务器地址，仅支持http/https
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LogClearService.GetBackupFileId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据主键获取备份文件的文件id
            </summary>
            <param name="ctx"></param>
            <returns>文件id</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BizTipsInfosService.C_Forbit_Update_Flag">
            <summary>
            拒绝更新标识
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetBizTipsInfos(Kingdee.BOS.Context,System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter)">
            <summary>
            获取全局业务提示语集合
            </summary>
            <param name="ctx"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetUnhitBizTipsInfos(Kingdee.BOS.Context,System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter)">
            <summary>
            获取最新捕获的业务提示语集合
            </summary>
            <param name="mgmt"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.SaveBizTipsInfos(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.BizTipsInfo.IBizTipsInfos})">
            <summary>
            保存全局业务提示语集合
            </summary>
            <param name="ctx"></param>
            <param name="bizHost"></param>
            <param name="tips"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.UpdateBizTipsInfosField(Kingdee.BOS.Context,System.String,Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter)">
            <summary>
            保存全局业务提示语集合
            </summary>
            <param name="ctx"></param>
            <param name="bizHost"></param>
            <param name="tips"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetBizTipsLastDate(Kingdee.BOS.Context,System.String)">
            <summary>
            获取数据库最后更新时间
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.ExistBizTipsInfos(Kingdee.BOS.Context,Kingdee.BOS.BizTipsInfo.IBizTipsInfos)">
            <summary>
            判断指定的消息在数据库中是否存在
            </summary>
            <param name="ctx"></param>
            <param name="bizTipsInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetBizTipsInfosLastModifyDate(Kingdee.BOS.Context,System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter)">
            <summary>
            获取数据库中提示消息最后更新的时间
            </summary>
            <param name="ctx"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.SaveInvestigates(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate})">
            <summary>
            保存务提示语调查集合
            </summary>
            <param name="ctx"></param>
            <param name="bizHost"></param>
            <param name="invests"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.ExclueExistsInvestigates(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate}@)">
            <summary>
            过滤掉已经存在的调查数据ID
            </summary>
            <param name="ctx"></param>
            <param name="bizTipsInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetInvestigates(Kingdee.BOS.Context,System.String,Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter)">
            <summary>
            获取调查集合
            </summary>
            <param name="mgmt"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.GetDomainFNumber(Kingdee.BOS.Context,System.String)">
            <summary>
            获取子系统对应业务领域ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="subSystemFID">子系统FID</param>
            <returns>业务领域ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BizTipsInfosService.ClearObsoleteData(Kingdee.BOS.Context,System.String)">
            <summary>
            清除过期数据
            </summary>
            <param name="ctx"></param>
            <param name="bizHost"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DepartmentService">
            <summary>
            部门服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DepartmentService.GetDirectSubDepartments(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取直接下属部门
            </summary>
            <param name="ctx">上下文</param>
            <param name="depts">部门Id</param>
            <returns>直接下属部门</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DepartmentService.GetAllSubDepartments(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取所有下属部门
            </summary>
            <param name="ctx">上下文</param>
            <param name="depts">部门Id</param>
            <returns>直接下属部门</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.ForgetPwdService">
            <summary>
            忘记密码服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.SaveForgetPwdUser(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ForgetPassword.ForgetPwdUserInfo)">
            <summary>
            保存忘记密码的用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="fuser">忘记密码的用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.GetFuserByGuid(Kingdee.BOS.Context,System.String)">
            <summary>
            获取对应guid的用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">GUID</param>
            <returns>忘记密码用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.UpdateCheckedPhoneOrMail(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新是否验证手机号/邮箱
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">GUID</param>
            <param name="phoneOrMail">0-手机，1-邮箱</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.GetSendPhoneCodeTimes(Kingdee.BOS.Context,System.String,System.DateTime)">
            <summary>
            获取发送手机验证码的次数（一天内）
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">手机号</param>
            <param name="time">当前时间</param>
            <returns>已发次数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.GetSendMailCodeTimes(Kingdee.BOS.Context,System.String,System.DateTime)">
            <summary>
            获取发送邮件验证码的次数（一天内）
            </summary>
            <param name="ctx">上下文</param>
            <param name="mail">邮箱</param>
            <param name="time">当前时间</param>
            <returns>已发次数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.IsPhoneOrMailChecked(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            手机号/邮箱是否校验
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">GUID</param>
            <param name="phoneOrMail">0-手机，1-邮箱</param>
            <returns>是否已校验</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.SavePhoneToken(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ForgetPassword.TokenInfo,System.String)">
            <summary>
            保存发送的手机验证码
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">验证码信息</param>
            <param name="guid">guid</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.SaveMailToken(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ForgetPassword.TokenInfo,System.String)">
            <summary>
            保存发送的邮件验证码
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">验证码信息</param>
            <param name="guid">guid</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.GetPhoneOrMailTokenList(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            获取验证码list
            </summary>
            <param name="ctx">获取验证码</param>
            <param name="guid">guid</param>
            <param name="style">0：手机 1：邮箱</param>
            <param name="phoneOrMail">手机号或邮箱</param>
            <returns>验证码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.UpdateCheckedToken(Kingdee.BOS.Context,System.String)">
            <summary>
            更新验证通过的校验码
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">guid</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.IsTokenChecked(Kingdee.BOS.Context,System.String)">
            <summary>
            验证码是否已经校验成功
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">guid</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.UpdateSuccessToken(Kingdee.BOS.Context,System.String)">
            <summary>
            更新修改密码成功的验证码记录
            </summary>
            <param name="ctx">上下文</param>
            <param name="guid">guid</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.ForgetPwdService.ResetPwdStatistic(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ForgetPassword.ForgetPwdStatistic)">
            <summary>
            修改密码统计
            </summary>
            <param name="ctx">上下文</param>
            <param name="toStatistic">忘记密码统计对象</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.OperatorService">
            <summary>
            业务员服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperatorService.GetDirectSubOperators(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取直接下属业务员
            </summary>
            <param name="ctx">上下文</param>
            <param name="reportType">汇报类型</param>
            <param name="posts">部门Id</param>
            <returns>直接下属</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperatorService.GetAllSubOperators(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取所有下属业务员
            </summary>
            <param name="ctx">上下文</param>
            <param name="reportType">汇报类型</param>
            <param name="posts">部门Id</param>
            <returns>直接下属</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PublicAccountService">
            <summary>
            公众号服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.GetPublicAccountByID(Kingdee.BOS.Context,System.Int64)">
            <summary>
            根据内码获取公众号实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.GetAccountKeyByID(Kingdee.BOS.Context,System.String)">
            <summary>
            根据公众号ID获取公众号密钥
            </summary>
            <param name="Accountid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.UpdateAccountKey(Kingdee.BOS.Context)">
            <summary>
            修改所有的公共号编码和密钥为空
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.GetPubFidByID(Kingdee.BOS.Context,System.String)">
            <summary>
            通过公共号账号获取公共号编码
            </summary>
            <param name="ctx">上下文</param>
            <param name="Accountid">公共号账号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.GetBusinessApprovalPublicAcct(Kingdee.BOS.Context)">
            <summary>
            获取业务审批公共号，内置id=100 为业务审批公共号
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否存在、公共号账号、公共号秘钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.QueryOrCreateBaseSecretKey(Kingdee.BOS.Context)">
            <summary>
            查询或者创建秘钥
            </summary>
            <param name="ctx">上下文</param>
            <returns>查询或者创建成功，则返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.EncryptAccountKey(Kingdee.BOS.Context)">
            <summary>
            加密公共号秘钥
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回加密个数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PublicAccountService.GetPlaintext(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取明文
            </summary>
            <param name="ctx">上下文</param>
            <param name="historyStoragePlaintext">历史存储的秘钥明文</param>
            <param name="ciphertext">密文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="view">表单列表View</param>
            <param name="fromUserId">发件人UserId</param>
            <param name="smtpHost">发送服务器</param>
            <param name="port">服务器端口</param>
            <param name="isSSL">是否SSL加密</param>
            <param name="fromMail">发送人邮箱</param>
            <param name="fromMailUser">发送邮箱账号</param>
            <param name="pwd">发送邮箱密码(未解密)</param>
            <param name="title">邮件标题</param>
            <param name="message">邮件内容</param>
            <param name="address">收件人邮箱列表</param>
            <param name="ids">单据内码</param>
            <param name="sendPdf">是否发送PDF</param>
            <param name="sendExcel">是否发送EXCEL</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="view">表单列表View</param>
            <param name="fromUserId">发件人UserId</param>
            <param name="smtpHost">发送服务器</param>
            <param name="port">服务器端口</param>
            <param name="isSTARTTLS">是否STARTTLS加密</param>
            <param name="fromMail">发送人邮箱</param>
            <param name="fromMailUser">发送邮箱账号</param>
            <param name="pwd">发送邮箱密码(未解密)</param>
            <param name="title">邮件标题</param>
            <param name="message">邮件内容</param>
            <param name="address">收件人邮箱列表</param>
            <param name="ids">单据内码</param>
            <param name="sendPdf">是否发送PDF</param>
            <param name="pdfFilePath">PDF文件路径</param>
            <param name="sendExcel">是否发送EXCEL</param>
            <param name="excelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.String[],System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="view">表单列表View</param>
            <param name="fromUserId">发件人UserId</param>
            <param name="smtpHost">发送服务器</param>
            <param name="port">服务器端口</param>
            <param name="isSSL">是否标准SSL加密</param>
            <param name="isSTARTTLS">是否STARTTLS加密</param>
            <param name="fromMail">发送人邮箱</param>
            <param name="fromMailUser">发送邮箱账号</param>
            <param name="pwd">发送邮箱密码(未解密)</param>
            <param name="title">邮件标题</param>
            <param name="message">邮件内容</param>
            <param name="address">收件人邮箱列表</param>
            <param name="cc">抄送人邮箱列表</param>
            <param name="ids">单据内码</param>
            <param name="sendPdf">是否发送PDF</param>
            <param name="pdfFilePath">PDF文件路径</param>
            <param name="sendExcel">是否发送EXCEL</param>
            <param name="excelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.String[],System.Boolean,System.String,System.Boolean,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="view">表单列表View</param>
            <param name="fromUserId">发件人UserId</param>
            <param name="smtpHost">发送服务器</param>
            <param name="port">服务器端口</param>
            <param name="isSSL">是否标准SSL加密</param>
            <param name="isSTARTTLS">是否STARTTLS加密</param>
            <param name="fromMail">发送人邮箱</param>
            <param name="fromMailUser">发送邮箱账号</param>
            <param name="pwd">发送邮箱密码(未解密)</param>
            <param name="title">邮件标题</param>
            <param name="message">邮件内容</param>
            <param name="address">收件人邮箱列表</param>
            <param name="cc">抄送人邮箱列表</param>
            <param name="ids">单据内码</param>
            <param name="sendPdf">是否发送PDF</param>
            <param name="pdfFilePath">PDF文件路径</param>
            <param name="sendExcel">是否发送EXCEL</param>
            <param name="excelFilePath">Excel文件路径</param>
            <param name="exportFileName">导出文件名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Context,Kingdee.BOS.Msg.EmailMessageInfo,Kingdee.BOS.Core.NotePrint.PrintExportForEmailInfo)">
            <summary>
            发送邮件
            </summary>
            <param name="ctx"></param>
            <param name="emailInfo">邮件信息></param>
            <param name="attachInfo">单据导出附件参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetAttachments(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintExportForEmailInfo)">
            <summary>
            根据单据导出附件参数，生成附件Url链接
            </summary>
            <param name="ctx"></param>
            <param name="attachInfo">单据导出附件参数</param>
            <returns>附件Url链接，非物理路径</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetExportFileName(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String[],System.String[],Kingdee.BOS.Core.NotePrint.ExportFileType,Kingdee.BOS.Core.NotePrint.ExportType,System.String)">
            <summary>
            获取附件，支持单个文件和每个单据生成一个文件
            配合GetExportFileNoteTemplateIds(IDynamicFormView view, long userId, string[] ids, string noteTempId)使用
            </summary>
            <param name="view"></param>
            <param name="ids"></param>
            <param name="templateIds"></param>
            <param name="fileType"></param>
            <param name="exportType">默认值ExportType.ByPage</param>
            <param name="exportFileName"></param>
            <param name="isMulti">每个单据单独生成一个文件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetExportFileNoteTemplateIds(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String[],System.String)">
            <summary>
            返回套打模板
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <param name="ids"></param>
            <param name="TemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetPdfExportFileName(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String[],System.String,System.String)">
            <summary>
            按用户设置的套打模板，获取导出的PDF文件名。
            需要调用者捕获异常提示。
            </summary>
            <param name="view">表单列表View</param>
            <param name="userId">用户UserId</param>
            <param name="ids">表单ids</param>
            <param name="noteTempId">套打模板Id</param>
            <param name="exportFileName">导出文件名称</param>
            <returns>导出的PDF文件名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetExcelExportFileName(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String[],System.String,System.String)">
            <summary>
            按用户设置的套打模板，获取导出的Excel文件名。
            需要调用者捕获异常提示。
            </summary>
            <param name="view">表单列表View</param>
            <param name="userId">用户UserId</param>
            <param name="ids">表单ids</param>
            <param name="noteTempId">套打模板Id</param>
            <param name="exportFileName">导出文件名称</param>
            <returns>导出的Excel文件名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Context,System.Int64,System.String,System.String,System.String[])">
            <summary>
            发送邮件（忘记密码用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="senderUserId">用户ID</param>
            <param name="title">标题</param>
            <param name="message">内容</param>
            <param name="address">邮件接收地址</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.SendMailMessage(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo)">
            <summary>
            发送邮件（业务监控用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="mailMsgInfo">业务监控邮件预警信息</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Context,Kingdee.BOS.Msg.EmailMessageInfo)">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.Send(Kingdee.BOS.Context,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="ctx">上下文</param>
            <param name="smtpHost">发送服务器</param>
            <param name="port">服务器端口</param>
            <param name="isSSL">是否SSL加密</param>
            <param name="fromMail">发送人邮箱</param>
            <param name="fromMailUser">发送邮箱账号</param>
            <param name="pwd">发送邮箱密码(已解密)</param>
            <param name="title">邮件标题</param>
            <param name="message">邮件内容</param>
            <param name="address">收件人邮箱列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.CheckMailServerSet(Kingdee.BOS.Context,System.Int64)">
            <summary>
            检查当前用户的邮件发送服务器地址是否配置
            </summary>
            <param name="ctx">上下文</param>
            <param name="senderUserId">用户id</param>
            <returns>是否配置邮箱服务器</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.SendMailFromVirtualAcount(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            使用邮箱虚拟账户(默认取第一个)发送邮件
            </summary>
            <param name="ctx"></param>
            <param name="toList">接收邮箱地址列表</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetEmailMessageInfoByUserId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取个人信息 -- 邮箱账号设置 
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns>如果设置正确，只需对返回值设置To/Cc/Subject/Body/Attachments 即可调用MailUtils.Sendmail()发送邮件 </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetEmailMessageInfoByWfVirtual(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取参数设置-流程中心-工作流 虚拟邮箱配置
            </summary>
            <param name="ctx"></param>
            <param name="userId">如果是多个账号，需要指定UserId。</param>
            <returns>如果设置正确，只需对返回值设置To/Cc/Subject/Body/Attachments 即可调用MailUtils.Sendmail()发送邮件 </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetEmailMessageInfoByBosVirtual(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取参数设置-基础管理-BOS平台 虚拟邮箱配置
            </summary>
            <param name="ctx"></param>
            <param name="userId">如果是多个账号，需要指定UserId。</param>
            <returns>如果设置正确，只需对返回值设置To/Cc/Subject/Body/Attachments 即可调用MailUtils.Sendmail()发送邮件 </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetUserSendMailVirtualAccount(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            取用户配置的虚拟发送邮件账户
            </summary>
            <param name="ctx"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetUserContacts(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取指定用户的接收邮箱
            </summary>
            <param name="ctx"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetBOSDynamicRow(Kingdee.BOS.Context,System.String,System.Object[])">
            <summary>
            获取数据包，用于动态文本解析
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.IsAdvancedSetting(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64)">
            <summary>
            判断是否启用了套打高级设置
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetSingleTemplateId(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64)">
            <summary>
            获取单个模板ID
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <returns>模板ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetSingleNoteId(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64)">
            <summary>
            获取账表套打设置的模板ID
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetSettingInfo(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64)">
            <summary>
            设置的数据
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.IsNoteTemplateExist(Kingdee.BOS.Context,System.String)">
            <summary>
            套打模板是否存在
            </summary>
            <param name="ctx"></param>
            <param name="templateId">模板ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetBatchTemplateIDs(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64,System.String[],System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.ValidationResult}@)">
            <summary>
            获取连续套打模板ID数组(不受控例如打印次数、审核后打印)
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <param name="arrbillIds"></param>
            <param name="failResults"></param>
            <returns>模板数组</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetStatusBillTypeObjs(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String[],Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取多个单据的状态,单据类型和单据编号/基础资料编码字段
            </summary>
            <param name="view"></param>
            <param name="billIds"></param>
            <param name="billTypeField"></param>
            <param name="billStatusField"></param>
            <param name="billNoField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetTemplateIdFromSetting(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String,System.Int64)">
            <summary>
            单据类型ID不为空, 按单据类型设置取对应模版
            单据类型ID为空, 设置设置的一个模版
            </summary>
            <param name="view"></param>
            <param name="billTypeId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.CreateZipFile(System.String[])">
            <summary>
            压缩多个文件到指定的压缩文件
            </summary>
            <param name="fileNames">待压缩文件Url组</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.GetAdvantageSetting(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Int64)">
            <summary>
            获取套打高级设置集合
            </summary>
            <param name="view"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.ValidateByFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,System.String,System.String)">
            <summary>
            校验单个单据是否符合过滤条件
            </summary>
            <param name="ctx"></param>
            <param name="form"></param>
            <param name="billId"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SendMailService.ValidateByFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            批量校验单据是否符合过滤条件
            </summary>
            <param name="ctx"></param>
            <param name="form"></param>
            <param name="billIDs"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper">
            <summary>
            云短信帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.InnerGetSMSCount(Kingdee.BOS.Context)">
            <summary>
            获取云短信个数
            </summary>
            <param name="ctx">管理中心上下文</param>
            <returns>返回云短信个数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.InnerSetSMSCount(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置云短信个数
            </summary>
            <param name="ctx">管理中心上下文</param>
            <param name="smsaddcount">设置个数</param>
            <returns>返回是否设置成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.GetInitValue(Kingdee.BOS.Context,System.String)">
            <summary>
            获取初始值
            </summary>
            <param name="ctx"></param>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.EncryptSmsCnt(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            解密数据 -- 管理中心拉取的数据
            </summary>
            <param name="encryptDt"></param>
            <param name="updatetime"></param>
            <param name="fencryfactor"></param>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.GetMaxSmsCntByTenantId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务中心记录表最大的短信条数 -- 只针对初始化的时候获取
            </summary>
            <param name="ctx"></param>
            <param name="tennantId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.SMSInnerServiceHelper.SendCntRemindMsg(Kingdee.BOS.Context,System.Int32)">
            <summary>
            发送短信提醒消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="sendSmsCnt">本次发送短信条数</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseService.UserService">
            <summary>
            用户服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService.CONST_DATACENTERNAMEBDKEY">
            <summary>
            水印-数据中心名称的key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService.CONST_CURRENTTIMEBDKEY">
            <summary>
            水印-当前时间的key
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetValidUserCount(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户数 
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">单据id</param>
            <returns>用户数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetPageFormId(Kingdee.BOS.Context)">
            <summary>
            获取当前页ID
            </summary>
            <param name="ctx">上下文</param>
            <returns>页ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserPassport(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取用户云通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>云通行证</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserPassportByUserID(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户云通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>云通行证</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveUserPassport(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserPassportInfo)">
            <summary>
            保存用户云通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="passportInfo">云通行证</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.RepairUserPassportId(Kingdee.BOS.Context)">
            <summary>
            修复用户表里的通行证Id
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserPassportId(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            更新用户表的云通行证ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="passportID">云通行证ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveUserPassportIDE(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserPassportInfo)">
            <summary>
            保存用户云IDE通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="passportInfo">云通行证</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.CheckUserPassportChange(Kingdee.BOS.Context,System.String)">
            <summary>
            检查云通行证是否修改过密码
            </summary>
            <param name="ctx">上下文</param>
            <param name="passportInfo">云通行证</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserPassportId(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.ProductModel.LoggedOnUserInfo})">
            <summary>
            更新用户表的云通行证ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="users">注册用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.DeleteUserPassportIDE(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            保存用户云IDE通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="passId">云通行证</param>
            <param name="accessToken">token信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ActivateKdPassport(Kingdee.BOS.Context,System.String)">
            <summary>
            激活云通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="passportId">云通行证ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.IsActivateKdPassport(Kingdee.BOS.Context,System.String)">
            <summary>
            是否激活云通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="passportId">云通行证ID</param>
            <returns>是否有激活云通行证</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserLinkInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户关系链信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户Id</param>
            <returns>用户关系链</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserValidLinkInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户关系链信息
            岗位权限数据用户关系链
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户Id</param>
            <returns>用户关系链</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserIdByPhone(Kingdee.BOS.Context,System.String)">
            <summary>
            通过用户手机号,获取用户UserId
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">用户手机号</param>
            <returns>用户id信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserIdByPhoneORMail(Kingdee.BOS.Context,System.String)">
            <summary>
            通过用户手机号或邮箱,获取用户UserId
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">用户手机号或邮箱</param>
            <returns>用户id信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserNameByPhone(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过用户Id获取用户名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="userPhone">用户手机号码</param>
            <returns>用户名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUsePhoneById(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过用户id获取用户手机号
            </summary>
            <param name="ctx">上下文</param>
            <param name="UserIds">用户id</param> 
            <returns>用户手机号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetAllUsers(Kingdee.BOS.Context)">
            <summary>
            获取全部内部用户
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户列表 </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetInnerUsers(Kingdee.BOS.Context)">
            <summary>
            获取全部内部用户
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户列表 </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserGroup(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo})">
            <summary>
            修改用户分组信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userList">用户列表信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ResetUserPassword(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            重置用户密码
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户Id</param>
            <param name="password">用户新密码</param>
            <returns>重设结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateFaceImage(Kingdee.BOS.Context,System.Int64,System.String,System.String)">
            <summary>
            修改用户图像
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户id</param>
            <param name="imagebase64">用户图片</param>
            <param name="uid">用户uid</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateSignetImage(Kingdee.BOS.Context,System.Int64,System.Byte[],System.String)">
            <summary>
            更新用户印章数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户id</param>
            <param name="image">图片编码</param>
            <param name="signetpath">图片地址</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveSignetToLocal(Kingdee.BOS.Context,System.Int64,System.Byte[],System.String)">
            <summary>
            保存印章信息到iis中
            </summary>  
            <param name="ctx">上下文</param>
            <param name="userid">用户id</param>
            <param name="signet">印章图片信息</param>
            <param name="signetPath">图片地址</param>
            <returns>图片保存地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveSignetToTempFilePath(Kingdee.BOS.Context,System.Int64,System.Byte[],System.String)">
            <summary>
            保存印章信息到网址运行目录下的临时文件目录
            </summary>
            <param name="ctx">上下文</param>
            <param name="userid">用户id</param>
            <param name="signet">印章图片信息</param>
            <param name="signetPath">图片地址</param>
            <returns>图片保存地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetSignetImage(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获得用户印章数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户id</param>
            <returns>用户印章数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUser(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="username">用户名称</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserList(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="username">用户名称</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ReverseActivation(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            反激活用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="ids">用户id</param>
            <returns>反激活用户id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ResetUserLic(Kingdee.BOS.Context,System.String)">
            <summary>
            重新设置用户许可（先清空许可占用，再重新登记用户许可）
            </summary>
            <param name="ctx">上下文</param>
            <param name="productInstanceID">产品实例ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ResetUserLicPassPortID(Kingdee.BOS.Context,System.String)">
            <summary>
            只同步用户云通行证ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="productInstanceID">产品实例ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserAccount(Kingdee.BOS.Context,System.String)">
            <summary>
            更新用户帐号
            </summary>
            <param name="ctx">上下文</param>
            <param name="userAccount">用户帐号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserAccount(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户帐号
            </summary>
            <param name="ctx">上下文</param>
            <param name="userid">用户ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetStaffUserConfig(Kingdee.BOS.Context)">
            <summary>
            获取是否员工和用户同步操作
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否同步操作</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.WriteStaffUserLog(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.StaffUserLog)">
            <summary>
            记录员工用户操作日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="logObject">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserEmailsById(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过用户id获取用户邮件地址
            </summary>
            <param name="ctx">上下文</param>
            <param name="UserIds">用户id</param> 
            <returns>用户邮件地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateDBUserInfo(Kingdee.BOS.Context)">
            <summary>
            更新数据中心用户许可
            </summary>
            <param name="ctx">上下文</param>
             <param name="licRegUsers">许可用户列表</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetPhoneEntry(Kingdee.BOS.Context)">
            <summary>
            设置用户手机号加密
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户加密信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetUserPhoneEncry(Kingdee.BOS.Context)">
            <summary>
            设置用户表用户手机号加密
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否加密成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetXTUserPhoneEncry(Kingdee.BOS.Context)">
            <summary>
            设置云之家用户映射列表手机号加密
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否加密成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetSMSPhoneEncry(Kingdee.BOS.Context)">
            <summary>
            设置短信发送列表后台数据库加密
            </summary>
            <param name="ctx">上下文</param>
            <returns>信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetSMSErrorPhoneEncry(Kingdee.BOS.Context)">
            <summary>
            设置短信发送错误列表后台数据库加密
            </summary>
            <param name="ctx">上下文</param>
            <returns>信息</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService._postRegUserOperation">
            <summary>
            上传注册用户操作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService._errorFlag">
            <summary>
            失败操作结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService._successFlag">
            <summary>
            成功操作结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BaseService.UserService._importRegUserOperation">
            <summary>
            导入注册用户操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.RegUserSyncByUserIds(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            根据用户id同步用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">需要同步的用户信息</param>
            <returns>是否同步成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ResetUserLic(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.ProductModel.LoggedOnUserInfo},Kingdee.BOS.ProductModel.ReadOnlyCollection{Kingdee.BOS.ProductModel.LoggedOnUserInfo},System.String)">
            <summary>
            刷新许可
            </summary>
            <param name="ctx">上下文</param>
            <param name="regUsers">云平台中注册用户信息</param>
            <param name="licRegUsers">lic中注册用户信息</param>
            <param name="K3CloudProductInstanceID">产品实例id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GeRegUserInfo(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            获取当前的数据库中的注册用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户id</param>
            <returns>当前的数据库中的注册用户</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetPhoneAndEmailFilterSql(Kingdee.BOS.Context)">
            <summary>
            获取手机号或者邮箱过滤SQL
            </summary>
            <param name="ctx">上下文</param>
            <returns>手机号或者邮箱过滤SQL</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.PostRegUser(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo},System.String)">
            <summary>
            上传注册用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="productInstanceID">产品实例id</param>
            <param name="regUsers">注册用户信息</param>
            <param name="packageId">包id</param>
            <returns>上传注册用户结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ConvertToRegMember(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo},System.String)">
            <summary>
            把用户信息转换成金蝶云接口员工信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="regUsers">注册用户信息</param>
            <param name="packageId">包ID</param>
            <returns>转换后用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveRegUserLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            保存注册用户同步日志
            </summary>
            <param name="ctx"></param>
            <param name="operateName">操作名称</param>
            <param name="regUserName">注册用户名称</param>
            <param name="operateResult">操作结果</param>
            <param name="description">详细信息</param>
            <param name="errorCount">错误个数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.CheckSyncStateResult(Kingdee.BOS.Context,System.String,System.Int32@)">
            <summary>
            检查是否已同步完成
            </summary>
            <param name="ctx">上下文</param>
            <param name="syncKey">key文件</param>
            <param name="_postRegUserErrorCount">失败个数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.ImportRegUser(Kingdee.BOS.Context)">
            <summary>
            导入注册用户
            </summary>
            <param name="ctx">上下文</param>
            <returns>导入注册用户结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUnActiveUser(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo})">
            <summary>
            更新免激活用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="RegUsers">云平台下载的注册用户</param>
            <param name="users">本地用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateRegUserName(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo},Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            更新注册用户名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="users">用户信息</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">更新名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateRegUserPhone(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            更新注册用户手机号码
            </summary>
            <param name="ctx">上下文</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">更新名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SetIsNeedEncry(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            设置是否需要手机号加密
            </summary>
            <param name="ctx">上下文</param>
            <param name="fieldNames">加密字段</param>
            <returns>加密配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateRegUserAccount(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo},Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            更新注册用户账号
            </summary>
            <param name="ctx">上下文</param>
            <param name="users">用户信息</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">更新名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateRegUserAppGroup(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            更新注册用户分组
            </summary>
            <param name="ctx">上下文</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">更新名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateAppGroup(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            更新用户的应用分组
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="shortApplicationGroup">应用分组</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.AddNewRegUser(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32@,System.Int32@,System.String@,System.Int32@)">
            <summary>
            新增注册用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="userFormMetaData">用户表单元素对象</param>
            <param name="addUserCount">添加用户个数</param>
            <param name="addUserErrorCount">添加用户失败个数</param>
            <param name="validationErrorMsg">失败描述</param>
            <param name="_importRegUserErrorCount">导入用户失败个数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.CreateUserByLicRegUser(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.ProductModel.LoggedOnUserInfo)">
            <summary>
            根据LIC中的信息创建用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userFormMetaData">用户表单元素对象</param>
            <param name="licRegUser">许可中用户信息</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserPassportId(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            更新云通行证ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">检查用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.SaveRegUserPassport(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.LoggedOnUserInfo,Kingdee.BOS.BusinessEntity.UserManager.RegUserInfo)">
            <summary>
            保存注册用户通行证
            </summary>
            <param name="ctx">上下文</param>
            <param name="licRegUser">许可中用户信息</param>
            <param name="checkUser">检查用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateHeadImg(Kingdee.BOS.Context,System.Byte[])">
            <summary>
            更新用户个人头像
            </summary>
            <param name="ctx">上下文</param>
            <param name="image">图片编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserPersonalInfo(Kingdee.BOS.Context)">
            <summary>
            获取用户个人信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户个人信息对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserRegConfig(Kingdee.BOS.Context)">
            <summary>
            获取用户同步信息配置
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户同步信息配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetMarketSupplyUser(Kingdee.BOS.Context)">
            <summary>
            获取供需集市用户信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>供需集市用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetGlobalWatermarkFieldConfig(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取水印的配置字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="formid">表单id</param>
            <param name="notShowFields">不显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserBilField(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取元数据文本的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetSpecialData">
            <summary>
            特殊字段值的获取 -- 当前时间 数据中心
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetGlobalWatermarkConfig(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取全局水印配置
            </summary>
            <param name="ctx"></param>
            <param name="watermarkData">水印数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.StatisticUserLogoff(Kingdee.BOS.Context)">
            <summary>
             记录登出时间
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.GetUserNameAndIdByPhone(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户名和id通过手机号
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">手机号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.KickOffALLUser(Kingdee.BOS.Context)">
            <summary>
            禁用用户同步踢出用户信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.KickOffUserByUserToken(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            禁用用户同步踢出用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userTokenList">UserToken信息</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.UpdateUserKickInfo(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>
            修改会话为踢人会话
            </summary>
            <param name="ctx"></param>
            <param name="UserTokenList"></param>
            <param name="userIds"></param>
            <param name="isKick"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.KickOffUser(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>
            禁用用户同步踢出用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户Id信息</param>
            <param name="kickType">1.修改密码踢人、2.用户禁用踢人、3.重新登录踢人</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseService.UserService.VerifyUserPassword(Kingdee.BOS.Context,System.Int64,System.String,System.Boolean)">
            <summary>
            验证用户密码是否正确
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="strMMPD">密码</param>
            <param name="isEncryed">密码是否加密</param>
            <returns>正确返回true；否则返回false</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService">
            <summary>
            单据补号计算服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.MaxGetRepairCount">
            <summary>
            每个编码规则计算补号的最大数量（1000）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行计划入口函数
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.SaveBillNoRepairData(Kingdee.BOS.Context,System.String)">
            <summary>
            按照编码依据保存补号数据
            </summary>
            <param name="ctx"></param>
            <param name="specialRuleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.GetAllRepairNoSource(Kingdee.BOS.Context,System.String)">
            <summary>
            获取补号池所有补号信息
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.GetMaxRepairNoSourceFID(Kingdee.BOS.Context)">
            <summary>
            获取补号池最大FID值
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CreateRepairNoResourceDt(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.RepairNoResource})">
            <summary>
            将补号信息转成Datatable
            </summary>
            <param name="ctx"></param>
            <param name="repairNoList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.GetBillCodes(Kingdee.BOS.Context,System.String)">
            <summary>
            加载需要计算补号的编码规则实体
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.DeleteUsedRepairNo(Kingdee.BOS.Context,System.String)">
            <summary>
            删除已使用并超过保留时间的补号
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.DeleteRepairComputeServiceLog(Kingdee.BOS.Context)">
            <summary>
            删除15天之前的补号服务日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.RepairNoResource.GenerateTime">
            <summary>
            生成时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.BillCode.ByValue">
            <summary>
            依据字符串      
            备注：不包括常量或未设置成编码依据的字段值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.BillCode.BillNoTemplate">
            <summary>
            单据编号模板
            备注：完整单号模板，只需替换流水号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.BillCode.Version">
            <summary>
            补号版本，目前版本A
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.BillCode.CodeByData">
            <summary>
            编码依据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.BillCode.SpecificKey">
            <summary>
            自定义的编码字段
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CodebyData">
            <summary>
            存储编码依据数据，用于序列化和反序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CodebyData.FieldKey">
            <summary>
            数据库对应的字段标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CodebyData.KdDbType">
            <summary>
            字段对应的类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CodebyData.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject">
            <summary>
            编码规则流水号字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CheckString">
            <summary>
            选中状态的字符串
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CurVersion">
            <summary>
            常量，目前版本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.VersionA">
            <summary>
            版本A
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.OriginalVersion">
            <summary>
            初始版本（旧版本）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CodeByBaseDataField">
            <summary>
            弃用，此属性不完整，仅包含基础资料
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.IsSameByValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow[])">
            <summary>
            是否同一个编码依据
            </summary>
            <param name="dataEntity"></param>
            <param name="codeRuleEntrys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.AllowRepeatNo(System.Data.DataRow)">
            <summary>
            计算每一行是否符合同时勾选编码元素和编码依据，如果没有，则允许重复的单据编码
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetDynamicCodebyVal(Kingdee.BOS.Core.CodeRuleProjectType,System.Data.DataRow,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取编码依据作为编码元素的值
            </summary>
            <param name="fieldType"></param>
            <param name="dr"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GenerateDynamicExpression(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow[])">
            <summary>
            根据数据和编码规则生成含有流水号替代符的字符串
            NOTE: 当前的规则是要求必须有流水号，故去掉haveFlow这个变量
            </summary>
            <param name="dataEntity"></param>
            <param name="codeRuleEntrys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GenerateFixExpression(System.Data.DataRow[])">
            <summary>
            生成常量 + 流水号
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetFixTextValue(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            获得固定文本类型字段的值
            </summary>
            <param name="dr"></param>
            <param name="fieldResult"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetFieldValue(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取字段的值
            </summary>
            <param name="field"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetDateFieldValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Boolean)">
            <summary>
            获得日期类型字段的值
            </summary>
            <param name="dataObject"></param>
            <param name="dr"></param>
            <param name="fieldResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.AddFieldToCollection(Kingdee.BOS.Core.CodeRuleCodeBy,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            添加字段到编码依据或编码元素集合中
            </summary>
            <param name="codebyType"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetCodeByType(System.Data.DataRow)">
            <summary>
            获取字段设置的编码依据或编码元素状态
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetTextFieldValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Boolean)">
            <summary>
            获得文本类型字段的值
            </summary>
            <param name="dataObject"></param>
            <param name="dr"></param>
            <param name="fieldResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetComboFieldValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Boolean)">
            <summary>
            获取下拉列表字段的值
            </summary>
            <param name="dataObject"></param>
            <param name="dr"></param>
            <param name="fieldResult"></param>
            <param name="addField"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetLookupFieldValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Boolean)">
            <summary>
            获得基础资料类字段的值
            </summary>
            <param name="dataObject"></param>
            <param name="dr"></param>
            <param name="fieldResult"></param>
            <param name="addField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetGenNoLen">
            <summary>
            获取生成单据编号长度，用于筛选，仅用于新版本补号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.IsSameByValue(System.Data.DataRow)">
            <summary>
            当前数据行是否是当前编码依据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.GetCodebyFromType(System.Data.DataRow,System.Data.DataRow,System.Int32)">
            <summary>
            获得基础资料类字段的值
            </summary>
            <param name="drRule"></param>
            <param name="drData"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.RuleID">
            <summary>
            规则ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.Version">
            <summary>
            版本，兼容历史目前，目前版本A
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.IsConstLen">
            <summary>
            流水号是否是固定长度（默认false，可以自增）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowAddChar">
            <summary>
            流水号补位符
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowEntryID">
            <summary>
            流水号项ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowLen">
            <summary>
            流水号长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowSeed">
            <summary>
            流水号起始值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowIncrement">
            <summary>
            步长
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.FlowCodeByValue">
            <summary>
            编码依据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CodeRuleEntrys">
            <summary>
            编码规则，用于后续计算补号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.SpecificKey">
            <summary>
            编码规则指定的其他编码字段key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CodeByFields">
            <summary>
            编码依据字段列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CodeEleFields">
            <summary>
            编码元素（用于后续计算补号使用）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CodebyData">
            <summary>
            仅用于执行计划时，获取编码依据的设置部分
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.CurDataObject">
            <summary>
            当前数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject.AllowReapeatBillNo">
            <summary>
            是否允许单据编号重复
            降低重复校验出错概率，如果设置的编码规则的每一项都勾选了编码元素，则不允许单据编号重复
            如果其中的某项只勾选的编码依据，而没有勾选编码元素，此时按照编码依据可能产生重复的单据编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper">
            <summary>
            编码规则流水号字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.CalculateCount">
            <summary>
            手动补号每次获取100万个计算
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.CalcFlowNo(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Decimal)">
            <summary>
            计算实际的流水号值（去零等）
            </summary>
            <param name="project"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.IsExistsBillCodes(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据ruleid和编码依据判断是否存在指定记录
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
            <param name="flowCodeByValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetInsertBillFlowNo(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Boolean)">
            <summary>
            新增编码依据获取流水号（并发时可能是更新）
            </summary>
            <param name="ctx"></param>
            <param name="project"></param>
            <param name="isUpdateMaxnum"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.IsExistsPlugIn(System.String,System.String)">
            <summary>
            是否存在插件处理
            </summary>
            <param name="dbId"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetUpdateBillFlowNo(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Boolean)">
            <summary>
            更新编码依据获取流水号
            </summary>
            <param name="ctx"></param>
            <param name="project"></param>
            <param name="isUpdateMaxnum"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetBillCodePlugIn(Kingdee.BOS.Context,System.String,System.Type)">
            <summary>
            实例化编码规则插件
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
            <param name="plugInType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.BatchGetFlowNo(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Int32)">
            <summary>
            批量生成流水号
            </summary>
            <param name="ctx"></param>
            <param name="project"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.ProduceFlowNo(System.String,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            处理流水号（补位和截断）
            </summary>
            <param name="orginalNo"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetBillFlowNo(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Boolean)">
            <summary>
            根据流水依据和流水号分录信息获得格式化后的流水号结果
            -- isUpdateMaxnum为False时，不会更新最大值，同时取多个编号需要在外部进行累加
            </summary>
            <remarks>重大修改：编码产生采用独立事务，提供补号功能</remarks>
            <param name="ctx"></param>
            <param name="project"></param>
            <param name="isUpdateMaxnum">是否更新流水号最大值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.RemoveAddChar(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.String)">
            <summary>
            移除补位符
            </summary>
            <param name="project"></param>
            <param name="flowNo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetBillFlowNo(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Decimal)">
            <summary>
            根据提供的最大值生成流水号, 不更新数据库中的流水号最大值 
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetMaxValue(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            获取最大流水号的值
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetCodebyData(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            在数据库中获取编码依据的条件JSON信息
            </summary>
            <param name="ctx"></param>
            <param name="ruleID"></param>
            <param name="flowCodeByValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.UpdateMaxValue(Kingdee.BOS.Context,System.String,System.String,System.Decimal)">
            <summary>
            更新最大流水号
            </summary>
            <param name="ctx"></param>
            <param name="ruleID"></param>
            <param name="flowCodeByValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.UpdateMaxValue(Kingdee.BOS.Context,System.String,System.String,System.Decimal,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            更新流水号的最大值
            </summary>
            <param name="ctx"></param>
            <param name="ruleID"></param>
            <param name="flowCodeByValue"></param>
            <param name="maxValue"></param>
            <param name="project"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetMaxValueAndUpdate(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Int32)">
            <summary>
            获取最大流水号的值并更新最大值
            </summary>
            <param name="ctx"></param>
            <param name="project"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetAllBillFlowNOs(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            取得初始值和最大值之间的所有流水号(不含补位符)
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRuleEntityById(Kingdee.BOS.Context,System.String)">
            <summary>
            通过编码规则id获取数据
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRuleEntrysByFormID(Kingdee.BOS.Context,System.String)">
            <summary>
            获取编码规则设置
            </summary>
            <param name="ctx"></param>
            <param name="formID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRuleEntryById(Kingdee.BOS.Context,System.String)">
            <summary>
            根据RuleId获取编码规则的绑定的元素
            </summary>
            <param name="ctx"></param>
            <param name="RuleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetSpecificOrDefaultRuleEntrys(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取指定的或默认的编码规则的详细信息
            --如果没有指定编码规则ID, 取默认的编码规则
            --如果指定了编码规则ID, 直接按规则ID取
            </summary>
            <param name="formID">formID</param>
            <param name="specificRuleID">ruleID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetDefaultRuleEntrys(Kingdee.BOS.Context,System.String)">
            <summary>
            获取默认的编码规则的详细信息
            </summary>
            <param name="formID">formID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetSpecificRuleEntrys(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取指定的编码规则的详细信息
            --formId参数是为了避免取串了编码规则
            </summary>
            <param name="formID">formID</param>
            <param name="specificRuleID">specificRuleID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.IsBillNoField(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            是否是单据编码字段
            </summary>
            <param name="info"></param>
            <param name="billNoFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRepairNoByVersion(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.HashSet{System.String},System.Int32,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            计算不同版本的补号
            </summary>
            <param name="project"></param>
            <param name="batchAllFlowNo"></param>
            <param name="usedBillNo"></param>
            <param name="getCount"></param>
            <param name="version"></param>
            <param name="logObj">日志数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRepaireNoByVerA(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.HashSet{System.String},System.Int32,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取编码规则A版本的补号
            </summary>
            <param name="project"></param>
            <param name="batchAllFlowNo"></param>
            <param name="usedBillNoList"></param>
            <param name="getCount"></param>
            <param name="logObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRepaireNo(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Collections.Generic.List{System.Decimal},System.Collections.Generic.HashSet{System.String},System.Int32,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取旧版本编码规则的补号
            </summary>
            <param name="project"></param>
            <param name="batchAllFlowNo"></param>
            <param name="usedBillNoList"></param>
            <param name="getCount"></param>
            <param name="logObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetCodeByList(System.String)">
            <summary>
            获取编码依据的集合
            </summary>
            <param name="strCodeBy"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetCodeByFieldList(System.Collections.Generic.List{Kingdee.BOS.App.Core.BillCodeRule.BillNoRepairComputeService.CodebyData},Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取字段、字段值集合
            </summary>
            <param name="codebyDataList"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetNoneBillNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            获取非单据编号字段已选择的字段（版本A）
            </summary>
            <param name="ctx"></param>
            <param name="billNoField"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetUsedNoSet(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            根据sql和字段名获取使用的编号集合
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.IsNumberField(System.Int32)">
            <summary>
            是否添加单引号
            </summary>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.ComputeRepairFlowNo(Kingdee.BOS.Context,System.Decimal,System.Int32,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.String,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            计算补号流水号
            </summary>
            <param name="ctx">上下文</param>
            <param name="maxFlowNum">最大流水号值</param>
            <param name="maxGetCount">最大取号数量</param>
            <param name="project"></param>
            <param name="billNoFieldName">单据编号字段名</param>
            <param name="tableName">单据表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.BuildRepairExpression(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            构造补号整体的正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.BuildRepairFlowNoExp(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            构建补号的流水号正则表达式（此时流水号也是定长的）
            </summary>
            <param name="seqField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.BuildFlowNoExpression(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            构造流水号表达式
            暂不支持起始值为小数且步长为整数的场景
            </summary>
            <param name="seqField">编码规则方案</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.CreateFlowNo(System.Decimal,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            根据流水号生成按照编码规则补位等的完整流水号
            </summary>
            <param name="no"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.CreateCodeRuleSeqProject(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            创建编码规则流水字段
            </summary>
            <param name="bInfo"></param>
            <param name="entity"></param>
            <param name="ruleID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetAllFlowNos(System.Decimal,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            根据流水号位数取得初始值和最大值之间的所有流水号
            </summary>
            <param name="maxNum">最大流水值</param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetBatchAllFlowNo(System.Decimal,System.Decimal,System.Int32,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            按批次生成流水号
            </summary>
            <param name="maxNo"></param>
            <param name="startNo"></param>
            <param name="count"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetMaxFlowNoNum(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            取得最大流水号值
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetAllBillNo(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            //查询出所有已保存的单据编号（原有逻辑，补号版本A之前以及非补号时候使用）
            </summary>
            <param name="ctx"></param>
            <param name="billNoFieldName"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.RegexKeyChar(System.String)">
            <summary>
            处理字符串中的正则表达式特殊字符
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetEscapeFlowNo(System.String,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            获取转义后的流水号正则表达式
            </summary>
            <param name="billNoTemplate"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetBillNoList(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            通过数据包获取指定编码字段的编码列表（单据体可能有多个）
            </summary>
            <param name="dataObj"></param>
            <param name="billNoField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetCodebyData(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            获取编码规则的JSON数据
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetSpecificCodeKey(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定编码规则下的指定字段key，如果没有返回空
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetRealBillNoField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取编码规则真实的编码字段
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRule.BillCodeRuleHelper.GetSpecificFieldDic(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.String})">
            <summary>
            获取编码规则对应的单据编号字段字段
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ruleList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.AddRows(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0},Kingdee.BOS.Core.BusinessFlow.SheetSnapshotType,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            增加行数据
            </summary>
            <param name="cxt"></param>
            <param name="sheet"></param>
            <param name="sheetType"></param>
            <param name="dymObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.AddRules(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.WRules{`0},Kingdee.BOS.Core.BusinessFlow.SheetSnapRowType,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            增加反写规则集合
            </summary>
            <param name="rules"></param>
            <param name="rowType"></param>
            <param name="rowObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.AddSRS(Kingdee.BOS.BusinessEntity.BusinessFlow.WSRows{`0},Kingdee.BOS.Core.BusinessFlow.SheetSnapRuleType,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            增加反写结果集
            </summary>
            <param name="wsRows"></param>
            <param name="ruleType"></param>
            <param name="dymObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.UpdateRows2(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0},Kingdee.BOS.Core.BusinessFlow.SheetSnapshotType,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            更新数据行2， 不保留存在的数据，所有的数据都是新增的。
            </summary>
            <param name="cxt"></param>
            <param name="currentSheet"></param>
            <param name="snapshotNewType"></param>
            <param name="dbSnapshot"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.CreateSheet(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.SheetSnapshotType,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            创建Sheet型数据结构
            </summary>
            <param name="sheetType"></param>
            <param name="sheetDObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.SheetToDataTable(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0}},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0}},System.Int32)">
            <summary>
            sheet转换为数据表
            </summary>
            <param name="cxt"></param>
            <param name="sheets"></param>
            <param name="handledSheets"></param>
            <param name="maxRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetRowData(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0},System.Data.DataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            反写记录老数据升级
            </summary>
            <param name="cxt"></param>
            <param name="sheet"></param>
            <param name="sbSql"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetBillInfo(System.Int32)">
            <summary>
            得到单据信息
            </summary>
            <param name="billInfoId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetBillInfoById(System.Int32)">
            <summary>
            从数据库表中得到单据信息
            </summary>
            <param name="sqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetBillInfoId(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0})">
            <summary>
            得到单据信息内码
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetBillInfoIdInDB(System.String)">
            <summary>
            从数据库得到单据信息内码
            </summary>
            <param name="billInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.CastRowToBillInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0})">
            <summary>
            行转换为单据信息
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.CastBillInfoToRow(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.String[])">
            <summary>
            单选信息转换为行
            </summary>
            <param name="row"></param>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.FormatBillInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            格式化单据信息
            </summary>
            <param name="sTableName"></param>
            <param name="tTableName"></param>
            <param name="flowId"></param>
            <param name="flowLineId"></param>
            <param name="takeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.RFormatBillInfo(System.String)">
            <summary>
            反格式化单据信息
            </summary>
            <param name="billInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetRuleInfo(System.Int32)">
            <summary>
            根据反写规则信息id得到反写规则信息
            </summary>
            <param name="ruleInfoId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetRuleInfoById(System.Int32)">
            <summary>
            数据库中得到反写规则信息
            </summary>
            <param name="sqlWhere"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetRuleInfoId(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            得到反写信息内码
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.GetRuleInfoIdInDB(System.String)">
            <summary>
            从数据库得到反写规则信息内码
            </summary>
            <param name="ruleInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.CastRuleToRuleInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            反写规则转换为反写规则信息
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.CastRuleInfoToRule(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0},System.String[])">
            <summary>
            反写规则信息转换为反写规则
            </summary>
            <param name="rule"></param>
            <param name="infos"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.FormatRuleInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            格式化反写规则信息
            </summary>
            <param name="ruleId">反写规则内码</param>
            <param name="sFormId">源单formid</param>
            <param name="sFieldKey">源单字段key</param>
            <param name="tControlkey"></param>
            <param name="rWay"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBackHelper`1.RFormatRuleInfo(System.String)">
            <summary>
            反格式化反写规则信息
            </summary>
            <param name="ruleInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper">
            <summary>
            系列帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetINSSeqReader(Kingdee.BOS.Context)">
            <summary>
            得到实例SequenceReader
            </summary>
            <param name="cxt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetRowSequence2(Kingdee.BOS.Context,System.Int32)">
            <summary>
            得到行系列号2
            </summary>
            <param name="cxt"></param>
            <param name="rowSeqs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetRuleSequence2(Kingdee.BOS.Context,System.Int32)">
            <summary>
            反写规则系列号2
            </summary>
            <param name="cxt"></param>
            <param name="ruleSeqs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetRValueSequence2(Kingdee.BOS.Context,System.Int32)">
            <summary>
            反写值系列号2
            </summary>
            <param name="cxt"></param>
            <param name="ruleSeqs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetRuleInfoequence2(Kingdee.BOS.Context,System.Int32)">
            <summary>
            反写规则系列号2
            </summary>
            <param name="cxt"></param>
            <param name="ruleSeqs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SequenceHelper.GetBillInfoSequence2(Kingdee.BOS.Context,System.Int32)">
            <summary>
            反写规则系列号2
            </summary>
            <param name="cxt"></param>
            <param name="ruleSeqs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetINSRowTable">
            <summary>
             得到反写记录行表结构的实例表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetRowTable(System.Boolean)">
            <summary>
            得到反写记录行表结构
            </summary>
            <param name="isSetStaticTable">是否设置静态表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetINSRuleTable">
            <summary>
            得到反写记录反写规则表结构的实例表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetRuleTable(System.Boolean)">
            <summary>
             得到反写记录反写规则表结构
            </summary>
            <param name="isSetStaticTable">是否设置静态表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetINSRValueTable">
            <summary>
            得到反写记录反写规则表结构的实例表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.GetRValueTable(System.Boolean)">
            <summary>
            得到反写记录反写规则表结构
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.RowTable">
            <summary>
            得到反写记录行表结构静态表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.RuleTable">
            <summary>
            得到反写记录反写规则表结构的静态表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.TableHelper.RValueTable">
            <summary>
            得到反写记录反写规则表结构的静态表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.Init(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.WriteBackOpType,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
             初始变量值
            </summary>
            <param name="ctx"></param>
            <param name="opType"></param>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.AddWBRuleInfo(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement)">
            <summary>
            增加反写规则信息
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.AddWBRuleInfo(System.String,Kingdee.BOS.App.Core.BusinessFlow.WBMsgType,System.Object)">
            <summary>
            增加反写规则信息
            </summary>
            <param name="ruleId"></param>
            <param name="msgType"></param>
            <param name="msgValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.AddWBRowInfo(System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.App.Core.BusinessFlow.WBMsgType,System.Object,Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            增加反写行信息
            </summary>
            <param name="ruleId"></param>
            <param name="row"></param>
            <param name="msgType"></param>
            <param name="msgValue"></param>
            <param name="wsRow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.AddHistoryInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            增加历史反写值
            </summary>
            <param name="hisRowId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.FinishLog(Kingdee.BOS.Context)">
            <summary>
            完成日志记录，增加到数据库中
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.GetSheetId(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.FormatMsg(Kingdee.BOS.App.Core.BusinessFlow.WBMsgType,System.Object)">
            <summary>
            格式化日志信息
            </summary>
            <param name="msgType"></param>
            <param name="msgValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.GetSysConfig(Kingdee.BOS.Context)">
            <summary>
             得到系统参数配置
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.AddWBInfo(System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            反写信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogHelper.GetWBLogTable">
            <summary>
            得到反写记录行表结构
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService">
            <summary>
            云平台服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.SendTips(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.ForumTopicInfo)">
            <summary>
            云平台发帖
            </summary>
            <param name="ctx">上下文</param>
            <param name="topicinfo">帖子信息</param>
            <returns>发帖是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.UpdateTopicState(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.ForumTopicList)">
            <summary>
            更新论坛帖子信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="topiclistinfo">论坛帖子信息</param>
            <returns>更新状态</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.ReadTips(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String,System.String)">
            <summary>
            打开论坛某一帖子
            </summary>
            <param name="ctx">上下文</param>
            <param name="view">视图</param>
            <param name="authcode">acccode</param>
            <param name="tid">帖子id</param>
            <returns>是否打开成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.ReadAllTips(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String,System.String)">
            <summary>
            打开论坛个人中心, 查看"我的帖子"
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.Authentication(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            通过产品id和用户云通行证id获取acccode
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">产品id</param>
            <param name="uid">用户云通行证id</param>
            <returns>acccode</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.UpdateHelpAssistInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantRequestInfo)">
            <summary>
            通过产品id等更新帮助手册信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="request">请求信息</param>
            <returns>更新结果信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CloudPlat.CloudPlatService.GetNewHelperRed(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.HelpAssistant.HelpAssistantRequestInfo)">
            <summary>
            获取需要显示红点的信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="request">请求信息</param>
            <returns>红点信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue">
            <summary>
            多语言字段批量赋值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue.RegisterField(Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            注册源单和目标单多语言字段信息
            </summary>
            <param name="srcField"></param>
            <param name="srcDynObjs"></param>
            <param name="destField"></param>
            <param name="destDynObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue.BatchSetValue">
            <summary>
            批量处理多语言字段的值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue.SetMutilanguage(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.String,System.Linq.IGrouping{System.String,System.Tuple{Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,Kingdee.BOS.Orm.DataEntity.DynamicObject}})">
            <summary>
            赋值
            </summary>
            <param name="srcDynObjs"></param>
            <param name="srcObjEntityPk"></param>
            <param name="srcEntityPkName"></param>
            <param name="entityGroup"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchMultiLangSetValue.GetMultlLanguageObjs(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.String,System.Linq.IGrouping{System.String,System.Tuple{Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,Kingdee.BOS.Orm.DataEntity.DynamicObject}})">
            <summary>
            得到源单数据包
            </summary>
            <param name="srcEntity"></param>
            <param name="srcObjEntityPk"></param>
            <param name="srcEntityPkName"></param>
            <param name="entityGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingLargeTextField.MappingValue">
            <summary>
            把字段值填充到数据包中；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingLargeTextField.SourceDataEntities">
            <summary>
            源单数据行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper">
            <summary>
            业务流程数据压缩帮助类：协助完成数据表格数据与XML内容的互换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.ZERO">
            <summary>
            数值0：Decimal(0.00)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper._dctColType">
            <summary>
            业务流程各字段及其数据类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.BuildDataSet(Kingdee.BOS.Context,Kingdee.BOS.App.Data.SqlObject,Kingdee.BOS.App.Data.SqlObject,Kingdee.BOS.App.Data.SqlObject,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.HashSet{System.Int64}}@)">
            <summary>
            分批把业务流程数据打包为BFDataSet对象返回
            </summary>
            <param name="ctx">数据库上下文</param>
            <param name="readInst">读取业务流程主表的SQL对象</param>
            <param name="readEntry">读取业务流程路线从表的SQL对象</param>
            <param name="readAmount">读取业务流程路线携带子表的SQL对象</param>
            <param name="dctTargetEntityIds">同步输出业务流程数据的目标单据内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.BuildDataTables(Kingdee.BOS.BusinessEntity.BusinessFlow.BFDataSet)">
            <summary>
            把BFDataSet数据对象，还原为表格+数据行返回，以便批量插入到数据库
            </summary>
            <param name="bfDataSet"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.BuildBFDataTable(Kingdee.BOS.Context,System.String,Kingdee.BOS.App.Data.SqlObject,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.HashSet{System.Int64}}@)">
            <summary>
            到数据库读取数据，构建出包含了数据的BFDataTable返回
            </summary>
            <param name="ctx">数据库上下文</param>
            <param name="tableName">表格名</param>
            <param name="sqlReadData">取数SQL对象，含SQL语句，条件参数</param>
            <param name="noOutFields">无需输出的字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.BuildDataTable(Kingdee.BOS.BusinessEntity.BusinessFlow.BFDataTable)">
            <summary>
            把BFDataTable中记录的数据，还原为DataTable对象，以便批量插入到数据库
            </summary>
            <param name="bfDataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.RecordTargetEntityId(System.String,System.Data.IDataReader,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.HashSet{System.Int64}}@)">
            <summary>
            输出已经压入文件的目标单据内码
            </summary>
            <param name="tableName"></param>
            <param name="rs"></param>
            <param name="dctTargetEntityIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.FldValueToString(Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column,System.Data.IDataReader)">
            <summary>
            把字段值格式化为字符串，不考虑支持大文本、xml字段类型
            </summary>
            <param name="col">列</param>
            <param name="rs">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.StringToFldValue(System.String,System.String)">
            <summary>
            把字符串格式的字段值，还原为字段原类型值
            </summary>
            <param name="colName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column">
            <summary>
            表格列
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column.Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column.Index">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetHelper.Column.IsNull">
            <summary>
            是否允许为null
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BFDataSetBinder">
            <summary>
            序列化采用的对象字典
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo">
            <summary>
            分批数量
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstBatchCount">
            <summary>
            流程实例归档，每批次处理的数量 ： 100
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstMaxBatch">
            <summary>
            业务流程实例归档，最多处理批次 ： 100
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstTopCount">
            <summary>
            业务流程实例归档，最多处理的数据量 ： 10,000
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapBatchCount">
            <summary>
            快照归档，每批次处理的数量：10
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapMaxBatch">
            <summary>
            快照归档，最多处理批次：100
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapTopCount">
            <summary>
            快照归档，最多处理的数据量 ： 1,000
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapCompressBatchCount">
            <summary>
            快照压缩，每批次处理的数量：1
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapCompressMaxBatch">
            <summary>
            快照压缩，最多处理的批次：1,000
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.SnapCompressTopCount">
            <summary>
            快照压缩，最多处理的数据量：1,000
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstCompressBatchCount">
            <summary>
            流程实例压缩，每批次处理的数量：10
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstCompressMaxBatch">
            <summary>
            流程实例压缩，最多处理的批次：100
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.BatchCountInfo.InstCompressTopCount">
            <summary>
            流程实例压缩，最多处理的数据量：10,000
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.MSGZipWrapper">
            <summary>
            利用微软压缩技术(GZipStream)，压缩业务流程数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.MSGZipWrapper.Compress(System.String)">
            <summary>
            压缩字符串后输出
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.MSGZipWrapper.Compress(System.Byte[])">
            <summary>
            对byte[]进行压缩后输出
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.MSGZipWrapper.Decompress(System.String)">
            <summary>
            对压缩后的字符串解压
            </summary>
            <param name="str">已压缩的字符串</param>
            <returns>解压后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.MSGZipWrapper.Decompress(System.Byte[])">
            <summary>
            对压缩后的byte[]进行解压
            </summary>
            <param name="bytes">压缩后的byte[]</param>
            <returns>解压后的byte[]</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime">
            <summary>
            根据日期计算日期  仅支持原日期、计算单位、计算值和目标日期在同一实体的场景
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.DoActionBatch(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.GetField(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            得到字段
            </summary>
            <param name="busInfo"></param>
            <param name="fieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.GetValue(System.Tuple{System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean)">
            <summary>
            得到字段值
            </summary>
            <param name="row"></param>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.GetFieldDict(System.String)">
            <summary>
            构造参数字典
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.GetNewDateByUnit(System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            进行日期计算
            </summary>
            <param name="sourceDateTime"></param>
            <param name="DateUnit"></param>
            <param name="DateValue"></param>
            <param name="unitQty"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.CalOffsetDate(Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.Dictionary{System.String,System.String},System.DateTime,System.String)">
            <summary>
            计算偏移日期
            </summary>
            <param name="dictField"></param>
            <param name="targetValue"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.RequestBatchProcess">
            <summary>
            要求批量处理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.CalDateTimeType">
            <summary>
            通过日期计算偏移值类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.CalDateTimeType.CL">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.CalDateTime.CalDateTimeType.BL">
            <summary>
            变量
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService">
            <summary>
            国际化税务规则服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.PushFormBusinessService">
            <summary>
            选单/下推，表单服务执行类；提供统一的执行条件判断处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.PushFormBusinessService.ValidateExpression(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行前置条件判断
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.PushFormBusinessService.FindFieldDataEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取[目标字段]所在实体的[当前行]；以[主实体]的[当前行]作为参照检索
            </summary>
            <param name="info">单据元数据</param>
            <param name="dataEntitySet">单据实体行数据包集合</param>
            <param name="fireDataEntity">主实体当前行数据包</param>
            <param name="fireEntity">主实体</param>
            <param name="field">目标字段</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxRateId">
            <summary>
            税率
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxRateId_Id">
            <summary>
            税率
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxRate">
            <summary>
            税率
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.InCostPercent">
            <summary>
            计入成本比例
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.IsVat">
            <summary>
            增值税
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.SellerWithHold">
            <summary>
            卖方代扣代缴
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.BuyerWithHold">
            <summary>
            买方代扣代缴
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.BD_TAXMIXENTRY">
            <summary>
            税率及纳税公式复合详细信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxBenchMark">
            <summary>
            应纳税额基准
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxBenchMarkCorrValue">
            <summary>
            应纳税基准修正值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TBM001">
            <summary>
            单价
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TBM002">
            <summary>
            单价+之前的单位税额合计
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.Const_BussValue_FY">
            <summary>
            应付管理:应付单_业务类型的值_费用采购
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.FBILLTYPEID">
            <summary>
            单据类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.FIN_ORM_BUSINESSTYPE">
            <summary>
            应付单的业务参数字段的orm 属性d
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.GetHeadDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            根据单据体行，获取其所在的单据完整数据包
            </summary>
            <param name="entityRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.ProcessParentAmountFactorChange(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            税务明细父单据体映像金额因素字段值发生改变
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.UpdateTaxDetailsSubEntryEntity(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.TaxDetailSubEntryEntity)">
            <summary>
            更新税务明细单据体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.Compute(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.TaxDetailSubEntryEntity,System.Int32)">
            <summary>
            税额计算
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.ComputeTotalTaxAmount(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.TaxDetailSubEntryEntity,System.Int32)">
            <summary>
            税务明细单据体税额改变计算总税额,根据税种所允许的误差范围
            </summary>
            <param name="parentObj"></param>
            <param name="subEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.GetReviseTaxAmount(System.String,System.Decimal,System.Decimal)">
            <summary>
            获取修正的税额
            </summary>
            <param name="taxRateId"></param>
            <param name="amount"></param>
            <param name="taxRate"></param>
            <param name="inputTaxAmount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.GetShareBillDiscount(System.Decimal,System.String)">
            <summary>
            获取整单折扣分摊额，有两种分摊方法按金额或者数量分摊
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.GetTaxBenchMarkAndtaxBenchMarkCorrValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Int32@,System.Decimal@)">
            <summary>
            应纳税额基准   应纳税额基准修正值
            </summary>
            <param name="dyn"></param>
            <param name="taxBenchMark"></param>
            <param name="taxBenchMarkCorrValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.GetTaxType(System.String)">
            <summary>
            获取税种
            </summary>
            <param name="taxRateId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.SetDefaultTaxRate(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            不启用税组合下，默认获取税率规则默认税率
            </summary>
            <param name="rowObj"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.IsUseTaxCombination">
            <summary>
            判断是否启用税组合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxRateFormMetadata">
            <summary>
            税率元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BusinessService.TaxRuleService.TaxTypeFormMetadata">
            <summary>
            税种元数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction">
            <summary>
            选单，生成筛选上游单据组织的条件
            </summary>
            <remarks>
            仅适用于选单前过程
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.Do">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.LoadBizOrgIds(Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Collections.Generic.HashSet{System.Int64}@)">
            <summary>
            读取可选的关联组织，这些关联组织都可以与本组织发生委托关系
            </summary>
            <param name="sourceOrgFld"></param>
            <param name="sourceBizOrgFld"></param>
            <param name="bizOrgIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.BuildBizOrgFilter(Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.Metadata.FieldElement.OrgField)">
            <summary>
            根据委托关系，构建关联组织过滤条件，包含本组织自身：
            1. 本组织是委托方，则挑选符合委托关系的全部受托方
            2. 本组织是受托方，则挑选符合委托关系的全部委托方
            </summary>
            <param name="sourceOrgFld">源单映射组织</param>
            <param name="sourceBizOrgFld">关联组织</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.BuildFuncOrgFilter(Kingdee.BOS.Core.Metadata.FieldElement.OrgField)">
            <summary>
            构建过滤关联组织职能的条件
            </summary>
            <param name="sourceBizOrgFld"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.TargetBusinessInfo">
            <summary>
            目标单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByOrgAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertOrderByPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建动作集合
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertOrderByPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建动作集合
            </summary>
            <param name="actions"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.SourceBusinessInfo">
            <summary>
            源单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.TargetBusinessInfo">
            <summary>
            目标单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.SourceDataEntities">
            <summary>
            源数据行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.SourceOrgBDId">
            <summary>
            原始组织基础资料值: 用于判断基础资料是否分配
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.DicFieldAlias">
            <summary>
            字段别名字典
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingBaseDataField.batchRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.LOGCODE">
            <summary>
            日志标记代码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.MappingValue">
            <summary>
            Mapu
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.GetLookUpObject">
            <summary>
            获取引用对象对象描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.GetRefIDDynamicProperty(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            基础资料Id动态实体属性
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.GetDynamicObjectType(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取DynamicObjectType
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.HadNotDist">
            <summary>
            基础资料未分配到目标组织
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.SourceBusinessInfo">
            <summary>
            源单单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.TargetBusinessInfo">
            <summary>
            目标单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.SourceDataEntities">
            <summary>
            源单数据行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.batchRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.SourceOrgBDId">
            <summary>
            原始组织基础资料值: 用于判断基础资料是否分配
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.DocumentProperty">
            <summary>
            读取基础资料数据状态的属性。如果是分配型基础资料，则读取的是目标组织下的数据状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.ForbidProperty">
            <summary>
            读取基础资料禁用状态的属性。如果是分配型基础资料，则读取的是目标组织下的数据状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField.DicFieldAlias">
            <summary>
            字段别名字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataTextField.MapText">
            <summary>
            填写文本属性值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataTextField.MapRefId">
            <summary>
            填写基础资料属性值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.NetworkCtrlAction">
            <summary>
            检验上拉时源单数据行，上拉不允许生成多行目标单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.NetworkCtrlAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.NetworkCtrlAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.NetworkCtrlAction.SelectedRows">
            <summary>
            用户在序事簿上的选择对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.OrderByPolicy.OrderByDefaultAction">
            <summary>
            默认分组方式，所有明细合并到一张单据中
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.OrderByPolicy.OrderByDefaultAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.OrderByPolicy.OrderByDefaultAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CRMService.GetCRMServiceCust(Kingdee.BOS.Context,System.String)">
            <summary>
            获取icrmService客户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="productCode">产品序列号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CRMService.SaveCRMServiceCust(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CRMServiceCustInfo)">
            <summary>
            保存icrmService客户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="custInfo">icrmService客户信息</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AlertTableUtil">
            <summary>
            创建/修改业务对象物理表格类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.UpdateFormMetadataTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            更新业务对象相关表格
            </summary>
            <param name="ctx">上下文环紧</param>
            <param name="billMetaData"></param>
            <remarks>
            在一个事务中，提交创建表格的SQL，Orcale会保存；
            因此，把创建业务对象表格的功能单独剥离出来，在事务外执行
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.UpdateFormMetadataTableWithResult(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            更新业务对象相关表格
            </summary>
            <param name="ctx">上下文环紧</param>
            <param name="billMetaData"></param>
            <remarks>
            在一个事务中，提交创建表格的SQL，Orcale会保存；
            因此，把创建业务对象表格的功能单独剥离出来，在事务外执行
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.UpdateTableByBusinessInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            根据元数据刷新表结构
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            创建实体的物理表格
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="info">业务对象逻辑配置</param>
            <param name="entity">业务对象实体配置</param>
            <returns>是否更新了表结构</returns>
            <remarks>
            如果实体未关联物理表格, 或者关联的是视图，直接返回;
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateLinkTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            创建状态追踪使用的关联关系表
            </summary>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenSplitInsertSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String)">
            <summary>
            新增拆分表生成预插数据，否则后续修改数据不能正常保存
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="entity"></param>
            <param name="tableName">拆分表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenCreateTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            返回创建实体表格的SQL
            </summary>
            <param name="info">业务对象元数据</param>
            <param name="entity">实体对象，包含了其字段集合</param>
            <param name="tableName">实体拆分表名称</param>
            <param name="batchSQL">输出参数，输出SQL对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenAlterTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Data.DataTable,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            修改实体表格
            </summary>
            <param name="entity"></param>
            <param name="tableName">实体拆分表格名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateMasterMulLangTableSQL(Kingdee.BOS.Core.Metadata.FormElement.Form,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            创建基础资料主表多语言表
            </summary>
            <param name="form"></param>
            <param name="mulLangTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenAlertMulLangTableSQL(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            返回创建/修改实体对应多语言表格的SQL
            </summary>
            <param name="form">单据整体元模型</param>
            <param name="entity">实体元模型</param>
            <param name="multiLangFields">多语言字段列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenAlertBillStatusTableSQL(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            返回创建/修改实体对应单据状态表格的SQL
            </summary>
            <param name="form">单据整体元模型</param>
            <param name="entity">实体元模型</param>
            <param name="multiLangFields">状态字段列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateBillStatusTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField},System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            创建单据状态信息存储表格
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GetIdxName(System.String)">
            <summary>
            获得idx名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GetPkName(System.String)">
            <summary>
            获得pk名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.ExistsFieldInTableSchema(System.Data.DataTable,System.String)">
            <summary>
            在表格描述中，判断是否存在指定字段
            </summary>
            <param name="tableSchema"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateGroupTable(Kingdee.BOS.Context,System.String)">
            <summary>
            创建分组信息存储表格
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenAlertTVRelationTableSQL(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            返回创建/修改树形目录结构的嵌套表的SQL
            </summary>
            <param name="form">单据整体元模型</param>
            <param name="entity">实体元模型</param>
            <param name="multiLangFields">多语言字段列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GenFieldDesc(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            生成字段的描述SQL，格式为 字段名 类型 是否为NULL 默认值；如: FID INT NOT NULL DEFAULT(0);
            这样的描述可以放在创建表格的SQL中，也可以放在修改表格的SQL中；
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GetTableSchema(Kingdee.BOS.Context,System.String)">
            <summary>
            返回指定表格的字段集合
            </summary>
            <param name="tableName"></param>
            <returns></returns>
            <remarks>
            每个字段作为一行进行描述
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.ExitsTable(Kingdee.BOS.Context,System.String)">
            <summary>
            判断数据库中实体名称是否已经被使用
            </summary>
            <param name="tableName">实体名称</param>
            <returns></returns>
            <remarks>
            判断的依据是sysobjects中是否存在同名的记录
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.ExitsField(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            判断指定表格中是否存在指定字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks>
            判断依据 syscolumns 中的记录
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.IsView(Kingdee.BOS.Context,System.String)">
            <summary>
            判断表格是否为数据库视图
            </summary>
            <param name="tableName">表格名称</param>
            <returns>如果是视图，则返回真；其他各种情况，返回假</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GetVchInfoTable(Kingdee.BOS.Context,System.String)">
            <summary>
            获取凭证信息表，加载元数据时调用
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateVchInfoTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            获取凭证信息表，没有则创建
            1、凭证模板保存时调用
            2、业务凭证保存时调用
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateBizVoucherBillNo(Kingdee.BOS.Context,System.String)">
            <summary>
            创建凭证编号字段
            </summary>
            <param name="ctx"></param>
            <param name="strVchTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateGLIdFieldIndex(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            加入FGLVOUCHERID的非集聚索引
            </summary>
            <param name="ctx"></param>
            <param name="strTableName"></param>
            <param name="strIndexName"></param>        
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateVHBillIdFieldIndex(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            创建凭证信息表单据主键非聚集索引
            </summary>
            <param name="ctx"></param>
            <param name="strTableName"></param>
            <param name="strIndexName"></param>
            <param name="strBillPkFieldName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.CreateBizVoucherIdFieldAndIndex(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            加入FBIZVOUCHERID_ID字段，FBIZVOUCHERID字段作为表体的主键名
            </summary>
            <param name="ctx"></param>
            <param name="strTableName"></param>
            <param name="strIndexName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.GetTableNameAndPKString(System.String,System.String)">
            <summary>
            获取凭证信息表和pk名称，固定
            </summary>
            <param name="strTableName"></param>
            <param name="strBillPkFieldName">业务单据主键</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AlertTableUtil.IsMView(Kingdee.BOS.Context,System.String)">
            <summary>
            是否是物化视图
            </summary>
            <param name="ctx"></param>
            <param name="viewName">视图名称</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService._serviceConfig">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService._appBusinessServiceArgs">
            <summary>
            服务端表单服务执行参数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService._targetInfo">
            <summary>
            下游单据元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.PreparePropertys(System.Collections.Generic.List{System.String})">
            <summary>
            添加本服务必须加载的字段
            </summary>
            <param name="fieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.DoAction(Kingdee.BOS.Core.DynamicForm.AppBusinessServiceArgs)">
            <summary>
            服务执行函数：在允许批量执行时，本函数不会被调用
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.DoActionBatch(Kingdee.BOS.Core.DynamicForm.AppBusinessServiceArgs)">
            <summary>
            服务执行函数：在允许批量执行时，本函数被调用
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.AddSimpleMessageToError(Kingdee.BOS.Core.DynamicForm.IOperationResult,System.String,System.Boolean)">
            <summary>
            将简单消息添加到错误消息
            </summary>
            <param name="saveResult">操作结果对象</param>
            <param name="errorMessage">错误信息</param>
            <param name="isLine">是否单独一行</param>
            <returns>有简单消息的错误消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.DraftData(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Orm.OperateOption)">
            <summary>
             暂存数据,并把保存的结果和暂存的结果合并
            </summary>
            <param name="saveResult"></param>
            <param name="targetBusinessInfo"></param>
            <param name="lstTargetDataEntitys"></param>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.BuildPushArgs(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String@)">
            <summary>
            构造下推服务参数对象
            </summary>
            <param name="rule">转换规则</param>
            <param name="dataEntity">本次下推的源单数据包</param>
            <param name="errorMessage">输出错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.CheckAutoPushParameter(System.String@,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement@)">
            <summary>
            检查服务参数是否配置完整
            </summary>
            <param name="bills">允许下推的目标单</param>
            <param name="replaceRelations">第三方下推替代关系</param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.CheckBillType(Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,System.String)">
            <summary>
            检查下推单据类型是否正确选择
            </summary>
            <param name="targetFormId"></param>
            <param name="billTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetTargetBillTypeId(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField)">
            <summary>
            根据选择的选单规则，确定下游单据类型
            </summary>
            <param name="rule">转换规则</param>
            <param name="dataEntity">源单数据包</param>
            <param name="targetBillTypeField">目标单据类型字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetBillTypeEnumListWithPolicy(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,Kingdee.BOS.Core.Metadata.ConvertElement.BillTypeMapPolicyElement,System.String)">
            <summary>
            根据转换规则的单据类型策略，获取下游单据第一个可用的单据类型
            </summary>
            <param name="rule"></param>
            <param name="defaultBillTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetBillTypeEnumListWithOutPolicy(Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,System.Collections.Generic.List{System.String})">
            <summary>
            从目标单据的全部单据类型中，获取第一个可用的单据类型
            </summary>
            <param name="billTypeField">单据类型字段，提供全部可选的单据类型</param>
            <param name="cannotSelectedTypes">明确禁止选择的单据类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetSrcBillTypeId(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            返回源单的单据类型；如果有多张源单，仅返回第一张源单的单据类型
            </summary>
            <param name="dataEntity">源单数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.TryGetTargetOrgId(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.List.ListSelectedRow[],System.Int64@,System.String@)">
            <summary>
            获取目标单据主业务组织
            </summary>
            <param name="rule">转换规则</param>
            <param name="dataEntity">源单数据包</param>
            <param name="selectedRows">源单所选行</param>
            <param name="targetOrgId">输出目标单据主业务组织</param>
            <param name="errorMessage">输出错误消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetPermissionOrgIds(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取有权限的组织；
            </summary>
            <param name="businessInfo"></param>
            <returns></returns>
            <remarks>自动下推无需验权，此函数无需调用</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRow[],System.Collections.Generic.List{System.Int64},System.Int64,System.Boolean@)">
            <summary>
            设置默认组织
            </summary>
            <param name="ruleKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.GetSrcMainOrgId(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            返回源单的主业务组织；如果有多张源单，仅返回第一张源单的主业务组织
            </summary>
            <param name="dataEntity">源单数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.BuildSelectedRows(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            检验、获取源单的数据
            </summary>
            <param name="dataEntity">源单数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.LoadBusinessInfo(System.String)">
            <summary>
            加载元数据
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.SupportActionPoint">
            <summary>
            重载是否允许在IDE中设定执行时机：本服务不允许在IDE设定时间点，服务要求必须在操作后执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.ActionPoint">
            <summary>
            重载执行时间点：设定本服务仅在操作后执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AppBusinessService.AutoPushService.RequestBatchProcess">
            <summary>
            是否允许批量执行？本服务允许批量执行；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.#ctor(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String})">
            <summary>
            构造函数，ctx,TableNames必须不为空，并且有值
            </summary>
            <param name="ctx">上下文</param>
            <param name="TableNames">表名集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.GetTableIndexsForOracle(System.Collections.Generic.HashSet{System.String})">
            <summary>
            获取表的索引信息，针对Oracle。由于产品大部分情况下只存在普通索引，索引过来NORMAL类型索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.GetTableReindexSql">
            <summary>
            根据传入的表对象，获取表上的索引，进行重建操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.GetStatisticSql">
            <summary>
            传入表名，进行统计信息的更新
            </summary>
            <returns>返回生成的语句集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.GetNeedDefragTableForOracle">
            <summary>
            如果总分配大小-平均行大小×行数/总分配大小比大于等于30，需要进行优化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.DbOptimizationUtil.GetFragmentReorgnizeSql">
            <summary>
            传入表名，进行碎片的整理,
            </summary>
            <returns>返回生成的语句集合</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DataBase.IndexRebuild.AbstractDBRindex._Scale">
            <summary>
            每次需统计多少张表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.DBIndexRebuild">
            <summary>
            执行索引与统计信息的重建
            Oracle 数据库更新统计
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.IDBRIndex">
            <summary>
            索引重建服务器接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.DBIndexRebuild.Do(Kingdee.BOS.Context)">
            <summary>
            执行索引与统计信息的重建
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.DBIndexRebuild.Reindex(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            重建表索引
            </summary>
            <param name="ctx"></param>
            <param name="tableNames"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.IndexScheduleService">
            <summary>
            定期重建索引与统计信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.IndexScheduleService.IsVaild(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            状态是否有效
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex">
            <summary>
            Oracle数据库重建索引
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.GetIndexNameCollection(Kingdee.BOS.Context)">
            <summary>
            获得所有索引信息
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.ConstructSingleTableSQL(System.String)">
            <summary>
            构造单一语句
            </summary>
            <param name="strOwner">用户</param>
            <param name="strTableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.ContructBatchSQL(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Int32@)">
            <summary>
            构造批次脚本
            </summary>
            <param name="dyTable"></param>
            <param name="Scale"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.WriteLog(Kingdee.BOS.Context,System.TimeSpan)">
            <summary>
            将执行时间，写入系统日志中
            </summary>
            <param name="ctx"></param>
            <param name="tmSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.QuickDo(Kingdee.BOS.Context,Kingdee.BOS.Log.ILog)">
            <summary>
            一次完成执行，但会超时
            </summary>
            <param name="ctx"></param>
            <param name="LogHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleDBRIndex.Reindex(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            重建索引
            </summary>
            <param name="ctx"></param>
            <param name="tableNames"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats">
            <summary>
            Oracle重建统计信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.Do(Kingdee.BOS.Context)">
            <summary>
            执行入口
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.GetTableNameCollection(Kingdee.BOS.Context)">
            <summary>
            获得帐套的所有非临时表与用户
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.ConstructSingleTableSQL(System.String,System.String)">
            <summary>
            构造单一表信息统计的脚本
            </summary>
            <param name="strOwner">用户</param>
            <param name="strTableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.ContructBatchSQL(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Int32@)">
            <summary>
            构造批次脚本
            </summary>
            <param name="dyTable"></param>
            <param name="Scale"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.WriteLog(Kingdee.BOS.Context,System.TimeSpan)">
            <summary>
            将执行时间，写入系统日志中
            </summary>
            <param name="ctx"></param>
            <param name="tmSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.OracleGatherTableStats.QuickDo(Kingdee.BOS.Context,Kingdee.BOS.Log.ILog)">
            <summary>
            一次完成执行，但会超时
            </summary>
            <param name="ctx"></param>
            <param name="LogHelper"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex">
            <summary>
            SQL Server 数据库重建索引，并更新统计信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.GetIndexNameCollection(Kingdee.BOS.Context)">
            <summary>
            获得所有索引信息
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.ConstructSingleTableSQL(System.String)">
            <summary>
            构造单一语句
            </summary>
            <param name="strOwner">用户</param>
            <param name="strTableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.ContructBatchSQL(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Int32@)">
            <summary>
            构造批次脚本
            </summary>
            <param name="dyTable"></param>
            <param name="Scale"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.WriteLog(Kingdee.BOS.Context,System.TimeSpan)">
            <summary>
            将执行时间，写入系统日志中
            </summary>
            <param name="ctx"></param>
            <param name="tmSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.QuickDo(Kingdee.BOS.Context,Kingdee.BOS.Log.ILog)">
            <summary>
            一次完成执行，但会超时
            </summary>
            <param name="ctx"></param>
            <param name="LogHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataBase.IndexRebuild.SQLServerDBRIndex.Reindex(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            重建索引
            </summary>
            <param name="ctx"></param>
            <param name="tableNames"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService">
            <summary>
            单据数据模板服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.LoadSingleDataTemplate(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            加载单个数据模板
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.LoadDefaultDataTemplate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            加载默认数据单据模板
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存数据模板
            </summary>
            <param name="ctx"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.Update(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            更新数据模板
            </summary>
            <param name="ctx"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.UpdateTemplateName(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            修改数据模板名称
            </summary>
            <param name="ctx"></param>
            <param name="pkValue">主键</param>
            <param name="newName">新名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.SetDefaultDataTemplate(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            设置默认数据模板
            </summary>
            <param name="ctx"></param>
            <param name="pkValue"></param>
            <param name="info"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataTemplate.BillDataTemplateService.CheckName(Kingdee.BOS.Context,Kingdee.BOS.Core.Bill.DataTemplate.BillDataTemplate)">
            <summary>
            检查模板名称是否已经存在
            </summary>
            <param name="ctx"></param>
            <param name="billDataTemplate"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Deploy.DeployMetaImplement.ClearUserFormParameter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Enu_DevType,System.String,System.String)">
            <summary>
            元数据修改，清除用户布局方案
            </summary>
            <param name="metadata"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Deploy.DeployMetaImplement.CopyLayout(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            复制视图
            </summary>
            <param name="baseObjectId">扩展对象的父对象ID</param>
            <param name="extendObjectId">扩展对象ID</param>
            <param name="ISVName">开发商</param>
            <param name="password">密码</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DetectorLoggerWriter">
            <summary>
            检测日志
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.DetectorLoggerWriter.isInitialize">
            <summary>
            初始化状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.Error(System.String,System.Exception)">
            <summary>
            错误日志
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.Info(System.String)">
            <summary>
            一般日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.Warn(System.String)">
            <summary>
            警告信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetectorLoggerWriter.Debug(System.String)">
            <summary>
            Debug信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.DetectorLoggerWriter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EnvironmentDetect.EnvironmentDetectHelper">
            <summary>
            EnvironmentDetectHelper
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EnvironmentDetect.EnvironmentDetectHelper.ConvertDataBase(Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dataCenter"></param>
            <param name="isPsdDecode">是否数据库用户密码解密</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Globalization.Tax.TaxService.ConvertToTaxRule(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            将动态类型 转换成税务规则
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Globalization.Tax.TaxService.SetTaxRuleBusinessType(Kingdee.BOS.Core.Globalization.Tax.TaxRule,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取业务类型条件设置
            </summary>
            <param name="rule"></param>
            <param name="retBusinessType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Globalization.Tax.TaxService.SetTaxRuleProductType(Kingdee.BOS.Core.Globalization.Tax.TaxRule,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取产品类型条件设置
            </summary>
            <param name="rule"></param>
            <param name="retProductType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Globalization.Tax.TaxService.SetTaxRuleTransactionType(Kingdee.BOS.Core.Globalization.Tax.TaxRule,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取交易方条件设置
            </summary>
            <param name="rule"></param>
            <param name="retTransactionType"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InitImplementation.InitGuideService">
            <summary>
            初始化实施工具接口类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetGuides(Kingdee.BOS.Context)">
            <summary>
            获取所有初始化向导状态接口
            </summary>
            <param name="ctx">上下文</param>
            <returns>所有实施工具状态集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetGuideStatus(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取指定初始化向导状态接口
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="orgID">部门id</param>
            <returns>指定实施工具状态</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.SetGuideStepStatus(Kingdee.BOS.Context,System.String,System.String,System.String,System.Int32)">
            <summary>
            设置初始化向导步骤状态接口
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="stepId">步骤Id</param>
            <param name="status">步骤状态</param>
            <param name="orgID">部门id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetGuideSteps(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取初始化步骤状态接口
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="orgID">部门id</param>
            <returns>该单据对应步骤状态值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.SetGuideStatus(Kingdee.BOS.Context,System.String,System.String,System.Int32)">
            <summary>
            设置初始化向导状态接口
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="status">向导单据状态</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.UpdateBasicDataDataSituation(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            更新对应实施工具下的基础资料表的“数据情况”字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="orgID">部门id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.UpdateBasicData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.InitImplementation.InitGuideBasicData},System.String,System.Int32)">
            <summary>
            更新基础资料表的数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="formids">基础资料表单信息</param>
            <param name="guideFormId">实施工具单据id</param>
            <param name="orgID">组织id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.getCountForPrivateAndAllocationBasicData(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取私有和分配型基础资料的数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">基础资料formid</param>
            <param name="orgID">组织id</param>
            <returns>基础资料数目</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.UpdateBasicDataStatus(Kingdee.BOS.Context,System.Int32,System.String)">
            <summary>
            更新实施工具下的基础资料的状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="pkId">实施工具基础资料表主键</param>
            <param name="status">状态</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.IsFinishBasicDataStatus(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取实施工具下下基础资料维护表状态字段是否都为“完成”状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">向导单据Id</param>
            <param name="orgID">部门id</param>
            <returns>状态是否全部完成</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetPermissionItemId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料的PermissionItemId
            </summary>
            <param name="ctx">上下文</param>
            <param name="basicDataFormid">基础资料formid</param>
            <returns>第一个PermissionItemId</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetTotalPropCount(Kingdee.BOS.Context,System.String)">
            <summary>
            获取弹性域个数
            </summary>
            <param name="ctx">上下文</param>
            <param name="strFormId">基础资料单据ID</param>
            <returns>弹性域基础资料行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.InsertBigDataCollection(Kingdee.BOS.Context,System.String,System.Int32,System.String)">
            <summary>
            实施工具大数据收集表插入
            </summary>
            <param name="ctx">上下文</param>
            <param name="initName">实施工具名称</param>
            <param name="orgID">组织ID</param>
            <param name="orgName">组织名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InitImplementation.InitGuideService.GetGuideId(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取初始化向导id
            </summary>
            <param name="ctx">上下文</param>
            <param name="guideFormId">实施工具表单id</param>
            <param name="orgID">部门id</param>
            <returns>初始化向导id</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.IntegratedBillWriter">
            <summary>
            接口单据保存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.IntegratedBillWriter.CreateIntegratedBill">
            <summary>
            创建接口单据，如果存在先删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.K3BD.AdvertisementService">
            <summary>
            金蝶云线上广告服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.WriteDebugLog(System.String)">
            <summary>
            Debug日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.AcquireAdvertisement(Kingdee.BOS.Context)">
            <summary>
            获取最新广告
            </summary>
            <param name="ctx">上下文</param>
            <returns>广告数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.DealLastAdvertisement(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.K3BD.Advertisements.AdvData,System.String@)">
            <summary>
            处理没有新广告，从用户参数读取旧的广告的场景
            </summary>
            <param name="ctx">上下文</param>
            <param name="adv">广告数据</param>
            <param name="advUsers">已推送广告的用户列表</param>
            <returns>广告数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.CheckPushingUser(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.K3BD.Advertisements.AdvData,System.String@)">
            <summary>
            处理用户是否为推送对象的各种场景
            </summary>
            <param name="ctx">上下文</param>
            <param name="adv">广告数据</param>
            <param name="advUsers">已推送广告的用户列表</param>
            <returns>广告数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.GetProdInstCode(Kingdee.BOS.Context)">
            <summary>
            获取产品实例Id
            </summary>
            <param name="ctx">上下文</param>
            <returns>产品实例Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.LoadAdvertisement(System.String)">
            <summary>
            装在用户参数中的广告
            </summary>
            <param name="oldStrAdv">序列化的广告</param>
            <returns>广告数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.RecordPublish(System.String,System.String)">
            <summary>
            回写标记广告发布记录
            </summary>
            <param name="prod_inst_code">产品实例ID</param>
            <param name="adv">广告唯一标识 </param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.SaveAdvertisement(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.K3BD.Advertisements.AdvData)">
            <summary>
            保存广告到用户参数中
            </summary>
            <param name="ctx">上下文</param>
            <param name="adv">广告数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.GetAdvDataFromHttp(System.String)">
            <summary>
            从线上广告中心获取最新广告
            </summary>
            <param name="prod_inst_code">产品实例Id</param>
            <returns>广告数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.AdvertisementService.SaveAdverUsers(Kingdee.BOS.Context,System.String)">
            <summary>
            用户保存（更新）已推送广告的用户列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="advUsers">已推送广告的用户列表</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.K3BD.UserBehaviorService">
            <summary>
            用户体验计划设置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.SaveUserExperiencePlan(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            保存用户体验计划的设置
            </summary>
            <param name="ctx"></param>
            <param name="agree"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.IsAgreed(Kingdee.BOS.Context)">
            <summary>
            用户是否同意参与用户体验计划
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.InsertUserClick(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserSearchInfo)">
            <summary>
            插入用户搜索操作
            </summary>
            <param name="ctx">上下文</param>
            <param name="searchInfo">用户搜索信息</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.GetSearchMenuData(Kingdee.BOS.Context)">
            <summary>
            获取用户前几个搜索选项
            </summary>
            <param name="ctx">上下文</param>
            <returns>搜索选项信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.GetTopSearch(Kingdee.BOS.Context)">
            <summary>
            获取前几个搜索信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>搜搜信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.UserBehaviorService.DeleteSearch(Kingdee.BOS.Context)">
            <summary>
            删除搜索信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryWorkReport(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            工作小结报告
            </summary>
            <param name="ctx"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryWorkReport(Kingdee.BOS.Context)">
            <summary>
            当月工作小结报告
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryFormReport(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            单据使用报告
            </summary>
            <param name="ctx"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryFormReport(Kingdee.BOS.Context)">
            <summary>
            当月单据使用报告
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryBusinessProcessReport(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            我的业务工作流报告
            </summary>
            <param name="ctx"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryBusinessProcessReport(Kingdee.BOS.Context)">
            <summary>
            当月我的业务工作流报告
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryMyProcessReport(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            我的工作流报告
            </summary>
            <param name="ctx"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryMyProcessReport(Kingdee.BOS.Context)">
            <summary>
            当月我的工作流报告
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryMonthReport(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            查询用户月报数据
            </summary>
            <param name="ctx">Context</param>
            <param name="month">指定月</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryMonthReport(Kingdee.BOS.Context)">
            <summary>
            查询用户月报数据
            </summary>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryYearlyReport(Kingdee.BOS.Context)">
            <summary>
            查询用户年报数据
            </summary>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.WorkReportService.QueryUserOnlineDurations(Kingdee.BOS.Context)">
            <summary>
            查询用户当日在线时长
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.RecordClientType(Kingdee.BOS.Context,System.Int32)">
            <summary>
            将使用的客户端类型存入数据表
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.QueryFinRoleList(Kingdee.BOS.Context)">
            <summary>
            查询财务权限角色列表
            此处的财务权限以总账子系统权限为准
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.RecordFinUser(Kingdee.BOS.Context,System.Int32)">
            <summary>
            标记财务人员
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.RecordFinUserByLongId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            标记财务人员
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.QueryFinUserList(Kingdee.BOS.Context)">
            <summary>
            获取财务人员
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.DeleteFinUserList(Kingdee.BOS.Context)">
            <summary>
            清空记录表中财务人员
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.RecordUIPatterns(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.K3BD.UIPatterns)">
            <summary>
            将使用的界面模式存入数据表
            </summary>
            <param name="ctx"></param>
            <param name="p">界面模式</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.K3BD.BigDataCollectService.RecordOnlineActions(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.K3BD.OnlineActions)">
            <summary>
            将在线功能的使用情况写入数据库
            </summary>
            <param name="ctx"></param>
            <param name="action">使用的功能类型</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.KDConfigurationService">
            <summary>
            系统配置服务，用于读取从Common.Config系统配置迁移到系统参数后的参数值。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDConfigurationService.GetUploadWhiteList(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文环境，返回文件上传白名单。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <returns>返回文件上传白名单。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDConfigurationService.GetIsEnableBatchControlFlex(Kingdee.BOS.Context)">
            <summary>
            获取维度关联字段是否支持批量控制（块粘贴，批量填充）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDConfigurationService.GetIsEnableMapOnMobile(Kingdee.BOS.Context)">
            <summary>
            获取移动端是否启用地图功能
            </summary>
            <param name="ctx">登录上下文</param>
            <returns>移动端是否启用地图功能</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.CreateMenu(Kingdee.BOS.Context,System.Object)">
            <summary>
            给公共号添加菜单
            </summary>
            <param name="ctx"></param>
            <param name="acctId">公共号ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.CreateMenu(Kingdee.BOS.Context,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给公共号添加菜单
            </summary>
            <param name="ctx"></param>
            <param name="acctId">公共号ID</param>
            <param name="variables">动态变量</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.GetXTpubs(Kingdee.BOS.Context,System.Object)">
            <summary>
            获取所有公共号
            </summary>
            <param name="ctx"></param>
            <param name="mid">团队ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.CreatePub(Kingdee.BOS.Context,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            创建公共号 jjbear
            </summary>
            <param name="ctx"></param>
            <param name="pname">公共号账号</param>
            <param name="pkey">公共号秘钥</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.SetPubAdmin(Kingdee.BOS.Context,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            设置公共号发言人
            </summary>
            <param name="ctx"></param>
            <param name="mid">团队ID</param>
            <param name="pubid">公共号ID</param>
            <param name="pkey">公共号密钥</param>
            <param name="sayid">管理员openid</param>
            <param name="ssb">设置状态 1 设置 0 取消</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KDWeibo.KDWeiboMenuService.IsExistPubacc(Kingdee.BOS.Context,System.Object,System.Object)">
            <summary>
            通过团队ID 和公共号名称 判断是否存在公共号
            </summary>
            <param name="ctx"></param>
            <param name="mid">团队ID</param>
            <param name="pubName">公共号ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.SaveQingConfig(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存轻分析配置
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.SaveQingHostUrl(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            保存轻分析服务器地址
            </summary>
            <param name="ctx"></param>
            <param name="urlHttp"></param>
            <param name="urlHttps"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingConfig(Kingdee.BOS.Context)">
            <summary>
            获取轻分析配置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingHostUrl(Kingdee.BOS.Context)">
            <summary>
            获取轻分析服务器地址
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingHostUrlConvert(Kingdee.BOS.Context)">
            <summary>
            获取云环境下转换后的轻分析服务器地址
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetCloudHostUrl(Kingdee.BOS.Context)">
            <summary>
            获取金蝶云星空服务器地址，仅支持http/https
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingBoardByUserId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户有权限的轻分析Id列表信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userid">用户Id</param>
            <returns>轻分析Id列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetCloudUrlScheme">
            <summary>
            返回金蝶云星空的协议：http/https
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.IsPrivateIp(System.Int64)">
            <summary>
            是否为私有地址
            </summary>
            <param name="ipVal"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.ClearCache(Kingdee.BOS.Context)">
            <summary>
            模拟系统参数，删掉所有LCID下的缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetUserTokenMap(Kingdee.BOS.Context)">
            <summary>
            获取usertoken映射
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingMailUrls(Kingdee.BOS.Context,System.String)">
            <summary>
            生成邮件轻分析SSO自动登录链接
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingMailAppSecret(Kingdee.BOS.Context)">
            <summary>
            获取邮件审批登录授权密钥
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetQingDataUrl(Kingdee.BOS.Context)">
            <summary>
            数据交互用轻分析HostUrl
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetCloudDataUrl(Kingdee.BOS.Context)">
            <summary>
            数据交互用云星空HostUrl
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.GetCloudInternetUrl(Kingdee.BOS.Context)">
            <summary>
            云星空外网地址，取轻分析设置-星空服务器地址
            如果是微信端，则必须是域名
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.LightAnalysisService.QingBoardVerVaild(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            看板链接校验链接版本
            </summary>
            <param name="ctx"></param>
            <param name="ver"></param>
            <param name="boardid"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData">
            <summary>
            自动获取卡片缓存数据执行计划
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
             <summary>
            自动获取卡片缓存数据执行计划
             </summary>
             <param name="ctx">上下文</param>
             <param name="schedule">自动执行服务对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.CardCacheData(Kingdee.BOS.Context)">
            <summary>
            获取卡片缓存数据执行计划
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.DoCacheCardData(Kingdee.BOS.Context,System.Data.DataTable,System.DateTime)">
            <summary>
            获取卡片缓存数据执行计划具体实现
            </summary>
            <param name="ctx">上下文</param>
            <param name="dt">用户列表</param>
            <param name="startTime">计划方案开始执行时间</param>
            <returns>是否结束本次计划</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.DoExecuteCacheData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.UpdateItemInfo},System.Boolean)">
            <summary>
            执行缓存数据插入、更新
            </summary>
            <param name="ctx">上下文</param>
            <param name="updateDatas">待执行的数据对象</param>
            <param name="isMustExecute">是否无条件执行</param>
            <returns>返回待执行数据对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.getExecuteCacheData(Kingdee.BOS.Context,System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo}},System.Collections.Generic.List{Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.UpdateItemInfo})">
            <summary>
            获取待执行缓存数据对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="userCardList">用户集合下对应的卡片集合</param>
            <param name="updateDatas">已打包待执行缓存数据对象</param>
            <returns>返回待执行数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.GetInsertItem(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo,System.String,Kingdee.BOS.Contracts.IMainConsoleServer)">
            <summary>
            获取插入缓存数据的实体对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardItem">卡片基础信息对象</param>
            <param name="valueObj">缓存数据具体内容</param>
            <param name="mainConsoleServer">主控台取数服务</param>
            <returns>返回tuple对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.GetUpdateItem(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo,System.String,Kingdee.BOS.Contracts.IMainConsoleServer)">
            <summary>
            获取更新缓存数据的实体对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardItem">卡片基础信息对象</param>
            <param name="valueObj">缓存数据具体内容</param>
            <param name="mainConsoleServer">主控台取数服务</param>
            <returns>返回Tuple对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.GetCardValueObject(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo,System.Boolean@)">
            <summary>
            获取卡片缓存数据具体内容
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardItem">卡片基本信息对象</param>
            <param name="isNeedCache">是否需要缓存</param>
            <returns>返回数据内容</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.GetListRowCount(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取目标列表的数据量
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">单据id</param>
            <param name="schemeId">过滤方案id</param>
            <returns>返回数据行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.getQuickViewSchema(Kingdee.BOS.Context,System.String)">
            <summary>
            获取有权限的快速查看方案
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardid">卡片di</param>
            <returns>返回方案列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.AutoCardCacheData.ClearHisstoryData(Kingdee.BOS.Context)">
            <summary>
            清除一天前的历史数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.IUserSystemMenuSettingRepository">
            <summary>
            用户系统菜单设置存储库接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.IUserSystemMenuSettingRepository.GetUserSettingMenuStatus(System.Int64)">
            <summary>
            获取指定用户菜单设置状态列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>菜单设置状态列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.IUserSystemMenuSettingRepository.DeleteUserSettingMenuStatus(System.Int64)">
            <summary>
            删除用户菜单ID设置状态
            </summary>
            <param name="userId">用户ID</param>
            <returns>删除成功返回Successful;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.IUserSystemMenuSettingRepository.Delete(System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            删除
            </summary>
            <param name="userId">用户ID</param>
            <param name="lstMenuSettingStatus">菜单状态设置列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.IUserSystemMenuSettingRepository.Add(System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            新增
            </summary>
            <param name="userId">用户ID</param>
            <param name="lstMenuSettingStatus">菜单设置状态列表</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.LayoutCardDataCacheService">
            <summary>
            H5新版主页卡片数据缓存计划服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.LayoutCardDataCacheService.ExcUpdateLoadCacheData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            开始执行更新数据
            </summary>
            <param name="dydata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.LayoutCardDataCacheService.GetOnlineUsersById(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取指定用户ID在线列表
            包括用户所在的所有客户端信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>返回用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.LayoutCardDataCacheService.UpdateDataWithCondition(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Objects.MainConsole.ILayoutCardDataCache)">
            <summary>
            更新加载格式数据
            </summary>
            <param name="fid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.LayoutCardDataCacheService.VaildH5CardLayoutDataCache(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Objects.MainConsole.ILayoutCardDataCache)">
            <summary>
            校验H5卡片主页缓存是否有效缓存数据
            </summary>
            <param name="ctx"></param>
            <param name="dy"></param>
            <param name="iCache"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository">
            <summary>
            用户系统菜单设置存储库
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            constructor
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.GetUserSettingMenuStatus(System.Int64)">
            <summary>
            获取指定用户菜单设置状态列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>菜单设置状态列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.DeleteUserSettingMenuStatus(System.Int64)">
            <summary>
            删除用户菜单ID设置状态
            </summary>
            <param name="userId">用户ID</param>
            <returns>删除成功返回Successful;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.Delete(System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            删除
            </summary>
            <param name="userId">用户ID</param>
            <param name="lstMenuSettingStatus">菜单状态设置列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.Add(System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            新增
            </summary>
            <param name="userId">用户ID</param>
            <param name="lstMenuSettingStatus">菜单设置状态列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingRepository.BuildInsertSqlObjects(System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="lstMenuSettingStatus"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService">
            <summary>
            用户菜单设置服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.GetUserSettingMenuStatusByType(Kingdee.BOS.Context,System.Int64,Kingdee.BOS.BusinessEntity.MainConsole.MenuLevelType)">
            <summary>
            获取用户菜单指定菜单类型设置状态列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="menuLevelType">用户菜单类型：1-topClass;2-Systemm(子系统)；3-一级菜单；4-二级菜单</param>
            <returns>无效菜单ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.GetUserSettingMenuStatusByTypes(Kingdee.BOS.Context,System.Int64,Kingdee.BOS.BusinessEntity.MainConsole.MenuLevelType[])">
            <summary>
            获取用户菜单指定菜单类型设置状态列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="menuLevelTypes">用户菜单类型数组</param>
            <returns>无效菜单ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.GetUserSettingMenuStatus(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户菜单ID设置状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>无效菜单ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.DeleteUserSettingMenuStatus(Kingdee.BOS.Context,System.Int64)">
            <summary>
            删除用户菜单ID设置状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>删除成功返回Successful;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.SaveUserMenuSettingStatus(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.MenuSettingStatusInfo})">
            <summary>
            保存用户菜单设置状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="lstMenuSettingStatus">效菜单ID状态列表</param>
            <returns>保存成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.GetUserInvalidMenuStatus(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户所有无效菜单状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>无效菜单ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.UserSystemMenuSettingService.IsEnabledUserMenuSetting(Kingdee.BOS.Context)">
            <summary>
            是否启用用户自定义菜单设置
            </summary>
            <param name="ctx">上下文</param>
            <returns>保存成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.RebuildUrlHelper.RebuildUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.Boolean)">
            <summary>
            重建url
            </summary>
            <param name="ctx"></param>
            <param name="cloudServiceHost"></param>
            <param name="appId"></param>
            <param name="url"></param>
            <param name="isWebPort"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.RebuildUrlHelper.GetPushUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取推送Url
            </summary>
            <param name="ctx"></param>
            <param name="cloudServiceHost"></param>
            <param name="appId"></param>
            <param name="url"></param>
            <param name="isWebPort"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService">
            <summary>
            轻应用标准集成（第三方平台）消息重发服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService._userParaType">
            <summary>
            当前用户参数中消息重发的启动标识
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.GetEnableResendThirdMsg(Kingdee.BOS.Context)">
            <summary>
            获取当前是否允许执行重发第三方消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.GetNeedRepeatLogInfos(Kingdee.BOS.Context)">
            <summary>
            通过ID获取消息日志对象
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.ResendChangeTodoMessageByTimeLimit(Kingdee.BOS.Context,System.Int32)">
            <summary>
            根据时间范围进行重发待办转已办消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="limit">时间范围，默认7天</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.UpdateTaskMessageStatusBySelected(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo})">
            <summary>
            根据待办消息日志集执行待办转已办
            </summary>
            <param name="ctx">上下文</param>
            <param name="logInfos">待办消息日志集</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.ResendSendMsgConfig.isStarting">
            <summary>
            是否已经执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgResendService.ResendSendMsgConfig.dt">
            <summary>
            控制时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.FeiShuClientPage">
            <summary>
            飞书消息在侧边栏打开网页
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.DingTalkClientPage">
            <summary>
            钉钉消息在侧边栏打开网页
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.UpdateTaskMessageStatusWithThirdSysUserInfo(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo},System.String,Kingdee.BOS.JSON.JSONObject,System.String)">
            <summary>
            通过ThirdSysUserInfo直接调用某个待办转已办
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用ID</param>
            <param name="toUsers">第三方系统用户信息</param>
            <param name="bizId">业务ID</param>
            <param name="option">额外参数</param>
            <param name="logAppId">记录到日志中的消息来源</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.Get3rdUserFromLocalUserIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取第三方用户映射信息
            </summary>
            <param name="ctx"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SendRobotMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Robot.RobotMessageInput)">
            <summary>
            发送机器人消息
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SendDingTalkRobotMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Robot.RobotMessageInput)">
            <summary>
            发送钉钉机器人消息
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SendFeiShuRobotMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Robot.RobotMessageInput)">
            <summary>
            发送飞书机器人消息
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SendYunZJRobotMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Robot.RobotMessageInput)">
            <summary>
            发送云之家机器人消息
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SendWeiXinRobotMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Robot.RobotMessageInput)">
            <summary>
            发送企业微信机器人消息
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.RobotMessageRebuildUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            重建URL
            </summary>
            <param name="ctx"></param>
            <param name="appId"></param>
            <param name="suiteId"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.GetMobileManagerUrlFromPlat(System.String,Kingdee.BOS.BusinessEntity.ThirdSystem.MobileManagerUrl)">
            <summary>
            根据不同平台获取MsgPortUrl
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.MappingLogInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppBaseMessage,System.String)">
            <summary>
            匹配消息日志对象
            </summary>
            <param name="msg"></param>
            <param name="isSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.MappingLogInfoEntry(Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppBaseMessage,Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppMessageResult,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo})">
            <summary>
            匹配消息日志分录对象
            </summary>
            <param name="msg"></param>
            <param name="result"></param>
            <param name="toUsers"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.MappingLogInfoEntryReceivers(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo},Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppMessageResult,System.Boolean)">
            <summary>
            匹配消息日志分录接收人集
            </summary>
            <param name="toUsers">接收用户集</param>
            <param name="result">结果</param>
            <param name="isUpdateTask">消息类型是否是 待办转已办</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SetLogInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo)">
            <summary>
            保存消息日志
            </summary>
            <param name="ctx"></param>
            <param name="logInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.InsertLogInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo)">
            <summary>
            将消息日志对象添加到表中
            </summary>
            <param name="ctx"></param>
            <param name="logInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.InsertEntry(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo,System.Int64)">
            <summary>
            将消息日志分录及消息日志分录接收人添加到表中
            </summary>
            <param name="ctx"></param>
            <param name="logInfo"></param>
            <param name="logFId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.GetLogInfosByIds(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            通过ID获取消息日志对象
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.MappingChangeTodoRealReceiversLogInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo})">
            <summary>
            针对待办转已办，为消息日志对象集中的所有分录匹配真正的接收人，以取代默认的@all
            </summary>
            <param name="ctx"></param>
            <param name="logInfos">接收人集（必须为待办转已办类型）</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.RepeatSendMessage(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            重新发送消息（在第三方平台消息日志模块下按下 手动执行 按钮）
            </summary>
            <param name="ctx">上下文</param>
            <param name="logInfo">消息日志信息</param>
            <param name="toUsers">接收人对应的用户信息（第三方平台）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.SetResendLog(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo,System.Collections.Generic.List{Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo})">
            <summary>
            保存重发记录
            </summary>
            <param name="ctx">上下文</param>
            <param name="logInfo">原日志</param>
            <param name="resendLog">重发结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.MappingRepeatSendMsgReceivers(Kingdee.BOS.BusinessEntity.ThirdSystem.MessageLog.LogInfo)">
            <summary>
            装配重发消息的接收人集
            </summary>
            <param name="logInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo">
            <summary>
            发送结果信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo.#ctor(Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppBaseMessage,Kingdee.BOS.BusinessEntity.ThirdSystem.Message.AppMessageResult,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo})">
            <summary>
            实例化发送结果信息
            </summary>
            <param name="message">消息体基类</param>
            <param name="result">消息结果</param>
            <param name="toUsers">接收人列表</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo.Message">
            <summary>
            消息体基类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo.Result">
            <summary>
            消息结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.ThirdPlatformMsgService.AppMessageResultInfo.ToUsers">
            <summary>
            接收人列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.WFExceptionHelper.GetWfExceptionList(Kingdee.BOS.Context)">
            <summary>
            获取允许自动补偿的业务审批异常消息列表
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessage(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送文本信息
            </summary>
            <param name="ctx"></param>
            <param name="message"></param>
            <param name="users"></param>
            <param name="corpId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessage(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            发送文本信息
            </summary>
            <param name="ctx"></param>
            <param name="message"></param>
            <param name="users"></param>
            <param name="corpIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessageNews(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送企业微信第三方应用消息[发送图文消息]
            </summary>
            <param name="ctx"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="url"></param>
            <param name="picurl"></param>
            <param name="users"></param>
            <param name="corpId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessageTextcard(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送企业微信第三方应用消息[文本卡片消息]
            </summary>
            <param name="ctx"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="url"></param>
            <param name="btntxt"></param>
            <param name="users"></param>
            <param name="corpId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessageNews(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            发送企业微信第三方应用消息[发送图文消息]
            </summary>
            <param name="ctx"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="url"></param>
            <param name="picurl"></param>
            <param name="users"></param>
            <param name="corpIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendMessageTestCard(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            发送企业微信第三方应用消息[文本卡片消息]
            </summary>
            <param name="ctx"></param>
            <param name="title"></param>
            <param name="message"></param>
            <param name="url"></param>
            <param name="btntxt"></param>
            <param name="users"></param>
            <param name="corpIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.SendWx3rdMessage(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送消息信息
            </summary>
            <param name="ctx"></param>
            <param name="appId">云之家轻应用ID</param>
            <param name="corpId">企业微信ID</param>
            <param name="toUsers">微信用户列表</param>
            <param name="msgType">消息类型</param>
            <param name="content">消息的具体内串</param>
            <param name="bIsDebugger">是否调试</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.GetWx3rdCorpIdsFromUsers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取企业微信第三方应用的企业ID
            </summary>
            <param name="ctx"></param>
            <param name="users"></param>
            <param name="corpId"></param> 
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.Wx3rdService.GetWx3rdUserFromUsers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取企业微信第三方应用用户对应的openid信息
            </summary>
            <param name="ctx"></param>
            <param name="users"></param>
            <param name="corpId"></param> 
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTongService">
            <summary>
            实现讯通消息接口
            </summary>
            <summary>
            讯通消息接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            发送单图文信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage,System.String)">
            <summary>
            发送单图文信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <param name="appId">appId</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendSimpleTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送轻应用纯文本不带链接信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送轻应用纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage,System.String)">
            <summary>
            发送轻应用纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <param name="appId">发送的轻应用的id</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage)">
            <summary>
            发送轻应用单文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息内容</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsySendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage,System.String)">
            <summary>
            发送轻应用单文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <param name="appId">发送的轻应用的id</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsyPushToDoMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            发送轻应用纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息内容</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsyChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            修改消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <returns>消息修改结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.AnsyChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage,System.String)">
            <summary>
            修改消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <param name="appId">轻应用id</param>
            <returns>消息修改结果</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTongService.pushPubUsers">
            <summary>
            推送公共号消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTongService.pushAllUsers">
            <summary>
            推送所有用户
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTongService._xunTongConfig">
            <summary>
            云之家配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTongService._sendMsgToNotifyCenter">
            <summary>
            消息发送到云之家通知中心（旧的待办通知）入口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage,System.Collections.Generic.List{System.String})">
            <summary>
            发送消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <param name="users">用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <param name="users">用户信息</param>
            <param name="pubAcctCode">编码</param>
            <param name="spubAcctKey">密钥</param>
            <param name="isOpenUser">是否openidk</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendPlainTextMessage(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <param name="users">用户信息</param>
            <param name="pubAcctCode">编码</param>
            <param name="url">链接地址</param>
            <param name="pubAcctKey">密钥</param>
            <param name="isOpenUser">是否open用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendSingleMessage(Kingdee.BOS.Context,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送单文本消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="title">消息的标题</param>
            <param name="message">消息正文</param>
            <param name="datetime">发送时间</param>
            <param name="users">接受消息的用户Id列表</param>
            <param name="pubAcctCode">发送消息的公共号</param>
            <param name="url">在讯通中点击消息打开的链接地址，可以为空</param>
            <param name="zipHtml">在讯通中点击消息打开的html页面内容（格式：zip压缩后Base64编码），可以为空</param>
            <param name="pubAcctKey">公共号密钥</param>
            <param name="isOpenUser">是否open用户</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage)">
            <summary>
            发送单文本消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">文本消息</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage,System.String)">
            <summary>
            发送轻应用纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <param name="appId">发送的轻应用的id</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage,System.String)">
            <summary>
            发送轻应用纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <param name="appId">发送的轻应用的id</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送纯文本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">文本信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.ChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            修改待办消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.ChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage,System.String)">
            <summary>
            修改待办消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息</param>
            <param name="appId">轻应用id</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.ChangeAssignProcessToCompleted(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心标记流程为已完成
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.DeleteProcess(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心删除流程
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.ResetProcess(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心标记流程为待发起
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            发送单图文信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage,System.String)">
            <summary>
            发送单图文信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <param name="appId">appId</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.GetXTUserFromUsers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="users">用户信息</param>
            <returns>用户openid</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.XuntongRepeatSendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            重发失败消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.GetXuntongErrorMsg(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTLogMsgParam)">
            <summary>
            获取云之家错误消息信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="logType">消息类型</param>
            <returns>消息参数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.GetErrorLogList(Kingdee.BOS.Context)">
            <summary>
            获取所有的需要重新发送的消息列表
            </summary>
            <param name="ctx">上下文</param>
            <returns>消息列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SendLightAppMessag(Kingdee.BOS.Context,Kingdee.BOS.Msg.LightAppMessage)">
            <summary>
            发送轻应用消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.SetAccountCodeandKey(Kingdee.BOS.Msg.AbstractXTMessage,Kingdee.BOS.Msg.XTSendResult,System.String)">
            <summary>
            判断是否需要重新配置公共号编码密钥
            </summary>
            <param name="msg">消息信息</param>
            <param name="result">返回结果</param>
            <param name="appId">appId</param>
            <returns>是否配置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.GetReceiveUsers(Kingdee.BOS.Context,Kingdee.BOS.Msg.AbstractXTMessage)">
            <summary>
            获取接收人信息
            1.如果不是openid修改为openid
            2.如果发送通用公共号消息，获取接收人信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.GetReceiveUsers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            通过公共号编码获取配置的发送消息用户openid
            </summary>
            <param name="ctx">上下文</param>
            <param name="users">用户</param>
            <param name="pubAcctCode">公共号编码</param>
            <param name="isThrowEx">是否抛异常</param>
            <returns>用户openid</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.RepeateSendMsg(Kingdee.BOS.Context)">
            <summary>
            重发消息
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.CheckMsgStatus(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            检查云之家消息当前状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">云之家apptoken</param>
            <param name="sourcetype">云之家appid</param>
            <param name="sourceitemid">消息msgid</param>
            <param name="openid">云之家用户openid</param>
            <returns>消息状态</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTongService.InitXunTongConfig(Kingdee.BOS.Context)">
            <summary>
            获取讯通配置参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService">
            <summary>
            异步发送云之家消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._xunTongSettingObject">
            <summary>
            讯通绑定配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._xunTongConfig">
            <summary>
            云之家配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._isPrivate">
            <summary>
            是否私有云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._isNotRebuildTransferUrl">
            <summary>
            是否云之家消息链接默认走转发（此值默认为false，即默认走转发）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._sendMsgToNotifyCenter">
            <summary>
            消息发送到云之家通知中心（旧的待办通知）入口（仅支持星空云消息/业务监控/业务审批待办消息）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._cloudServiceHost">
            <summary>
            系统公网地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService._yunZhiJiaUrl">
            <summary>
            云之家地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.yzjNotifyChanelAppIdArr">
            <summary>
            发送到云之家通知中心的轻应用ID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.#ctor(Kingdee.BOS.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService"/> class.
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsySendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            异步发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsyPushToDoMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            异步发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <returns>发送消息结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.UnifiedProcessPushToDoMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            统一流程中心发送待办
            </summary>
            <param name="ctx"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsyChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            异步修改云之家消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息信息</param>
            <returns>发送消息结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.UnifiedProcessChangeTodoStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            统一流程中心更新待办
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsySendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage)">
            <summary>
            发送单文本消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">文本消息</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsySendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送纯正文消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">正文消息</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.AnsySendSimpleTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送轻应用纯文本不带链接信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">正文消息</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.AnsyMessageService.InitXunTongConfig">
            <summary>
            获取讯通配置参数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.isResendYunZhiJiaMsg">
            <summary>
            是否重发云之家消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.GetResendYunZhiJiaMsgEnable(Kingdee.BOS.Context)">
            <summary>
            获取云之家消息重发是否启用
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.isSendLightAppMsg">
            <summary>
            是否发送标准集成消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.isResendLightAppMsg">
            <summary>
            是否重发标准集成消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.SetThirdPlatformMsgEnable(Kingdee.BOS.Context)">
            <summary>
            获取标准集成消息重发是否启用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLog.CheckMsgInfo(Kingdee.BOS.Context)">
            <summary>
            查询消息是否发送成功并重发
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.XunTong.RepeatSendMsgConfig.isStarting">
            <summary>
            是否已经执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.XunTong.RepeatSendMsgConfig.dt">
            <summary>
            控制时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService">
            <summary>
            云之家异常消息重发服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.UnifiedDataType">
            <summary>
            云之家统一流程接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.#ctor(Kingdee.BOS.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService"/> class 云之家异常消息重发服务
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.GetErrorCount(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取异常消息信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msgdbid">消息数据库id</param>
            <returns>消息个数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.GetErrorLogList(Kingdee.BOS.Context)">
            <summary>
            获取所有的需要重新发送的消息
            </summary>
            <param name="ctx">上下文</param>
            <returns>消息列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.SetErrorInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSendResult,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            保存错误信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="result">返回值</param>
            <param name="logmsg">参数值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.IsMobileDeptLightAppMsg(System.String)">
            <summary>
            来源于移动部门的轻应用消息-不用补发
            </summary>
            <param name="msgSource"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.ErrorLogIdExists(Kingdee.BOS.Context,System.Int32)">
            <summary>
            判断云之家消息异常日志的fid是否存在
            </summary>
            <param name="ctx"></param>
            <param name="fid">异常日志id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.SetYunZhiJiaUnifiedErrorInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            云之家统一流程消息写入到错入日志里
            </summary>
            <param name="ctx"></param>
            <param name="logmsg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.XuntongRepeatSendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
            <returns>消息结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.HadleUnifiedData(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            统一流程中心数据补发
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.HandleSpecialUnifiedErrorInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            处理特殊的报错
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.GetXuntongErrorMsg(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTLogMsgParam)">
            <summary>
            获取云之家错误消息信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="logType">消息类型</param>
            <returns>消息参数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongErrorLogService.DeserializeMsgBody(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTLogMessageInfo)">
            <summary>
            发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
            <returns>消息结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XuntongLogHelper.WritXTDebugLog(System.Object)">
            <summary>
            开启 IsStartWriteDebugLog 为true 记录日志
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XuntongLogHelper.StringtoEmpty(System.Object,System.Int32)">
             <summary>
            设置字符串长度
             </summary>
             <param name="date">数据源</param>
             <param name="strlength">截取长度</param>
             <returns>返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XuntongLogHelper.SaveErrorLogInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.AbstractXTMessage,Kingdee.BOS.Msg.XTSendResult,Kingdee.BOS.Msg.XTMsgType)">
            <summary>
            保存用户报错信息，方便重发
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
            <param name="result">返回结果</param>
            <param name="msgType">消息类型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XuntongLogHelper.SaveXunTongLogInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.AbstractXTMessage,Kingdee.BOS.Msg.XTSendResult,Kingdee.BOS.Msg.XTMsgType)">
            <summary>
            记录发送云之家消息日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
            <param name="result">返回结果</param>
            <param name="msgType">消息类型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XuntongLogHelper.SaveYunzhiJiaReceivers(System.Int32,Kingdee.BOS.Msg.AbstractXTMessage,Kingdee.BOS.Context,System.Boolean)">
            <summary>
            保存云之家消息接收人
            </summary>
            <param name="fid">云之家消息id</param>
            <param name="msg">消息内容</param>
            <param name="ctx">上下文</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService">
            <summary>
            云之家消息日志类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.#ctor(Kingdee.BOS.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService"/> class 构造函数
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.SetYunZhiJiaLogInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSendResult,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            保存云之家信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="result">返回值</param>
            <param name="logmsg">参数值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.SetYunZhiJiaUnifiedLogInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            统一流程消息写入到云之家消息日志里
            </summary>
            <param name="ctx"></param>
            <param name="logmsg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.GetLogList(Kingdee.BOS.Context)">
            <summary>
            获取日志列表信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>日志列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.UpdateLogStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            修改消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.XuntongRepeatSendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.CheckUserInfo(Kingdee.BOS.JSON.JSONArray)">
            <summary>
            检查用户类型是否发送全部
            </summary>
            <param name="users">用户信息</param>
            <returns>是否校验通过</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongLogService.GetMsgState(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            获取消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="appid">轻应用id</param>
            <param name="msgId">消息id</param>
            <param name="openId">用户openid</param>
            <returns>消息状态</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper">
            <summary>
            讯通消息帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.GetUrlToAddDBId(Kingdee.BOS.Context,System.String,System.String@)">
            <summary>
            将url里面添加dbid
            </summary>
            <param name="ctx">上下文</param>
            <param name="url">url地址</param>
            <param name="msg">消息信息</param>
            <returns>新url地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.SendMsgByNewWay(Kingdee.BOS.Context,Kingdee.BOS.Msg.AbstractXTMessage,Kingdee.BOS.Msg.XTSendResult,System.String)">
            <summary>
            是否使用新接口发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">云之家消息</param>
            <param name="result">消息结果</param>
            <param name="appId">appid</param>
            <returns>是否使用新接口</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.InitSourceYunZhijiaReceiverInfo(Kingdee.BOS.Context,Kingdee.BOS.Msg.AbstractXTMessage)">
             <summary>
            初始化云之家消息接受者 
             </summary>
             <param name="ctx"></param>
             <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.GetOpenIdsAndUserIds(Kingdee.BOS.Msg.AbstractXTMessage,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            获取用户信息和openid
            </summary>
            <param name="msg"></param>
            <param name="userIds"></param>
            <param name="openIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.UserIdsChangeReceiverInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Msg.XTReceiverInfo},System.Collections.Generic.List{System.Int64},Kingdee.BOS.Contracts.IUserXunTongService)">
            <summary>
            用户id转换成接收人信息
            </summary>
            <param name="ctx"></param>
            <param name="receivers"></param>
            <param name="userIds"></param>
            <param name="xunTongUserService"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.OpenIdsChangeReceiverInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Msg.XTReceiverInfo},System.Collections.Generic.List{System.String},Kingdee.BOS.Contracts.IUserXunTongService)">
            <summary>
            云之家openid转换接人信息
            </summary>
            <param name="ctx"></param>
            <param name="receivers"></param>
            <param name="openIds"></param>
            <param name="xunTongUserService"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.GetUrlToAddDBIdAndRebuildUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            云之家重建转发Url
            </summary>
            <param name="ctx"></param>
            <param name="url"></param>
            <param name="cloudServiceHost"></param>
            <param name="appId"></param>
            <param name="isPrivateCloud"></param>
            <param name="isNotRebuildTransferUrl"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongMsgHelper.GetTransferUrl(Kingdee.BOS.Context,System.String,System.String,System.Boolean,System.Boolean,System.String@,System.Boolean)">
            <summary>
            适配转发地址
            </summary>
            <param name="ctx"></param>
            <param name="cloudServiceHost"></param>
            <param name="appId"></param>
            <param name="isPrivateCloud"></param>
            <param name="isNotRebuildTransferUrl"></param>
            <param name="resultUrl"></param>
            <param name="isWebPort"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType">
            <summary>
            元数据变更类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetMetaChangeType(System.Object,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            获取一个类型
            </summary>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetChangeList(Kingdee.BOS.Core.Metadata.AbstractElement,System.String,System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            元数据变更列表
            </summary>
            <param name="element"></param>
            <param name="curModel"></param>
            <param name="baseModel"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.SerializeData(System.Object)">
            <summary>
            序列化数据为xml
            </summary>
            <param name="complexData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetBaseModel(System.Object,System.Collections.IList,System.String@)">
            <summary>
            获取结合模型里面基对象模型
            </summary>
            <param name="curModel"></param>
            <param name="preModelList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetChange(Kingdee.BOS.Core.Metadata.AbstractElement,Kingdee.BOS.Core.Metadata.ElementMetadata.ElementProperty,System.Object,System.Object,System.Boolean)">
            <summary>
            获取简单的变化
            </summary>
            <param name="element"></param>
            <param name="elementProp"></param>
            <param name="curObj"></param>
            <param name="preObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetName(Kingdee.BOS.Core.Metadata.AbstractElement)">
            <summary>
            获取元素或者外观的名称
            </summary>
            <param name="curElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetElementName(Kingdee.BOS.Core.Metadata.Element)">
            <summary>
            获取元素的名称
            </summary>
            <param name="curElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.GetAppearanceName(Kingdee.BOS.Core.Metadata.Appearance)">
            <summary>
            获取外观的标题
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.IsEqual(System.Object,System.Object)">
            <summary>
            两个简单对象是否相等
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.EntityChangeModel">
            <summary>
            各个实体变化的模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.EntityChangeModel.Element">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.EntityChangeModel.ParentId">
            <summary>
            父节点ID，可能是元素id或者实体服务规则id，多级使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.EntityChangeModel.Property">
            <summary>
            属性key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaChange.DefaultMetaDataChangeType.EntityChangeModel.PropertyName">
            <summary>
            当前属性名（存在多级，需要拼属性名）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaChange.EntityRuleChangeType.EntityRuleNameDictionary">
            <summary>
            设置实体服务规则属性字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.EntityRuleChangeType.GetPropertyName(System.String,System.String,System.Object)">
            <summary>
            获取属性名（多语言）
            </summary>
            <param name="propertyKey"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaChange.FormBusinessServiceChangeType.ServicesNameDictionary">
            <summary>
            设置实体服务规则属性字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.FormBusinessServiceChangeType.GetPropertyName(System.String,System.String,System.Object)">
            <summary>
            获取属性名（多语言）
            </summary>
            <param name="propertyKey"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaChangeHelper.GetMetaChangeType(System.Object)">
            <summary>
            获取变化类型
            </summary>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.IgnoresElementProperties">
            <summary>
            忽略元数据属性
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.IgnoreAppearanceProperties">
            <summary>
            忽略外观属性列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetBaseMetaElements(Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Metadata.Element})">
            <summary>
            获取基对象里面，子对象修改部分
            </summary>
            <param name="baseMetadata"></param>
            <param name="metaElements"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetChangeList(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Metadata.Element},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Metadata.Element},Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel,System.Boolean)">
            <summary>
            获取BusinessInfo的变更详情
            </summary>
            <param name="curDictionary"></param>
            <param name="baseDictionary"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetElementChangeList(Kingdee.BOS.Core.Metadata.Element,Kingdee.BOS.Core.Metadata.Element,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel,System.Boolean)">
            <summary>
            获取元素的冲突列表
            </summary>
            <param name="curElement"></param>
            <param name="baseElement"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetComplexChangeList(System.Object,System.Object,Kingdee.BOS.Core.Metadata.ElementMetadata.ElementProperty,Kingdee.BOS.Core.Metadata.Element,System.Boolean)">
            <summary>
            获取复杂属性
            </summary>
            <param name="curObj"></param>
            <param name="baseObj"></param>
            <param name="elelProperty"></param>
            <param name="element"></param>
            <param name="isAllChange"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.AnalysisConflictList(System.Collections.Generic.List{Kingdee.BOS.Core.Objects.Metadata.MetaChangeModel})">
            <summary>
            分析所有的变化返回结果
            </summary>
            <param name="allChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.IsMetaChangeModelEqual(Kingdee.BOS.Core.Objects.Metadata.ElementChangeModel,Kingdee.BOS.Core.Objects.Metadata.ElementChangeModel)">
            <summary>
            变化对象是否相等
            </summary>
            <param name="baseObj"></param>
            <param name="curObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.SaveAnalysisReport(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Objects.Metadata.MetaChangeModel},System.String)">
            <summary>
            保存分析报告
            </summary>
            <param name="ctx"></param>
            <param name="changModelList"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.SaveMetaConflictReport(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Objects.Metadata.MetaChangeModel},System.String)">
            <summary>
            保存元数据报告
            </summary>
            <param name="ctx"></param>
            <param name="changModelList"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetComplexChangeList(System.Object,System.Object,Kingdee.BOS.Core.Metadata.ElementMetadata.ElementProperty,Kingdee.BOS.Core.Metadata.Appearance,System.Boolean)">
            <summary>
            获取外观复杂的变化集合
            </summary>
            <param name="curObj"></param>
            <param name="baseObj"></param>
            <param name="elelProperty"></param>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetAppearances(Kingdee.BOS.Core.Metadata.FormMetadata,System.Boolean)">
            <summary>
            获取外观字段
            </summary>
            <param name="formMetadata"></param>
            <param name="includeInherit"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.MetaDataChangeAnalysis.GetBaseAppearances(Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Metadata.Appearance})">
            <summary>
            获取基对象里面，子对象修改部分
            </summary>
            <param name="formMetadata"></param>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaChange.PlugInChangeType.PluginNameDictionary">
            <summary>
            设置实体服务规则属性字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaChange.PlugInChangeType.GetPropertyName(System.String,System.String,System.Object)">
            <summary>
            获取属性名（多语言）
            </summary>
            <param name="propertyKey"></param>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.NoteTemplateMetaDataServicePlugIn.BeforeSave(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            保存前事件
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.UserMetaDataServicePlugIn">
            <summary>
            用户元数据插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.UserMetaDataServicePlugIn.ChangeUserLicGroup(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.AfterMetaReadArgs)">
            <summary>
            更新用户许可分组
            </summary>
            <param name="e">元数据参数</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Meta.MetadataLogParam">
            <summary>
            元数据修改日志参数。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.ObjectId">
            <summary>
            业务对象标识。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.MetadataType">
            <summary>
            元数据类型，1表单元数据、2多语言元数据、3表单视图、4套打模板、5单据转换规则、6反写规则。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.SourceXml">
            <summary>
            修改前主元数据XML。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.VersionXml">
            <summary>
            修改后主元数据XML。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.FullVersionXml">
            <summary>
            修改后完整主元数据XML。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.SourceLangXmls">
            <summary>
            修改前多语言元数据集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.VersionLangXmls">
            <summary>
            修改后多语言元数据集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.Remark">
            <summary>
            备注。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Meta.MetadataLogParam.EditType">
            <summary>
            修改方式：1为设计器修改，2为增量XML修改，3为元数据引入，4为执行部署包，5为同步应用，6为同步业务对象，7为同步未加载，8为运行时修改。
            详细可查看“元数据日志修改方式”枚举类型。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.PrepareQueryBuilderByDataRule(Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{System.String})">
            <summary>
            准备各权限项的查看权限数据范围过滤条件
            </summary>
            <param name="param"></param>
            <param name="formIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.GetDataRuleFilterString(Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.String,System.Text.StringBuilder)">
            <summary>
            获取单个权限项的查看权限数据范围的过滤条件
            </summary>
            <param name="param"></param>
            <param name="formId"></param>
            <param name="filterBuiledr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.CreateTemporaryTableAndInsertData(System.String[])">
            <summary>
            创建物理临时表并插入数据
            </summary>
            <param name="pkArray"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.GetDomainFilterString(System.String)">
            <summary>
            获取模型过滤条件
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.GetNotDomainFilterString(System.String)">
            <summary>
            获取非模型过滤条件
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.GetBosIdePkByFilterString(System.String)">
            <summary>
            数据规则调整为配置基对象的标识，但是返回需要返回所有继承节点，这里重新构造一个主键条件
            </summary>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.GetPkByFilterString(System.String,System.String)">
            <summary>
            获取元数据对象主键
            </summary>
            <param name="formId">对象模型</param>
            <param name="customFilterString">自定义条件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Meta.ObjectTypeDataRuleRepository.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlService.CommitNetworkCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.BFNetworkCtrlRequest)">
            <summary>
            释放网控
            </summary>
            <param name="ctx"></param>
            <param name="requst"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlService.CommitNetCtrByUserID(Kingdee.BOS.Context)">
            <summary>
            释放指定用户网控记录
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlService.GetNetworkCtrlIds(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.BFNetworkCtrlObject})">
            <summary>
            获取数据库中的反写网控数据
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlService.CommitTimeOutNetworkCtrl(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            清理创建超过2个小时的网控数据
            </summary>
            <param name="ctx"></param>
            <param name="objectTypeId"></param>
            <param name="wbRuleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlServiceHelper.CommitNetCtrByUserID(Kingdee.BOS.Context)">
            <summary>
            释放指定用户网控记录
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlServiceHelper.CommitNetworkCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.BFNetworkCtrlRequest)">
            <summary>
            释放网控
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.BFNetworkCtrlServiceHelper.IsUseBFNWCtrl(Kingdee.BOS.Core.BusinessFlow.WBNetWorkCtrlType,Kingdee.BOS.Core.NetworkCtrl.BFNetworkCtrlRequest)">
            <summary>
            判断是否启用新网控
            </summary>
            <param name="wbNetWorkCtrlType"></param>
            <param name="bfNetworkCtrlRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.NetworkCtrl.ClearNetworkCtrlShedule">
            <summary>
            每天定时自动清理用户的异常网控数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OAuth2.OAuth2VerificationService.SaveOAuthInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.OAuth2.OAuthInfo)">
            <summary>
            保存验证信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="model">验证信息对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OAuth2.OAuth2VerificationService.RefreshAccessToken(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新过期令牌
            </summary>
            <param name="ctx">上下文</param>
            <param name="accesstoken">令牌</param>
            <param name="refreshtoken">刷新令牌</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OAuth2.OAuth2VerificationService.GetOAuthInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取验证信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="accesstoken">登录令牌</param>
            <returns>验证信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbortProcInstService">
            <summary>
            终止流程操作服务端入口组件；
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.OperationService">
            <summary>
            操作处理,服务端处理基类,提供操作基础通用功能,如操作校验等
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.Validate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,Kingdee.BOS.Core.Validation.Enum_TimingPoint,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            执行操作校验
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.Validate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Core.Validation.Enum_TimingPoint,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            执行操作校验
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="Ids"></param>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetValidateSubBusinessInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取校验所需要加载的元数据片段
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetReferenceFieldsByMulRowSumValidation(System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.String}@)">
            <summary>
            针对分组列校验器的特殊处理
            </summary>
            <param name="express"></param>
            <param name="lstFieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetReferenceFieldsByStringFormatValidation(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            针对正则表达式校验字符串格式的特殊处理
            </summary>
            <param name="express"></param>
            <param name="info"></param>
            <param name="lstFieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.TryValidate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.String,Kingdee.BOS.Core.Validation.Enum_TimingPoint,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            执行操作校验；校验如果发现不合条件，不强制抛出错误；
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="timingPoint"></param>
            <param name="errorInfo"></param>
            <param name="option"></param>
            <returns>校验结果，里面包含了可能的不符合条件的校验结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetMessage(System.Boolean,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{System.Object},System.String,System.Int32)">
            <summary>
            获取显示信息
            </summary>
            <param name="data"></param>
            <param name="entryRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetOperationName(Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{System.Object})">
            <summary>
            获取操作名称
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.GetCurrentIds(System.Object[],System.Collections.Generic.List{Kingdee.BOS.Core.Validation.ValidationErrorInfo},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            获取能够进行操作的数据内码
            </summary>
            <param name="Ids"></param>
            <param name="errInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.UpdateBillNoWhenSave(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            重新获取单据编码
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.InsertTVRelationTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            更新树形结构的嵌套表
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OperationService.MoveTVRelation(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            节点移动，维护树形结构嵌套表
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbortProcInstService.Abort(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据内码执行服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ids"></param>
            <param name="operationNumber"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbortWithUnAuditProcInstService">
            <summary>
            终止且反审核操作服务端入口组件；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbortWithUnAuditProcInstService.AbortWithUnAudit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据内码执行服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ids"></param>
            <param name="operationNumber"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CancelAssignService">
            <summary>
            撤销流程/撤销任务操作服务端入口组件；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAssignService.CancelAssign(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据内码执行服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ids"></param>
            <param name="operationNumber"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbortProcInst">
            <summary>
            工作流终止流程操作
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbstractOprerationService">
            <summary>
            应用服务器层操作服务抽象类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._operationServiceOption">
            <summary>
            操作全局控制选项
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._notWriteOperationLogFlag">
            <summary>
            外围通知是否写上机日志,个别大事务场景下使用，其他场景禁止使用
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._surportBatchTansaction">
            <summary>
            标识此操作是否支持批量事务,整体回滚的概念
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._supportTransaction">
            <summary>
            标识此操作是否支持事务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._allowSetOperationResult">
            <summary>
            是否允许处理消息结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._ignoreScopeValidate">
            <summary>
            是否忽略范围校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.Initialize(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            初始化
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetDynamicServicePlugIn(System.String)">
            <summary>
            获取动态的操作服务插件
            </summary>
            <param name="operation">操作代码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.RecodePlugInErrorMsg(System.Int32,System.String)">
            <summary>
            记录错误信息
            </summary>
            <param name="entryId"></param>
            <param name="errorMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.VerifyOnlyView">
            <summary>
            仅查询用户校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.NotExistRecords(System.Object[],Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            对不存在记录要做提示处理
            </summary>
            <param name="ids"></param>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.DoExcete">
            <summary>
            操作真正执行过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ExecuteSendMessage">
            <summary>
            执行消息Action
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.AfterDoExecute(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            操作执行后虚方法，子类可重写此方法，处理操作后的相关业务逻辑。
            </summary>
            <param name="objs">参与事务处理的数据包集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.IsTransactionActive">
            <summary>
            当前事务是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.RollbackStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            异常回滚内存中的数据
            </summary>
            <param name="objs"></param>
            <param name="oldStatusValue"></param>
            <param name="oldOperationNumber"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ComputeRepairNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            计算补号
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.CreateBeginOperationTransactionArgs(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            创建开始操作事务参数
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.BeforeInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行前事件：操作实现类（派生类），可以把一些比较耗时的操作内置逻辑，此事件中完成。
            </summary>
            <param name="objs"></param>
            <remarks>
            业务服务中，有更新库存这些必须锁库的重量级服务，必须尽可能缩小单实例锁库期限，
            因此，更新库存服务，尽可能靠近事务提交代码，
            一些比较长的逻辑，就要放在更新库存之前执行了，减少锁库时间，如反写
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.AfterInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行后事件
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.PreparePropertys(System.Collections.Generic.List{System.String})">
            <summary>
            添加操作服务中用到的字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.AddCodeRuleKey(System.Collections.Generic.List{System.String})">
            <summary>
            添加补号需要计算的key
            </summary>
            <param name="fieldKeyList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetReferenceFieldsByMulRowSumValidation(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            针对分组列校验器的特殊处理
            </summary>
            <param name="express"></param>
            <param name="lstFieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetReferenceFieldsByStringFormatValidation(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            针对正则表达式校验字符串格式的特殊处理
            </summary>
            <param name="express"></param>
            <param name="info"></param>
            <param name="lstFieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetReferenceFieldsByPkValidation(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            针对组合校验的特殊处理
            </summary>
            <param name="express"></param>
            <param name="lstFieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.InvokeWorkFlowCallback(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            回调工作流方法，将工作流业务逻辑嵌入当前操作的事务中
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetReferenceFields(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            查找表达式引用字段
            </summary>
            <param name="express"></param>
            <param name="fieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.Validate">
            <summary>
            执行操作校验
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.TryValidate">
            <summary>
            执行操作校验；校验如果发现不合条件，不强制抛出错误；
            </summary>
            <param name="timingPoint"></param>
            <returns>校验结果，里面包含了可能的不符合条件的校验结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.CreateValidateContext(System.Boolean)">
            <summary>
            创建校验上下文
            </summary>
            <param name="IgnoreWarning"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.CreateValidationService">
            <summary>
            创建校验服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.AddValidators(System.Collections.Generic.List{Kingdee.BOS.Core.Validation.AbstractValidator})">
            <summary>
            添加操作的校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.AddDynamicValidator(System.Collections.Generic.List{Kingdee.BOS.Core.Validation.AbstractValidator})">
            <summary>
            添加动态的校验器
            </summary>
            <param name="validators"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.RecodeValidatorErrorMsg(System.Int32,System.String)">
            <summary>
            记录动态获取动态校验器时错误信息
            </summary>
            <param name="entryId"></param>
            <param name="errorMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ReadBillTypeFieldControls(System.Boolean@)">
            <summary>
            读取单据类型，字段配置集合
            </summary>
            <returns>不为null的集合: 无论是否有单据类型字段，都不会返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.BuildFieldValidation(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BillType.BillTypeFieldControl})">
            <summary>
            构建字段特别需要的校验器，如必录校验、格式校验等
            </summary>
            <param name="field">字段</param>
            <param name="typeFieldControls">单据类型的字段配置集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ReadFieldValidators(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段元数据校验器
            </summary>
            <param name="field">字段</param>
            <returns>返回校验器集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.RollBackBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            操作失败时，回滚内存数据（此方法不做数据库访问）
            避免访问数据库造成事务状态无效的错误
            </summary>
            <param name="dataEntities"></param>
            <param name="statusValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.SetBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.Boolean)">
            <summary>
            暂存/保存/提交时，修改状态
            </summary>
            <param name="dataEntities"></param>
            <param name="statusValue"></param>
            <param name="bEnforce">是否强制修改；如果强制修改，则不判断以前的状态是什么</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.UpdateCreateDateTimeField(System.DateTime,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            暂存状态下保存，更新创建日期
            </summary>
            <param name="nowTime"></param>
            <param name="dynamicObject"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractOprerationService._operater">
            <summary>
            当前操作员信息，当前登录用户信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.LoadCurrentOperater(Kingdee.BOS.Core.Metadata.FieldElement.UserField)">
            <summary>
            读取当前操作员信息; 读取一次后，缓存备用
            </summary>
            <remarks>
            能够缓存的理由：
            1. 当前登录用户不会改变
            2. 同一单据同样的基础资料，其orm模型一致；即同一单据的各用户字段的orm模型通用
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetCurrentStatusValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取当前对象的状态值
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetOperationName(Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{System.Object})">
            <summary>
            获取操作名称
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetCurrentIds">
            <summary>
            获取能够进行操作的数据内码
            </summary>
            <param name="Ids"></param>
            <param name="errInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.InvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Int32)">
            <summary>
            执行操作附加的服务端表单服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObject">数据包</param>
            <param name="result">结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.CreateAppBusinessServiceInstance(Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            创建表单服务实例
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetAllFormBusiness(Kingdee.BOS.Context)">
            <summary>
            要求读取全部表单服务到本地；通过静态变量存储，可以避免重复读取
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ExecuteFormBusinessService(Kingdee.BOS.Core.DynamicForm.IAppFormBusinessService,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            执行表单服务
            </summary>
            <param name="iBusiness"></param>
            <param name="dataObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ExecuteFormBusinessService(Kingdee.BOS.Core.DynamicForm.IAppFormBusinessService,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            批量执行表单服务
            </summary>
            <param name="iBusiness"></param>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.UpdateBillNoWhenSave(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            重新获取单据编码
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.ClearInteractionFlag">
            <summary>
            清除交互标志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.WriteLog">
            <summary>
            写上机操作日志：在App层，只记录操作成功了的数据的日志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetLogObject(System.String,System.String)">
            <summary>
            返回日志对象
            </summary>
            <param name="strDesc"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.GetMainOrUseOrgField(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获得组织字段（使用组织或主业务组织）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.RemoveConvertTakeInfo">
            <summary>
            去除保存或暂存后的携带信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractOprerationService.DoCommitNetworkCtrl">
            <summary>
            释放反写网络控制
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.Ctx">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.BusinessInfo">
            <summary>
            业务对象元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.FormOperation">
            <summary>
            表单操作
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.DataEntities">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.ConvertItem">
            <summary>
            状态转换项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.StatusField">
            <summary>
            状态字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.Option">
            <summary>
            操作参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.CreateDateTimeFields">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.InteractionResult">
            <summary>
            交互操作结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.PlugInProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.SelectedRows">
            <summary>
            当前操作关联分录所选择的行信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.AbstractOprerationService.WB_NetWorkCtrlResults">
            <summary>
            各反写规则执行时，申请成功的网络控制记录；在操作完成后释放
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbortProcInst.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbortWithUnAuditProcInst">
            <summary>
            工作流终止且反审核操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbortWithUnAuditProcInst.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CancelAssign">
            <summary>
            撤销流程/撤销任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAssign.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAssign.SetBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            设置单据状态(表头/分录)
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="dataEntity"></param>
            <param name="paras"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAssign.SetOperationInfo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.StatusElement.StatusItem)">
            <summary>
            设置操作人/操作日期
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="obj"></param>
            <param name="item"></param>
            <param name="statusValue"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.CancelAssign._operater">
            <summary>
            当前操作员信息，当前登录用户信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAssign.LoadCurrentOperater(Kingdee.BOS.Core.Metadata.FieldElement.UserField)">
            <summary>
            读取当前操作员信息; 读取一次后，缓存备用
            </summary>
            <remarks>
            能够缓存的理由：
            1. 当前登录用户不会改变
            2. 同一单据同样的基础资料，其orm模型一致；即同一单据的各用户字段的orm模型通用
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.UserFormParameterUtil">
            <summary>
            用户窗体参数解析类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserFormParameterUtil.ConvertClientSetting(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            端传过来的setting进行分端隔离融合
            </summary>
            <param name="ctx"></param>
            <param name="loadsetting"></param>
            <param name="sContent"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.AdminPasswordPolicer">
            <summary>
            管理密码策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.AdminPasswordPolicer.VerifyPassword(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            验证密码
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="password">密码</param>
            <returns>验证成功Successful=true;否则Successful=false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.AdminPasswordPolicer.ForceVerifyPassword(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            强制验证密码 校验不通过不能登录
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="password">密码</param>
            <returns>验证成功Successful=true;否则Successful=false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.AdminPasswordPolicer.GetPolicyLabel(System.Int64)">
            <summary>
            获取密码策略信息
            </summary>
            <param name="userId">用户Id</param>
            <returns>返回密码策略</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.IPasswordPolicer">
            <summary>
            密码策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.IPasswordPolicer.VerifyPassword(Kingdee.BOS.Context,System.String)">
            <summary>
            验证密码格式
            </summary>
            <param name="ctx">上下文</param>
            <param name="password">密码</param>
            <returns>验证成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.DefaultPasswordPolicer.VerifyPassword(Kingdee.BOS.Context,System.String)">
            <summary>
            验证密码格式
            </summary>
            <param name="ctx">上下文</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer">
            <summary>
            长度密码策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer.VerifyPassword(Kingdee.BOS.Context,System.String)">
            <summary>
            验证密码格式
            </summary>
            <param name="ctx">上下文</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PasswordPolicer.LengthRequiredPasswordPolicer.MinLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer">
            <summary>
            密码策略
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.NUMBERSPATTERN">
            <summary>
            数字正则表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.CHARACTERSPATTERN">
            <summary>
            字母正则表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.SPECIALCHARSPATTERN">
            <summary>
            特殊字符正则表达式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="numCheck">是否校验数值</param>
            <param name="charCheck">是否校验字符</param>
            <param name="specCheck">是否校验特殊字符</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.VerifyPassword(Kingdee.BOS.Context,System.String)">
            <summary>
            验证密码格式
            </summary>
            <param name="ctx">上下文</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.NumCheck">
            <summary>
            是否校验数值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.CharCheck">
            <summary>
            是否校验字符
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PasswordPolicer.NormalPasswordPolicer.SpecCheck">
            <summary>
            是否校验特殊字符
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerFactory">
            <summary>
            密码策略器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerFactory.Create(Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerType)">
            <summary>
            创建密码策略器
            </summary>
            <param name="passwordPolicyType">密码策略类型</param>
            <returns>密码策略器</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerType">
            <summary>
            密码策略器类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerType.LengthRequired">
            <summary>
            长度要求
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerType.Normal">
            <summary>
            常规密码策略
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PasswordPolicer.PasswordPolicerType.Default">
            <summary>
            默认密码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.GlobalConfigUserId">
            <summary>
            全局设置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.LoadPageSetting(Kingdee.BOS.Core.NotePrint.UserParaInfo)">
            <summary>
            读取页面设置参数
            </summary>
            <param name="paraInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.SavePageSetting(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo)">
            <summary>
            保存页面设置参数
            </summary>
            <param name="paraSaveInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.SavePageSettingForAllUser(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo)">
            <summary>
            保存全部用户参数
            </summary>
            <param name="paraSaveInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.SavePageSettingForUserList(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo)">
            <summary>
            保存指定用户列表
            </summary>
            <param name="paraSaveInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.SavePageSettingForCurUser(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo)">
            <summary>
            保存当前用户设置
            </summary>
            <param name="paraSaveInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.CollectErrMsg(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo,System.Exception)">
            <summary>
            收集异常信息
            </summary>
            <param name="paraSaveInfo"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.LoadSavePageSetting(System.String,System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            获取保存参数的sql（原接口保存就掉清除缓存接口，现处理批量保存问题）
            </summary>
            <param name="formId"></param>
            <param name="userIdList"></param>
            <param name="paraSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.WriteOperateLog(Kingdee.BOS.Core.NotePrint.UserParaSaveInfo,System.Func{Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{Kingdee.BOS.Core.Log.LogObject}})">
            <summary>
            写操作日志
            </summary>
            <param name="paraSaveInfo">参数设置保存信息</param>
            <param name="getLogObjFunc">获取日志委托</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.CreateLogObject(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.String)">
            <summary>
            生成日志对象
            </summary>
            <param name="businessInfo"></param>
            <param name="formOp"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DirectPrintReposoitory.GetUserInfo(System.Collections.Generic.List{System.Int64})">
            <summary>
            获取用户信息
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.MoveRptPrintBookRepository.CreateRecord(Kingdee.BOS.Core.NotePrint.MoveRptPrintParam)">
            <summary>
            创建一条分页账表打印记录
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.MoveRptPrintBookRepository.CreateHeadSubBusinessInfo(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            仅单据头元数据
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.MoveRptPrintBookRepository.UpdateRecord(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            更新状态
            </summary>
            <param name="recordObj">分本打印记录数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.MoveRptPrintBookRepository.SavePrintData(Kingdee.BOS.Core.NotePrint.MoveRptPrintData)">
            <summary>
            保存分本的记录信息(返回任务内码)
            </summary>
            <param name="moveRptPrintData"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Printing.MoveRptPrintBookRepository.MoveRptNoteRecord.RuntStatus">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.SavePageData(Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            保存页面数据
            </summary>
            <param name="pagePersistentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.CreateSaveRecordSqlObj(Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            保存打印记录SQL（外部接口不关注此记录，不存在时插入即可）
            </summary>
            <param name="pagePersistentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.DeletePageData(System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo})">
            <summary>
            删除页面数据
            </summary>
            <param name="pagePersistentInfoList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.CreateDeletePageSqlObjects(Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            创建删除页面的Sql对象
            </summary>
            <param name="pagePersistentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.CreateDeletePageDataSqlObj(Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            删除打印页面数据
            </summary>
            <param name="pagePersistentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.CreateDeleteRecordSqlObj(Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            删除打印页面记录(关联记录的类型、创建日期)
            </summary>
            <param name="pagePersistentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.LoadPrintData(System.String,System.Int32,System.Int32)">
            <summary>
            返回一个页面数据包FSEQ，FPRINTDATA
            </summary>
            <param name="taskId"></param>
            <param name="startPageIdx"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePagePersistentRepository.GetTaskPageTotalCount(System.Collections.Generic.List{System.String})">
            <summary>
            获取任务的总页码数
            </summary>
            <param name="taskIdList">任务列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePrintRepository.GetPrintPageXaml(Kingdee.BOS.Core.NotePrint.PageGenerateParam)">
            <summary>
            获取套打json数据
            </summary>
            <param name="pageGenerateParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.NotePrintRepository.GenerateBackgroundNotePrintPage(System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.PrintJob},System.String@)">
            <summary>
            生成后台的套打json页面
            </summary>
            <param name="printJobList"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.DynamicFormViewFactory.CreateOpenParameter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.String)">
            <summary>
            构建表单打开参数
            </summary>
            <param name="ctx"></param>
            <param name="metadata"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Printing.PrintService">
            <summary>
            PrintService拆分类，针对Xaml转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CreateMoveRptPrintBookRecord(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.MoveRptPrintParam)">
            <summary>
            创建分页账表打印记录
            </summary>
            <param name="ctx"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdateMoveRptPrintBookRecord(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            更新分页账表打印记录信息
            </summary>
            <param name="ctx"></param>
            <param name="recordObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveMoveRptPrintBookData(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.MoveRptPrintData)">
            <summary>
            保存分本打印分页记录信息
            </summary>
            <param name="ctx"></param>
            <param name="moveRptPrintData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetTaskPageTotalCount(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取按序的任务列表下每个任务的页码数
            </summary>
            <param name="ctx"></param>
            <param name="taskIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.JSONArray2SettingInfo(Kingdee.BOS.JSON.JSONArray)">
            <summary>
            套打设置
            </summary>
            <param name="jsonArray"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetDefaultValidation(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintRequest)">
            <summary>
            获取默认为成功的校验结果
            </summary>
            <param name="ctx"></param>
            <param name="printRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetTmplateIdByBillType(System.String,Kingdee.BOS.Core.NotePrint.NotePrintSettingInfo,System.Boolean)">
            <summary>
            获取单据类型映射的套打模板标识
            </summary>
            <param name="billTypeId"></param>
            <param name="settingInfo"></param>
            <param name="existBillType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.ValidateByFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取满足过滤条件的单据内码集合
            </summary>
            <param name="ctx"></param>
            <param name="billBusinessInfo"></param>
            <param name="billIds"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GenerateOperationItem(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintRequest,Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo,Kingdee.BOS.Core.NotePrint.AdvantageSetting,System.String)">
            <summary>
            生成操作（建议所有类型都应该模拟一个启用的仅有套打模板的高级设置项，能解决代码膨胀问题）
            </summary>
            <param name="ctx"></param>
            <param name="printRequest">打印请求</param>
            <param name="runtimeInfo">打印运行信息</param>
            <param name="setting">套打高级设置</param>
            <param name="description">异常描述信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetXamlTransformConfig(Kingdee.BOS.Context)">
            <summary>
            获取Xaml转换配置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.LoadAttachment(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Attachment.AttachmentKey},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            根据单据信息加载附件列表
            </summary>
            <param name="ctx"></param>
            <param name="info">当前业务对象元数据</param>
            <param name="attachementKeys">附件关联信息</param>
            <param name="queryParam">查询的字段参数，构建查询字段用，按需加载</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.AttachmentSearchDirectly(Kingdee.BOS.Core.Attachment.AttachmentKey,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Int32)">
            <summary>
            直接查询附件信息
            </summary>
            <param name="attachment"></param>
            <param name="sqlParams">sql参数化列表</param>
            <param name="idx">参数化序号组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.AttachmentSerchBillHeadByMasterId(Kingdee.BOS.Core.Attachment.AttachmentKey,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Int32)">
            <summary>
            查询源创建组织等于使用组织的基础资料的附件信息
            </summary>
            <param name="attachment"></param>
            <param name="info"></param>
            <param name="sqlParams">sql参数化列表</param>
            <param name="idx">参数化序号组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintTemplateSettingBase(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.FormMetadata@)">
            <summary>
            获取业务对象设置基础对象
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintTemplateSetting(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            获取业务对象模板设置结果
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="userId">用户内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetNotePrintTemplateSettingInner(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64)">
            <summary>
            获取业务对象模板设置结果
            </summary>
            <param name="ctx"></param>
            <param name="permissionMetaData"></param>
            <param name="permissionObj"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetNotePermissionTemplateAct(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            套打有权模板操作（处理满足条件的分录行下子单据体获取启用模板的逻辑）
            </summary>
            <param name="permissionBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPermissionTemplateIds(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64,System.Action{System.Collections.Generic.HashSet{System.String},Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            获取指定用户的权限模板(处理用户是否满足条件的逻辑)
            </summary>
            <param name="ctx"></param>
            <param name="permissionBusinessInfo">权限元数据</param>
            <param name="permissionObj">权限数据包</param>
            <param name="userId">用户Id</param>
            <param name="templateObjAct">数据包操作（参数1 有权模板集合， 参数2 当前匹配的数据包）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetExcelPrintTemplateSetting(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            获取excel设置结果
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetExcelPrintTemplateSettingInner(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64)">
            <summary>
            获取Excel设置结果
            </summary>
            <param name="ctx"></param>
            <param name="permissionMetaData"></param>
            <param name="permissionObj"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetExcelPermissionTemplateAct(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            Excel有权模板操作（处理满足条件的分录行下子单据体获取启用模板的逻辑）
            </summary>
            <param name="permissionBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintLicense(Kingdee.BOS.Context)">
            <summary>
            获取套打许可
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.BatchValidatePrintControl(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.PrintValidateInfo})">
            <summary>
            批量进行打印控制校验
            </summary>
            <param name="info">对应表单的业务元数据</param>
            <param name="validateInfoList">校验信息集合，可控制忽略校验项</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.BatchValidatePrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[])">
            <summary>
            批量校验打印控制（不进行忽略打印控制）
            </summary>
            <param name="billIDs">内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.ValidatePrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String,System.String)">
            <summary>
            单个单据打印次数检查（不进行忽略打印控制）
            </summary>
            <param name="billID">单据ID</param>
            <param name="billTypeID">单据类型ID</param>
            <param name="docStatus">单据状态</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[])">
            <summary>
            批量更新打印次数
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="billId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String)">
            <summary>
            更新打印次数
            </summary>
            <param name="formId">FormID</param>
            <param name="billId">单据ID</param>
            <param name="billTypeId">单据类型ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintBillInfoByBillID(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[])">
            <summary>
            根据单据FID获取打印单据整体信息
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="billIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdateBillTypePrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String)">
            <summary>
            更新单据类型下的打印次数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintFieldAction(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            更新当前单据打印次数、打印时间字段
            </summary>
            <param name="billId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckApproved(Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter,Kingdee.BOS.App.Core.Printing.PrintControl,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            检查【审核后才允许打印】参数逻辑
            </summary>
            <param name="billGlobalParameter"></param>
            <param name="pc"></param>
            <param name="info"></param>
            <param name="docStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckMaxPrints(Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String,Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter,Kingdee.BOS.App.Core.Printing.PrintControl)">
            <summary>
            检查【打印次数】参数逻辑
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">元数据业务对象</param>
            <param name="billID">单据PKId</param>
            <param name="billTypeID">单据类型Id</param>
            <param name="billGlobalParameter">单据整体参数</param>
            <param name="pc">单据类型参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckMaxPrintsExt(Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.Core.NotePrint.PrintCountControlType,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter,Kingdee.BOS.App.Core.Printing.PrintControl)">
            <summary>
            正式开始检查打印次数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckPrintCountControlType(Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter,Kingdee.BOS.App.Core.Printing.PrintControl)">
            <summary>
            返回检查打印次数控制类型
            </summary>
            <param name="billGlobalParameter">单据整体参数</param>
            <param name="pc">单据类型参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetBillTypePrintPara(Kingdee.BOS.Context,System.String)">
            <summary>
            获取当前单据类型的打印参数
            </summary>
            <param name="formid"></param>
            <param name="billTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetBillTypePrintPara(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据单据类型数据包生成打印控制
            </summary>
            <param name="billTypeId">单据类型内码</param>
            <param name="billTypeObject">单据类型数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetBillGlobalParameter(Kingdee.BOS.Context,System.String)">
            <summary>
            获取当前单据参数配置信息
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckMaxPrintsByGlobalPara(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter)">
            <summary>
            根据GlobalPara检查最大打印次数
            </summary>
            <param name="pkid">当前单据pkid</param>
            <param name="billGlobalParameter">当前单据billGlobalParameter</param>
            <returns>返回检查信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckMaxPrintsByGlobalPara(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.BusinessEntity.BillGlobalParam.BillGlobalParameter,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            通过单据整体参数校验最大打印次数
            </summary>
            <param name="pkid">内码</param>
            <param name="billGlobalParameter">单据参数</param>
            <param name="dictBillPrintTimesFieldValue">内码-打印次数 数据包字典</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckMaxPrintsByBillTypePara(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.ValidationResult,System.String,System.String,Kingdee.BOS.App.Core.Printing.PrintControl)">
            <summary>
            根据单据类型参数检查最大打印次数
            </summary>
            <param name="ds"></param>
            <param name="formId"></param>
            <param name="billID"></param>
            <param name="billTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CheckApprovedExt(Kingdee.BOS.Core.NotePrint.ValidationResult,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Boolean)">
            <summary>
            正式开始检查【审核后才打印】参数
            </summary>
            <param name="docStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetBillInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[],System.String,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            生成内码 - （主键、单据类型、单据状态、单据编号)数据包 字典
            </summary>
            <param name="billIDs">内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetBillPrintCount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[])">
            <summary>
            生成内码-内码，单据编号，打印次数的数据包字段
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="billIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintDataByTemporaryTable(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.String,System.String,Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType)">
            <summary>
            通过使用临时表单据获取数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameter">重现参数</param>
            <param name="pkids">主键内码集合</param>
            <param name="pkName">主键名称</param>
            <param name="pkFieldType">主键数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.BuildCreateTempTableSql(System.String,Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType)">
            <summary>
            构建SQL: 创建临时表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetTemplateNames(Kingdee.BOS.Context,System.String[])">
            <summary>
            获取套打模板名称
            </summary>
            <param name="ctx"></param>
            <param name="templateIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetTemplatesByFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取当前上下文语言、对应表单下的所有套打模板
            <para>字典格式,key-套打模板ID,value-套打模板对应语言环境下的名称</para>>
            <para>当查询无结果时，返回对象为空</para>
            </summary>
            <param name="ctx"></param>
            <param name="formId">表单ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveNotePrintPara(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            指定用户保存套打设置
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">表单标识</param>
            <param name="userId">用户Id(-1代表系统级设置)</param>
            <param name="paraInfo">套打设置参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveNotePrintParaForAllUser(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            保存套打设置到所有用户(包含保存当前用户)
            </summary>
            <param name="ctx"></param>
            <param name="formId">表单标识</param>
            <param name="paraInfo">套打设置参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveNotePrintParaToUserList(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            保存套打设置到指定用户列表
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="userIdList"></param>
            <param name="paraInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.LoadNotePrintPara(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            加载指定用户的套打设置
            </summary>
            <param name="ctx"></param>
            <param name="formId">表单标识</param>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPermissionTemplates(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            获取有权的套打模板集合
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SavePageData(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo)">
            <summary>
            保存持久化的套打页面
            <para>调用这个接口时必须在外层做分批处理，否则一样会导致大量的页面在内存中，导致OOM</para>
            </summary>
            <param name="ctx"></param>
            <param name="pagePersistentInfo">持久化的打印任务（包含页面数据）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.DeletePageData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.NotePagePersistentInfo})">
            <summary>
            删除持久化的套打页面
            </summary>
            <param name="ctx"></param>
            <param name="pagePersistentInfoList">持久化打印任务列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.LoadDirectPrintPageSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.UserParaInfo)">
            <summary>
            加载直接打印页面设置参数
            </summary>
            <param name="ctx"></param>
            <param name="paraInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveDirectPrintPageSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.UserParaSaveInfo)">
            <summary>
            保存直接打印页面设置参数
            </summary>
            <param name="ctx"></param>
            <param name="paraSaveInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintExportTimes(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.String})">
            <summary>
            更新套打导出次数
            使用场景：套打导出成功后需要更新套打导出次数字段
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="billIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetCrossPrintDataFileByTaskIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            获取套打页数据文件
            使用场景：套打数据需要转到BPSite站点去处理的时候，处理完需要获取套打数据文件进行删除
            </summary>
            <param name="ctx"></param>
            <param name="taskIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CreatePrintCrossTask(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintCrossParameter)">
            <summary>
            创建套打任务
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintCrossTaskStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintCrossParameter)">
            <summary>
            更新套打任务操作状态
            <p>应用场景：</p> 
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintCrossTaskStatus(Kingdee.BOS.Context,System.String)">
            <summary>
            获取套打任务操作状态
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.CreatePrintCrossTaskEntry(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintCrossEntry)">
            <summary>
            创建跨站点打印的任务
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="printCrossEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.SaveCrossTaskPageData(Kingdee.BOS.Context,Kingdee.BOS.Core.NotePrint.PrintCrossDetail)">
            <summary>
            保存跨站点套打页数据
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="printCrossDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetCrossTaskPageTotalCount(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取跨站点打印数据的总页数
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="taskIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetCrossTaskPrintDataByPage(Kingdee.BOS.Context,System.String,System.Int32,System.Int32)">
            <summary>
            根据索引获取套打明细数据页
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="subTaskId"></param>
            <param name="pageIdx"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintCrossTaskIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            根据跨站点任务ID获取任务信息
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用
            </summary>
            <param name="ctx"></param>
            <param name="taskIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.UpdatePrintCrossTaskProcess(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            更新跨站点打印任务的进度
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用 
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="itemCount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetPrintCrossTask(Kingdee.BOS.Context,System.String)">
            <summary>
            获取跨站点打印任务的进度
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用 
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.GetNotePrintFilesByFileId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据文件ID获取套打文件名称
            <p>应用场景：</p>
            套打数据需要转到BPSite站点去处理的时候使用 
            </summary>
            <param name="ctx"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.DeleteNotePrintFile(Kingdee.BOS.Context,System.String[])">
             <summary>
            删除套打打印文件
             <p>应用场景：</p>
             套打数据需要转到BPSite站点去处理的时候使用 
             </summary>
             <param name="ctx"></param>
             <param name="detailIds"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.BillIds">
            <summary>
            单据内码集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.OnlyPrintOnceByFilter">
            <summary>
            是否高级设置首条件预览打印
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.SuccessResult">
            <summary>
            成功的打印校验结果（单据是否满足打印条件）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.RuntimePrintCnt">
            <summary>
            本次运行过程的打印次数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.CurFormTemplateIdSet">
            <summary>
            当前表单的模板集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Printing.PrintService.PrintOperationRuntimeInfo.ErrMessageBuilder">
            <summary>
            异常信息（仅在没有返回打印子项时返回）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.ITemplate.CheckPermission(System.Boolean,System.Int64)">
            <summary>
            模板本身的权限验证（实现复杂度o(1)，尽量将准备信息在取数时准备好）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.AbstractPrintTemplatePermissionService.GetAllUsers">
            <summary>
            获取用户
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.NoteTemplatePermissionService.GetAllTemplateObj">
            <summary>
            获取所有套打模板结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.NoteTemplatePermissionService.GetPrintTemplateSetting(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64)">
            <summary>
            获取指定用户的套打模板控制策略
            </summary>
            <param name="permissionObj"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.ExcelTemplatePermissionService.GetAllTemplateObj">
            <summary>
            Excel获取所有模板实现
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintService.ExcelTemplatePermissionService.GetPrintTemplateSetting(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64)">
            <summary>
            获取Excel对应用户的控制结果
            </summary>
            <param name="permissionObj"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Printing.XamlTransformRepository">
            <summary>
            XAML转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.XamlTransformRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.XamlTransformRepository.GetXamlTransformConfig">
            <summary>
            获取Xaml转换配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Query.ClearRecentSearchDataSchedule">
            <summary>
            清除模糊查询最近使用记录
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.BatchWarnParseInfo">
            <summary>
            批量对象预警解析信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo">
            <summary>
            对象预警解析信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo.WarnData">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo.ObjectTypeId">
            <summary>
            业务对象ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo.Model">
            <summary>
            预警模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo.OperationCode">
            <summary>
            操作编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo.OperationEvent">
            <summary>
            操作事件类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.BatchWarnParseInfo.PkIds">
            <summary>
            业务对象主键ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.BatchWarnParseInfo.WarnDatas">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.BatchWarnParseInfo.DyObjDatas">
            <summary>
            预警数据包
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache">
            <summary>
            缓存虚类对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.GetCache(System.String,System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="area">area cache key</param>
            <param name="region">固定Cache标识</param>
            <param name="strCacheKey">缓存key值</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.GetCache(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="region">固定Cache标识</param>
            <param name="strCacheKey">缓存key值</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.SetCache(Kingdee.BOS.Context,System.String,System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="region">固定Cache标识</param>
            <param name="strCacheKey">缓存key值</param>
            <param name="obj">缓存值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.SetCache(System.String,System.String,System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="ctx">area cache key</param>
            <param name="region">固定Cache标识</param>
            <param name="strCacheKey">缓存key值</param>
            <param name="obj">缓存值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.ClearCache(Kingdee.BOS.Context)">
            <summary>
            清除缓存
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.ClearAreaCache(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.ClearCache(System.String,System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="area">固定area标识</param>
            <param name="region">固定Cache标识</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractCache.ClearCache(System.String,System.String,System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="area">固定area标识</param>
            <param name="region">固定Cache标识</param>
            <param name="key">指定缓存key</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.#ctor(System.String,System.String)">
            <summary>
            权限缓存
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="strCacheKey">缓存key值</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.GetCache``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="strCacheKey">缓存key值</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="strCacheKey">缓存key值</param>
            <param name="obj">缓存值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.ClearCache(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">指定缓存key</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.ClearRegaCache">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.ClearCache">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.GetContextAreaCacheKey(Kingdee.BOS.Context)">
            <summary>
            get context 
            </summary>
            <returns>return the key string</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.Area">
            <summary>
            区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Cache.AbstractAreaCache.Region">
            <summary>
            缓存Region
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache">
            <summary>
            预警对象缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.TryGetIsEnabledWarn(System.Boolean@)">
            <summary>
            获取是否开启预警状态
            </summary>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.IsEnabledWarn">
            <summary>
            是否开启预警状态
            </summary>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.SetIsEnabledWarn(System.Boolean)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.TryGetIsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent,System.Boolean@)">
            <summary>
            获取是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.IsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.IWarnObjectDataCache.SetIsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent,System.Boolean)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache">
            <summary>
            real time warn rule cache
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.CACHE_REGION">
            <summary>
            cache reagion
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.#ctor(Kingdee.BOS.Context)">
            <summary>
            constructor
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.IsEnableWarn(System.String,System.String)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="operactionCode">操作编码</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.GetRules(System.String)">
            <summary>
            获取指定业务对象规则列表
            </summary>
            <param name="strObjectTypeId">业务对象ID</param>
            <returns>规则列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.SetRules(System.String,System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            设置规则列表
            </summary>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="rules">规则列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.GetRulesKey(System.String)">
            <summary>
            get object cache key
            </summary>
            <param name="strObjectTypeId">业务对象ID</param>
            <returns>cache key</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.RealTimeWarnRuleCache.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache">
            <summary>
            预警对象缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.#ctor(Kingdee.BOS.Context,System.String)">
            <summary>
            constructor
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.TryGetIsEnabledWarn(System.Boolean@)">
            <summary>
            获取是否开启预警状态
            </summary>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.IsEnabledWarn">
            <summary>
            是否开启预警状态
            </summary>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.SetIsEnabledWarn(System.Boolean)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.TryGetIsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent,System.Boolean@)">
            <summary>
            获取是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.IsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.SetIsEnabledOnOpreaction(System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent,System.Boolean)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="operactionCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <param name="isEnabledWarn">是否开启预警状态</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.GetRules">
            <summary>
            获取指定业务对象规则列表
            </summary>
            <returns>规则列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.SetRules(System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            设置规则列表
            </summary>
            <param name="rules">规则列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.GetIsEnabledWarnKey(System.String)">
            <summary>
            获取是否启用预警key
            </summary>
            <param name="operactionCode">操作编码</param>
            <returns>key字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.GetIsEnabledWarnKey">
            <summary>
            获取是否启用预警key
            </summary>
            <param name="operactionCode">操作编码</param>
            <returns>key字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache.GetRulesKey">
            <summary>
            get object cache key
            </summary>
            <returns>cache key</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Container.DataCenterOperactionContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.Container.DataCenterOperactionContainer._instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.DataCenterOperactionContainer.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Container.DataCenterOperactionContainer.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Container.DCMessageQueueContainer">
            <summary>
            数据中心消息对象容器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.Container.DCMessageQueueContainer._instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.DCMessageQueueContainer.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Container.DCMessageQueueContainer.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer">
            <summary>
            预警操作容器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer._operactions">
            <summary>
            操作列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="operactions">操作列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer.GetOperactionCode(System.String)">
            <summary>
            获取操作编码
            </summary>
            <param name="operactionId">操作Id</param>
            <returns>返回操作编码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer.Add(System.String,System.String)">
            <summary>
            是否开启预警状态
            </summary>
            <param name="operactionId">操作Id</param>
            <param name="operactionCode">操作编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Container.WarnOperactionContainer.AddOrUpdate(System.String,System.String)">
            <summary>
            添加或更新
            </summary>
            <param name="operactionId">操作Id</param>
            <param name="operactionCode">操作编码</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.IMessageChannel">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.IMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageInfo)">
            <summary>
            发送指定预警数据的预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageInfo">预警消息信息</param>
            <returns>发送结果</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.IRuleParser">
            <summary>
            规则解析器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.IRuleParser.Parse(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnRuleParseInfo">预警规则解析信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.IWarnController">
            <summary>
            预警控制器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.IWarnController.IsEnabledWarn(Kingdee.BOS.Context,System.String)">
            <summary>
            指定业务对象是否启用业务预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <returns>启用返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.IWarnController.IsEnabledWarn(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            指定业务对象的操作是否启用业务预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="strOperationCode">操作编码</param>
            <param name="operactionEvent">操作事件</param>
            <returns>启用返回true；否则返回false</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.IWarnParser">
            <summary>
            预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.IWarnParser.Parse(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo)">
            <summary>
            业务对象预警解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">预警对象</param>
            <returns>解析结果</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper">
            <summary>
            log 日志帮助
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.WriteLog(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo)">
            <summary>
            WriteLog
            </summary>
            <param name="ctx">ctx</param>
            <param name="warnLogInfo">logObject</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.Debug(System.String,System.Object[])">
            <summary>
            debug 日志
            </summary>
            <param name="msgFormat">格式化消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.Info(System.String,System.Object[])">
            <summary>
            Info 日志
            </summary>
            <param name="msgFormat">格式化消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Error 日志
            </summary>
            <param name="ex">异常</param>
            <param name="msgFormat">格式化消息</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.GetMessage(System.String,System.Object[])">
            <summary>
            获取消息内容
            </summary>
            <param name="msgFormat">格式化消息</param>
            <param name="args">参数</param>
            <returns>消息内容</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.LogHelper.IsDebug">
            <summary>
            是否开启Debug模式
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo">
            <summary>
            上机操作日志实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.pkValue">
            <summary>
            业务对象实例Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.SubSystemId">
            <summary>
            子系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.Description">
            <summary>
            操作详细描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.ObjectTypeId">
            <summary>
            业务对象内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Log.WarnLogInfo.OperateName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageChanelFactory">
            <summary>
            消息通道factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageChanelFactory.Create(System.Int32)">
            <summary>
            创建消息通道
            </summary>
            <param name="model">消息模型</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageInfo">
            <summary>
            预警消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageInfo.WarnData">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MessageChannel.MessageInfo.MessageId">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.AbstractWarnMessageSender">
            <summary>
            warn message sender abstract class
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IWarnMessageSender">
            <summary>
            消息发送者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IWarnMessageSender.Send(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem)">
            <summary>
            消息接收处理
            </summary>
            <param name="messageItem">消息发送事件对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.AbstractWarnMessageSender.Send(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem)">
            <summary>
            send message
            </summary>
            <param name="messageItem"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.AbstractWarnMessageSender.MessageQueue">
            <summary>
            message queue
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue">
            <summary>
            预警消息队列
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue`1">
            <summary>
            预警消息队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item">item</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue`1.Dequeue">
            <summary>
            出队
            </summary>
            <returns>item 对象</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue`1.Count">
            <summary>
            当前数量
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMQProcessor">
            <summary>
            mq processor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMQProcessor.Start">
            <summary>
            开启
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMQProcessor.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMQProcessor.Notify">
            <summary>
            发送Action
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IWarnMessageReciver">
            <summary>
            消息接收者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.IWarnMessageReciver.MessageReceived(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageReceivedEventArgs)">
            <summary>
            消息接收处理
            </summary>
            <param name="e">消息接收事件对象</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue">
            <summary>
            meomry warn mesage queue
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue._queues">
            <summary>
            _queues list
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue.#ctor">
            <summary>
            construcor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue.Enqueue(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem)">
            <summary>
            enqueue time
            </summary>
            <param name="item">message item</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue.Dequeue">
            <summary>
            Dequeue itme
            </summary>
            <returns>message item</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MemoryWarnMessageQueue.Count">
            <summary>
            queue count
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageEventArgs">
            <summary>
            消息事件对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageEventArgs.Sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageEventArgs.MessageItem">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageEventArgs.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem">
            <summary>
            预警消息item
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem.ItemType">
            <summary>
            消息Item类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItemType">
            <summary>
            消息Item 类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItemType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItemType.Normal">
            <summary>
            一般
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageReceivedEventArgs">
            <summary>
            消息接收事件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageReceiverFactory">
            <summary>
            消息接收者factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageReceiverFactory.Create(System.Int32)">
            <summary>
            create message reciver
            </summary>
            <param name="messgeType"></param>
            <returns>message sender</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageSenderFactory">
            <summary>
            消息发送factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageSenderFactory.Create(Kingdee.BOS.Context)">
            <summary>
            create message sender
            </summary>
            <param name="ctx">上下文</param>
            <returns>message sender</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageSendEventArgs">
            <summary>
            消息发送事件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor">
            <summary>
            mq processor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor._running">
            <summary>
            thread control flag.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor._thread">
            <summary>
            runing thread.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor._warnMessageQueue">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.#ctor(Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue)">
            <summary>
            constructor
            </summary>
            <param name="warnMessageQueue">消息队列</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.Notify">
            <summary>
            发起action
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.WaitToStop">
            <summary>
            Waits stopping of thread, thus waits end of execution of currently processing item.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessor.DoProcess">
            <summary>
            Thread's running method. Listens queue and processes items.
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessorProvider">
            <summary>
            mq processor provider
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessorProvider._mqProcessor">
            <summary>
            mq processor instance
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessorProvider.GetMQProcessor">
            <summary>
            get message queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.MQProcessorProvider.GetMQProcessor(Kingdee.BOS.Context)">
            <summary>
            get message queue
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueFactory">
            <summary>
            预警消息队列工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueFactory.Create">
            <summary>
            create message queue
            </summary>
            <returns>message sender</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueProvider">
            <summary>
            warn message queue provider
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueProvider._warnMessageQueue">
            <summary>
            warn message queue instance
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueProvider.GetQueue">
            <summary>
            get message queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageQueueProvider.GetQueue(Kingdee.BOS.Context)">
            <summary>
            get message queue
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageReceiver">
            <summary>
            message receiver
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageReceiver.MessageReceived(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageReceivedEventArgs)">
            <summary>
            message received
            </summary>
            <param name="e">message received event args</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageSender">
            <summary>
            warn message sender
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageSender._queue">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageSender.#ctor(Kingdee.BOS.App.Core.RealTimeWarn.MQ.IMessageQueue)">
            <summary>
            constructor
            </summary>
            <param name="queue">队列</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.MQ.WarnMessageSender.Send(Kingdee.BOS.App.Core.RealTimeWarn.MQ.MessageItem)">
            <summary>
            发送消息
            </summary>
            <param name="messageItem">消息对象</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnOperactionReader">
            <summary>
            预警操作reader
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnOperactionReader.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnOperactionReader.GetAllWarnOperactionList">
            <summary>
            获取所有预警操作列表
            </summary>
            <returns>预警操作列表</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnOperactionReader.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader">
            <summary>
            预警规则服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader.GetRuleDetails(System.String)">
            <summary>
            获取指定业务对象实时预警规则列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjecTypeId">业务对象ID</param>
            <returns>预警规则列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader.GetSettingRules(System.String)">
            <summary>
            获取指定业务对象实时预警规则列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjecTypeId">业务对象ID</param>
            <returns>预警规则列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader.CreateRealTimeWarnRule(System.Data.IDataReader,System.String,System.String)">
            <summary>
            创建RealTimeWarnRule对象
            </summary>
            <param name="reader">IDataReader</param>
            <param name="ruleId">规则ID</param>
            <param name="strOperationCode">操作标识</param>
            <param name="rRule"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Reader.WarnRuleReader.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule">
            <summary>
            实时预警规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.RuleId">
            <summary>
            规则ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.SolutionId">
            <summary>
            方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.SolutionNo">
            <summary>
            方案编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.SolutionName">
            <summary>
            方案名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.WarnMessageTemplates">
            <summary>
            预警消息模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.OperationCodes">
            <summary>
            操作编码列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.OperationEvent">
            <summary>
            操作事件类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.Level">
            <summary>
            预警级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule.RuleName">
            <summary>
            规则名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService">
            <summary>
            预警服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.IsEnabledWarn(Kingdee.BOS.Context,System.String)">
            <summary>
            指定业务对象的操作是否开启
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.IsEnabledWarn(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String},Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            指定业务对象的操作是否开启
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="operationCodes">操作编码列表</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.IsEnabledWarn(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            指定业务对象的操作是否开启
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="operationCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>开启返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ExecuteWarn(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            执行指定对象预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectTypeid">业务对象ID</param>
            <param name="data">业务对象数据</param>
            <param name="operationCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ExecuteWarn(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{System.String},Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            执行指定对象预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectTypeid">业务对象ID</param>
            <param name="data">业务对象数据</param>
            <param name="operationCodes">操作编码列表</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ExecuteWarnBatch(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.List{System.String},System.String[],Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            执行指定对象预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectTypeid">业务对象ID</param>
            <param name="datas">业务对象数据</param>
            <param name="operationCodes">操作编码列表</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ExecuteWarn(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.String[],Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            执行指定对象预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectTypeid">业务对象ID</param>
            <param name="datas">业务对象数据</param>
            <param name="operationCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.AddToWarn(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            添加业务数据至预警
            触发相关预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="data">业务对象数据</param>
            <param name="operationCode">操作编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ClearCache(Kingdee.BOS.Context,System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnService.ClearAllCache(Kingdee.BOS.Context)">
            <summary>
            清除缓存所有缓存
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnUtils">
            <summary>
            风险预警Utils
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnUtils.GetBusinessData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object)">
            <summary>
            获取指定主键业务对象数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="BusinessInfo">业务对象</param>
            <param name="pkId">业务对象主键</param>
            <returns>业务对象数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnUtils.GetBusinessFormMeta(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定业务对象元数据对象信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjctTypeId">业务对象ID</param>
            <returns>元数据对象信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser">
            <summary>
            规则解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.Parse(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnRuleParseInfo">预警规则解析信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.SatisfyOneOfCondition(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel})">
            <summary>
            校验是否满足普通条件和指标条件之一
            </summary>
            <param name="ctx"></param>
            <param name="warnRuleParseInfo">warnRuleParseInfo</param>
            <param name="ruleParserResult">解析结果</param>
            <param name="comCdtModelList">普通条件模型</param>
            <param name="tarCdtModelList">指标条件模型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.SatisfyComAndTarCondition(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel})">
            <summary>
            校验是否同时满足普通条件和指标条件
            </summary>
            <param name="ctx"></param>
            <param name="warnRuleParseInfo">warnRuleParseInfo</param>
            <param name="ruleParserResult">解析结果</param>
            <param name="comCdtModelList">普通条件模型</param>
            <param name="tarCdtModelList">指标条件模型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.GetRegularConditionModel(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            返回规则条件模型列表
            </summary>
            <param name="conditionId">条件ID</param>
            <param name="cdtformId">条件表单</param>
            <param name="cdtTable">条件表名称</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CheckRegularComCondition(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            校验是否满足普通规则条件
            </summary>
            <param name="comCdtModelList"></param>
            <param name="warnRuleParseInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CreateComCdtExpressStr(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            拼普通条件运算表达式
            </summary>
            <param name="comCdtModelList"></param>
            <param name="warnRuleParseInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CompareConditionAndValue(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo,System.String@,Kingdee.BOS.Core.Regular.RegularConditionModel)">
            <summary>
            比较设置的条件和值
            </summary>
            <param name="warnRuleParseInfo"></param>
            <param name="expressStr"></param>
            <param name="cdtModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.OutExpressStrOneOrZero(System.Boolean,System.String@)">
            <summary>
            输出表达式串拼"1"或"0"
            </summary>
            <param name="isSatisfy">是否满足</param>
            <param name="expressStr"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CalculateExpressStr(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CheckRegularTarCondition(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            校验是否满足指标条件
            </summary>
            /// <param name="ctx"></param>
            <param name="tarCdtModelList">指标条件模型</param>        
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CreateTarCdtExpressStr(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Regular.RegularConditionModel},Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            拼指标条件运算表达式
            </summary>
            <param name="comCdtModelList"></param>
            <param name="warnRuleParseInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CompareTarConditionAndValue(Kingdee.BOS.Context,System.String@,Kingdee.BOS.Core.Regular.RegularConditionModel,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo)">
            <summary>
            比较设置的指标条件和指标值
            </summary>
            <param name="warnRuleParseInfo"></param>
            <param name="expressStr"></param>
            <param name="cdtModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.GetFieldRealValue(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo,Kingdee.BOS.Core.Regular.RegularConditionModel)">
            <summary>
            获取字段真实值
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnRuleParseInfo">warnRuleParseInfo</param>
            <param name="cdtModel">过滤模型</param>
            <returns>字段真实值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.GetRealValueByFieldType(System.Object,System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Object)">
            <summary>
            根据字段类型获取字段值
            </summary>
            <param name="realValue">取真实比较的字段值</param>
            <param name="fieldProperty">字段属性</param>
            <param name="realField">真实字段</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.CheckIsExistDataSatisfyComCdt(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Object)">
            <summary>
            检查是否满足普通过滤条件
            </summary>
            <param name="ctx">上下文</param>
            <param name="businessInfo">businessInfo</param>
            <param name="filter">过滤条件字符串</param>
            <param name="pk">单据主键</param>
            <returns>返回true说明有满足条件的数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.RuleParser.GetTarValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Regular.RegularConditionModel,Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo,System.Object@)">
            <summary>
            获取指标值
            </summary>
            <param name="ctx">上下文</param>
            <param name="cdtModel">cdtModel</param>
            <param name="warnRuleParseInfo">warnRuleParseInfo</param>
            <param name="dimenValue">维度值</param>
            <returns>指标值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult">
            <summary>
            规则解析结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult.IsWarning">
            <summary>
            是否满足规则条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult.Levle">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult.RuleId">
            <summary>
            规则ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult.SendMsgResult">
            <summary>
            发送消息结果（操作前）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnController">
            <summary>
            预警控制器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnController.IsEnabledWarn(Kingdee.BOS.Context,System.String)">
            <summary>
            指定业务对象是否启用业务预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <returns>启用返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnController.IsEnabledWarn(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.Core.RealTimeWarn.WarnOperationEvent)">
            <summary>
            指定业务对象的操作是否启用业务预警
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="operationCode">操作编码</param>
            <param name="operationEvent">预警操作事件</param>
            <returns>启用返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnController.GetObjectEnableStateToCache(Kingdee.BOS.Context,System.String,Kingdee.BOS.App.Core.RealTimeWarn.Cache.WarnObjectDataCache)">
            <summary>
            获取业务对象启用状态到缓存中
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象ID</param>
            <param name="cache">cache缓存</param>
            <returns>返回当前业务对启用状态</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnMQMessageItem">
            <summary>
            预警MQ消息对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnMQMessageItem.WarnData">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnMQMessageItem.ObjeTypeId">
            <summary>
            业务对象ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnMQMessageItem.OperactionCode">
            <summary>
            操作编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnOperactionService">
            <summary>
            预警操作服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnOperactionService.GetAllWarnOperactionList(Kingdee.BOS.Context)">
            <summary>
            获取所有预警操作列表
            </summary>
            <returns>预警操作列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnOperactionService.GetOperationCode(Kingdee.BOS.Context,System.String)">
            <summary>
            获取操作编码
            </summary>
            <param name="ctx">上下文</param>
            <param name="operactionId">操作ID</param>
            <returns>返回对应操作编码</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser">
            <summary>
            预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.Parse(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo)">
            <summary>
            业务对象预警解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">预警对象</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.ParseByRule(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            按规则解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">预警对象</param>
            <param name="rules">规则列表</param>
            <returns>规则解析结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.SendWarnMessage(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule,Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult)">
            <summary>
            规则解析成功，发送预警消息
            </summary>
            <param name="ctx"></param>
            <param name="warnParseInfo">预警解析信息</param>
            <param name="rule">预警规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.SetMessageReceiver(Kingdee.BOS.Context,Kingdee.BOS.MessageCenter.Model.ObjectMessageSendInfo)">
            <summary>
            设置消息接收人
            </summary>
            <param name="ctx"></param>
            <param name="sendMsgInfo">sendMsgInfo</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.DeleteExecution(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            删除预警方案的执行情况记录
            </summary>
            <param name="rules">预警规则</param>
            <param name="solutionIdList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.RecordRTWarnExecuteRst(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule,Kingdee.BOS.Core.RealTimeWarn.RuleExecuteStatus,System.String)">
            <summary>
            记录预警方案执行情况
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">warnParseInfo</param>
            <param name="rule">规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParser.GetRecevierIds(Kingdee.BOS.Context,System.String)">
            <summary>
            获取接收用户ID数组
            </summary>
            <param name="ctx">上下文</param>
            <param name="sendMessageInfo">发送对象</param>
            <returns>用户ID数组</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch">
            <summary>
            批量预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.Parse(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo)">
            <summary>
            业务对象预警解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">预警对象</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.ParseByRule(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            按规则解析
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">预警对象</param>
            <param name="rules">规则列表</param>
            <returns>规则解析结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.SendWarnMessage(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule,Kingdee.BOS.App.Core.RealTimeWarn.RuleParserResult)">
            <summary>
            规则解析成功，发送预警消息
            </summary>
            <param name="ctx"></param>
            <param name="warnParseInfo">预警解析信息</param>
            <param name="rule">预警规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.SetMessageReceiver(Kingdee.BOS.Context,Kingdee.BOS.MessageCenter.Model.ObjectMessageSendInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            设置消息接收人
            </summary>
            <param name="ctx"></param>
            <param name="sendMsgInfo">sendMsgInfo</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.DeleteExecution(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule})">
            <summary>
            删除预警方案的执行情况记录
            </summary>
            <param name="rules">预警规则</param>
            <param name="solutionIdList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.RecordRTWarnExecuteRst(Kingdee.BOS.Context,Kingdee.BOS.App.Core.RealTimeWarn.WarnParseInfo,Kingdee.BOS.App.Core.RealTimeWarn.RealTimeWarnRule,Kingdee.BOS.Core.RealTimeWarn.RuleExecuteStatus,System.String)">
            <summary>
            记录预警方案执行情况
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnParseInfo">warnParseInfo</param>
            <param name="rule">规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserBatch.GetRecevierIds(Kingdee.BOS.Context,System.String)">
            <summary>
            获取接收用户ID数组
            </summary>
            <param name="ctx">上下文</param>
            <param name="sendMessageInfo">发送对象</param>
            <returns>用户ID数组</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseResult">
            <summary>
            预警结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseResult.IsWarning">
            <summary>
            是否满足预警条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseResult.Levle">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseResult.WarnMessageInfo">
            <summary>
            预警提示消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnParseResult.WarnData">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserFactory">
            <summary>
            warn parser factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserFactory.Create">
            <summary>
            ceate warn parser
            </summary>
            <returns>warn parser</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserFactory.Create(Kingdee.BOS.App.Core.RealTimeWarn.WarnParserType)">
            <summary>
            ceate warn parser
            </summary>
            <returns>msgwarn parser</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserType">
            <summary>
            预警解析类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserType.Normal">
            <summary>
            通用
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.RealTimeWarn.WarnParserType.Batch">
            <summary>
            批量数据解析
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParserFactory">
            <summary>
            warn rule parser factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParserFactory.Create">
            <summary>
            ceate warn parser
            </summary>
            <returns>warn parser</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo">
            <summary>
            预警规则解析信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo.WarnData">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo.WarnRule">
            <summary>
            预警规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.WarnRuleParseInfo.ObjectTypeId">
            <summary>
            业务对象ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter">
            <summary>
            预警方案执行情况Writer
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.DeleteExecution(System.Collections.Generic.List{System.String})">
            <summary>
            删除预警方案的执行情况记录
            </summary>
            <param name="solutionNoList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.DeleteExecution(System.String)">
            <summary>
            删除预警方案的执行情况记录（单条）
            </summary>
            <param name="solutionNoList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.RecordRTWarnExeRst(Kingdee.BOS.Core.RealTimeWarn.WarnExecuteResult)">
            <summary>
            记录预警方案的执行情况
            </summary>
            <param name="warnExecuteRst"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.InsertExeResult(Kingdee.BOS.Core.RealTimeWarn.WarnExecuteResult,System.String)">
            <summary>
            插入预警方案执行情况表
            </summary>
            <param name="warnExecuteRst"></param>
            <param name="fid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.UpdateExeResult(Kingdee.BOS.Core.RealTimeWarn.WarnExecuteResult,System.String)">
            <summary>
            更新预警方案执行情况
            </summary>
            <param name="warnExecuteRst"></param>
            <param name="executionId"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.RealTimeWarn.Writer.WarnExecuteWriter.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Regular.RegularService">
            <summary>
            预警规则服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.GetRegularModel(Kingdee.BOS.Context,System.String)">
            <summary>
            根据规则ID获取规则模型
            </summary>
            <param name="ctx"></param>
            <param name="regularId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.SaveRegularTriggerAction(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            保存规则的触发操作到表T_BAS_REGTRIGGERSELECT
            </summary>
            <param name="ctx"></param>
            <param name="regularId"></param>
            <param name="operationList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.GetRegularTriggerActiong(Kingdee.BOS.Context,System.String)">
            <summary>
            获取规则配置的触发操作列表
            </summary>
            <param name="ctx"></param>
            <param name="regularId">规则ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.GetRegularRef(Kingdee.BOS.Context,System.String)">
            <summary>
            获取规则引用模型
            </summary>
            <param name="ctx">上下文</param>
            <param name="regularId">规则ID</param>
            <returns>规则引用模型</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.ClearCache(Kingdee.BOS.Context,System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Regular.RegularService.ClearAllCache(Kingdee.BOS.Context)">
            <summary>
            清除缓存所有缓存
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SafeService.GetPrivacyPolicyVersion(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取星空隐私政策版本信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>星空版本信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SafeService.UpdatePrivacyPolicyVersion(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置星空隐私政策版本信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="type">隐私政策版本 0 标准 1 云之家 2 星空卫士</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ScheduleService.ScheduleTask.ClearSchdLogsScheduleService">
            <summary>
            清理执行计划日志（一天执行一次）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Printing.PrintControl.BillTypeId">
            <summary>
            单据类型ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Printing.PrintControl.IsAfterAudit">
            <summary>
            是否审核后打印
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Printing.PrintControl.IsControlPrintCount">
            <summary>
            是否控制打印次数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Printing.PrintControl.MaxPrintCounts">
            <summary>
            最大打印次数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintDynamicContext.TrySetValueHandler(System.String,System.Object)">
            <summary>
            屏蔽值设置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.PrintDynamicContext.TryGetValueHandler(System.String,System.Object@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Query.ConvertCountQueryService">
            <summary>
            单据转换数据计数查询服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Query.QueryService">
            <summary>
            数据查询服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetQueryObject(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            传入登录上下文环境及查询对象的参数对象，返回指定单据的列表查询语句对象。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="para">查询对象的参数对象。</param>
            <returns>返回指定单据的列表查询语句对象。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetQuickLookupList(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QuickLookupParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取指定基础资料快速列表查询数据
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetDataBaseTypePrefix(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段值前面是否要加N
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetQuickLookupListByFixedTwo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.QuickLookupParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取指定基础资料快速列表查询数据--固定编码与名称两字段
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetQuickLookupListByConfig(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.QuickLookupParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取指定基础资料快速列表查询数据--依单据参数配置中设置的模糊查询字段列表
            </summary>
            <param name="ctx"></param>
            <param name="queryInfo"></param>
            <param name="para"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.QuickDataCanUseCache(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            模糊查询是否可以使用缓存
            </summary>
            <param name="queryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetSpecialChars(Kingdee.BOS.Context)">
            <summary>
            获取特殊字符
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetDynamicObjectCollection(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取指定单据的列表查询数据
            </summary>
            <param name="ctx">登录上下文</param>
            <param name="para">单据列表查询对象的参数对象</param>
            <param name="paramList">参数列表</param>
            <returns>列表查询数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetDynamicObjectCollectionAndQuerySql(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String@)">
            <summary>
            获取指定单据的列表查询数据
            </summary>
            <param name="ctx">登录上下文</param>
            <param name="para">单据列表查询对象的参数对象</param>
            <param name="paramList">参数列表</param>
            <param name="querySql">执行查询的SQL</param>
            <returns>列表查询数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetMemberwiseDynamicObject(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取表单引用基础资料完整数据包
            </summary>
            <remarks>
            抽象 SelectorBDItemInfo
            </remarks>
            <example>
            对于基础资料，参考：new SelectorBDItemInfo("FSupplierId")
            </example>
            <param name="ctx"></param>
            <param name="para"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.SetSelectEntityTables(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            
            </summary>
            <param name="queryInfo"></param>
            <param name="sqlBuilderParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetDataTable(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            传入登录上下文环境及查询参数，返回指定单据的列表查询数据记录集，不支持分页。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="para">查询参数。</param>
            <param name="paramList">SQL参数对象。</param>
            <returns>返回指定单据的列表查询数据记录集，不支持分页。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryService.GetDataTable(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Boolean,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            传入登录上下文环境及查询参数，返回指定单据的列表查询数据记录集，支持分页。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="para">查询参数。</param>
            <param name="isSupportPaging">是否支持分页。</param>
            <param name="paramList">SQL参数对象。</param>
            <returns>返回指定单据的列表查询数据记录集，支持分页。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.ConvertCountQueryService.GetDataRowCount(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            查询数据行计数统计
            </summary>
            <param name="ctx">环境上下文</param>
            <param name="para">查询对象参数</param>
            <param name="paramList">SQL参数</param>
            <returns>数据行计数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.ConvertCountQueryService.GetDataRowCountNoRefItem(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            查询数据行计数统计，排查引用属性
            </summary>
            <param name="ctx">环境上下文</param>
            <param name="para">查询对象参数</param>
            <param name="paramList">SQL参数</param>
            <returns>数据行计数</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Report.AbstractDevReportService">
            <summary>
            万能报表数据服务基类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.GetDevReportDataSource(Kingdee.BOS.Context,System.String,System.Object[],System.Data.DataSet,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            获取万能报表数据源
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">表单标识</param>
            <param name="pkArray">单据内码集合</param>
            <param name="ds">数据源</param>
            <param name="dispNameDicts">各节点显示名称</param>
            <param name="includeControlField">是否处理控制字段</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.Do_Bill(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Report.AbstractDevData,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.App.Core.MetadataXmlReader,Kingdee.BOS.App.Core.BusinessDataReader,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean,System.String)">
            <summary>
            解析单据元数据及数据包
            </summary>
            <param name="ctx">上下文</param>
            <param name="devData">报表数据源</param>
            <param name="dispNameDicts">各节点显示名称</param>
            <param name="metadata">表单元数据</param>
            <param name="reader">元数据加载器</param>
            <param name="dataReader">业务数据加载器</param>
            <param name="billData">单据数据包</param>
            <param name="includeControlField">是否处理控制字段</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.Do_BaseData(Kingdee.BOS.App.Core.Report.AbstractDevData,System.Data.DataTable,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.App.Core.MetadataXmlReader,Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.List{System.String})">
            <summary>
            解析基础资料类型及数据包，生成Datatable
            </summary>
            <param name="devData">报表数据源</param>
            <param name="parent">父级Datatable</param>
            <param name="bdField">基础资料字段</param>
            <param name="entity"></param>
            <param name="reader">元数据加载器</param>
            <param name="ctx">上下文</param>
            <param name="dispNameDicts">各节点显示名称</param>
            <param name="metadata">表单元数据</param>
            <param name="bdDatas">基础资料字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.SetImage(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.List{System.String})">
            <summary>
            分配类基础资料非创建组织时图片字段处理
            </summary>
            <param name="ctx"></param>
            <param name="bi"></param>
            <param name="bdDatas"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.Do_Entity(Kingdee.BOS.App.Core.Report.AbstractDevData,System.Data.DataTable,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.App.Core.MetadataXmlReader,Kingdee.BOS.App.Core.BusinessDataReader,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            解析单据头或单据体元数据及数据包，生成Datatable
            </summary>
            <param name="devData">报表数据源</param>
            <param name="parent">父级Datatable</param>
            <param name="entity">需要解析的单据头或单据体</param>
            <param name="metadata">表单元数据</param>
            <param name="reader">元数据加载器</param>
            <param name="dataReader">业务数据加载器</param>
            <param name="dispNameDicts">各节点显示名称</param>
            <param name="ctx">上下文</param>
            <param name="billData">单据数据包</param>
            <param name="includeControlField">是否处理控制字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.AbstractDevReportService.AddTable(Kingdee.BOS.App.Core.Report.AbstractDevData,System.Data.DataTable,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            报表数据源增加数据表
            </summary>
            <param name="devData"></param>
            <param name="table"></param>
            <param name="formId"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Report.DataSetExt">
            <summary>
            标准数据集
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Report.DevReportRuntimeService">
            <summary>
            万能报表运行时数据服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportRuntimeService.GetBillData(Kingdee.BOS.Context,System.String,System.String,System.Object[])">
            <summary>
            单据类取数
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">源单内码</param>
            <param name="reportId">报表内码</param>
            <param name="pkArray">单据内码列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportRuntimeService.GetBillReportTemplate(Kingdee.BOS.Context,System.String)">
            <summary>
            获得单据标准打印模板
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">源单标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportRuntimeService.GetBillReportResult(Kingdee.BOS.Context,System.String,System.String,System.Object[])">
            <summary>
            获取万能报表结果
            </summary>
            <param name="ctx"></param>
            <param name="formId">表单标识</param>
            <param name="reportId">报表内码</param>
            <param name="pkArray">单据内码列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.PythonReportServicePlugIn.InvokePluginMethod(System.String,System.Object,System.Object)">
            <summary>
            多参数InvokePluginMethod方法重写
            </summary>
            <param name="name"></param>
            <param name="args1"></param>
            <param name="args2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RobotService.GetRobotNextTask(Kingdee.BOS.Context)">
            <summary>
            当前用户获取一条可执行的任务
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RobotService.GetCurrentUserWatingTask(Kingdee.BOS.Context)">
            <summary>
            获取当前用户正在等待的任务
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.RobotService.UptateRobotTaskStatus(Kingdee.BOS.Context,System.Int64,Kingdee.BOS.Core.Enums.BOSEnums.Enu_RobotTaskStatus)">
            <summary>
            当期用户更新机器人任务状态
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ClearScheduleMsg.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            清理执行计划消息和反写日志消息
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.GetScheduleMsgConfigInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            得到执行计划配置消息
            </summary>
            <param name="ctx"></param>
            <param name="scheduleTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.GetScheduleMsgConfigs(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            得到执行计划配置集合
            </summary>
            <param name="ctx"></param>
            <param name="scheduleTypeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.InsertScheduleMsgAsyn(Kingdee.BOS.Context,Kingdee.BOS.Core.ScheduleMsg,System.Action{Kingdee.BOS.KDThread.AsynResult})">
            <summary>
            执行计划异步增加消息
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <param name="asynAction"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.InsertScheduleMsg(Kingdee.BOS.Context,Kingdee.BOS.Core.ScheduleMsg)">
            <summary>
            增加执行计划消息
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.GetConfigInfoByUserId(Kingdee.BOS.Context,System.Int64)">
            <summary>
             得到用户的配置信息
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.AutoClearSchduelMsg(Kingdee.BOS.Context)">
            <summary>
            自动清理执行计划消息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgDal.GetScheduleName(Kingdee.BOS.Context,System.String)">
            <summary>
            得到执行计划名称
            </summary>
            <param name="ctx"></param>
            <param name="scheduleTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleMsgService.GetConfigInfoByUserId(Kingdee.BOS.Context,System.Int64)">
            <summary>
             得到用户的配置信息
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.MQMessageService">
            <summary>
            MQ消息服务处理接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.MQMessageService.ExcuteMessageService(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedules.AsyncMessage)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ScheduleService.ScheduleTask.IntelligenceDataScheduleService">
            <summary>
            智能数据服务定时取数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ScheduleService.ScheduleTask.IntelligenceConfigScheduleService">
            <summary>
            智能数据服务客户所属云定时更新
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ScheduleService.ScheduleTask.LightAnalysisMenu">
            <summary>
            调用轻分析接口，预置轻分析应用菜单
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService">
            <summary>
            SHR消息服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.IsExistUnreadMsg(Kingdee.BOS.Context)">
            <summary>
            返回是否存在未读的异常消息日志
            </summary>
            <param name="ctx">上下文对象</param>
            <returns>返回是否存在，true-存在</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.UpdateReadedMsg(Kingdee.BOS.Context,System.String)">
            <summary>
            更新已读异常日志
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="filter">过滤条件</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.IsSHRForbidden(Kingdee.BOS.Context)">
            <summary>
            SHR集成配置是否停用
            </summary>
            <param name="ctx">上下文对象</param>
            <returns>返回是否停用</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.GetMsgAcceptor(Kingdee.BOS.Context)">
            <summary>
            获取异常消息接收人ID
            </summary>
            <param name="ctx">上下文对象</param>
            <returns>异常消息接收人ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.IsTodayFirstTimeLogin(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            用户今天是否是第一次登录
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="time">时间</param>
            <returns>是或否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SHRManagement.SHRMessageService.TodayLoginTimes(Kingdee.BOS.Context,System.Int64,System.DateTime)">
            <summary>
            用户当天登录次数
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="userid">用户ID</param>
            <param name="time">时间</param>
            <returns>次数</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.Parser.TargetParser">
            <summary>
            指标计算解析执行类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParser.SetWarnExecuteType(Kingdee.BOS.Core.Target.Enums.TargetEnums.ExecuteType)">
            <summary>
            设置执行类型
            </summary>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParser.ParseExecute(Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            执行预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParser.PlugInCalculate(Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult,Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            插件计算
            </summary>
            <param name="runResult">计算结果</param>
            <param name="targetSchedule">指标计划</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParser.CreateTargetCalculatePlugIn(Kingdee.BOS.BusinessEntity.Target.TargetCalPlugInModel)">
            <summary>
            创建指标计算插件
            </summary>
            <param name="targetCalPlugInModel">指标计算插件模型</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParser.ExecuteType">
            <summary>
            执行方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParser.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult">
            <summary>
            指标计算执行结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.IsSuccessful">
            <summary>
            是否成功
            </summary>  
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.MessageCode">
            <summary>
            消息编码
            </summary>     
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.ExecuteStatus">
            <summary>
            执行状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult.ExecuteType">
            <summary>
            执行类型 自动或手动
            </summary>   
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan">
            <summary>
            指标计算时长类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.LastTimeSpan">
            <summary>
            持续时长
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.RealTimeSpan">
            <summary>
            取当前时间比较持续时长
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.Parser.TargetParseTimeSpan.IsBusy">
            <summary>
            是否启动
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService">
            <summary>
            指标计算执行情况保存服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService._targetExecutionBusinessInfo">
            <summary>
            指标执行情况元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService.Save(Kingdee.BOS.Core.Target.TargetExecuteResult)">
            <summary>
            保存数据到数据库中
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService.CreateTargetExecutionDyObj(Kingdee.BOS.Core.Target.TargetExecuteResult)">
            <summary>
            创建指标值动态模型
            </summary>
            <param name="targetValueList"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.TargetExcutionSaveService.TargetExecutionBusinessInfo">
            <summary>
            指标值元数据信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetScheduleReader">
            <summary>
            指标计划Reader
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetTargetScheduleList(System.Nullable{System.Boolean},System.Nullable{Kingdee.BOS.Core.Target.Enums.TargetEnums.ExecuteType},System.String[])">
            <summary>
            获取指标执行计划列表（不是Schedule）
            </summary>
            <param name="isRun">是否启用</param>
            <param name="executeType">执行方式</param>
            <param name="targetIds">指标ID</param>
            <returns>指标计划列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.CreateTargetScheduleSQL(System.Nullable{System.Boolean},System.Nullable{Kingdee.BOS.Core.Target.Enums.TargetEnums.ExecuteType},System.String[],System.String@,System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            构建查询指标任务语句
            </summary>
            <param name="isRun">是否启用</param>
            <param name="executeType">执行方式</param>
            <param name="targetIds">指标ID</param>
            <param name="strSql">输出SQL</param>
            <param name="list">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.PackageTargetScheduleInfo(System.Data.IDataReader,Kingdee.BOS.Core.Target.TargetSchedule,System.String)">
            <summary>
            打包指标计划相关的信息
            </summary>
            <param name="reader"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.SetTargetCalPlugInModel(System.Data.IDataReader,Kingdee.BOS.Core.Target.TargetSchedule,System.String)">
            <summary>
            设置指标计算插件模型值
            </summary>
            <param name="reader"></param>
            <param name="targetSchedule">指标计划</param>
            <param name="targetid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetIntPaseValue(System.String)">
            <summary>
            字符串解析成INT
            </summary>
            <param name="strtoPase"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetLongPaseValue(System.String)">
            <summary>
            字符串解析成BIGINT
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetDatePaseValue(System.String,System.String)">
            <summary>
            字符串解析成DateTime
            </summary>
            <param name="strtoPase"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetTaregetExecuteTime(System.Data.IDataReader)">
            <summary>
            取指标执行时间
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetTargetDimenList(System.String)">
            <summary>
            获取指标维度列表
            </summary>
            <param name="targetDimen">维度字符串</param>
            <returns>维度列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleReader.GetBelongObjDimenList(Kingdee.BOS.Context,System.String)">
            <summary>
            根据指标id获取所属对象维度列表
            </summary>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetScheduleService">
            <summary>
            指标执行计划服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            启动TargetSchedule后台计算任务
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划任务信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.ManualRunSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            手动执行指标计算
            </summary>
            <param name="ctx"></param>
            <param name="targetScheList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.Initialize(Kingdee.BOS.Context,Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            初始化状态为准备
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.GetAllScheduleList(Kingdee.BOS.Context)">
            <summary>
            获得所有指标计划列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.CheckScheduleIsReadyAndUpdateStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            是否有准备中的指标执行计划
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.UpdateExecuteTime(Kingdee.BOS.Context,Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            更新指标执行时间
            </summary>
            <param name="ctx"></param>
            <param name="targetSche"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleService.RecordTargetParseResult(Kingdee.BOS.Context,Kingdee.BOS.Core.Target.TargetSchedule,Kingdee.BOS.App.Core.Target.Parser.TargetParseRunResult)">
            <summary>
            记录指标计算情况
            </summary>
            <param name="ctx">上下文</param>
            <param name="targetSche">指标计划</param>
            <param name="parseExeResult">执行计算结果</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetScheduleWriter">
            <summary>
            指标计划Writer
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleWriter.InitScheduleStatus(Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            初始化指标计算任务状态
            </summary>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.Target.TargetScheduleWriter.CheckScheduleIsReadyAndUpdateStatus(Kingdee.BOS.Core.Target.TargetSchedule)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleWriter.UpdateExecuteTime(Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            更新指标下次执行时间
            </summary>
            <param name="targetSche">指标任务</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetScheduleWriter.GetNextExecuteTime(Kingdee.BOS.Core.Target.TargetSchedule)">
            <summary>
            获取下次执行时间
            </summary>
            <param name="targetSche"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetService">
            <summary>
            指标接口服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.DeleteTargetValue(Kingdee.BOS.Context,System.String)">
            <summary>
            删除指标值
            </summary>
            <param name="ctx">上下文</param>
            <param name="targetId">指标ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.ManualRun(Kingdee.BOS.Context,System.String)">
            <summary>
            手动执行
            </summary>
            <param name="ctx">上下文</param>
            <param name="targetId">指标ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.GetTargetUseObjectList(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务对象的应用指标模型
            </summary>
            <param name="ctx"></param>
            <param name="objectId">业务对象ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.GetTargetValue(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            根据指标ID、维度ID、应用对象ID获取对应的指标值
            </summary>
            <param name="ctx"></param>
            <param name="targetId"></param>
            <param name="dimenId"></param>
            <param name="useObjId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.GetTargetValue(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Target.TargetUseObjectModel,System.String)">
            <summary>
            根据指标ID、维度ID、应用对象ID、应用对象对应字段值获取对应的指标值
            </summary>
            <param name="ctx"></param>
            <param name="targetUseObj">应用对象模型</param>
            <param name="dimenValue">应用对象字段值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetService.SetTargetValueType(System.String)">
            <summary>
            设置指标值类别
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Target.TargetValueSaveService">
            <summary>
            指标值保存服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Target.TargetValueSaveService._targetValueBusinessInfo">
            <summary>
            指标值元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetValueSaveService.Save(System.Collections.Generic.List{Kingdee.BOS.Core.Target.TargetValue})">
            <summary>
            保存数据到数据库中
            </summary>
            <param name="sendDisplayWarnMessageCollection">发送消息集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Target.TargetValueSaveService.CreateTargetValueDyObj(System.Collections.Generic.List{Kingdee.BOS.Core.Target.TargetValue})">
            <summary>
            创建指标值动态模型
            </summary>
            <param name="targetValueList"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.TargetValueSaveService.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Target.TargetValueSaveService.TargetValueBusinessInfo">
            <summary>
            指标值元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.SimplePassportService.GetSimpleEntityInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            通过签名获取到第三方登录信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="linkId">链接ID</param>
            <returns>第三方登录信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.SimplePassportService.UpdateSimpleEntityInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.SimplePassport.SimplePassportEntityInfo)">
            <summary>
            修改第三方系统登录单据体信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据体信息</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.SimplePassportService.InsertSimpleEntityInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.SimplePassport.SimplePassportEntityInfo)">
            <summary>
            添加第三方系统登录单据体信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据体信息</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.SimplePassportService.DeleteSimpleEntityInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.SimplePassport.SimplePassportEntityInfo)">
            <summary>
            删除第三方系统登录单据体信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据体信息</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.SimplePassportService.ClearSimpleEntityInfo(Kingdee.BOS.Context)">
            <summary>
            清除第三方系统登录单据体信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackAllFlowService.GetInstanceByCrossEntity(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.LoadInstancesByCrossEntityIdArgs)">
            <summary>
            获得跨实体的业务流程实例列表
            </summary>
            <param name="args">获得跨实体的业务流程实例</param>
            <returns>跨实体的业务流程实例列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackAllFlowService.LoadInstancesByCrossEntityIdArgs(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取跨实体的业务流程实例参数列表
            </summary>
            <param name="info"></param>
            <param name="data">单据数据</param>
            <returns>跨实体的业务流程实例参数列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackAllFlowService.LoadInstancesByCrossEntityIdArgsById(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取跨实体的业务流程实例参数列表
            </summary>
            <param name="formId">表单内码</param>
            <param name="pkValue">单据内码</param>
            <returns>跨实体的业务流程实例参数列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject">
            <summary>
            联查服务类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject._dctTableDefine">
            <summary>
            本地缓存的表格定义对象；Dictionary(tableNumber, TableDefine)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject._businessInfoDict">
            <summary>
            缓存的业务对象元数据包
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject._context">
            <summary>
            登录上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.#ctor(Kingdee.BOS.Context)">
            <summary>
            联查服务
            </summary>
            <param name="context">登录上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadInstancesByCrossEntityIdArgs(System.String,System.String)">
            <summary>
            获取跨实体的业务流程实例参数列表
            </summary>
            <param name="formId">表单内码</param>
            <param name="pkValue">单据内码</param>
            <returns>跨实体的业务流程实例参数列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetAllLinkEntityIds(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.EntityElement.Entity},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Tuple{System.Int64,System.Int64}}})">
            <summary>
            确保联查时，使用了关联实体的内码；这样在列表展示其他单据体时，仍然能够按整单模式读取关联实体的关联数据，方便用户浏览关联数据
            </summary>
            <param name="businessInfo">业务对象</param>
            <param name="headEntity">单据头实体</param>
            <param name="linkEntities">关联实体</param>
            <param name="allEntityIds">所有实体内码列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.BuildEntityFilter(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.Int64})">
            <summary>
            构建过滤实体行的条件
            </summary>
            <param name="businessInfo">业务信息对</param>
            <param name="billIds">单据内码列表</param>
            <returns>过滤实体行的条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadInstancesByCrossEntityIdArgs(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取跨实体的业务流程实例参数列表
            </summary>
            <param name="info">业务信息对象</param>
            <param name="data">单据数据</param>
            <returns>跨实体的业务流程实例参数列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetInstanceByCrossEntity(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.LoadInstancesByCrossEntityIdArgs)">
            <summary>
            获得跨实体的业务流程实例列表
            </summary>
            <param name="args">获得跨实体的业务流程实例</param>
            <returns>跨实体的业务流程实例列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetLinkEntitys(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            得到关联主实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadBusinessInfo(System.String)">
            <summary>
            加载业务对象元数据包
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadRouteNodeFormId(System.String)">
            <summary>
            加载流程图节点对应的单据
            </summary>
            <param name="tableNumber">表格编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetTableDefine(System.String)">
            <summary>
            获得表定义
            </summary>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadAllInstances(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Tuple{System.Int64,System.Int64}}},System.Collections.Generic.List{System.Int64},Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            加载单据全部实体的全部业务流程实例
            </summary>
            <param name="allEntityIds">所有分录内码集合</param>
            <param name="billIds">单据内码集合</param>
            <param name="info">同步输出本次发起联查的单据体内码</param>
            <returns>全部业务流程实例</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.IsHeadEntity(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            是否是否为单据头
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.ChangeEntityQuery(System.Boolean,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance}@)">
            <summary>
            跨实体联查
            </summary>
            <param name="enableCrossEntity">强制启用跨实体联查</param>
            <param name="entityInstances">流程实例列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetAllChilds(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode)">
            <summary>
            得到所有子节点，这种情况兼容跨业务流程实例的情况
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetInstances(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}})">
            <summary>
            
            </summary>
            <param name="dicTbNameIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.GetFilterCondition(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{System.Int64})">
            <summary>
            得到过滤条件
            </summary>
            <param name="businessInfo"></param>
            <param name="entity"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.LoadInstancesByEntryIds(System.String,System.String,System.Int64[])">
            <summary>
            加载单据体关联的全部业务流程实例
            </summary>
            <param name="formId">单据</param>
            <param name="entityKey">单据体</param>
            <param name="entityIds">单据体内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.MergeInstances(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            把业务流程实例按照MasterId进行合并
            </summary>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.JoinGroupRouteTree(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance})">
            <summary>
            对一组实例的首尾节点进行合并，合并结果返回，其他实例丢弃
            </summary>
            <param name="groupInstances"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.JoinRouteTreeNode(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode,Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode)">
            <summary>
            把子流程的首节点，合并到父流程的尾节点中
            </summary>
            <param name="childInstanceNode">子实例</param>
            <param name="parentInstanceNode">父实例</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.RemoveJointlessNodes(System.String,System.String,System.Int64[],System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance})">
            <summary>
            从流程实例中，移除与发起联查单据无关的路线节点
            </summary>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <param name="entityIds"></param>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackAllFlow.TrackServiceObject.RemoveJointlessChildNodes(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode,System.String,System.Int64[])">
            <summary>
            递归搜索节点及其子节点，移除全部与目标单据无关的路线
            </summary>
            <param name="parendNode"></param>
            <param name="tableNumber"></param>
            <param name="entityIds"></param>
            <returns></returns>
            <remarks>
            如果节点本身为目标单据，保留；
            如果节点子节点为目标单据，本节点保留，本节点的其他分支继续搜索
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Trial.TrialInfoService">
            <summary>
            试用特性服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.GetTrialInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取功能菜单试用信息
            </summary>
            <param name="ctx"></param>
            <param name="funcDetailId">功能菜单Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.GetAllUsefulTrialInfo(Kingdee.BOS.Context,System.Boolean)">
            <summary>
             获取全部有用的特性试用菜单信息
            </summary>
            <param name="ctx"></param>
            <param name="isUpdateOverdue">是否同时更新过期</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.IsUsefulStatusIn(System.String)">
            <summary>
            是否弹试用提示
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.UpdateTrialStatus(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新试用状态
            </summary>
            <param name="ctx"></param>
            <param name="formid">菜单formid</param>
            <param name="status">状态值0-未申请 1-试用中 2-试用过期 3-试用结束</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.GetAllTrialFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据特性编码获取特性的所有菜单ID
            </summary>
            <param name="ctx"></param>
            <param name="number">特性编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.GetCustTrial(Kingdee.BOS.Context,System.String)">
            <summary>
            获取客户试用信息
            </summary>
            <param name="ctx"></param>
            <param name="formid">表单ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoService.SendTrialExpMessage(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            发送试用到期提醒
            </summary>
            <param name="ctx"></param>
            <param name="messageService">messageService</param>
            <param name="model">消息设置模型</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Trial.TrialInfoWriter">
            <summary>
            特性试用信息获取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.UpdateOrInsertTrialInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.Trial.TrialInfo})">
            <summary>
            更新、插入特性试用信息
            </summary>
            <param name="ctx"></param>
            <param name="trialInfoList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.InsertTrialInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            插入试用特性数据
            </summary>
            <param name="ctx"></param>
            <param name="trial"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.UpdateTrial(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            更新试用特性数据
            </summary>
            <param name="ctx"></param>
            <param name="trial"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.UpdateTrialEndTime(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo,System.String)">
            <summary>
            正常的状态更新时间
            </summary>
            <param name="ctx"></param>
            <param name="trial">云端试用信息</param>
            <param name="endTime">加密试用截止时间</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.UpdateOntrial(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo,System.String)">
            <summary>
            产品端试用已经到期，需要刷新试用到期状态为试用中
            </summary>
            <param name="ctx"></param>
            <param name="trial">云端试用信息</param>
            <param name="endTime">加密试用截止时间</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.UpdateUnOrForbidTrial(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo,System.String)">
            <summary>
            1、停止试用  2、云端禁用了特性，并且产品端版本小于特性发文的版本
            </summary>
            <param name="ctx"></param>
            <param name="trial">云端试用信息</param>
            <param name="endTime">加密试用截止时间</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.Encrypt(System.String,System.String)">
            <summary>
            加密密钥
            </summary>
            <param name="password">需加密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>加密后密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialInfoWriter.Decrypt(System.String,System.String)">
            <summary>
            解密密钥
            </summary>
            <param name="strToDecrypt">需解密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>解密后密钥</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Trial.TrialScheduleService">
            <summary>
            特性试用执行计划
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialScheduleService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划任务信息</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Trial.TrialSyncTask">
            <summary>
            特性试用同步任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialSyncTask.SyncTrialInfo">
            <summary>
            特性试用同步任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialSyncTask.GetAllTrialInfo">
            <summary>
            获取试用特性信息接口
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Trial.TrialSyncTask.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Trial.TrialUtils">
            <summary>
            特性试用Utils
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.SetCanBuyFeatureUnTrial(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            设置已发文特性为停止试用
            </summary>
            <param name="trialInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.UpdateFeatureUntrial(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            更新试用特性为停止试用状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="trialInfo">试用信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.Encrypt(System.String,System.String)">
            <summary>
            加密密钥
            </summary>
            <param name="password">需加密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>加密后密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.Decrypt(System.String,System.String)">
            <summary>
            解密密钥
            </summary>
            <param name="strToDecrypt">需解密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>解密后密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.IsBuyTrialFeature(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            是否购买试用特性
            </summary>
            <param name="trialInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Trial.TrialUtils.IsExpAndNotTrialBefore(Kingdee.BOS.BusinessEntity.Trial.TrialInfo)">
            <summary>
            是否试用到期以前未试用
            </summary>
            <param name="trialInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Utils.DevReportUtils">
            <summary>
            万能报表工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetEntityDatas(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            取得Entity动态实体数据包集合
            </summary>
            <param name="entity">单据头或单据体</param>
            <param name="billData">单据动态实体数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetSubEntityDatas(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            取得子级Entity动态实体数据包集合
            </summary>
            <param name="entity">非单据头entity</param>
            <param name="parentDatas">父级Entity动态实体数据包集合；单据头的parentDatas则是单据动态实体数据包集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetEntityValue(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            取得Entity动态实体集合数据包
            </summary>
            <param name="entity"></param>
            <param name="obj">数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetFieldValue(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            取得字段值
            </summary>
            <param name="field">字段</param>
            <param name="obj">entity数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetEntityChain(Kingdee.BOS.Core.Metadata.EntityElement.SubEntryEntity)">
            <summary>
            取得子单据体的父级Entity链
            </summary>
            <param name="subEntryEntity">子单据体</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetEntityBindingPath(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取得Entity对应Datatable在万能报表数据源中的层级路径
            </summary>
            <param name="entity">Entity</param>
            <param name="billBusiInfo">单据元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetBdTableName(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.Metadata.EntityElement.HeadEntity,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取得基础资料字段对应数据表的名称
            </summary>
            <param name="bdField">基础资料字段</param>
            <param name="bdHeadEntity">基础资料类型元数据的单据头</param>
            <param name="entity">当前entity</param>
            <param name="billBusiInfo">单据元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetBdDatas(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从单据数据包中取得基础资料字段的动态实体数据包集合
            </summary>
            <param name="bdField">基础资料字段</param>
            <param name="billData">单据数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetFullBdDatas(System.Collections.Generic.List{System.Object},Kingdee.BOS.App.Core.BusinessDataReader,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取得基础资料字段完整的动态实体数据包集合
            </summary>
            <param name="lstPK">基础资料主键值集合</param>
            <param name="reader">业务数据读取</param>
            <param name="bdBusinessInfo">基础资料元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.IsImageFileServerField(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            是否是图片（文件服务器字段）
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.ParseField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{System.Object},Kingdee.BOS.App.Core.MetadataXmlReader,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="field">字段</param>
            <param name="queryInfo">单据QueryInfo</param>
            <param name="fieldDatas">字段值集合</param>
            <param name="reader">元数据读取</param>
            <param name="dicFieldType">Datatable列类型</param>
            <param name="dicFieldValue">Datatable列值集合</param>
            <param name="dicKey2Caption">字段显示名称</param>
            <param name="dickey2FieldName">Datatable列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.ParseBaseDataField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{System.Object},Kingdee.BOS.App.Core.MetadataXmlReader,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析基础资料字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="bdField">基础资料字段</param>
            <param name="queryInfo">单据QueryInfo</param>
            <param name="fieldDatas">字段值集合</param>
            <param name="reader">元数据读取</param>
            <param name="dicFieldType">Datatable列类型</param>
            <param name="dicFieldValue">Datatable列值集合</param>
            <param name="dicKey2Caption">字段显示名称</param>
            <param name="dickey2FieldName">Datatable列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.ParseFlexField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.RelatedFlexGroupField,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{System.Object},System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析弹性域字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="flexField">弹性域字段</param>
            <param name="queryInfo">单据QueryInfo</param>
            <param name="fieldDatas">字段值集合</param>
            <param name="dicFieldType">Datatable列类型</param>
            <param name="dicFieldValue">Datatable列值集合</param>
            <param name="dicKey2Caption">字段显示名称</param>
            <param name="dickey2FieldName">Datatable列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.ParseLargeTextField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.LargeTextField,System.Collections.Generic.List{System.Object},System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析大文本字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="largeTextField">大文本字段</param>
            <param name="fieldDatas">字段值集合</param>
            <param name="dicFieldType">Datatable列类型</param>
            <param name="dicFieldValue">Datatable列值集合</param>
            <param name="dicKey2Caption">字段显示名称</param>
            <param name="dickey2FieldName">Datatable列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.ParseImageField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.FileServerField,System.Collections.Generic.List{System.Object},System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析图片类字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="fileSrvField">图片字段</param>
            <param name="fieldDatas">字段值集合</param>
            <param name="dicFieldType">Datatable列类型</param>
            <param name="dicFieldValue">Datatable列值集合</param>
            <param name="dicKey2Caption">字段显示名称</param>
            <param name="dickey2FieldName">Datatable列名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetImageByte(System.Object)">
            <summary>
            获取图片字节流数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetControlFieldData(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            取得控制字段值
            </summary>
            <param name="ctrlField">控制字段</param>
            <param name="busiInfo">单据元数据</param>
            <param name="currentEntity">当前Entity</param>
            <param name="entityData">字段所在entity的数据包</param>
            <param name="billData">单据数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetPKType(Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType)">
            <summary>
            取得主键的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetNeedFields(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取得需要处理的字段
            </summary>
            <param name="fields">所有字段</param>
            <param name="busiInfo">单据元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetNeedFieldByBindCols(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取实际绑定字段
            </summary>
            <param name="fieldList"></param>
            <param name="info"></param>
            <param name="baseTableName"></param>
            <param name="bingCols"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetNeedFieldsIncludeControlField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取得需要处理的字段（包括控制字段）
            </summary>
            <param name="fields">所有字段</param>
            <param name="busiInfo">单据元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetImageByte(Kingdee.BOS.Context,System.Object)">
            <summary>
            获取图片字节流数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetColumnName(System.String)">
            <summary>
            自动处理超过30个字符的列名
            </summary>
            <param name="colName">列名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.DevReportUtils.GetLastKey(System.String)">
            <summary>
            截取完整标识 FMaterialId.FStock.FName的FName标识
            </summary>
            <param name="fullKey"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService">
            <summary>
            税务后台
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            计划入口
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.Sync(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            同步
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="cycleFieldKey"></param>
            <param name="StatusFieldname"></param>
            <param name="sync"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.ManualSyncTax(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            手动发送税务信息
            </summary>
            <param name="ctx"></param>
            <param name="plan"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.SyncTax(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步税务信息
            </summary>
            <param name="ctx"></param>
            <param name="plan"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.LogFailInfo(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.DynamicForm.OperationResult,System.String)">
            <summary>
            记录失败信息
            </summary>
            <param name="ctx"></param>
            <param name="excuteObj"></param>
            <param name="billOperationResult"></param>
            <param name="message"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.SaveExcuteLogObject(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存日志对象
            </summary>
            <param name="ctx"></param>
            <param name="excuteObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.GenAndSendTaxFiles(Kingdee.BOS.Context,Kingdee.BOS.Core.TaxManagement.AbstractTaxManagementPlugin,System.String,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.DynamicForm.OperationResult,Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            产生税务文件
            </summary>
            <param name="urls"></param>
            <param name="physicalAddresses"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.DeleteTaxFiles(Kingdee.BOS.Core.TaxManagement.TaxDatas)">
            <summary>
            删除发票云文件
            </summary>
            <param name="datas"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.StaticResultMessage(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.TaxManagement.TaxDatas,System.Int32,Kingdee.BOS.Core.DynamicForm.OperationResult)">
            <summary>
            统计同步结果信息
            </summary>
            <param name="excuteObj"></param>
            <param name="datas"></param>
            <param name="successCount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.GetExcuteLogObject(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            产生执行日志对象
            </summary>
            <param name="ctx"></param>
            <param name="plan"></param>
            <param name="excuteType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.SendTaxFiles(Kingdee.BOS.Core.TaxManagement.TaxDatas,System.Collections.Generic.Dictionary{System.String,System.Object},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Core.TaxManagement.AbstractTaxManagementPlugin,Kingdee.BOS.Core.DynamicForm.OperationResult,Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            发送税务文件
            </summary>
            <param name="datas"></param>
            <param name="taxDic"></param>
            <param name="orgEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.SendTaxFile(Kingdee.BOS.Core.TaxManagement.TaxDatas,Kingdee.BOS.Core.TaxManagement.TaxData,System.Collections.Generic.Dictionary{System.String,System.Object},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Core.TaxManagement.AbstractTaxManagementPlugin,Kingdee.BOS.Core.DynamicForm.OperationResult,Kingdee.BOS.Computing.ComputeContext,System.Int32@)">
            <summary>
            发送税务文件
            </summary>
            <param name="datas"></param>
            <param name="data"></param>
            <param name="taxDic"></param>
            <param name="orgEntry"></param>
            <param name="plugin"></param>
            <param name="billOperationResult"></param>
            <param name="computeCtx"></param>
            <param name="successCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.LogEntryInfo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.DynamicForm.OperateResult,System.String,System.Boolean)">
            <summary>
            记录分录日志
            </summary>
            <param name="entryObj"></param>
            <param name="operateResult"></param>
            <param name="message"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.GetTaxNumberDic(Kingdee.BOS.Context)">
            <summary>
             获取税号的字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.SendFile(System.Byte[],System.String,System.String,System.String@)">
            <summary>
            发送压缩文件；
            </summary>
            <param name="bytes"></param>
            <param name="token"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.GetToken(System.String,System.String,System.String@)">
            <summary>
            获取Token信息
            </summary>
            <param name="clientId"></param>
            <param name="clientSec"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.GetDataPagin(System.IO.Stream,System.Int64,System.Text.Encoding)">
            <summary>
            获取数据
            </summary>
            <param name="stream"></param>
            <param name="maxlength"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TaxManagement.TaxSyncService.PrepareDataTable(System.String)">
            <summary>
            准备表结构
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService">
            <summary>
            第三方系统集成服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.VerifySignature(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdPartySystemInfo)">
            <summary>
            验证第三方系统的用户签名
            </summary>
            <param name="ctx">上下文</param>
            <param name="data">第三方系统信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.WriteLog(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThridSysLogInfo)">
            <summary>
            记录第三方系统日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="data">日志信息</param>
            <returns>是否记录成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetThirdUserInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserRequest)">
            <summary>
            获取第三方系统用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="param">请求参数</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetThirdUserMapInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo)">
            <summary>
            获取第三方系统用户映射关系
            </summary>
            <param name="ctx">上下文</param>
            <param name="userInfo">用户信息</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.SaveThirdUserMap(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.ThirdSysUserInfo)">
            <summary>
            添加第三方集成用户映射
            </summary>
            <param name="ctx">上下文</param>
            <param name="userInfo">用户信息</param>
            <returns>是否报错成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetManagerUrl(Kingdee.BOS.Context)">
            <summary>
            获取轻应用地址配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetUserOpenIdList(Kingdee.BOS.Context,Kingdee.BOS.Core.Enums.BOSEnums.ThirdPlatformType)">
            <summary>
            获取用户openId（动态密码PC端登录时调用）
            </summary>
            <param name="ctx"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetMobileStandardsIntegrationConfig(Kingdee.BOS.Context)">
            <summary>
            获取轻应用标准集成参数设置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.GetDynamicObjectValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            获取动态对象中的值
            </summary>
            <param name="dynamicObject"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ThirdPartySystem.ThirdPartySystemService.SaveMobileStandardsIntegrationConfig(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ThirdSystem.MobileStandardsIntegrationConfig)">
            <summary>
            保存轻应用标准集成参数设置
            </summary>
            <param name="ctx"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.FieldEncryptionHelper.Encryption(System.Object,System.Boolean)">
            <summary>
            对字段加密
            </summary>
            <param name="val"></param>
            <exception cref="T:System.Exception">密钥异常时抛出异常</exception>
            <returns>加密结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.FieldEncryptionHelper.Descryption(System.Object,System.Boolean)">
            <summary>
            对字段解密
            </summary>
            <param name="val"></param>
            <exception cref="T:System.Exception">密钥异常时抛出异常</exception>
            <returns>解密结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.FieldEncryptionHelper.SetFeildEncrpty(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Boolean)">
            <summary>
            设置字段启用数据加密
            </summary>
            <exception cref="T:System.Exception">密钥异常时抛出异常</exception>
            <param name="field"></param>
            <param name="enableSha">启用hash</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.FieldEncryptionHelper.ClearCacheByEncrypt(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            清除加密相关缓存
            </summary>
            <param name="ctx"></param>
            <param name="formId">业务对象标识</param>
            <param name="tableName">表标识（基础资料相关）</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Utils.SamplePlugIn">
            <summary>
            元数据插件示例
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.SamplePlugIn.EnableFieldEncrpty(Kingdee.BOS.Context)">
            <summary>
            是否启用了字段加密参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.WebConfigHelper.GetLoginUrl">
            <summary>
            获取登陆地址
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Utils.WebConfigHelper.CurrentSiteId">
            <summary>
            当前站点ID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.#ctor(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="strFormId">基础资料FORMID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CheckIsBaseDataUsedByFlex(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            检查核算维度上用到的分配型基础资料是否被使用组织引用
            </summary>
            <param name="lOrgId">取消分配的组织</param>
            <param name="lstMasterIds">待取消分配的基础资料MASTERID</param>
            <returns>返回项数为0表示全部检查通过,不通过的项目信息可直接显示出来</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CheckIsBaseDataUsedByFlex(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            检查核算维度上用到的分配型基础资料是否被使用组织引用
            </summary>
            <param name="lstOrgs">取消分配的组织</param>
            <param name="lstMasterIds">待取消分配的基础资料MASTERID</param>
            <returns>返回项数为0表示全部检查通过,不通过的项目信息可直接显示出来</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CreateAcctOrgTempTable(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            创建账簿与下业务组织之间的对应关系临时表
            </summary>
            <param name="lstOrg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CheckIsBaseDataUsedByPA(System.String,System.Tuple{System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64}},Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo,Kingdee.BOS.Core.DynamicForm.OperateResultCollection)">
            <summary>
            检查指定组织的基础资料是否被摊销预提使用
            </summary>
            <param name="strTable"></param>
            <param name="tplDetailIdOrgId"></param>
            <param name="flexInfo"></param>
            <param name="orc"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CheckIsBaseDataUsedByBalance(System.String,System.Tuple{System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64}},Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo,Kingdee.BOS.Core.DynamicForm.OperateResultCollection)">
            <summary>
            检查指定组织的基础资料是否被余额表使用
            </summary>
            <param name="strTable"></param>
            <param name="tplDetailIdOrgId"></param>
            <param name="flexInfo"></param>
            <param name="orc"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.CheckIsBaseDataUsedByVoucher(System.String,System.Tuple{System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64}},Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo,Kingdee.BOS.Core.DynamicForm.OperateResultCollection)">
            <summary>
            检查指定组织的基础资料是否被凭证使用
            </summary>
            <param name="strTable"></param>
            <param name="tplDetailIdOrgId"></param>
            <param name="flexInfo"></param>
            <param name="orc"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.SetCheckResult(System.String,System.Tuple{System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64}},Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo,System.String,Kingdee.BOS.Core.DynamicForm.OperateResultCollection,System.String)">
            <summary>
            设置检查结果信息
            </summary>
            <param name="strSql"></param>
            <param name="tplDetailIdOrgId"></param>
            <param name="flexInfo"></param>
            <param name="strTable"></param>
            <param name="orc"></param>
            <param name="strCheckObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.GetFlexUsedIds(Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            被核算维度用到的数据
            </summary>
            <param name="flexInfo"></param>
            <param name="lstOrgs"></param>
            <param name="lstMasterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteCheckService.GetFlexInfo(System.String)">
            <summary>
            获得分配型基础资料相关信息
            </summary>
            <param name="strFormId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.FlexDeleteCheckService.AllocateFlexInfo">
            <summary>
            核算维度信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.FlexDeleteCheckService.FlexInfo">
            <summary>
            基础资料相关信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.FlexDeleteValidator">
            <summary>
            取消分配或删除分配型基础资料前,检查是否被在指定使用组织中使用过
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            执行校验
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexDeleteValidator.SetErrorInfo(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.DynamicForm.OperateResult,System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="or"></param>
            <param name="strUseOrgId"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._isDiffEntity">
            <summary>
            是否跨实体组合校验
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._headExtendedData">
            <summary>
            单据头扩展数据集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._hasHead">
            <summary>
            校验是否有单据头
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._headEntity">
            <summary>
            单据头实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._hasSubHead">
            <summary>
            校验是否有子单据头
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._subHeadEntity">
            <summary>
            子单据头实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._hasEntry">
            <summary>
            校验是否有单据体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._entryEntity">
            <summary>
            单据体实体，目前逻辑仅存在一个
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._isAllSubEntry">
            <summary>
            是否都是子单据体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._subEntryEntity">
            <summary>
            子单据体实体，目前逻辑仅存在一个
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._tempTable">
            <summary>
            是否是临时表模式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._validateEntityInfos">
            <summary>
            校验实体字段集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._needStatus">
            <summary>
            需要判断单据状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator._sqlParams">
            <summary>
            校验SQL参数集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.HasRepeatedDataInEntity(Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem}@)">
            <summary>
            校验实体内数据重复性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.HasRepeatedDataInHeadTable(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            校验仅单据头字段在数据库重复性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.HasRepeatedDataInEntryTable(Kingdee.BOS.Context,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem}@)">
            <summary>
            校验其他实体字段在数据库重复性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.BuildInsertDynamicObjects(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem,Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            构建插入临时表的数据包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.DiffEntityValidate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            跨实体校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.DiffEntityHasRepeatedInEntity(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem}}@)">
            <summary>
            校验实体内数据重复性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.DiffEntityHasRepeatedInDb(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem}}@)">
            <summary>
            校验数据库重复性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.DiffEntityBuildInsertDynamicObjects(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem,Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            构建插入临时表的数据包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleFieldInfo(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            组装字段信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleQuerySqlInfo(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            组装直接查询SQL信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleQuerySql(Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem)">
            <summary>
            组装查询SQL
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleCreateTempTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            组装创建临时表SQL
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleQueryTempTableSqlInfo(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            组装查询临时表SQL信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AssembleTempTableJoinCondition(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem)">
            <summary>
            组装查询临时表Join条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.CreateTemplateTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            创建临时表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.BuildDynamicType(Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem)">
            <summary>
            构建临时表数据包类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.CheckIsEmpty(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32)">
            <summary>
            检查所有待验证的字段是否为空值
            组合校验勾选为空不校验，必须所有的字段值为空时才不会执行校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetSubEntityParentRow(Kingdee.BOS.Core.Metadata.EntityElement.SubEntryEntity,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取子单据体父单据体的行号或序号值
            </summary>
            <param name="subEntryEntity"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetTopLevelEntity">
            <summary>
            获取校验集合中最顶层的实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetLowestLevelEntity">
            <summary>
            获取校验集合中最底层的实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetRealTableName(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取实体实际数据库表名(如果没有主表字段，而有拆分表字段，则返回拆分表数据库表名)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetDefaultTableName(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取实体对应主表数据库表名(优先别名)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetBillPkIds">
            <summary>
            对应的单据/基础资料内码集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.GetEntityInfoByEntity(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            根据实体获取校验信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.SetIsNeedStatus(Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            设置是否需要判断单据状态
            </summary>
            <param name="validateContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AddTopTableJoinCondition(System.String,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            添加与最上层实体Join条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AddLocaleFieldJoinConditions(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            添加多语言字段Join条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AddNormalFieldJoinConditions(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            添加普通字段Join条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.AddSplitTableFieldJoinConditions(System.String,System.String,Kingdee.BOS.App.Core.Validation.EntryEntity.DataItem@)">
            <summary>
            添加拆分表字段Join条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.IsCheckEntryEntity">
            <summary>
            是否仅检查当前单据内数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.IsCheckEmptyValue">
            <summary>
            是否校验空值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositeFieldValidator.IsCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem.KeyValue">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem.RepeatRow">
            <summary>
            重复行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.RepeatItem.ParentRowIndex">
            <summary>
            如果重复行是子单据体，则记录当前重复项的父单据体的rowIndex
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField">
            <summary>
            构建数据包字段信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField.Key">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.BuildField.Values">
            <summary>
            字段对应值，Item1为扩展数据包集合Index，Item2为数据包Index
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.FieldNames">
            <summary>
            字段组合标题，如："物料+仓库+仓位"
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.IsCheckEntryEntity">
            <summary>
            是否仅检查当前单据内数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.IsCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key.DataEntity">
            <summary>
            数据包（跨实体时为单据头或单据体数据包）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key.WholeDataEntity">
            <summary>
            完整数据包（跨实体时使用）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key.ObjIndex">
            <summary>
            数据包索引
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key.RowIndex">
            <summary>
            行索引
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key._parentIdValue">
             <summary>
            父实体Id(目前需求下仅记录子单据体的父实体Id)
             </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.KeyHelper.Key._isCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo">
            <summary>
            校验实体信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.Entity">
            <summary>
            校验实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.FieldKeys">
            <summary>
            校验字段Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.TableName">
            <summary>
            拼接SQL所需表名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.SuffixList">
            <summary>
            拆分表后缀列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.IsAllNormal">
            <summary>
            所选字段都是普通字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.IsAllSplit">
            <summary>
            所选字段都是拆分表字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.IsAllLocale">
            <summary>
            所选字段都是多语言字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.HasNormalField">
            <summary>
            所选字段是否有普通字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.HasSplitField">
            <summary>
            所选字段是否有拆分表字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.ValidateEntityInfo.HasLocaleField">
            <summary>
            所选字段是否有多语言字段
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator">
            <summary>
            跨实体组合字段唯一性校验
            目前仅支持【单据头+子单据头】、【单据头+单据体】、【子单据头+单据体】跨实体校验
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator._validateEntityInfos">
            <summary>
            校验实体字段集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator._isDiffEntityHasHead">
            <summary>
            跨实体校验是否包含单据头
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator._headEntity">
            <summary>
            单据头实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator._isDiffEntityHasEntry">
            <summary>
            跨实体校验是否包含单据体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator._diffEntityEntry">
            <summary>
            跨实体单据体，目前逻辑仅存在一个单据体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.DiffEntityValidate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            跨实体校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.DiffEntityCheckIsEmpty(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32)">
            <summary>
            检查所有待验证的字段是否为空值
            组合校验勾选为空不校验，必须所有的字段值为空时才不会执行校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.DiffEntityGetPkEntity(Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            获取可以作为临时表主键的实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetTableName(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取拼接SQL表名
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetDefaultTableName(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取主表SQL表名
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetHeadEntityInfo">
            <summary>
            按顺序获取单据头或者子单据头表实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetHeadTableName">
            <summary>
            按顺序获取单据头或者子单据头表名
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetEntityInfoByEntity(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            根据实体获取校验信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.DataBillHeads">
            <summary>
            单据头扩展数据集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetBillPKID(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            对应的单据/基础资料ID
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.HasRepeatedDataInEntryEntity(Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.RepeatItem}@)">
            <summary>
            实体数据自身重复性检验
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="repeatItemList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.GetSubEntityParentRow(Kingdee.BOS.Core.Metadata.EntityElement.SubEntryEntity,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取子单据体父单据体的行号或序号值
            </summary>
            <param name="subEntryEntity"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.CheckIsEmpty(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            检查所有待验证的字段是否为空值
            组合校验勾选为空不校验，必须所有的字段值为空时才不会执行校验
            </summary>
            <param name="validateContext"></param>
            <param name="extDataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.HasRepeatedDataInEntryTable(Kingdee.BOS.Context,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.List{Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.RepeatItem}@)">
            <summary>
            实体数据与DB数据的重复性校验
            大致逻辑就是:把实体数据写入临时表与物理表Join一下就知道是否有重复了            
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="sRepeatRows"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.IsHeadAndEntryDiffEntity">
            <summary>
            是否允许单据头+单据体字段跨实体组合校验
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.IsCheckEmptyValue">
            <summary>
            是否校验空值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.IsCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.FieldNames">
            <summary>
            字段组合标题，如："物料+仓库+仓位"
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.IsCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.IsCheckEntryEntity">
            <summary>
            是否仅检查当前单据内数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key.DataEntity">
            <summary>
            数据包（跨实体时为单据头或单据体数据包）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key.WholeDataEntity">
            <summary>
            完整数据包（跨实体时使用）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key.ObjIndex">
            <summary>
            数据包索引
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key.RowIndex">
            <summary>
            行索引
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key._parentIdValue">
             <summary>
            父实体Id(目前需求下仅记录子单据体的父实体Id)
             </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.KeyHelper.Key.IsCheckIsAllEntity">
            <summary>
            是否检查子单据体整个实体的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.RepeatItem.KeyValue">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.RepeatItem.RepeatRow">
            <summary>
            重复行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.EntryEntity.CompositePKValidator.RepeatItem.ParentRowIndex">
            <summary>
            如果重复行是子单据体，则记录当前重复项的父单据体的rowIndex
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.FieldModifyValidator">
            <summary>
            检查已审核单据不允许修改字段。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.FieldModifyValidator._fieldKeyList">
            <summary>
            待检查的字段标识集合。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.FieldModifyValidator._fieldKeyDic">
            <summary>
            待检查的字段标识字典。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.FieldModifyValidator.ValidateDataEntities(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            传入校验上下文对象及待校验实体数据，校验指定字段数据是否已改。
            </summary>
            <param name="validateContext">校验上下文对象。</param>
            <param name="checkDataEntity">待校验实体数据。</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.MustInputAllMultiLangValidator">
            <summary>
            多语言字段增加属性“所有语言必录”
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.FieldBillConsistencyValidator">
            <summary>
            字段值必须一致的校验器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.FieldBillRepeatValidator">
            <summary>
            字段本单不能重复的校验器
            </summary>
            <remarks>不同于字段不能重复校验，本校验器仅校验关键字段在同一单据体是否重复录入</remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.FieldBillRepeatValidator.ValidateInfos">
            <summary>
            存储单据体及字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.FieldBillRepeatValidator.IsRepeat(Kingdee.BOS.App.Core.Validation.StringItem,System.Collections.Generic.IEnumerable{Kingdee.BOS.App.Core.Validation.StringItem},System.Int32@,System.Boolean)">
            <summary>
            重复性判断
            </summary>
            <param name="current">当前判断项</param>
            <param name="items">总的判断集合</param>
            <param name="repeatRowIndex">行索引</param>
            <param name="bLocaleValue">多语言字段</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.Parse(Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt,Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage)">
            <summary>
            
            </summary>
            <param name="messageItem"></param>
            <param name="variableValues"></param>
            <param name="mobileMessage"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.TryGetExpressionList(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            获取计算表达列表
            </summary>
            <param name="strFormat">含计算公式字符串</param>
            <param name="expressionList">计算表达式列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.ExpressionEval(Kingdee.BOS.Core.Warn.VariableValueDictionary,System.Collections.Generic.List{System.String})">
            <summary>
            计算表达列表结果计算
            返回表达式结果key value键值
            </summary>
            <param name="variableValues">变量值列表</param>
            <param name="expressionList">计算表达式列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.RelpaceVariableValue(Kingdee.BOS.Core.Warn.VariableValueDictionary,System.String)">
            <summary>
            替换表达式变量
            </summary>
            <param name="variableValues">变量值</param>
            <param name="strExpression">表单式</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.AddWarnMobileMessageVariable(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="expValues"></param>
            <param name="variableValues"></param>
            <param name="mobileMessage"></param>
            <param name="formatStr"></param>
            <param name="isTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.RepalceExpressionValues(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            替换表达计算值
            </summary>
            <param name="variableValues">变量value 键值对</param>
            <param name="expValues">表达式结果值</param>
            <param name="formatStr">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.TranslateEvalExpression(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            解析为计算表达式
            将表达式从变量值转换为变量名显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.IsValidExpressionVariables(System.Collections.Generic.List{System.String})">
            <summary>
            是否有效表达式变量列表
            与当前消息列表中所有变量列表比较检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.TryGetMessageVariable(System.String)">
            <summary>
            获取消息变量列表
            </summary>
            <param name="variableName">变量名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.GetVariableNamesFromExprssion(System.String,System.String)">
            <summary>
            通过正则匹配
            </summary>
            <param name="strGoalString"></param>
            <param name="strRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.GetArithExpression(System.String)">
            <summary>
            过滤出括号对
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.Evaluate(System.String,System.String)">
            <summary>
            字符串支持四则运算
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.WarnMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.ArithmeticParser.ParsingContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.IWarnMessageChannel">
            <summary>
            预警消息通道
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.IWarnMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel">
            <summary>
            轻易用消息发送处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.SendSummaryMessage">
            <summary>
            发送汇总消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.SendByUserCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            根据用户列表方式发送
            用户发送消息不一致，发送用户存在用户变量时
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.SendByWarnMessageCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            通过预警消息列表模式发送
            所有用户发送的消息内容一致
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.SendLightAppMessage(System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            
            </summary>
            <param name="summaryId"></param>
            <param name="msgSummaryId"></param>
            <param name="warnMessageItems"></param>
            <param name="lightAppRepository"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.SendUserLightAppMessage(System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            发送指定用户轻应用消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="summaryId">汇总结果Id</param>
            <param name="msgSummaryId">明细分类汇总结果ID</param>
            <param name="warnMessageItems">预警消息列表</param>
            <param name="lightAppRepository">轻应用AppRepository</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.AddGroupSummaryResult(Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository,System.Int64,Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult)">
            <summary>
            
            </summary>
            <param name="lightAppRepository"></param>
            <param name="summaryId"></param>
            <param name="groupSummaryResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.IsExistsVariablesReceiver">
            <summary>
            是否包含预警消息接收是否包含变量用户
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.WarnLightAppSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.WarnLightAppDetialSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.LightAppWarnMessageChannel.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel">
            <summary>
            邮件信息发送处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            构造函数
            </summary>
            <param name="parsingContext">解析上下</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.GetMailWarnMessageInfoList(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.BusinessEntity.ResultInfo{Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus})">
            <summary>
            获取待发送邮件列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>待发送邮件列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.GetSenderName(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection,System.Int64@)">
            <summary>
            取发送人名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="sendWarnMessageCollection">sendWarnMessageCollection</param>
            <param name="senderId">发送人ID</param>
            <returns>发送人名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateUnTablePreContent">
            <summary>
            创建非表格的邮件内容前缀描述内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreatePreContent(Kingdee.BOS.Core.Warn.Message.SendWarnMessage)">
            <summary>
            创建表格内容前的邮件内容
            </summary>
            <param name="item">消息item</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateEnableProcessContent(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            创建启用邮件处理的邮件内容
            </summary>
            <param name="paramObj">paramObj</param>
            <param name="link">登录链接</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.SetVarConstMailReceiversInfo(Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo,System.String,Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo)">
            <summary>
            获取邮箱变量、常量接收人需要的邮件信息，主要是内容、标题、发送人
            </summary>
            <param name="emailsRecMessageInfo">邮箱变量、常量接收人</param>
            <param name="varMailContent">邮件内容</param>
            <param name="mailMsgInfo">普通接收人</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateProcessTimeTips(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            创建处理有效时间提醒
            </summary>
            <param name="paramObj">paramObj</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateProcessUrl(System.String)">
            <summary>
            创建跳转到星空处理链接
            </summary>
            <param name="link">link</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateMailTitle(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Warn.Message.SendWarnMessage)">
            <summary>
            创建邮件标题
            </summary>
            <param name="ctx">上下文</param>
            <param name="paramObj">参数配置</param>
            <param name="item">SendWarnMessage</param>
            <returns>标题</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateMailContentNoDisplayField(Kingdee.BOS.Core.Warn.Message.SendWarnMessage,Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo)">
            <summary>
            创建邮件内容，未配置监控明细显示字段
            </summary>
            <param name="item">SendWarnMessage</param>
            <param name="mailMsgInfo">邮件预警信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.AddVariableOrConstEmailRec(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo},Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo,System.Collections.Generic.List{System.String})">
            <summary>
            加入变量、常量邮箱地址
            </summary>
            <param name="mailWarnMsgList">发送监控邮件消息列表</param>
            <param name="emailsRecMessageInfo">邮箱接收人信息</param>
            <param name="emailsRec">变量、常量邮箱地址</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.CreateLink(Kingdee.BOS.Context,System.String,Kingdee.BOS.Contracts.Warn.IEMailMsgProcessService,Kingdee.BOS.BusinessEntity.Warn.MailInfo,System.String,Kingdee.BOS.Core.Warn.Message.WarnDisplayFieldCollection)">
            <summary>
            创建Link地址
            </summary>
            <param name="ctx">上下文</param>
            <param name="serverUrl">服务地址</param>
            <param name="emailMsgProcessService"></param>
            <param name="useremailInfo"></param>
            <param name="otherparms">监控方案ID、消息ID</param>
            <param name="warnDisFieldCol">展示字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.GetUserSendEmail(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户邮件帐户地址（发送邮件）
            </summary>
            <param name="ctx">上下文</param>
            <param name="userID">用户Id</param>
            <returns>发送邮件地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.GetUserValiMails(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取有效用户邮箱地址
            </summary>
            <param name="ctx"></param>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.SetMailTitle(Kingdee.BOS.Core.Warn.Message.SendWarnMessage)">
            <summary>
            设置邮件主题
            </summary>
            <param name="item"></param>
            <returns>邮件主题</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.SendMailMessage(Kingdee.BOS.BusinessEntity.Warn.MailWarnMessageInfo,Kingdee.BOS.BusinessEntity.ResultInfo{Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus})">
            <summary>
            发送邮件
            </summary>
            <param name="mailMsgInfo"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.MailWarnMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel">
            <summary>
            短信信息发送处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            构造函数
            </summary>
            <param name="parsingContext">解析上下</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.GetSmsInfoList(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取待发送短信列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>待发送短信列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.GetUserPhone(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户手机号码
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户Id</param>
            <returns>用户手机号码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.GetUserVaildPhones(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取有效的用户手机号码信息列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户I集合</param>
            <returns>手机号码信息列表</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.MobileWarnMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel">
            <summary>
            一般消息发送
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel._mergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel._messageDetialBusinessInfo">
            <summary>
            明细合并消息业务元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.Save(Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection)">
            <summary>
            保存数据到数据库中
            </summary>
            <param name="warnMessageCollection">发送消息集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.DetailMsgSubstring(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.SendDetialWarnMessage})">
            <summary>
            当明细标题和正文超长时，截断处理
            </summary>
            <param name="languages">多语言</param>
            <param name="detialMessages">监控消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.SubString(Kingdee.BOS.LocaleValue,System.Int32)">
            <summary>
            截断多语言文本
            </summary>
            <param name="localeValue">多语言文本</param>
            <param name="maxLength">最大长度</param>
            <returns>截断后的多语言文本</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.SendToMessageCenter(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection)">
            <summary>
            监控消息发送到消息平台
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">warnMessage</param>
            <param name="sendWarnMessageCollection">消息集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.SetMessageLevel(Kingdee.BOS.Core.Warn.Message.SendWarnMessage,Kingdee.BOS.MessageCenter.Model.SimpleTextMessageSendInfo)">
            <summary>
            设置消息级别
            </summary>
            <param name="sendWarnMessage">sendWarnMessage</param>
            <param name="simpleTextMsgSendInfo">simpleTextMsgSendInfo</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.MergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.MessageDetialBusinessInfo">
            <summary>
            明细消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.NomalWarnMessageChannel.XunTongMessageHanlder">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel.QywxDdBusinessMonitor”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            讯通消息通道构造函数
            </summary>
            <param name="parsingContext">解析上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.QywxDdMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel">
            <summary>
            监控卡片消息通道
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel._warnCardMessageBusinessInfo">
            <summary>
            监控卡片字段值消息元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            构造函数
            </summary>
            <param name="parsingContext">解析上下</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.Save(Kingdee.BOS.Core.Warn.Message.SendWarnCardMessageCollection)">
            <summary>
            保存数据到数据库中
            </summary>
            <param name="sendDisplayWarnMessageCollection">发送消息集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.SaveH5LayoutCard(Kingdee.BOS.Core.Warn.Message.SendWarnCardMessageCollection,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            保存监控卡片到H5主页卡片
            </summary>
            <param name="sendWarnCardMessageCollection">消息集合</param>
            <param name="useridList">用户ID列表</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnCardMessageChannel.WarnCardMessageBusinessInfo">
            <summary>
            监控卡片字段值消息元数据信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.WarnMessageChannelFactory">
            <summary>
            WarnMessageChannel factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnMessageChannelFactory.Create(Kingdee.BOS.Core.Warn.WarnMessageChannel,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建消息通道
            </summary>
            <param name="channel">消息通道类型</param>
            <param name="parsingContext">上下文</param>
            <returns>消息通道</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnMessageChannelFactory.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel">
            <summary>
            监控消息展示用-通道
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel._displayMessageBusinessInfo">
            <summary>
            监控消息列表展示消息元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            构造函数
            </summary>
            <param name="parsingContext">解析上下</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.Save(Kingdee.BOS.Core.Warn.Message.SendDisplayWarnMessageCollection)">
            <summary>
            保存数据到数据库中
            </summary>
            <param name="sendDisplayWarnMessageCollection">发送消息集合</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.WarnMsgDisplayChannel.DisplayMessageBusinessInfo">
            <summary>
            监控消息列表展示消息元数据信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Channel.XunTongMessageChannel">
            <summary>
            讯通消息通道
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.XunTongMessageChannel.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            讯通消息通道构造函数
            </summary>
            <param name="parsingContext">解析上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Channel.XunTongMessageChannel.Send(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            发送预警消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.XunTongMessageChannel.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Channel.XunTongMessageChannel.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.EnableMailProcess(Kingdee.BOS.Context,System.Double)">
            <summary>
            监控方案启用邮件处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.DisableMailProcess(Kingdee.BOS.Context)">
            <summary>
            禁用邮件处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.MailProcessPassportExists(Kingdee.BOS.Context)">
            <summary>
            监控方案邮件处理登录授权密钥是否存在
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.CreateApprovalUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成邮件处理自动登录链接
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">用户名称</param>
            <param name="assignId">otherargs</param>
            <param name="formId">表单ID</param>
            <param name="serverUrl">应用服务器地址</param>
            <returns>登录链接</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.DoCreateApprovalUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            生成邮件处理自动登录链接
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.EMailMsgProcessService.GetMailApprovalAppSecret(Kingdee.BOS.Context)">
            <summary>
            获取邮件审批登录授权密钥
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder">
            <summary>
            监控消息邮件构造类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CreatMailContent">
            <summary>
            创建邮件内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.BuilderBody">
            <summary>
            构造内容行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CreateSummaryLine(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            绘制汇总行
            </summary>
            <param name="orderCollection">排序后的数据包</param>
            <returns>汇总行</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CalculateAvg(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Warn.Message.WarnDisplayField)">
            <summary>
            求平均值
            </summary>
            <param name="orderCollection">数据包</param>
            <param name="disField">字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CalculateMin(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Warn.Message.WarnDisplayField)">
            <summary>
            求最小值
            </summary>
            <param name="orderCollection">数据包</param>
            <param name="disField">字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CalculateMax(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Warn.Message.WarnDisplayField)">
            <summary>
            求最大值
            </summary>
            <param name="orderCollection">数据包</param>
            <param name="disField">字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.CalculateSum(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Warn.Message.WarnDisplayField)">
            <summary>
            求和
            </summary>
            <param name="orderCollection">数据包</param>
            <param name="disField">字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetOrderDyCollection">
            <summary>
            获取排序后的数据集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.SetUnOrderEntityValue(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.String,Kingdee.BOS.Core.Warn.Message.WarnDisplayFieldValueCollection)">
            <summary>
            获取未排序单据体数据
            </summary>
            <param name="dataObjectEntry">dataObjectEntry</param>
            <param name="toOrderCollection">未排序数据</param>
            <param name="localeId">语言id</param>
            <param name="item">展示字段值集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.BuilderHeader">
            <summary>
            构造标题行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.SetWarnMsgVeriable(Kingdee.BOS.Contracts.IWarnService,Kingdee.BOS.Contracts.IMetaDataService)">
            <summary>
            获取报表类型字段变量
            </summary>
            <param name="service"></param>
            <param name="metaService"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.SetFieldKeyNameDic(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            设置字段KeyName字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetFieldName(Kingdee.BOS.Core.Warn.Message.WarnDisplayField,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取字段名
            </summary>
            <param name="key">字段key</param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetDataSourceID(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务监控对象元数据ID
            </summary>
            <param name="strFormId">方案监控对象ID</param>
            <returns>元数据ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetFormMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.RegisterPlugInProxy(Kingdee.BOS.Context,System.String)">
            <summary>
            注册插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetReportFilterField(Kingdee.BOS.Context)">
            <summary>
            获得报表的过滤字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetBizObjectMetaData(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务对象的元数据，并缓存
            </summary>
            <param name="strObjectTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetFilterFormMetadata(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            获得过滤窗体元数据
            </summary>
            <param name="formMetaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.SetDisplayFieldLink(Kingdee.BOS.Core.Warn.Message.WarnDisplayField,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            设置显示字段为超链接字段
            </summary>
            <param name="displayField">字段</param>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetSqlRptVeriable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            获取SQL报表字段 转成监控消息变量
            </summary>
            <param name="dataSrouceForm">数据源表单</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.GetOrderDynamicObject(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.String,System.String)">
            <summary>
            DynamicObjectCollection排序，用于分区以及分区里的卡片
            </summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.SetFieldProperty(System.String,System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            设置字段属性
            </summary>
            <param name="fieldName"></param>
            <param name="disFieldKey"></param>
            <param name="field"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.WarnDisplayFieldCollection">
            <summary>
            消息展示字段集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.DisplayFieldValueCollection">
            <summary>
            展示字段值集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.WarnId">
            <summary>
            方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.MessageId">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.FieldKeyNameDic">
            <summary>
            监控明细设置显示字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.WarnMsgVeriable">
            <summary>
            监控消息变量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.PlugInProxy">
            <summary>
            监控方案插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MailMessage.MailContentBuilder.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo">
            <summary>
            合并标题信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo.GroupItems">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo.SumItems">
            <summary>
            依此栏位进行汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.GetParseFormatMergeTitle(Kingdee.BOS.LocaleValue)">
            <summary>
            获取格式后合并标题
            </summary>
            <param name="formatMergeTitle">标题信息</param>
            <returns>合并标题信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.SetMergeTitleInfo(Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo,System.String)">
            <summary>
            
            </summary>
            <param name="strMergeTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.AddCalculateItems(Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            添加分组项与汇总项
            </summary>
            <param name="mergeTitleInfo"></param>
            <param name="liGroupItems"></param>
            <param name="liSumItems"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.DistilCalculatedItems(System.String,System.String)">
            <summary>
            提前出需要需要的栏位
            </summary>
            <param name="strMergeMessageTitle"></param>
            <param name="strMatchRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.ReplaceString(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            替换字符串
            </summary>
            <param name="strGoal"></param>
            <param name="liMatch"></param>
            <param name="strReplaceString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleUtil.GetMergeTitleVariableFieldCollection(Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo,Kingdee.BOS.App.Core.Warn.VariableFieldCollection)">
            <summary>
            获取合并标题的所有变量
            </summary>
            <param name="mergeTitleInfo">合并标题</param>
            <returns>变量值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser">
            <summary>
            合并标题解析器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.#ctor(Kingdee.BOS.App.Core.Warn.VariableFieldCollection,Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer)">
            <summary>
            构造函数
            </summary>
            <param name="megerTitleVariableFieldCollection">合并标题变量集合</param>
            <param name="messageVariableContianer">消息变量容器</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.GetMergeTitleResult(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            获取合并标题结果
            </summary>
            <param name="warnMessage">预警主消息</param>
            <param name="warnMessageItems">消息列表</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>合并标题结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.GetMergeTitle(Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            获取合并标题
            </summary>
            <param name="warnMessage">warnMessage</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.ReplaceVariableValue(Kingdee.BOS.Core.Warn.VariableValueDictionary,System.String)">
            <summary>
            根据变量值替换文本
            </summary>
            <param name="variableValues">变量值</param>
            <param name="strValue">待替换文本</param>
            <returns>返回替换后文本值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.ReplaceVariableValue(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.LocaleValue)">
            <summary>
            根据变量值替换文本
            </summary>
            <param name="variableValues">变量值</param>
            <param name="localeValue">待替换文本</param>
            <returns>返回替换后文本值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.ReplaceSUMField(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.LocaleValue,System.Collections.Generic.List{System.String})">
            <summary>
            替换求和值
            </summary>
            <param name="warnMessage">预警消息</param>
            <param name="items">消息内容</param>
            <param name="strMergeTitle">合并标题</param>
            <param name="sumItems">求和变量</param>
            <returns>替换后求和值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.ReplaceSUMField(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            替换求和值
            </summary>
            <param name="warnMessage">预警消息</param>
            <param name="items">消息内容</param>
            <param name="strMergeTitle">合并标题</param>
            <param name="sumItems">求和变量</param>
            <returns>替换后求和值</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.MegerTitleVariableFieldCollection">
            <summary>
            合并标题变量集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.MegerTitleVariableFields">
            <summary>
            合并标题变量字段数组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleParser.MessageVariableContianer">
            <summary>
            消息变量容器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic">
            <summary>
            消息分组计算
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            构造函数
            </summary>
            <param name="groupFields">字段ID列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="groupFieldIds">字段ID列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.Group(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.Boolean,System.Boolean)">
            <summary>
            返回分组后列表
            </summary>
            <param name="warMessageItems">待分组消息列表</param>
            <param name="isJointGroup">是否多个字段联合分组</param>
            <param name="isGroupPk"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.TryGroupByFields(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Warn.Message.WarnMsgItemGroupInfo},Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.String)">
            <summary>
            
            </summary>
            <param name="keyGroups">分组</param>
            <param name="warnMsgItem"></param>
            <param name="groupFileds"></param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GetGroupKeyValueString(System.String,System.String)">
            <summary>
            获取分组字符串关键key值
            </summary>
            <param name="fileId">字段ID</param>
            <param name="value">字段ID</param>
            <returns>返回对应key值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GetGroupKeyString(Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.String)">
            <summary>
            获取分组字符串关键key值
            </summary>
            <param name="warnMsgItem">消息体</param>
            <param name="groupFieldIds">字段ID列表</param>
            <param name="primaryKey"></param>
            <returns>返回对应key值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GetGroupFieldValues(Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            获取分组字符串关键key值
            </summary>
            <param name="warnMsgItem">消息体</param>
            <param name="groupFieldIds">字段ID列表</param>
            <returns>返回对应key值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GetFieldValueString(Kingdee.BOS.Core.Warn.WarnVariableField,Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="warnMsgItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GetPrimaryKey(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            
            </summary>
            <param name="warnMessageItem"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.VariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.GroupFields">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.MessageItemBusinessInfo">
            <summary>
            消息预警元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic.PrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupSummayArithmetic">
            <summary>
            分类汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupSummayArithmetic.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            构造函数
            </summary>
            <param name="GroupFields">分类字段列表</param>
            <param name="sumaryFields">汇总字段列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupSummayArithmetic.Sumary(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            汇总
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupSummayArithmetic.GroupFields">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.GroupSummayArithmetic.SummaryFields">
            <summary>
            汇总字段列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete.GroupItems">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete.SumItems">
            <summary>
            依此栏位进行汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleUtilObsloete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleUtilObsloete.SetMergeTitleInfo(Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete,System.String)">
            <summary>
            
            </summary>
            <param name="strMergeTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleUtilObsloete.AddCalculateItems(Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleInfoObsolete,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            添加分组项与汇总项
            </summary>
            <param name="mergeTitleInfo"></param>
            <param name="liGroupItems"></param>
            <param name="liSumItems"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleUtilObsloete.DistilCalculatedItems(System.String,System.String)">
            <summary>
            提前出需要需要的栏位
            </summary>
            <param name="strMergeMessageTitle"></param>
            <param name="strMatchRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.MergeTitleUtilObsloete.ReplaceString(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            替换字符串
            </summary>
            <param name="strGoal"></param>
            <param name="liMatch"></param>
            <param name="strReplaceString"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic">
            <summary>
            汇总运算
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            构造函数
            </summary>
            <param name="sumaryFields">汇总字段列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic.Sumary(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            汇总
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic.VariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic.SummaryFields">
            <summary>
            汇总字段列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt">
            <summary>
            MessageEntity ext
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.#ctor(Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity)">
            <summary>
            MessageEntity ext
            </summary>
            <param name="messageEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.GetMessageEntity_L">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.Title_L">
            <summary>
            Message title l
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.Content_L">
            <summary>
            Message content l
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.Title">
            <summary>
            Message title
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.Content">
            <summary>
            Message content
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt.MessageEntity">
            <summary>
            messageEntity
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder">
            <summary>
            预警消息创建
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.IWarnMessageItemBuilder">
            <summary>
            i warn message item builder
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.IWarnMessageItemBuilder.CreateMessageItemList">
            <summary>
            create warn message item list
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.WarnMessageVariableContianer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder._displayMessageBusinessInfo">
            <summary>
            监控消息列表展示消息元数据信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder._warnCardMessageBusinessInfo">
            <summary>
            监控卡片字段值消息元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
            <param name="warnDataSourceMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.GetMessageEntityKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="messageEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.CreateMessageItemList">
            <summary>
            create message item list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.CreateReceiverWarnMessageItemList(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            
            </summary>
            <param name="soluctionVariables">整个预警方案变量列表值</param>
            <param name="userMemberReceivers">接收用户列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.CreateMessageEntity(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage)">
            <summary>
            
            </summary>
            <param name="variables"></param>
            <param name="rowData"></param>
            <param name="mobileMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.CreateMoblieMessage">
            <summary>
            create mobile message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.CreateWarnMessageItem(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity,Kingdee.BOS.Core.Warn.Message.MessageEntity_L,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage)">
            <summary>
            create warnmessageitem
            </summary>
            <param name="rowData">warn row data</param>
            <param name="messageEntity">message entity</param>
            <param name="messageEntity_L">message entity l</param>
            <param name="mobileMessage">moblie message</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.BeforeBuildWarnMessageItemEventArgs(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            before build warn message item event args
            </summary>
            <param name="warnMessageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.AfterBuildWarnMessageItemEventArgs(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            after build warn message item event args
            </summary>
            <param name="warnMessageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.GetWarnSoluctionUserMemberReciverCollection(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取当前方案列表所有接收用户列表
            </summary>
            <param name="warnMessage"></param>
            <returns>接收用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.GetDataKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.AddMulBaseVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.VariableValueDictionary)">
            <summary>
            添加多选基础资料接收人变量
            </summary>
            <param name="userMemberReceivers">接收人集合</param>
            <param name="rowVariables">变量数据</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.ParsingContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.WarnMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.MessageLinkParser">
            <summary>
            message link parser
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.DisplayMessageBusinessInfo">
            <summary>
            监控消息列表展示消息元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilder.WarnCardMessageBusinessInfo">
            <summary>
            监控卡片字段值消息元数据信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilderFactory">
            <summary>
            预警消息builder工厂类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilderFactory">
            <summary>
            预警消息builder工厂类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilderFactory.Create(System.Int32,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建预警消息builder
            </summary>
            <param name="modle">模式</param>
            <param name="parsingContext">解析上下文</param>
            <returns>返回bulider实体对象</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilderFactory.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemBuilderFactory.Create(System.Int32,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建预警消息builder
            </summary>
            <param name="modle">模式</param>
            <param name="parsingContext">解析上下文</param>
            <returns>返回bulider实体对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.CreateMessageItemList">
            <summary>
            create message item list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件
            </summary>
            <param name="strFilter">旧过滤条件</param>
            <param name="strAddFilter">待添加过滤条件</param>
            <returns>返回拼接后过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.CheckPermission(System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据权
            </summary>
            <param name="strUserId">用户ID</param>
            <param name="strUserDataRule">返回用户数据规则</param>
            <returns>有单据权限返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilder.RefreshMessageUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.CreateMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnRowData},Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.CheckPermission(System.Int64,System.Int64,Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据功能查看权限
            </summary>
            <param name="orgId">组织ID</param>
            <param name="userId">用户ID</param>
            <param name="permissionContianer">权限容器</param>
            <returns>返回true或false；ture默认有权限；false无权</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.GetUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <param name="warnRowData"></param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.MessageItemPermissionBuilderV2.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder">
            <summary>
            预警消息创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.WarnMessageVariableContianer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
            <param name="warnDataSourceMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.SetMessageEntityKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="messageEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.CreateMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.CreateReceiverWarnMessageItemList(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            
            </summary>
            <param name="soluctionVariables">整个预警方案变量列表值</param>
            <param name="userMemberReceivers">接收用户列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.CreateMessageEntity(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="variables"></param>
            <param name="EventArgs"></param>
            <param name="rowData"></param>
            <param name="mobileMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.GetWarnSolutionData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.ParseVariaToMobileStyle(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceStr"></param>
            <param name="variables"></param>
            <param name="mobileMessage"></param>
            <param name="isTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.CreateMoblieMessage">
            <summary>
            create mobile message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.CreateWarnMessageItem(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage)">
            <summary>
            create warnmessageitem
            </summary>
            <param name="rowData">warn row data</param>
            <param name="messageEntity">message entity</param>
            <param name="mobileMessage">moblie message</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.BeforeBuildWarnMessageItemEventArgs(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            before build warn message item event args
            </summary>
            <param name="warnMessageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.AfterBuildWarnMessageItemEventArgs(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            after build warn message item event args
            </summary>
            <param name="warnMessageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.GetWarnSoluctionUserMemberReciverCollection(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取当前方案列表所有接收用户列表
            </summary>
            <param name="warnMessage"></param>
            <returns>接收用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.SetVariableMemberValue(Kingdee.BOS.WorkflowMember.IMember,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="member">用户member</param>
            <param name="variables">变量keyValue值</param>
            <returns>设置成功返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.GetDataKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.ParsingContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.WarnMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Builder.WarnMessageBuilder.MessageLinkParser">
            <summary>
            message link parser
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.CreateMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件
            </summary>
            <param name="strFilter">旧过滤条件</param>
            <param name="strAddFilter">待添加过滤条件</param>
            <returns>返回拼接后过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.CheckPermission(System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据权
            </summary>
            <param name="strUserId">用户ID</param>
            <param name="strUserDataRule">返回用户数据规则</param>
            <returns>有单据权限返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilder.RefreshMessageUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld._warnHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.CreateMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValueCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="dictUserMemberDatas"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.CreateUserMessageItems(Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember,Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件
            </summary>
            <param name="strFilter">旧过滤条件</param>
            <param name="strAddFilter">待添加过滤条件</param>
            <returns>返回拼接后过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.GetMessageReceiverRowDataInfo(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.CheckPermission(System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据权
            </summary>
            <param name="strUserId">用户ID</param>
            <param name="strUserDataRule">返回用户数据规则</param>
            <returns>有单据权限返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderOld.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.CreateMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnRowData},Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.CheckPermission(System.Int64,System.Int64,Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据功能查看权限
            </summary>
            <param name="orgId">组织ID</param>
            <param name="userId">用户ID</param>
            <param name="permissionContianer">权限容器</param>
            <returns>返回true或false；ture默认有权限；false无权</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.GetUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <param name="warnRowData"></param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Builder.WarnMessagePermissionBuilderV2.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.#ctor(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            
            </summary>
            <param name="queryInfo"></param>
            <param name="warnVariableFields"></param>
            <param name="filterString"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.BuildParameter(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.CreateSelectFieldKeys(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            
            </summary>
            <param name="warnVariableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetBaseDataFieldSelectKey(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            
            </summary>
            <param name="baseDataField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.AddSelectKey(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="sqlBuilderParameter"></param>
            <param name="selectKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.AddSelectKey(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            
            </summary>
            <param name="sqlBuilderParameter"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetSelectFields">
            <summary>
            get select fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetSelectField(System.String)">
            <summary>
            get select fields
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetEntityTableKeys(System.Collections.Generic.List{System.String})">
            <summary>
            get entity table key list
            </summary>
            <param name="selectedFieldKeys">selected field key list</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.SetSelectEntityTables(Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            set select entity table s
            </summary>
            <param name="sqlBuilderParameter">sqlBuilderParameter</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取单据主键keyfield名称
            </summary>
            <param name="businessInfo">单据信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.CreateSelectFieldKeys(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetEntityPkFieldName(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.QueryElement.EntityTable})">
            <summary>
            获取单据主键keyfield名称
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.GetEntityPkFieldNameSelectKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="entityKey"></param>
            <param name="pkFieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.QueryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.BusinessQueryInfo.SqlBuilderParameter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ContractsProviderFactory">
            <summary>
            变量信息provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ContractsProviderFactory.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="formId">表单Id</param>
            <returns>返回创建对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.CustomerContractsProvider">
            <summary>
            供应商标题
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.CustomerContractsProvider.GetContractsList(Kingdee.BOS.Context,System.Object)">
            <summary>
            获取数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="Id">主键value至</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.CustomerContractsProvider.GetContractList(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="custId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.SupplierContractsProvider">
            <summary>
            供应商标题
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.SupplierContractsProvider.GetContractsList(Kingdee.BOS.Context,System.Object)">
            <summary>
            获取数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">主键value至</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.SupplierContractsProvider.GetContractList(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="custId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository">
            <summary>
            datatable 数据仓储
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.IDataRepository`1">
            <summary>
            数据仓储
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.IDataRepository`1.Add(`0)">
            <summary>
            新增
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.IDataRepository`1.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.IDataRepository`1.Count">
            <summary>
            数据count数量
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.Max_Rows">
            <summary>
            最大行
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository._data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreateNewRow">
            <summary>
            创建新行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreatePKId">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreateNewIDs(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreateNewInt64IDs(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.CreateNewGuidIDs(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.Add(System.Data.DataRow)">
            <summary>
            新增
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.Save">
            <summary>
            刷新
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.DBContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractDataTableRepository.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1">
            <summary>
            含缓pk主键ID缓存创建机制
            </summary>
            <typeparam name="T">pkd类型,int,long,string</typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1._PKTypeIsString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1._PKTypeIsInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1._PKTypeIsInt64">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.IdCaches">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.UnCreateIdCachCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.CreatePKId">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.CreateCachePKIds(System.Int32)">
            <summary>
            创建指定数量数据唯一主键缓存
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.CreatePKIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.PKTypeIsString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.PKTypeIsInt">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.PKTypeIsInt64">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.AbstractPkIdCacheRepository`1.MAX_CACHEID_COUNT">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.AbstractInt32CacheRepository">
            <summary>
            int32位
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractInt32CacheRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractInt32CacheRepository.CreatePKIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.AbstractInt64CacheRepository">
            <summary>
            int64位
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractInt64CacheRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractInt64CacheRepository.CreatePKIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.AbstractGuid18CacheRepository">
            <summary>
            guid string 18位
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractGuid18CacheRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.AbstractGuid18CacheRepository.CreatePKIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetialRepository">
            <summary>
            预警执行结果明细
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetialRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetialRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetialRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetial_LRepository">
            <summary>
            预警执行结果明细
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetial_LRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetial_LRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultDetial_LRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultRepository">
            <summary>
            预警执行结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResultRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.DBServiceHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.DBServiceHelper.LoadDynamicObjectData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            加载满足预警条件的预警数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="queryInfo">单据查询信息</param>
            <param name="sqlBuilderParameter">查询sql</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.DBServiceHelper.Load(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="pkArray"></param>
            <param name="type"></param>
            <param name="loadReferenceData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.DBServiceHelper.LoadReportData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Report.RptParams)">
            <summary>
            加载报表数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据查询信息</param>
            <param name="filterString">查询sql信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository">
            <summary>
            消息明细
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository.#ctor(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="lightAppSettingId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository.AddMessage(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="resultKeyValue"></param>
            <param name="createId"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository.LightAppSettingId">
            <summary>
            app设置ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository">
            <summary>
            消息分组统计信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository.#ctor(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="lightAppSettingId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository.AddMsgSummary(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新增预警消息汇总
            </summary>
            <param name="summaryId">方案汇总ID</param>
            <param name="groupValue">分类值</param>
            <param name="sumvalue">汇总值</param>
            <param name="groupDislplay">显示值</param>
            <param name="groupFieldName">分组字段名称</param>
            <param name="sumFieldName">汇总字段值</param>
            <param name="groupFormId">分组表单Id</param>  
            <returns>返回新增行数据</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository.LightAppSettingId">
            <summary>
            app设置ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppMessageSummaryRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.LightAppMsgGroupRepository">
            <summary>
            用户消息分组对应关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMsgGroupRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="appSettId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMsgGroupRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppMsgGroupRepository.AddSummaryUserMessage(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="summaryId"></param>
            <param name="msgSummaryId"></param>
            <param name="msgId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppMsgGroupRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository">
            <summary>
            预警轻应用汇总结果Repository
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.#ctor(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="warnSolutionID"></param>
            <param name="lightAppSettingId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.AddSummaryResult(System.String,System.Int64,System.String)">
            <summary>
            新增汇总结果
            </summary>
            <param name="resultJson">汇总结果key value json值</param>
            <param name="createId">创建用户ID</param>
            <param name="content"></param>
            <returns>返回新增行数据</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.WarnSolutionID">
            <summary>
            方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.LightAppSettingId">
            <summary>
            app设置ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppSummaryRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository">
            <summary>
            消息用户关联表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository.#ctor(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="lightAppSettingId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository.AddSummaryResultUser(System.Int64,System.Int64)">
            <summary>
            新增汇总结果用户
            </summary>
            <param name="userId">用户ID</param>
            <param name="summaryId">消息ID</param>
            <returns>返回新增行数据</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository.LightAppSettingId">
            <summary>
            app设置ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.LightAppUserSummaryRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResult_LRepository">
            <summary>
            预警执行结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResult_LRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResult_LRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.WarnExecuteResult_LRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Data.WarnUserMessagerRepository">
            <summary>
            消息明细接收用户
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnUserMessagerRepository.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="lightAppSettingId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnUserMessagerRepository.CreateData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Data.WarnUserMessagerRepository.AddMessageRecevier(System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <param name="warnMsgId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Data.WarnUserMessagerRepository.PKName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValueCollection">
            <summary>
            用户预警数据主键值列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue">
            <summary>
            用户预警数据主键值信息对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.TryAdd(Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue)">
            <summary>
            添加一行
            </summary>
            <param name="RowDataEntryKeyValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.Contians(System.String)">
            <summary>
            是否包含主键值
            </summary>
            <param name="primaryValue">主键值</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.PrimaryKey">
            <summary>
            行对应keyFieldId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.UserMember">
            <summary>
            用户行数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue.IsAllRowData">
            <summary>
            是否所有单据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue">
            <summary>
            单行主键值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue.#ctor(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue.WarnRowData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.RowDataPrimaryValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnDataDictionary">
            <summary>
            预警数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnDataDictionary._warnRowDatas">
            <summary>
            根据预警条件查询出来的数据(单据)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.AddOrSet(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.Add(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnDataDictionary.WarnDataType">
            <summary>
            预警数据源数据类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary.#ctor(System.String,System.String)">
            <summary>
            主键值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary.AddRange(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnRowData})">
            <summary>
            add the collection warnRowData
            </summary>
            <param name="warnRowDatas"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary.Add(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            add the warnRowData
            </summary>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary.PrimaryKey">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.DynamicDataDictionary.PKFieldName">
            <summary>
            pk field
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter">
            <summary>
            金额格式化
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.ILAppStyleValueFormatter">
            <summary>
            指轻应用定样式值转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.ILAppStyleValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.SetLCID(System.Int32)">
            <summary>
            
            </summary>
            <param name="lcid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.GetAmountFormat(System.Decimal,System.Int32)">
            <summary>
            获取指定格式化值
            </summary>
            <param name="dec">数值类型</param>
            <param name="lcid">语言类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.GetFormatString(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.GetFormatStringOld(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Formatter.AmountValueFormatter.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.CountValueFormatter">
            <summary>
             Count格式化器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.CountValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.DecimalFormatterUtil">
            <summary>
            decimal formatter util
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.DecimalFormatterUtil.FormatDisplayValue(System.String,System.Int32,System.Boolean)">
            <summary>
            格式化value值显示方式
            </summary>
            <param name="value">value值</param>
            <param name="decimalDigits">金额保留小数位</param>
            <param name="isDisplayByReallyPrecision">是否按真实位数</param>
            <returns>返回格式后字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.DecimalFormatterUtil.GetReallyPrecisionString(System.String)">
            <summary>
            获取真实格式金额字段显示值
            字符串长度为0默认为显示0值
            </summary>
            <param name="strvalue">输入字符串</param>
            <returns>返回格式化的显示金额字符串</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.EmptyValueFormatter">
            <summary>
            空格式化器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.EmptyValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.FloatValueFormatter">
            <summary>
            Float格式化器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.FloatValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.LAppStyleValueFormatterFactory">
            <summary>
            指轻应用定样式值转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.LAppStyleValueFormatterFactory.Create(Kingdee.BOS.Core.Warn.LlightApp.WarnVariableType,System.Int32)">
            <summary>
            创建
            </summary>
            <param name="warnVariableType">预警变量字段类型</param>
            <param name="lcid">语言ID</param>
            <returns>返回创建对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.LightAppStyleFormatterHelper">
            <summary>
            轻应用样式格式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Formatter.LightAppStyleFormatterHelper._dicFormatters">
            <summary>
            已有格式器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.LightAppStyleFormatterHelper.FormatDispalyValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField,System.Object)">
            <summary>
            格式为展示value值
            </summary>
            <param name="ctx"></param>
            <returns>返回格式后value值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.LightAppStyleFormatterHelper.GetOrAdd(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField)">
            <summary>
            获取或添加一个新的格式化器
            </summary>
            <param name="ctx"></param>
            <param name="displayField">展示字段</param>
            <returns>返回对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.LongDateTimeValueFormatter">
            <summary>
            长时间格式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.LongDateTimeValueFormatter.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Formatter.ShortDateTimeValueFormat">
            <summary>
            短时间格式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Formatter.ShortDateTimeValueFormat.Format(System.Object)">
            <summary>
            格式化
            </summary>
            <param name="val">待转换值</param>
            <returns>返回转换后值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor">
            <summary>
            消息分组处理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor._groupFields">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="groupFieldIds">字段ID列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GetGroupFields(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.Group(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.Boolean)">
            <summary>
            返回分组后列表
            </summary>
            <param name="warMessageItems">待分组消息列表</param>
            <param name="isJointGroup">是否多个字段联合分组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GetGroupKeyValueString(Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.String)">
            <summary>
            获取分组字符串关键key值
            </summary>
            <param name="warnMsgItem">消息体</param>
            <param name="fileId">字段ID</param>
            <returns>返回对应key值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GetGroupKeyString(Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.Collections.Generic.List{System.String})">
            <summary>
            获取分组字符串关键key值
            </summary>
            <param name="warnMsgItem">消息体</param>
            <param name="groupFieldIds">字段ID列表</param>
            <returns>返回对应key值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GetFieldData(Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.String)">
            <summary>
            获取指定field字段值
            </summary>
            <param name="warnMsgItem">消息体</param>
            <param name="fileId">字段Id</param>
            <returns>返回字段对应值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GroupUserWarnMessage(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem}},System.Collections.Generic.List{System.String})">
            <summary>
            用户消息分组
            </summary>
            <param name="userWarnMessages">用户消息列表</param>
            <param name="groupFields">分组关键值字段列表</param>
            <returns>返回分组后列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GroupUserWarnMessage(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.UserWarnMessage},System.Collections.Generic.List{System.String})">
            <summary>
            用户消息分组
            </summary>
            <param name="userWarnMessages">用户消息列表</param>
            <param name="groupFields">分组关键值字段列表</param>
            <returns>返回分组后列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageGroupingPorcessor.GroupUserWarnMessageCollection(Kingdee.BOS.Core.Warn.Message.UserWarnMessageCollection,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            用户消息分组
            </summary>
            <param name="userWarnMessages">用户消息列表</param>
            <param name="groupFields">分组关键值字段列表</param>
            <param name="isJointGroup">是否联合分组;默认联合</param>
            <returns>返回分组后列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.Build.ContactsGroupTitleBuilder">
            <summary>
            联系人分组标题builer
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.Build.ContactsGroupTitleBuilder.GetExtendInfo(Kingdee.BOS.Context,System.Object,System.Object[])">
            <summary>
            获取消息分组扩展信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupValue">分组值</param>
            <param name="args">其他参数</param>
            <returns>返回消息分组扩展信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.Build.GroupExdTitleBuildProvider">
            <summary>
            分组扩展标题构建
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.Build.IGroupExdTitleBuildProvider">
            <summary>
            分组扩展信息构建供应者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.Build.IGroupExdTitleBuildProvider.GetBuilder(System.Int32)">
            <summary>
            获取分组构建者
            </summary>
            <param name="model">模式，默认为1（联系人）；</param>
            <returns>返回分组扩展信息构建供应者对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.Build.GroupExdTitleBuildProvider.GetBuilder(System.Int32)">
            <summary>
            获取分组构建者
            </summary>
            <param name="model">模式，默认为1（联系人）；</param>
            <returns>返回分组扩展信息构建供应者对象</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.LightApp.Build.GroupExdTitleBuildProvider._defaultProvier">
            <summary>
            默认构建者对象私有属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.LightApp.Build.GroupExdTitleBuildProvider.DefaultProvier">
            <summary>
            默认构建者对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleResult">
            <summary>
            合并标题结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleResult.Title_L">
            <summary>
            标题多语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageItemKeyValueUtils">
            <summary>
            message item key value utils
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageItemKeyValueUtils.AddNewkeyValueToJson(System.String,System.String,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            AddNewkeyValue
            </summary>
            <param name="keyValue">原来</param>
            <param name="newKeyValue">当前新</param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageItemKeyValueUtils.AddkeyValueToJson(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.JSON.JSONObject)">
            <summary>
            AddNewkeyValue
            </summary>
            <param name="keyValue">原来</param>
            <param name="newKeyValue">当前新</param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageItemKeyValueUtils.ToJSONString(Kingdee.BOS.JSON.JSONObject,System.Boolean)">
            <summary>
            ToJSONString
            </summary>
            <param name="json"></param>
            <param name="isNullEmpty"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser">
            <summary>
            abstract bill link
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser">
            <summary>
            message link paraser interface
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.ConvertLinkContentFormat(System.String)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.ConvertLinkContentFormat(Kingdee.BOS.LocaleValue)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.GetLinkJson(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取超链接json对象
            </summary>
            <param name="contentFomart"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.GetLinkContent(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            GetLinkContent
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.GetLinkContent(Kingdee.BOS.LocaleValue,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            GetLinkContent
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser.IsLink">
            <summary>
            是否包含
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.GetLinkJson(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取超链接json对象
            </summary>
            <param name="contentFomart"></param>
            <param name="warnMessageItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.ConvertLinkContentFormat(System.String)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.ConvertLinkContentFormat(Kingdee.BOS.LocaleValue)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.GetLinkContent(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.GetLinkContent(Kingdee.BOS.LocaleValue,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            GetLinkContent
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.ParsingContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.AbstractMessageLinkParser.IsLink">
            <summary>
            是否包含
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser">
            <summary>
            一般单据，单据编号link 解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            billno link parser
            </summary>
            <param name="parsingContext">parsingContext</param>
            <param name="billNoField">billNoField</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.ConvertLinkContentFormat(System.String)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.ConvertLinkContentFormat(Kingdee.BOS.LocaleValue)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.GetLinkJson(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.GetLinkContent(System.String,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.GetLinkContent(Kingdee.BOS.LocaleValue,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="warnRowData"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.BillNoField">
            <summary>
            BillNoField
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.PKFiled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.MessageLink.BillNoLinkParser.IsLink">
            <summary>
            是否超链接
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.EmptyLinkParser">
            <summary>
            empty link parser
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.EmptyLinkParser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.MessageLinkHelper">
            <summary>
            MessageLinkHelper
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.MessageLinkHelper.SetLink(Kingdee.BOS.App.Core.Warn.MessageLink.IMessageLinkParser,Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt)">
            <summary>
            convertLink
            </summary>
            <param name="messageEntityExt"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.MessageLinkPaserProvider">
            <summary>
            message link paser provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.MessageLinkPaserProvider.GetLinkParser(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            get link parser
            </summary>
            <param name="parsingContext">parsingContext</param>
            <returns>link parser</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageLink.ReportLinkParser">
            <summary>
            report link parser
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.ReportLinkParser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.ReportLinkParser.ConvertLinkContentFormat(System.String)">
            <summary>
            
            </summary>
            <param name="contentFomart"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageLink.ReportLinkParser.ConvertLinkContentFormat(Kingdee.BOS.LocaleValue)">
            <summary>
            转换为超链接文本
            </summary>
            <param name="contentFomart">文本内容</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MetadataHelper">
            <summary>
            元数据相关帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MetadataHelper.GetBusinessDefaultOrgField(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取单据默认组织
            </summary>
            <param name="businessInfo">单据businessInfo信息</param>
            <returns>存在默认组织返回组织field；否则返回null</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSetDetialStyleService">
            <summary>
            样式服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSetDetialStyleService.AddGetWarnAppSettingDetialStyle(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="model">消息设置对象</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSetDetialStyleService.AddGetWarnAppSettingDetialStyle(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.Warn.Variableitems},System.Int32)">
            <summary>
            新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="variableitems">样式集合</param>
            <param name="LappsetId">设置id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSetDetialStyleService.CheckModel(Kingdee.BOS.Context,System.Int32)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="lappsetid">编号</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingDetialService">
             <summary>
            汇总消息服务
             </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingDetialService.AddGetWarnAppSettingDetial(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.LlightApp.WarnAppSettingDetial)">
            <summary>
            新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="model">消息设置对象</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingDetialService.CheckModel(Kingdee.BOS.Context,System.Int32)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="lappsetid">编号</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingFieldService">
            <summary>
            轻应用汇总字段设置服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingFieldService.AddGetWarnAppSettingFiled(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.LlightApp.WarnAppSettingField)">
            <summary>
            新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="model">消息设置对象</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingFieldService.AddGetWarnAppSettingFiledList(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnAppSettingField})">
            <summary>
            批量新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="modelList">对象集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingFieldService.CheckModel(Kingdee.BOS.Context,System.Int32)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="lappsetid">编号</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetWarnLightAppSettingBySoluctionId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警轻应用设置信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoluctionId">预警方案ID</param>
            <returns>返回设置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetLightAppFidBySoluctionId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警轻应用设置信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoluctionId">预警方案ID</param>
            <returns>返回设置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetWarnLightAppSetting(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="lightAppSettingId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.ReplaceFieldName(System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField})">
            <summary>
            
            </summary>
            <param name="conent"></param>
            <param name="warnVariableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetWarnLightAppSettingHead(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取设置消息内容格式字段lieb
            </summary>
            <param name="ctx">上下文</param>
            <param name="lightAppSettingId">设置id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetWarnLightAppDetialSetting(Kingdee.BOS.Context,System.Int32,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField})">
            <summary>
            获取设置消息内容格式字段lieb
            </summary>
            <param name="ctx">上下文</param>
            <param name="lightAppSettingId">设置id</param>
            <param name="warnVariableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetWarnLightAppDisplayFields(Kingdee.BOS.Context,System.Int32,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField})">
            <summary>
            获取设置消息内容格式字段lieb
            </summary>
            <param name="ctx">上下文</param>
            <param name="lightAppSettingId">设置id</param>
            <param name="warnVariableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetContianFieldList(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="strFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.AddGetWarnAppSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.LlightApp.WarnAppSetting)">
            <summary>
            新增
            </summary>
            <param name="ctx">上下文</param>
            <param name="model">消息设置对象</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.DeleteWarnAppSettingByWarnId(Kingdee.BOS.Context,System.String)">
            <summary>
            删除指定方案Id轻应用配置
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoluctionId">监控方案编码</param>
            <returns>成返回Successful=true;否则Successful=false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.CheckModel(Kingdee.BOS.Context,System.String)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="solutionid">编号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.AddGetWarnAppTitle(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            添加标题
            </summary>
            <param name="ctx">上下文</param>
            <param name="title">标题</param>
            <param name="fid">设置编号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.AddGetWarnAppTitle(Kingdee.BOS.Context,Kingdee.BOS.LocaleValue,Kingdee.BOS.LocaleValue,System.Int32)">
            <summary>
            添加标题
            </summary>
            <param name="ctx">上下文</param>
            <param name="contentformart">展示内容</param>
            <param name="title">标题</param>
            <param name="fid">设置编号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.AddGetWarnAppTitle(Kingdee.BOS.Context,System.String,Kingdee.BOS.LocaleValue,System.Int32)">
            <summary>
            添加标题
            </summary>
            <param name="ctx">上下文</param>
            <param name="contentformart">展示内容</param>
            <param name="title">标题</param>
            <param name="fid">设置编号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.CheckLange(Kingdee.BOS.Context,System.Int32)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="solutionid">编号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.CheckLange(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
            判断数据库是否已经存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="solutionid">编号</param>
            <param name="lcid">语言编号</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppSettingService.GetLightAppSettingVariableFields(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取设置消息内容格式字段lieb
            </summary>
            <param name="ctx">上下文</param>
            <param name="lightAppSettingId">设置id</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppUserSetStatusService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnAppUserSetStatusService.SetEnableStatus(Kingdee.BOS.Context,System.Int64,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="appSettingId">轻应用设置ID</param>
            <param name="isEnable">是否启用</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserSummaryMessage(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取当前用户汇总消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>返回相应汇总消息列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserWarnAppMessageByGroupId(Kingdee.BOS.Context,System.Int64,System.Int64)">
            <summary>
            通过分组编号获取明细信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupId">分组编号</param>
            <param name="userId">用户编号</param>
            <returns>明细信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SetUserSummaryMessageRead(Kingdee.BOS.Context,System.Int64)">
            <summary>
            设置用户汇总消息已读
            </summary>
            <param name="ctx">上下文</param>
            <param name="userSummryId">用户汇总ID</param>
            <returns>返回设置结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserWarnAppGroupMessage(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取消息分组列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userSummryId">用户汇总结果ID</param>
            <returns>返回消息分组列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetAppMsgSummaryLightAppSettingId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="userSummryId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserWarnAppMessage(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取指定轻应消息明细列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userSummryId">用户汇总结果ID</param>
            <returns>返回明细分组列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserDisplayMsgSettingCollection(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取当前用户方案轻应用消息显示设置列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>返回设置列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SetUserDisplayMsgSetting(Kingdee.BOS.Context,System.Int64,System.Int32,System.Boolean)">
            <summary>
            设置当前用户方案轻应用消息是否启用显示
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="appSettingId">方案轻应用设置ID</param>
            <param name="isEnable">是否启用</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.ProcessMessage(Kingdee.BOS.Context,System.Int64)">
            <summary>
            处理消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageId">消息ID</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SendRemindersMessasge(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            发送指定监控消息的云之家催办消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageId">消息ID</param>
            <param name="opeId">云之家用户id</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.ProcessMessageList(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            处理消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageIds">消息列表ID</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SendRemindersMessasgeListToOpeId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            发送指定监控消息的云之家催办消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageIds">消息ID</param>
            <param name="opeId">云之家用户id</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SendRemindersMessasgeToOpeIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            发送指定监控消息的云之家催办消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageIds">消息ID</param>
            <param name="opeIds">云之家用户id列表</param>
            <returns>处理成功返回Successful为true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetWarnSummaryIdsByLAppSettingId(Kingdee.BOS.Context,System.Int32)">
            <summary>
            根据轻应用ID获取当前汇总结果ID列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="lightAppSetId">轻应用ID</param>
            <returns>返回汇总结果ID，不存在返回0</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.DeleteWarnSummaryByIds(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            删除原有方案汇总统计结果
            </summary>
            <param name="ctx">上下文</param>
            <param name="summaryIds">汇总Id列表</param>
            <returns>返回执行成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.DeleteWarnSummaryBySettingId(Kingdee.BOS.Context,System.Int64,System.DateTime)">
            <summary>
            删除原有方案汇总统计结果
            </summary>
            <param name="ctx">上下文</param>
            <param name="lappSettId">汇总Id</param>
            <returns>返回执行成功与否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetUserSummryLightAppSettingId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="userSummryId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SendXTMessage(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            发送指定opeid讯通消息列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="messages">消息内容</param>
            <param name="opeIds">用户opeid</param>
            <returns>返回发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetWarnLightAppXTMessage(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取相应消息Id讯通消息内容
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageIds">消息id列表</param>
            <returns>返回消息内容列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetWarnMessageIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取相应消息Id讯通消息内容
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageIds">消息id列表</param>
            <returns>返回消息内容列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.LoadPubAccount(Kingdee.BOS.Context)">
            <summary>
            获取业务监控公众号信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetWarnMessageLightAppSetting(Kingdee.BOS.Context,System.Int64)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="appMessageId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SetGroupMessageDisplay(Kingdee.BOS.Core.Warn.LlightApp.MessageGroup,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField})">
            <summary>
            设置分组信息
            </summary>
            <param name="msgGoup">消息分组内容</param>
            <param name="displayFields">variableFields</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.CreateWarnAppMessageDetial(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField},System.Int64,System.String)">
            <summary>
            创建消息内容展示集合列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="variableFields">variableFields</param>
            <param name="json">结果json key value值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.ColorAnalytic(System.String)">
            <summary>
            颜色解析
            </summary>
            <param name="color">颜色</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.SetGroupMessageContent(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.Int64,Kingdee.BOS.Core.Warn.LlightApp.MessageGroup},System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField})">
            <summary>
            设置分组标题
            </summary>
            <param name="ctx">上下文</param>
            <param name="msgGoups">消息分组内容</param>
            <param name="displayFields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.CreateTitleMessageValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="groupDispaly"></param>
            <param name="sumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.CreateTitle2MessageValue(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="groupValue"></param>
            <param name="sumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.LightApp.WarnLightAppService.GetWarnSoultionData(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取预警数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoultionId">预警方案ID</param>
            <param name="warnobjectId">预警对象id</param>
            <returns>返回预警数据对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult">
            <summary>
            执行预警解析结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult.#ctor(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus)">
            <summary>
            构造函数
            </summary>
            <param name="executeStatus">执行状态</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult.Message">
            <summary>
            消息 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult.ExecuteStatus">
            <summary>
            执行状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ExcuteWarnParseResult.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ExcuteWarnParseResultRecord">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ExcuteWarnParseResultRecord.RecordOutNumberResult(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.App.Core.Warn.WarnParseRunResult,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            记录超出指定数量预警消息
            </summary>
            <param name="warnSchedule"></param>
            <param name="timeSpan"></param>
            <param name="runResult"></param>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ExcuteWarnParseResultRecord.RecordParserResult(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            记录解析执行结果
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <param name="warnSchedule">预警方案</param>
            <param name="runResult">执行结果</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ILightAppSettingProvider">
            <summary>
            预警轻应用设置信息provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ILightAppSettingProvider.GetWarnLightAppSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警轻应用设置信息s
            </summary>
            <param name="context">上下文</param>
            <param name="warnSoluctionId">预警方案ID</param>
            <returns>返回设置信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.IWarnScheduleParser">
            <summary>
            预警方案解析器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.IWarnScheduleParser.SetMessageSendUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            设置发送消息用户
            当发送消息用户默认没有时，使用此用户id列表
            </summary>
            <param name="userids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.IWarnScheduleParser.SetWarnExecuteType(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            设置执行类型
            </summary>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.IWarnScheduleParser.ParseExecute(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            解析执行
            </summary>
            <param name="warnSchedule">预警方案计划任务</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.IWarnScheduleParser.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository">
            <summary>
            请应用相关存储Repository
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.#ctor(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Warn.LlightApp.WarnLightAppSetting)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="warnSoluctionId"></param>
            <param name="appSettId"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._lightAppMessageRepository">
            <summary>
            轻应用明细消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._lightAppMsgGroupRepository">
            <summary>
            用户消息分组对应关系
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._lightAppSummaryRepository">
            <summary>
            预警轻应用汇总结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._lightAppUserSummaryRepository">
            <summary>
            消息用户关联表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._lightAppMessageSummaryRepository">
            <summary>
            消息分组统计信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository._warnUserMessagerRepository">
            <summary>
            消息分组统计信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateAppMessageDataCache(System.Int32)">
            <summary>
            创建指定数量预警消息数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateAppMsgGroupDataCache(System.Int32)">
            <summary>
            创建指定数量预警消息分组数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateSummaryDataCache(System.Int32)">
            <summary>
            创建指定数量汇总数据数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateSummaryUserDataCache(System.Int32)">
            <summary>
            创建指定数量汇总用户数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateMessageSummaryDataCache(System.Int32)">
            <summary>
            创建指定消息汇总数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.CreateMessageRecevierData(System.Int32)">
            <summary>
            创建指定数量消息接收着数据缓冲区
            </summary>
            <param name="count">count数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddSummaryResult(System.String,System.Int64,System.String)">
            <summary>
            新增汇总结果
            </summary>
            <param name="resultJson">汇总结果key value json值</param>
            <param name="createId">创建用户ID</param>
            <param name="content">内容</param>
            <returns>返回新增行数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddSummaryResultUser(System.Int64,System.Int64)">
            <summary>
            新增汇总结果用户
            </summary>
            <param name="userId">用户ID</param>
            <param name="summaryId">消息ID</param>
            <returns>返回新增行数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddMsgSummary(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新增预警消息汇总
            </summary>
            <param name="summaryId">方案汇总ID</param>
            <param name="groupValue">分类值</param>
            <param name="sumvalue">汇总值</param>
            <param name="groupDislplay">显示值</param>
            <param name="groupFieldName">分组字段名称</param>
            <param name="sumFieldName">汇总字段值</param>
            <param name="groupFormId">分组表单Id</param>  
            <returns>返回新增行数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddUserMessageSummary(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="summaryId"></param>
            <param name="msgSummaryId"></param>
            <param name="msgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddLightAppMessage(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="summaryId"></param>
            <param name="resultKeyvalue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.AddMessageRecevier(System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <param name="warnMsgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.WarnSoluctionId">
            <summary>
            方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppSettingId">
            <summary>
            app设置ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.WarnLightAppSetting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.WarnLightAppDetialSetting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppMessageRepository">
            <summary>
            轻应用明细消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppMsgGroupRepository">
            <summary>
            用户消息分组对应关系
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppSummaryRepository">
            <summary>
            预警轻应用汇总结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppUserSummaryRepository">
            <summary>
            消息用户关联表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.LightAppMessageSummaryRepository">
            <summary>
            消息分组统计信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository.WarnUserMessagerRepository">
            <summary>
            消息分组统计信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder">
            <summary>
            轻易用消息发送处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendMessage">
            <summary>
            发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendSummaryMessage">
            <summary>
            发送汇总消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendByUserCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            根据用户列表方式发送
            用户发送消息不一致，发送用户存在用户变量时
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendByWarnMessageCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            通过预警消息列表模式发送
            所有用户发送的消息内容一致
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendLightAppMessage(System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            
            </summary>
            <param name="summaryId"></param>
            <param name="msgSummaryId"></param>
            <param name="warnMessageItems"></param>
            <param name="lightAppRepository"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.SendUserLightAppMessage(System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            发送指定用户轻应用消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="summaryId">汇总结果Id</param>
            <param name="msgSummaryId">明细分类汇总结果ID</param>
            <param name="warnMessageItems">预警消息列表</param>
            <param name="lightAppRepository">轻应用AppRepository</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.AddGroupSummaryResult(Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository,System.Int64,Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult)">
            <summary>
            
            </summary>
            <param name="lightAppRepository"></param>
            <param name="summaryId"></param>
            <param name="groupSummaryResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.IsExistsVariablesReceiver">
            <summary>
            是否包含预警消息接收是否包含变量用户
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.WarnLightAppSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.WarnLightAppDetialSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppSendMessgeHanlder.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProvider">
            <summary>
            轻应用设置provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProvider.GetWarnLightAppSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警轻应用设置信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoluctionId">预警方案ID</param>
            <returns>返回设置信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProviderFactory">
            <summary>
            轻应用设置provier工厂类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProviderFactory._regsitertype">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProviderFactory.#cctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProviderFactory.Resgiter(System.Type)">
            <summary>
            注册指定type provider
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppSettingProviderFactory.Create">
            <summary>
            创建provider
            </summary>
            <returns>返回provier</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ObsoleteMergeTitleInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteMergeTitleInfo.GroupItems">
            <summary>
            依此栏位进行分组
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteMergeTitleInfo.SumItems">
            <summary>
            依此栏位进行汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ObsoleteMergeTitleInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteMergeTitleInfo.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.MessageConvertor">
            <summary>
            message convertor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageConvertor.Convert(Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection)">
            <summary>
            convert to warn send messgae collction 
            </summary>
            <param name="sendMessageCollection">send messsage collection</param>
            <returns>warn send messgae collction </returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer">
            <summary>
            预警消息变量容器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer._warnVariables">
            <summary>
            内置预警变量key value值字典列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer._warnSolutionVariables">
            <summary>
            预警方案预警变量key value值字典列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetWarnSolutionVariables">
            <summary>
            获取预警变量键值字符串
            </summary>
            <returns>键值字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.#ctor(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.App.Core.Warn.VariableFieldCollection,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            构造函数
            </summary>
            <param name="warnVariables">内置预警变量key value值字典列表</param>
            <param name="messageVariablies">预警消息变量数组</param>
            <param name="warnSolutionMetadata">预警方案元数据</param>
            <param name="warnDataSourceMetadata">预警方案数据源元数据</param>
            <param name="warnSolutionDynamicObject">预警方案数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetWarnSolutionVariableValues">
            <summary>
            获取预警方案变量键值对
            </summary>
            <param name="variables">返回预警方案变量对应key value字典列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetDataSourceRowVariables(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetDataSourceRowVariables(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[])">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetVariableValuesFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <param name="messageVariablies">预警消息变量列表</param>
            <param name="info">数据源数据</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetSolutionVariableValuesFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取预警方案变量值
            </summary>
            <param name="rowData"></param>
            <param name="messageVariablies"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetVariableValuesFromNomalRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <param name="messageVariablies">预警消息变量列表</param>
            <param name="info">数据源数据</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetSolutionVariableValueFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetVariableValueFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetVariableValuesFromReportRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[])">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="veriableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.TryGetMultiLangValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,System.Object@)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="rowData">数据</param>
            <param name="field">预警变量</param>
            <param name="valk"></param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetEntityRowData(Kingdee.BOS.Core.Metadata.FieldElement.MultiLangTextField,Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetValueFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.GetBasePropertyFieldValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object)">
            <summary>
            取基础资料属性关联基础资料字段名
            </summary>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.VariableFieldCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnDataSourceMetadata">
            <summary>
            预警单据源元数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnSolutionMetadata">
            <summary>
            预警单据源元数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnDataSourceBusinessInfo">
            <summary>
            预警单据源业务元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnSolutionBusinessInfo">
            <summary>
            预警方案单据源业务元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnSolutionDynamicObject">
            <summary>
            预警方案数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnSolutionVariables">
            <summary>
            预警方案预警变量key value值字典列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.SolutionVariablieFields">
            <summary>
            预警方案预警消息变量数组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.DataSouceVariablieFields">
            <summary>
            数据源预警消息变量数组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.VariableValueReader">
            <summary>
            variable value reader
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnDataSourceQueryInfo">
            <summary>
            warn data soucre query info
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.LCID">
            <summary>
            语言设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.Languaes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableContianer.WarnSourcePKData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer">
            <summary>
            预警消息变量容器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer.#ctor(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.App.Core.Warn.VariableFieldCollection,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            构造函数
            </summary>
            <param name="warnVariables">内置预警变量key value值字典列表</param>
            <param name="messageVariablies">预警消息变量数组</param>
            <param name="warnSolutionMetadata">预警方案元数据</param>
            <param name="warnDataSourceMetadata">预警方案数据源元数据</param>
            <param name="warnSolutionDynamicObject">预警方案数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer.GetSolutionVariableValueFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.String)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer.GetVariableValueFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.String)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="veriableField"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer.GetVariableValuesFromReportRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField[])">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="veriableFields"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableReaderContianer.VariableReaderContianer">
            <summary>
            变量读取Reader contianer
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser">
            <summary>
            消息变量解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.Parse(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage)">
            <summary>
            
            </summary>
            <param name="variableValues">变量key value值</param>
            <param name="messageEntity">消息体</param>
            <param name="mobileMessage">移动消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.ParseMessageText(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.App.Core.Warn.Builder.MessageEntityExt)">
            <summary>
            解析消息文本内容
            </summary>
            <param name="variableValues">变量列表</param>
            <param name="messageEntity">消息体</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.GetContainsVariables(Kingdee.BOS.Core.Warn.VariableValueDictionary,System.String)">
            <summary>
            从指定格式化字符串获取当前包含的变量列表值
            </summary>
            <param name="variableValues">变量key value值</param>
            <param name="formatStr">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.RepalceFieldValues(Kingdee.BOS.Core.Warn.VariableValueDictionary,System.String,System.Int32)">
            <summary>
            替换表达计算值
            </summary>
            <param name="variableValues">变量value 键值对</param>
            <param name="formatStr">格式化字符串</param>
            <param name="lcid">语言Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.AddWarnMobileMessageVariable(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.Boolean)">
            <summary>
            添加移动消息变量到移动消息
            </summary>
            <param name="variableValues">变量value 键值对</param>
            <param name="mobileMessage">移动消息</param>
            <param name="isTitle">是否标题</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.AddWarnMobileMessageStyle(Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.String,System.String,System.Boolean)">
            <summary>
            添加移动消息变量到移动消息
            </summary>
            <param name="mobileMessage">移动消息</param>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="isTitle">是否标题</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.MessageVariableValuePaser.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder">
            <summary>
            一般消息发送
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder._mergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder._messageDetialBusinessInfo">
            <summary>
            明细合并消息业务元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.SendMessage">
            <summary>
            创建发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateSendWarnMessageCollection(Kingdee.BOS.Core.Warn.Message.UserWarnMessageCollection,Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userWarnMessageCollection">用户预警消息列表集合</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateUserSendWarnMessage(System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="warnMessageItems">用户消息列表</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            
            </summary>
            <param name="messageEntitys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateMobileWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.SendDetialWarnMessage,System.Data.DataTable)">
            <summary>
            创建移动明细消息
            </summary>
            <param name="warnMessageItem"></param>
            <param name="sendDetialWarnMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateXunTongMessageHanlder(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.ReplaceGroupField(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.String,Kingdee.BOS.Core.Warn.Message.WarnMessageItem,Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
            <param name="contentFormat"></param>
            <param name="warnMsgItem"></param>
            <param name="warnHelper"></param>
            <param name="groupByItems"></param>
            <param name="isRpt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.ReplaceSUMField(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
            <param name="items"></param>
            <param name="strMergeTitle"></param>
            <param name="sumItems"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.GeMaxtMergeWarnLevel(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            获取最高级别
            </summary>
            <param name="items">消息列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.CreateMoblieMessageCollection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.GetFormMetadataBusinessInfo(System.String)">
            <summary>
            获取指定表单formId业务元数据信息
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.MergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.MessageDetialBusinessInfo">
            <summary>
            明细消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.MergeTitleInfo">
            <summary>
            合并标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalSendWarnMessgeHanlder.XunTongMessageHanlder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateDataSourceSqlFilterParam(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField},System.String)">
            <summary>
            
            </summary>
            <param name="queryInfo"></param>
            <param name="messageVariablies"></param>
            <param name="variableFields"></param>
            <param name="keys"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateSqlFilterParam(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.String)">
            <summary>
            
            </summary>
            <param name="messageVariablies"></param>
            <param name="warnDataKeyValueFieldNames"></param>
            <param name="filterString"></param>
            <param name="queryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateReportFilterParam(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateRptParams(System.Int32)">
            <summary>
            创建RptParams
            </summary>
            <param name="modeTypeSubId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateSelectFieldKeys(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            
            </summary>
            <param name="messageVariablies"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateSelectFieldKeys(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField})">
            <summary>
            
            </summary>
            <param name="variableFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.SetSelectEntityTables(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            
            </summary>
            <param name="queryInfo"></param>
            <param name="sqlBuilderParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.GetPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取单据主键keyfield名称
            </summary>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.IgnoreCaseDistinctMargeSelectKeys(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            忽略大小写去重，合并两个查询字段列表
            </summary>
            <param name="baseSelectKeys">基本查询字段key值</param>
            <param name="margeKeys">合并可以值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.AddSelectKey(Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="sqlBuilderParameter"></param>
            <param name="selectKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.AddSelectKey(Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            
            </summary>
            <param name="sqlBuilderParameter"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.CreateSelectFieldKeys(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.FormatFilterString(System.String,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            格式化传入，转换{实体名.标识}，为了预防单据中有两个相同字段
            </summary>
            <param name="strFilterString"></param>
            <param name="queryInfo"></param>
            <param name="sqlBuilderParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ParameterFilterBuilder.GetEntityPkFieldName(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.QueryElement.EntityTable})">
            <summary>
            获取单据主键keyfield名称
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSoultionData,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="warnSoultionData"></param>
            <param name="warnMessage"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext._warnDataSourcequeryInfo">
            <summary>
            查询条件信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext._wcParseArg">
            <summary>
            预警条件处理事件信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext._isAuthorizationControl">
            <summary>
            数据权限隔离
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext._isReportDataSource">
            <summary>
            是否报表数据源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnMessage">
            <summary>
            预警消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSendMessageCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnDataSourceQueryInfo">
            <summary>
            查询条件信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WcParseArgs">
            <summary>
            预警条件处理事件信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnCondition">
            <summary>
            预警条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnLightAppSetting">
            <summary>
            预警轻应用设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSolutionDynamicData">
            <summary>
            当前方案数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.IsAuthorizationControl">
            <summary>
            数据权限隔离
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.Context">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSoultionData">
            <summary>
            预警方案数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSchedule">
            <summary>
            预警方案
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnObjectBusinessInfo">
            <summary>
            预警预警对象内码元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnDataSourceBusinessInfo">
            <summary>
            预警对象对应单据源元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.DataSourceOrgField">
            <summary>
            预警对象对应单据源元的默认组织字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSolutionBusinessInfo">
            <summary>
            预警方案 元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.MergeTitleInfo">
            <summary>
            合并标题信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnDataSourceMetadata">
            <summary>
            预警单据源元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnSolutionMetadata">
            <summary>
            预警方案单据源元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnDataFilterParameter">
            <summary>
            预警数据过滤条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.WarnDataFiledKeyValues">
            <summary>
            预警数据相关字段keyvalue值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.IsReportDataSource">
            <summary>
            是否报表数据源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.VariableValueReader">
            <summary>
            变量value值读取reader
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ObsoleteParsingContext.ReceiverMembers">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ParsingContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ParsingContext.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSoultionData,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="warnSoultionData"></param>
            <param name="warnMessage"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ParsingContext._warnDataSourcequeryInfo">
            <summary>
            查询条件信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ParsingContext._wcParseArg">
            <summary>
            预警条件处理事件信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ParsingContext._isAuthorizationControl">
            <summary>
            数据权限隔离
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ParsingContext._isReportDataSource">
            <summary>
            是否报表数据源
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.ParsingContext._isSQLReportDataSource">
            <summary>
            是否SQL报表数据源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnMessage">
            <summary>
            预警消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSendMessageCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnDataSourceQueryInfo">
            <summary>
            查询条件信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WcParseArgs">
            <summary>
            预警条件处理事件信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnCondition">
            <summary>
            预警条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnLightAppSetting">
            <summary>
            预警轻应用设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSolutionDynamicData">
            <summary>
            当前方案数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsAuthorizationControl">
            <summary>
            数据权限隔离
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.Context">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSoultionData">
            <summary>
            预警方案数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSchedule">
            <summary>
            预警方案
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnObjectBusinessInfo">
            <summary>
            预警预警对象内码元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnDataSourceBusinessInfo">
            <summary>
            预警对象对应单据源元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.DataSourceOrgField">
            <summary>
            预警对象对应单据源元的默认组织字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSolutionBusinessInfo">
            <summary>
            预警方案 元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.MergeTitleInfo">
            <summary>
            合并标题信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnDataSourceMetadata">
            <summary>
            预警单据源元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSolutionMetadata">
            <summary>
            预警方案单据源元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnDataFilterParameter">
            <summary>
            预警数据过滤条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnDataFiledKeyValues">
            <summary>
            预警数据相关字段keyvalue值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsReportDataSource">
            <summary>
            是否报表数据源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.VariableValueReader">
            <summary>
            变量value值读取reader
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.ReceiverMembers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.PlugInProxy">
            <summary>
            业务监控服务执行插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.SolutionVariableValues">
            <summary>
            业务监控方案变量值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.Languages">
            <summary>
            当前系统启用语言
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.LCID">
            <summary>
            当前系统默认语言
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.AllVariableFieldCollection">
            <summary>
            当前解析所有变量自动集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.MegerTitleVariableFieldCollection">
            <summary>
            合并标题变量集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.WarnSourcePKData">
            <summary>
            预警单据基本数据
            PK值键值对
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsEnableMultiLang">
            <summary>
            是否启用多语言
            默认启用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsSuportMainLangOld">
            <summary>
            是否支持保留主语言旧版本
            默认支持  默认主语言2052
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsSSendMobileMsg">
            <summary>
            是否发送短信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.MobileMsgNumber">
            <summary>
            短信信息限定数量值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsSendEMailMsg">
            <summary>
            是否发送邮件消息
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsSendQywxddMsg”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.VariableReaderContianer">
            <summary>
            变量读取Reader contianer
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsHistorySolution">
            <summary>
            是否历史方案
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.ParsingContext.IsSQLReportDataSource">
            <summary>
            是否SQL报表数据源
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Plugin.IWarnPlugInProxyBuiler">
            <summary>
            预警插件代理builder
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.IWarnPlugInProxyBuiler.CreateWarnLightAppMessagePlugInProxy(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSoultionData)">
            <summary>
            创建消息插件代理
            处理预警消息,
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoultionData">预警方案数据</param>
            <returns>返回消息插件代理对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuiler">
            <summary>
            预警插件代理builder类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuiler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuiler.CreateWarnLightAppMessagePlugInProxy(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSoultionData)">
            <summary>
            创建消息插件
            </summary>
            <param name="ctx">context上下文</param>
            <param name="warnSoultionData">预警方案数据</param>
            <returns>返回消息插件代理对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuiler.CreateWarnMessagePlugIns(Kingdee.BOS.Core.Warn.WarnForm)">
            <summary>
            
            </summary>
            <param name="warnObjectBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuiler.CreateWarnPlugIns``1(Kingdee.BOS.Core.Metadata.FormElement.PlugIn)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuilerFactory">
            <summary>
            预警插件代理builder工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuilerFactory.Create">
            <summary>
            创建预警插件代理builder
            </summary>
            <returns>返回插件代理builder</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Plugin.WarnPlugInProxyBuilerFactory.DeaultBuiler">
            <summary>
            默认builder
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder">
            <summary>
            轻易用消息发送处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendMessage">
            <summary>
            发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendSummaryMessage">
            <summary>
            发送汇总消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendByUserCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            根据用户列表方式发送
            用户发送消息不一致，发送用户存在用户变量时
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendByWarnMessageCollection(Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic,Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary)">
            <summary>
            通过预警消息列表模式发送
            所有用户发送的消息内容一致
            </summary>
            <param name="summaryArithmetic">汇总计算表达式</param>
            <param name="msgGroupSummary">消息分类汇总</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendLightAppMessage(System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            
            </summary>
            <param name="summaryId"></param>
            <param name="msgSummaryId"></param>
            <param name="warnMessageItems"></param>
            <param name="lightAppRepository"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.SendUserLightAppMessage(System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository)">
            <summary>
            发送指定用户轻应用消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="summaryId">汇总结果Id</param>
            <param name="msgSummaryId">明细分类汇总结果ID</param>
            <param name="warnMessageItems">预警消息列表</param>
            <param name="lightAppRepository">轻应用AppRepository</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.AddGroupSummaryResult(Kingdee.BOS.App.Core.Warn.Parser.LightAppRepository,System.Int64,Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult)">
            <summary>
            
            </summary>
            <param name="lightAppRepository"></param>
            <param name="summaryId"></param>
            <param name="groupSummaryResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.IsExistsVariablesReceiver">
            <summary>
            是否包含预警消息接收是否包含变量用户
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.WarnLightAppSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.WarnLightAppDetialSetting">
            <summary>
            轻应用设置信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.LightAppMessageSendHanlder.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder">
            <summary>
            一般消息发送
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder._mergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder._messageDetialBusinessInfo">
            <summary>
            明细合并消息业务元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.SendMessage">
            <summary>
            创建发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateSendWarnMessageCollection(Kingdee.BOS.Core.Warn.Message.UserWarnMessageCollection,Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userWarnMessageCollection">用户预警消息列表集合</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateUserSendWarnMessage(System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="warnMessageItems">用户消息列表</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            
            </summary>
            <param name="messageEntitys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateMobileWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.SendDetialWarnMessage,System.Data.DataTable)">
            <summary>
            创建移动明细消息
            </summary>
            <param name="warnMessageItem"></param>
            <param name="sendDetialWarnMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.Save(Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection)">
            <summary>
            
            </summary>
            <param name="warnMessageCollection"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateXunTongMessageHanlder(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.ReplaceGroupField(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},Kingdee.BOS.Core.Warn.Message.WarnMessageItem,System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
            <param name="contentFormat"></param>
            <param name="warnMsgItem"></param>
            <param name="warnHelper"></param>
            <param name="groupByItems"></param>
            <param name="isRpt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.ReplaceSUMField(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
            <param name="items"></param>
            <param name="strMergeTitle"></param>
            <param name="sumItems"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.GeMaxtMergeWarnLevel(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            获取最高级别
            </summary>
            <param name="items">消息列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.CreateMoblieMessageCollection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.GetFormMetadataBusinessInfo(System.String)">
            <summary>
            获取指定表单formId业务元数据信息
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.MergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.MessageDetialBusinessInfo">
            <summary>
            明细消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.MergeTitleInfo">
            <summary>
            合并标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.MergeTitleInfo_L">
            <summary>
            合并标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.XunTongMessageHanlder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.WarnMessageVariableContianer">
            <summary>
            预警消息容器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.NomalMessageSendHanlder.MergeTitleParser">
            <summary>
            合并标题解析器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder">
            <summary>
            发送消息处理器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder._mergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder._messageDetialBusinessInfo">
            <summary>
            明细合并消息业务元数据信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            构造函数
            </summary>
            <param name="parsingContext">解析上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateSendMessage">
            <summary>
            创建发送消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateSendWarnMessageCollection(Kingdee.BOS.Core.Warn.Message.UserWarnMessageCollection,Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userWarnMessageCollection">用户预警消息列表集合</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateUserSendWarnMessage(System.Int64,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo)">
            <summary>
            创建用户发送消息
            </summary>
            <param name="userId">用户Id</param>
            <param name="warnMessageItems">用户消息列表</param>
            <param name="mergeTitleInfo">合并标题信息</param>
            <returns>返回创建用户发送消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            
            </summary>
            <param name="messageEntitys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateMobileWarnDetailMessage(Kingdee.BOS.Core.Warn.Message.SendDetialWarnMessage,System.Data.DataTable)">
            <summary>
            创建移动明细消息
            </summary>
            <param name="warnMessageItem"></param>
            <param name="sendDetialWarnMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.GeMaxtMergeWarnLevel(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            获取最高级别
            </summary>
            <param name="items">消息列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.CreateMoblieMessageCollection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.SetDetailMsgGroupId(Kingdee.BOS.Core.Warn.Message.SendWarnMessageCollection,System.Int32)">
            <summary>
            设置明细消息分组ID
            </summary>
            <param name="sendWarnMessageCollection">sendWarnMessageCollection</param>
            <param name="detailMsgCount">明细消息数量</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.MergeMessageBusinessInfo">
            <summary>
            合并消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.MessageDetialBusinessInfo">
            <summary>
            明细消息业务元数据信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.ParsingContext">
            <summary>
            解析上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.MergeTitleInfo">
            <summary>
            合并标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.MergeTitleInfo_L">
            <summary>
            合并标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.WarnMessageVariableContianer">
            <summary>
            预警消息容器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.SendWarnMessageHanlder.MergeTitleParser">
            <summary>
            合并标题解析器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection">
            <summary>
            用户接收者列表集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AddUser(Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            添加用户
            默认去除重复ID
            </summary>
            <param name="userMember"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AddUserRange(System.Collections.Generic.IEnumerable{Kingdee.BOS.WorkflowMember.UserMember})">
            <summary>
            添加用户列表
            </summary>
            <param name="userMembers"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AddVariableUser(Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            添加变量用户
            默认去除重复ID
            </summary>
            <param name="userMember"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AddVariableUserRange(System.Collections.Generic.IEnumerable{Kingdee.BOS.WorkflowMember.UserMember})">
            <summary>
            
            </summary>
            <param name="userMembers"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.ContiansUserId(System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.ContiansNomalUserId(System.Int64)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.GetUserMembers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.GetAllUserId">
            <summary>
            返回所用用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.UserIds">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AllUserIds">
            <summary>
            所有用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.UserVariableUserIds">
            <summary>
            变量用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.UserVariableMembers">
            <summary>
            用户列表变量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.UserMembers">
            <summary>
            用户列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.AllUserMembers">
            <summary>
            用户列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection.VariableUserMembers">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnDataDictionary">
            <summary>
            用户分组预警数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnDataDictionary.dicUserlist">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnDataDictionary.Add(System.Int64,Kingdee.BOS.WorkflowMember.UserMember,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="userMember"></param>
            <param name="warnRowData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnDataDictionary.GetValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnData">
            <summary>
            用户预警数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnData.#ctor(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnData.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnData.UserMember">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserMemberWarnData.WarnDatas">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter">
            <summary>
            预警数据列表过滤器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnDataCollectionFilter">
            <summary>
            预警数据列表过滤器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnDataCollectionFilter.GetRows(Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection)">
            <summary>
            返回相应行
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter.#ctor(Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue)">
            <summary>
            
            </summary>
            <param name="warnDataCollection"></param>
            <param name="userWarnDataPrimayValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter.#ctor(Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValue)">
            <summary>
            
            </summary>
            <param name="userWarnDataPrimayValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter.GetRows(Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection)">
            <summary>
            返回相应行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter.UserWarnDataPrimayValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter.WarnObjectDataCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.VariableReaderManager">
            <summary>
            variable reader manager
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.VariableReaderManager.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.VariableReaderManager.CreateContianer(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.Boolean)">
            <summary>
            创建variable reader contianer 
            </summary>
            <param name="wvFields">变量列表</param>
            <param name="isReport">是否系统报表</param>
            <returns>variable reader contianer </returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.VariableReaderManager.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder">
            <summary>
            预警消息创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.WarnMessageVariableContianer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
            <param name="warnDataSourceMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.SetMessageEntityKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity)">
            <summary>
            
            </summary>
            <param name="rowData"></param>
            <param name="messageEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.CreateWarnMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.CreateReceiverWarnMessageItemList(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            
            </summary>
            <param name="soluctionVariables">整个预警方案变量列表值</param>
            <param name="userMemberReceivers">接收用户列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.CreateMessageEntity(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="variables"></param>
            <param name="EventArgs"></param>
            <param name="rowData"></param>
            <param name="mobileMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.GetWarnSolutionData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.ParseVariaToMobileStyle(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceStr"></param>
            <param name="variables"></param>
            <param name="mobileMessage"></param>
            <param name="isTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.GetWarnSoluctionUserMemberReciverCollection(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取当前方案列表所有接收用户列表
            </summary>
            <param name="warnMessage"></param>
            <returns>接收用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.SetVariableMemberValue(Kingdee.BOS.WorkflowMember.IMember,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="member">用户member</param>
            <param name="variables">变量keyValue值</param>
            <returns>设置成功返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.GetDataKeyValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilder.WarnMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilderFactory">
            <summary>
            预警消息builder工厂类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessageBuilderFactory.Create(System.Int32,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建预警消息builder
            </summary>
            <param name="modle">模式</param>
            <param name="parsingContext">解析上下文</param>
            <returns>返回bulider实体对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.CreateWarnMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件
            </summary>
            <param name="strFilter">旧过滤条件</param>
            <param name="strAddFilter">待添加过滤条件</param>
            <returns>返回拼接后过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.CheckPermission(System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据权
            </summary>
            <param name="strUserId">用户ID</param>
            <param name="strUserDataRule">返回用户数据规则</param>
            <returns>有单据权限返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilder.RefreshMessageUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld._warnHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.CreateWarnMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.UserWarnDataPrimayValueCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="dictUserMemberDatas"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.CreateUserMessageItems(Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember,Kingdee.BOS.App.Core.Warn.Parser.UserWarnDataCollectionFilter)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件
            </summary>
            <param name="strFilter">旧过滤条件</param>
            <param name="strAddFilter">待添加过滤条件</param>
            <returns>返回拼接后过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.GetMessageReceiverRowDataInfo(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.CheckPermission(System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据权
            </summary>
            <param name="strUserId">用户ID</param>
            <param name="strUserDataRule">返回用户数据规则</param>
            <returns>有单据权限返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderOld.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.#ctor(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnHelper"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.CreateWarnMessageItemList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.CreateUserWarnMessageItemList(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter)">
            <summary>
            创建指定用户列表消息列表
            </summary>
            <param name="userMemberReceivers"></param>
            <param name="dataFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.CreateUserMessageItems(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnRowData},Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体
            </summary>
            <param name="collection"></param>
            <param name="userMember"></param>
            <param name="userWarnDataCollectionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.CheckPermission(System.Int64,System.Int64,Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则
            是否有单据功能查看权限
            </summary>
            <param name="orgId">组织ID</param>
            <param name="userId">用户ID</param>
            <param name="permissionContianer">权限容器</param>
            <returns>返回true或false；ture默认有权限；false无权</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.GetUserVariableMembers(Kingdee.BOS.App.Core.Warn.Parser.UserMemberReceiverCollection,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取当前行消息发送的所有用户列表
            以及用户对应单据key数据
            </summary>
            <param name="userMemberReceivers">用户变量接收者列表</param>
            <param name="warnRowData"></param>
            <returns>返回当前行消息发送的所有用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.ObsoleteWarnMessagePermissionBuilderV2.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService">
            <summary>
            预警消息接收人服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.GeUserMemberReceiverCollection(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.GetWarnMessageNomalReceivers(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取当前方案列表所有接收用户列表
            </summary>
            <param name="ctx"></param>
            <param name="warnMessage"></param>
            <returns>接收用户列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.GetVariablesReceivers(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取当前行变量对应接收用户变量列表值
            </summary>
            <param name="variableMembers"></param>
            <param name="rowVariables"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.GetMemberListReceiverIds(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember})">
            <summary>
            根据用户变量列表获取当前用户接收者
            </summary>
            <param name="ctx">上下文</param>
            <param name="memberList">用户变量列表</param>
            <returns>返回用户接收着列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.GetWorkflowMemberReceiverList(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember})">
            <summary>
            根据用户变量列表获取当前用户接收者
            </summary>
            <param name="ctx">上下文</param>
            <param name="memberList">用户变量列表</param>
            <returns>返回用户接收着列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.SetVariableMemberValue(Kingdee.BOS.WorkflowMember.IMember,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            设置用户变量值
            </summary>
            <param name="member">用户member</param>
            <param name="variables">变量keyValue值</param>
            <returns>设置成功返回true，否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.IsExistsVariablesReceiver(System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember})">
            <summary>
            是否存在自定义变量接收者
            </summary>
            <param name="memberList">用户列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.IsVariableMember(Kingdee.BOS.WorkflowMember.IMember)">
            <summary>
            判断是否变量列表
            </summary>
            <param name="memeber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.CreateWarnMessageVeriableList(System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember},System.Boolean)">
            <summary>
            创建对应消息变量列表
            </summary>
            <param name="memberList"></param>
            <param name="isReportSource"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageReceiverService.MergerUserMemgerListAndDistinctId(System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.UserMember},System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.UserMember})">
            <summary>
            
            </summary>
            <param name="userMembers"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer">
            <summary>
            预警消息变量容器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable[],Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            构造函数
            </summary>
            <param name="warnVariables">内置预警变量key value值字典列表</param>
            <param name="messageVariablies">预警消息变量数组</param>
            <param name="warnSolutionMetadata">预警方案元数据</param>
            <param name="warnDataSourceMetadata">预警方案数据源元数据</param>
            <param name="warnSolutionDynamicObject">预警方案数据</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer._warnVariables">
            <summary>
            内置预警变量key value值字典列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer._warnSolutionVariables">
            <summary>
            预警方案预警变量key value值字典列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.GetWarnSolutionVariableValues">
            <summary>
            获取预警方案变量键值对
            </summary>
            <param name="variables">返回预警方案变量对应key value字典列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.GetDataSourceRowVariables(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.GetVariableValuesFromRowData(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <param name="messageVariablies">预警消息变量列表</param>
            <param name="info">数据源数据</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.TryGetValueFromData(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable,System.String@)">
            <summary>
            从指定数据尝试获取变量value值
            </summary>
            <param name="info">单据业务元数据</param>
            <param name="data">单据数据</param>
            <param name="veriable">预警变量</param>
            <param name="value">输出获取值</param>
            <returns>获取成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.FormatDisplayValue(System.String,System.Boolean,System.Int16)">
            <summary>
            格式化value值显示方式
            </summary>
            <param name="field">金额字段</param>
            <param name="value">value值</param>
            <param name="iDecimal">是否金额类型</param>
            <returns>返回格式后字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.GetReallyPrecisionString(System.String)">
            <summary>
            获取真实格式金额字段显示值
            字符串长度为0默认为显示0值
            </summary>
            <param name="strvalue">输入字符串</param>
            <returns>返回格式化的显示金额字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.GetRefValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="veriable">预警变量</param>
            <param name="info">单据业务元数据</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnMessageVariablies">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnDataSourceMetadata">
            <summary>
            预警单据源元数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnSolutionMetadata">
            <summary>
            预警单据源元数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnDataSourceBusinessInfo">
            <summary>
            预警单据源业务元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnSolutionBusinessInfo">
            <summary>
            预警方案单据源业务元数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnSolutionDynamicObject">
            <summary>
            预警方案数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnSolutionVariables">
            <summary>
            预警方案预警变量key value值字典列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.WarnSolutionMessageVariablies">
            <summary>
            预警方案预警消息变量数组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.DataSouceMessageVariablies">
            <summary>
            数据源预警消息变量数组
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVariableContianer.LCID">
            <summary>
            语言设置
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper">
            <summary>
            预警消息变量帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.TextReplaceByVariables(System.String,Kingdee.BOS.Core.Warn.VariableValueDictionary,System.Int32)">
            <summary>
            根据变量key value值更新替换
            </summary>
            <param name="strFormat">字段format格式字符串</param>
            <param name="variableKeyValues">变量key value字典列表</param>
            <returns>返回更新替换后字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.ReplaceFieldFormatByVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据变量key value值更新替换
            </summary>
            <param name="strFieldFormat">字段format格式字符串</param>
            <param name="variableKeyValues">变量key value字典列表</param>
            <returns>返回更新替换后字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetMessageVeriableByKey(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.String)">
            <summary>
            获取指定key值的预警变量
            </summary>
            <param name="messageVariablies">变量列表</param>
            <param name="key">key值</param>
            <returns>返回消息变量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetVeriableValueFormReportData(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            从报告数据源获取字段value
            </summary>
            <param name="warnRowData">预警行数据源</param>
            <param name="fieldFormat">格式化字段({group.field},{sum.field},{from.field})</param>
            <returns>返回value字符串值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetVeriableValueFormData(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable,System.Nullable{System.Int32})">
            <summary>
            从报告数据源获取指定变量字段value
            </summary>
            <param name="data">单据数据源</param>
            <param name="dataMetadata">数据源单据元数据</param>
            <param name="veriable">变量值</param>
            <param name="lcid">语言id</param>
            <returns>返回对应显示value</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetVeriableRefValue(Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前预警变量值
            </summary>
            <param name="warnDataSourceMetadata">数据源元数据</param>
            <param name="data">单据数据</param>
            <param name="veriable">消息变量</param>
            <param name="info">单据业务数据信息</param>
            <returns>返回变量对应值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.TryGetVerableDispalyValueFormData(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String@)">
            <summary>
            从指定数据源获取预警变量值
            </summary>
            <param name="data">数据</param>
            <param name="veriable">消息变量</param>
            <param name="info">单据业务数据信息</param>
            <param name="value">返回value</param>
            <returns>获取成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.FormatDisplayValue(Kingdee.BOS.Core.Metadata.FieldElement.DecimalField,System.String,System.Int16)">
            <summary>
            格式化
            </summary>
            <param name="field">金额字段</param>
            <param name="value">value值</param>
            <param name="iDecimal">小数位数</param>
            <returns>返回格式化值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetReallyPrecisionString(System.String)">
            <summary>
            获取真实金额格式值
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetVeriablesListFromString(System.String,System.Boolean)">
            <summary>
            获取指定字串获取预警变量列表
            </summary>
            <param name="inputString">字符串</param>
            <param name="isReportDataSource">是否报表数据源</param>
            <returns>返回预警变量列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.GetVeriablesListFromString(Kingdee.BOS.LocaleValue,System.Boolean)">
            <summary>
            获取指定字串获取预警变量列表
            </summary>
            <param name="strLocaleValue">字符串</param>
            <param name="isReportDataSource">是否报表数据源</param>
            <returns>返回预警变量列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.DistinctVeriableList(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            Distinct去重后预警变量列表
            </summary>
            <param name="veriableList">预警变量列表</param>
            <returns>返回去重后的预警变量列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnMessageVeriableHelper.MegerVeriableListNotRepeat(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            合并两个预警变量列表
            </summary>
            <param name="veriableList1">预警变量列表1</param>
            <param name="veriableList2">预警变量列表2</param>
            <returns>返回合并后预警变量列表</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnParserV2">
            <summary>
            预警解析器，处理周期解析，条件解析，信息发送等
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParserV2.TestUserids">
            <summary>
            单元测试用户id集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParserV2.WarnHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetTestUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="testUserids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetMessageSendUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            设置发送消息用户
            当发送消息用户默认没有时，使用此用户id列表
            </summary>
            <param name="userids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetWarnExecuteType(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            设置执行类型
            </summary>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.ParseExecute(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            执行预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.RecordWarnMessageWhenOutOff(Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            监控记录数超出上限（10000）记录
            </summary>
            <param name="warnSchedule"></param>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnCreateParsingContext(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            注册插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnCreateWarnMessage(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            创建预警消息体
            </summary>
            <param name="parsingContext"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnBeforeParse(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnParseWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnPraseWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnAfterParseWarn(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            解析完成之后事件
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnBeforeSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送消息之前
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送预警消息
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.OnAfterSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送消息之后
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.InitializeWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            初始化预警解析条件
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.ParseCreateMessage(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs)">
            <summary>
            解析并创建消息
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <param name="afterParseWMsgEvnentArgs">解析处理事件之后事件对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.LoadData(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.ExcuteWarnParseEventArgs)">
            <summary>
            load 加载方案条件过滤单据数据
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <param name="args"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.ParseBeforeEventWarnMessageVeriableList(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.BeforeParseWarnMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
            <param name="beforeParseWarnArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.GetWarnSolutionDynamicData(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.CreateWarnSolutionVariables(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.AddFSeqToQyryInofo(Kingdee.BOS.App.Core.Warn.ParsingContext,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField},Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            拼接FSEQ的查询条件，查询出序号栏位
            </summary>
            <param name="warnMessage"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.AddFSeqToQyryInofo(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            拼接FSEQ的查询条件，查询出序号栏位
            </summary>
            <param name="warnMessage"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.FormatFilterString(System.String,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            格式化传入，转换{实体名.标识}，为了预防单据中有两个相同字段
            </summary>
            <param name="strFilterString"></param>
            <param name="queryInfo"></param>
            <param name="sqlBuilderParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.RecordParserResult(Kingdee.BOS.App.Core.Warn.WarnParseRunResult,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            
            </summary>
            <param name="timeSpan"></param>
            <param name="executeMsg"></param>
            <param name="warnMessage"></param>
            <param name="exeCute"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.CreateWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建预警条件
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetMergeTitleInfo(Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo,System.String)">
            <summary>
            
            </summary>
            <param name="mergeTitleInfo"></param>
            <param name="strMergeTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.AddCalculateItems(Kingdee.BOS.App.Core.Warn.MergeTitle.MergeTitleInfo,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            添加分组项与汇总项
            </summary>
            <param name="mergeTitleInfo"></param>
            <param name="liGroupItems"></param>
            <param name="liSumItems"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.ReplaceString(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            替换字符串
            </summary>
            <param name="strGoal"></param>
            <param name="liMatch"></param>
            <param name="strReplaceString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.DistilCalculatedItems(System.String,System.String)">
            <summary>
            提前出需要需要的栏位
            </summary>
            <param name="strMergeMessageTitle"></param>
            <param name="strMatchRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.CreateWarnMessageVariablies(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.GetKeyValueFieldInputFiledCode(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            
            </summary>
            <param name="warnDataSourceBusinessInfo"></param>
            <param name="filed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.CreateWarnServicePlugIns(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            CreateWarnServicePlugIns
            </summary>
            <param name="billBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.GetAllWanrMessageReceviers(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetLightAppSettingVariableSelectFields(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.Core.Warn.LlightApp.WarnLightAppSetting)">
            <summary>
            设置轻应用设置变量列表选择字段
            </summary>
            <param name="parsingContext">上下文解析</param>
            <param name="warnObjectDataCollection">数据源</param>
            <param name="warnLightAppSetting">轻应用设置</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.AfterPaserResetWarnMessage(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            解析完成之后，重置预警消息
            解决服务插件移除消息后,消息发送列表减少的可能
            </summary>
            <param name="warnMessage">预警消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV2.SetWarnVariaFormFiled(Kingdee.BOS.Core.Warn.WarnSoultionData,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            
            </summary>
            <param name="fileds"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParserV2.PlugInProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParserV2.ExecuteType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParserV2.Context">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnParserV3">
            <summary>
            预警解析器，处理周期解析，条件解析，信息发送等
            版本V3,增加多语言解析 2018-08-24 jql
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParserV3.TestUserids">
            <summary>
            单元测试用户id集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParserV3.WarnHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.#ctor(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetTestUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            
            </summary>
            <param name="testUserids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetMessageSendUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            设置发送消息用户
            当发送消息用户默认没有时，使用此用户id列表
            </summary>
            <param name="userids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetWarnExecuteType(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            设置执行类型
            </summary>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.ParseExecute(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            执行预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.ParseExecuteTest(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            执行检测（不发送消息）
            </summary>
            <param name="warnSchedule">方案执行计划</param>
            <returns>执行检测结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetParseExecuteTestResult(Kingdee.BOS.App.Core.Warn.WarnParseRunResult,Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            设置执行检测结果
            </summary>
            <param name="runResult">执行检测结果</param>
            <param name="parsingContext">parsingContext</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnCreateParsingContext(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            注册插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnCreateWarnMessage(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            创建预警消息体
            </summary>
            <param name="parsingContext"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnBeforeParse(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnParseWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnMessage"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnPraseWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnAfterParseWarn(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            解析完成之后事件
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnBeforeSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送消息之前
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送预警消息
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SendXunTongMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <param name="warnMessageCollection"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.OnAfterSendWarnMessage(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            发送消息之后
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.InitializeWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            初始化预警解析条件
            </summary>
            <param name="parsingContext">解析处理上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.ParseCreateMessage(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs)">
            <summary>
            解析并创建消息
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <param name="afterParseWMsgEvnentArgs">解析处理事件之后事件对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.LoadData(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.ExcuteWarnParseEventArgs)">
            <summary>
            load 加载方案条件过滤单据数据
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <param name="args"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetWarnBillCount(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取监控消息单据总数
            </summary>
            <param name="warnObjectDynamicObjects">warnObjectDynamicObjects</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.LoadWarnSourcePKData(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            load warn source pk data
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.ParseBeforeEventWarnMessageVeriableList(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.BeforeParseWarnMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="parsingContext"></param>
            <param name="beforeParseWarnArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.AddFSeqToQyryInofo(Kingdee.BOS.App.Core.Warn.ParsingContext,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField},Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            拼接FSEQ的查询条件，查询出序号栏位
            </summary>
            <param name="warnMessage"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.AddFSeqToQyryInofo(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            拼接FSEQ的查询条件，查询出序号栏位
            </summary>
            <param name="warnMessage"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.CreateWarnCondition(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            创建预警条件
            </summary>
            <param name="parsingContext">解析处理上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetWarnMessageVariablies(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            获取预警变量列表
            </summary>
            <param name="parsingContext">预警上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>预警变量列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetSelectField(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            
            </summary>
            <param name="warnDataSourceBusinessInfo"></param>
            <param name="filed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.CreateWarnServicePlugIns(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            CreateWarnServicePlugIns
            </summary>
            <param name="billBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetAllWanrMessageReceviers(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetLightAppSettingVariableSelectFields(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,Kingdee.BOS.Core.Warn.LlightApp.WarnLightAppSetting)">
            <summary>
            设置轻应用设置变量列表选择字段
            </summary>
            <param name="parsingContext">上下文解析</param>
            <param name="warnObjectDataCollection">数据源</param>
            <param name="warnLightAppSetting">轻应用设置</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.AfterPaserResetWarnMessage(Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            解析完成之后，重置预警消息
            解决服务插件移除消息后,消息发送列表减少的可能
            </summary>
            <param name="warnMessage">预警消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetWarnVariaFormFiled(Kingdee.BOS.Core.Warn.WarnSoultionData,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            
            </summary>
            <param name="fileds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetVariaFormWarnSolutionFiled(Kingdee.BOS.Core.Warn.WarnSoultionData,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            设置预警方案变量表单
            </summary>
            <param name="WarnSoultionData">预警方案对象</param>
            <param name="fileds">变量列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetWarnDetailSetVariablies(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            获取监控明细显示变量列表
            </summary>
            <param name="parsingContext">预警上下文</param>
            <returns>监控明细显示变量列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetWarnSolutionDynamicData(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            获取监控方案变量值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.GetWarnCardSetVariablies(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            获取监控卡片显示变量列表
            </summary>
            <param name="parsingContext">预警上下文</param>
            <returns>监控卡片显示变量列表</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SetIsSendEmailDxYzj”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.SaveExecuteRemind(Kingdee.BOS.App.Core.Warn.ParsingContext,System.Int32)">
            <summary>
            保存监控方案执行提醒
            </summary>
            <param name="parsingContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.AddOtherMsgVariablies(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable},System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            添加消息变量到MessageVariablies
            </summary>
            <param name="messageVariablies">消息变量</param>
            <param name="toAddVariablies">待添加变量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserV3.LoadSQLRptData(Kingdee.BOS.App.Core.Warn.ParsingContext,Kingdee.BOS.Core.Warn.PlugIn.Args.ExcuteWarnParseEventArgs)">
            <summary>
            直接SQL报表根据关键字过滤取数
            </summary>
            <param name="parsingContext">parsingContext</param>
            <param name="args">解析args</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParserV3.ExecuteType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParserV3.Context">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer">
            <summary>
            预警消息权限容器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer._formId">
            <summary>
            表单Id
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer._supportPermissionControl">
            <summary>
            支持权限控制
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="formId"></param>
            <param name="supportPermissionControl">支持权限控制</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer._dict">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.AddOrSet(System.Int64,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="orgId"></param>
            <param name="userId"></param>
            <param name="isPassed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.TryGetPassed(System.Int64,System.Int64,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="orgId"></param>
            <param name="userId"></param>
            <param name="isPassed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.GetFormatKey(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="orgId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.FormId">
            <summary>
            表单Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnPermissionContianer.SupportPermissionControl">
            <summary>
            支持权限控制
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnScheduleParserFactory">
            <summary>
            预警计划解析工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnScheduleParserFactory.Create(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            预警计划解析程序
            </summary>
            <param name="context"></param>
            <param name="schedule"></param>
            <param name="exeCuteType"></param>
            <returns>返回方案解析程序</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnScheduleParserFactory.Create(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType,System.String)">
            <summary>
            预警计划解析程序
            </summary>
            <param name="context"></param>
            <param name="schedule"></param>
            <param name="exeCuteType"></param>
            <param name="parserType"></param>
            <returns>返回方案解析程序</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer.#ctor(Kingdee.BOS.Core.Warn.WarnSoultionData)">
            <summary>
            
            </summary>
            <param name="warnSoultionData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer.GetSolutionFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer.GetDataSourceFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer.SetWarnVariaFormFiled(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.WarnNameVariableField})">
            <summary>
            
            </summary>
            <param name="fileds"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldContainer.WarnSoultionData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader">
            <summary>
            预警变量字段reader
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.WarnVariableField},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="fieldList">预警变量列表</param>
            <param name="variableValues">内置预警变量key value值字典列表</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader._customVariableValues">
            <summary>
            内置预警变量key value值字典列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader._lcid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.SetLCID(System.Int32)">
            <summary>
            
            </summary>
            <param name="lcid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.GetWarnRowDataVariableValues(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.GetWarnRowDataValues(Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取数据源数据行变量keyvlaue值
            </summary>
            <param name="rowData">数据行</param>
            <returns>返回预警变量对应key value字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.GetWarnVariableFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldReader.FieldList">
            <summary>
            预警变量列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue">
            <summary>
            预警变量字段值对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue.#ctor(Kingdee.BOS.Core.Warn.WarnVariableField,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="warnVariableField">预警变量字段</param>
            <param name="value">value值</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue.WarnVariableField">
            <summary>
            预警变量字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue.ValueString">
            <summary>
            value 字符串值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue.Value">
            <summary>
            value值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WanMessageSender">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnMessageChannel2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult">
            <summary>
            预警分类汇总结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.GetGroupSummaryFieldValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.GetGroupSummaryFieldKeyValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.GetGroupSummaryFieldValueJsonString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.GroupFields">
            <summary>
            分组字段列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.GroupFieldValues">
            <summary>
            分组字段value值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.SummaryResult">
            <summary>
            汇总结果列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.GroupSummaryResult.WarMessageItems">
            <summary>
            汇总预警消息列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.SummaryField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.#ctor(Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="filed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.SetLCID(System.Int32)">
            <summary>
            
            </summary>
            <param name="lcid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.SummaryValue(System.Object)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.WarnVariableField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.LCID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryField.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.#ctor(Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="filed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.SummaryValue(System.Object)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.CountValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummaryCountField.CountValues">
            <summary>
            所有Count值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.SummaryResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryResult.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            
            </summary>
            <param name="warnMessageItemList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummaryResult.GetSummaryResultKeyValueJsonString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField.#ctor(Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="filed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField.SummaryValue(System.Object)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField.SummValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.SummarySumField.ValueString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary">
            <summary>
            预警消息分类汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary.#ctor(Kingdee.BOS.App.Core.Warn.Arithmetic.GroupingArithmetic,Kingdee.BOS.App.Core.Warn.Arithmetic.SummaryArithmetic)">
            <summary>
            构造函数
            </summary>
            <param name="groupingArithmetic"></param>
            <param name="summaryArithmetic"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary.ExcuteSummary(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            执行汇总处理
            </summary>
            <param name="warnMessageItems">预警消息列表</param>
            <returns>返回分类汇总结果</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary.GroupingArithmetic">
            <summary>
            分组计算
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageGroupSummary.SummaryArithmetic">
            <summary>
            汇总计算
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageSummaryResult">
            <summary>
            预警分类汇总结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Summary.WarnMessageSummaryResult.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Task.WarnHisDataClearScheduleService">
            <summary>
            业务预警历史消息清理执行计划任务服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHisDataClearScheduleService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            IScheduleService
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划任务信息</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask">
            <summary>
            历史数据清除任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.Start(System.Object[])">
            <summary>
            启动
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.IsVaildTime(Kingdee.BOS.Core.Warn.WarnClearRuleSetting)">
            <summary>
            是否启用清理
            </summary>
            <param name="warnClearRuleSetting">清理规则设置</param>
            <returns>启用返回true；否则返回false;</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.IsEnabled(Kingdee.BOS.Core.Warn.WarnClearRuleSetting)">
            <summary>
            是否启用清理
            </summary>
            <param name="warnClearRuleSetting">清理规则设置</param>
            <returns>启用返回true；否则返回false;</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.TryLockTask">
            <summary>
            尝试锁定任务
            </summary>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.TryUnLock">
            <summary>
            尝试解锁任务
            </summary>
            <returns>成功返回true;否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.GetWarnClearRuleSetting">
            <summary>
            获取参数配置
            </summary>
            <returns>参数配置对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.SaveWarnClearRuleSetting(Kingdee.BOS.Core.Warn.WarnClearRuleSetting)">
            <summary>
            保存参数配置
            </summary>
            <param name="warnClearRuleSetting">参数配置对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.GetWarnClearRuleTaskInfo">
            <summary>
            获取清理任务信息
            </summary>
            <returns>清理任务信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.SaveWarnClearRuleTaskInfo(Kingdee.BOS.Core.Warn.WarnClearRuleTaskInfo)">
            <summary>
            保存清理任务信息
            </summary>
            <param name="WarnClearRuleTaskInfo">清理任务信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.WriteDebug(System.String,System.Object[])">
            <summary>
            debug日志
            </summary>
            <param name="msgFormat">format消息</param>
            <param name="args">参数列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.CreateClearServiceItemPlugIn">
            <summary>
            创建清理插件
            </summary>
            <returns>清理插件</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Task.WarnHistoryDataClearTask.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncScheduleService">
            <summary>
            监控对象同步执行计划任务服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncScheduleService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            IScheduleService
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划任务信息</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask">
            <summary>
            监控对象同步任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask.Start(System.Object[])">
            <summary>
            启动
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask.CreateWarnObjFromMeta(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据元数据创建监控对象
            </summary>
            <param name="warnObject">监控对象编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask.GetPluginIdStr(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FormElement.PlugIn},System.String,System.String)">
            <summary>
            保存插件，并返回插件ID串
            </summary>
            <param name="pluginList">插件列表</param>
            <param name="warnObject">监控对象</param>
            <param name="type">0-方案解析插件 1-消息解析插件 2-方案编辑插件</param>
            <returns>插件ID串</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Task.WarnObjectSyncTask.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.TitleProvier.CustomerTitleProvider">
            <summary>
            供应商标题
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.TitleProvier.ILightAppTitleProvider">
            <summary>
            轻应消息分组标题provier
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.ILightAppTitleProvider.SetContext(Kingdee.BOS.Context)">
            <summary>
            设置上下文
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.ILightAppTitleProvider.GetTitleInfo(System.Object)">
            <summary>
            获取数据信息
            指定Key值不存在，返回null
            </summary>
            <param name="groupValue">主键value至</param>
            <returns>返回对应数据信息</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.TitleProvier.ILightAppTitleProvider.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.CustomerTitleProvider.SetContext(Kingdee.BOS.Context)">
            <summary>
            设置上下文
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.CustomerTitleProvider.GetTitleInfo(System.Object)">
            <summary>
            获取数据信息
            </summary>
            <param name="groupValue">主键value至</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.TitleProvier.CustomerTitleProvider.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.TitleProvier.LightAppTitleProviderFacoty">
            <summary>
            变量信息provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.LightAppTitleProviderFacoty.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="formId">表单Id</param>
            <returns>返回创建对象</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.TitleProvier.SupplierTitleProvider">
            <summary>
            供应商标题
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.SupplierTitleProvider.SetContext(Kingdee.BOS.Context)">
            <summary>
            设置上下文
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.TitleProvier.SupplierTitleProvider.GetTitleInfo(System.Object)">
            <summary>
            获取数据信息
            </summary>
            <param name="groupValue">主键value至</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.TitleProvier.SupplierTitleProvider.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.VariableFieldCollection">
            <summary>
            变量列表集合
            </summary>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.Warn.VariableFieldCollection.AddMegerFieldName(Kingdee.BOS.Core.Warn.WarnVariableField)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.App.Core.Warn.VariableFieldCollection.AddRangeMegerFieldName(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.WarnVariableField})”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableFieldCollection.AddRangeMegerFieldNameForDetailDisplay(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.WarnVariableField})">
            <summary>
            根据字段key值合并字段
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.VariableFieldInfo">
            <summary>
            变量信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableFieldInfo.#ctor(System.String)">
            <summary>
            formid.field sum(fromid.field) count(formid.fieldid)
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableFieldInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableFieldInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="field"></param>
            <param name="key"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableFieldInfo.SelectField">
            <summary>
            数据检索字段
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete">
            <summary>
            变量值 键值对集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete._dict">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.#ctor(System.Collections.Generic.List{Kingdee.BOS.LanguageInfo},System.Int32)">
            <summary>
            variable value dictionary
            </summary>
            <param name="languages"></param>
            <param name="lcid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.#ctor(System.Collections.Generic.List{Kingdee.BOS.LanguageInfo})">
            <summary>
            variable value dictionary
            </summary>
            <param name="languages"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetValue(System.String)">
            <summary>
            get value
            </summary>
            <param name="key">key</param>
            <returns>the value string</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetValue(System.String,System.Int32)">
            <summary>
            get value
            </summary>
            <param name="key">key</param>
            <param name="lcid">lcid</param>
            <returns>the value string</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetObjectValue(System.String)">
            <summary>
            获取object对象值
            </summary>
            <param name="key">key</param>
            <returns>value值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.Set(System.String,System.Object)">
            <summary>
            set key value
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.TryGetValue(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.TryGetValue(System.String,System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetAllLanuageValueStrings(System.String)">
            <summary>
            获取当前所有语言ID字符串value值
            </summary>
            <param name="key"></param>
            <returns>string arry</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetAllLanuageLocalValues(System.String)">
            <summary>
            获取当前所有语言ID字符串value值
            </summary>
            <param name="key">key</param>
            <returns>locale value</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetKeyStringValues(System.Int32)">
            <summary>
            获取当前所有语言ID字符串value值
            </summary>
            <param name="lcid"></param>
            <returns>string arry</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetKeyStringValues">
            <summary>
            获取当前所有语言ID字符串value值
            </summary>
            <returns>string arry</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.GetEnumerator">
            <summary>
            get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.ToValueString(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.LCID">
            <summary>
            语言ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.Languages">
            <summary>
            当前系统所有语言
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.VariableValueDictionaryObsolete.KeyValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.SetLCID(System.Int32)">
            <summary>
            设置语言
            </summary>
            <param name="lcid">语言列表默认2052</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.SetLevel(System.Int32)">
            <summary>
            设置读取层级leve
            </summary>
            <param name="level">层级leve</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.TryGetDisplayValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            try get display value
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.TryGetValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            try get value
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.GetValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            get value
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.GetDisplayValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            get value is for message display
            </summary>
            <param name="warnRowData">warn row data</param>
            <param name="wsField">warn variable field</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader.LCID">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader._lcid">
            <summary>
            当前语言lcid
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.Level">
            <summary>
            级别
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.SetLCID(System.Int32)">
            <summary>
            设置语言
            </summary>
            <param name="lcid">语言列表默认2052</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.SetLevel(System.Int32)">
            <summary>
            设置读取层级leve
            </summary>
            <param name="level">层级leve</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.TryGetValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.TryGetDisplayValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.TryGet(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.GetValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            get value
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.GetDisplayValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            get value is for message display
            </summary>
            <param name="warnRowData">warn row data</param>
            <param name="wsField">warn variable field</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.AbstractVariableValueReader.LCID">
            <summary>
            当前语言lcid
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader">
            <summary>
            基础资料变量读取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.TryGet(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.GetRefValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.GetRefNameValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.GetRefNumberValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.GetRefmsterID(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.Object@)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <param name="val"></param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.GetRefObjectValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.BaseFieldVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader">
            <summary>
            基础资料属性读取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.TryGet(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.GetBasePropertyFiledEntryRow(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.Metadata.FieldElement.BasePropertyField)">
            <summary>
            get entry row
            </summary>
            <param name="dynamicObject"></param>
            <param name="baseField">基础资料字段</param>
            <param name="basePropertyField">基础资料属性字段</param>
            <returns>获取成功返回行数据；否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.GetPropertyFieldValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.Metadata.FieldElement.BasePropertyField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <param name="basePropertyField">basePropertyField</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.GetRefFielIdValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.String)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.BasePropertyFieldVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.BillStatusVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader">
            <summary>
            下拉列表变量值获取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader._nextReader">
            <summary>
            变量读取器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            获取变量值
            </summary>
            <param name="warnRowData">预警变量数据</param>
            <param name="wsField">预警变量字段</param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.TryGet(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            获取变量值
            </summary>
            <param name="warnRowData">预警变量数据</param>
            <param name="wsField">预警变量字段</param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            是否下拉列表类型字段
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.GetComboName(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            获取下拉列表枚举名称
            </summary>
            <param name="warnRowData">预警变量数据</param>
            <param name="wsField">预警变量字段</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.ComboFieldVariableValueReader.NextReader">
            <summary>
            变量读取器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader">
            <summary>
            金额变量读取值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.GetFormatDisplayValue(Kingdee.BOS.Core.Metadata.FieldElement.DecimalField,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.GetReallyPrecisionString(System.String)">
            <summary>
            
            </summary>
            <param name="strvalue"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.DecimalVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.DefaultVariableValueReader">
            <summary>
            默认变量读取值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DefaultVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.DefaultVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader">
            <summary>
            基础资料变量读取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader.GetRefValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取预警变量在单据引用属性值
            通常是基础资料，默认返回基础资料显示值,名称
            </summary>
            <param name="data">数据</param>
            <param name="baseField">预警变量</param>
            <returns>返回指定单据引用属性值</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.OrgFieldVariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper">
            <summary>
            variable reader helper
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValueString(Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader,Kingdee.BOS.Core.Warn.WarnVariableField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            获取value 字符串值，字段id不存在返回空
            </summary>
            <param name="variableValueReader"></param>
            <param name="wvField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValue(Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader,Kingdee.BOS.Core.Warn.WarnVariableField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="variableValueReader"></param>
            <param name="wvField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValue(Kingdee.BOS.Core.Warn.WarnVariableField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="wvField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValueString(Kingdee.BOS.Core.Warn.WarnVariableField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="wvField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValue(Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="selectField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.TryGetValue(Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Warn.Message.WarnRowData,System.Object@)">
            <summary>
            
            </summary>
            <param name="selectField"></param>
            <param name="rowData"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableReaderHelper.GetValueString(Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Warn.Message.WarnRowData)">
            <summary>
            
            </summary>
            <param name="selectField"></param>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader._nextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader.TryGetDisplay(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader.TryGet(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField,System.Object@)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader.IsValid(Kingdee.BOS.Core.Warn.Message.WarnRowData,Kingdee.BOS.Core.Warn.WarnVariableField)">
            <summary>
            
            </summary>
            <param name="warnRowData"></param>
            <param name="wsField"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReader.NextReader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReaderFactrory">
            <summary>
            变量值reader工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.Variable.VariableValueReaderFactrory.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnCardSetHelper">
            <summary>
            监控卡片设置辅助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnCardSetHelper.GetWarnCardFieldKeyValue(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Context,System.String)">
            <summary>
            获取监控卡片配置的字段KeyValue
            </summary>
            <param name="rowVariables">行变量</param>
            <param name="ctx">上下文</param>
            <param name="warnId">方案ID</param>
            <returns>KeyValue集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnCardSetHelper.AddDisplayFields(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Object)">
            <summary>
            加显示字段
            </summary>
            <param name="displayfields">显示字段</param>
            <param name="key">key</param>
            <param name="id">字段分录行id</param>
            <param name="value">值</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnConst">
            <summary>
            业务预警相关常量
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnConst.WarnContentMaxLen">
            <summary>
            业务监控明细内容最大长度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnConst.WarnTitleMaxLen">
            <summary>
            业务监控明细标题最大长度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnConst.WarnEndStr">
            <summary>
            业务监控消息内容超长时结束字符串
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnConst.ToReplaceCount">
            <summary>
            替换的字符数量
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter.#ctor(Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            
            </summary>
            <param name="sqlBuilderParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter.#ctor(Kingdee.BOS.Core.Report.RptParams)">
            <summary>
            
            </summary>
            <param name="rptParams"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter.SqlBuilderParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter.ReportParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnDataFilterParameter.IsReport">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnDetailDisplayHelper">
            <summary>
            明细显示辅助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDetailDisplayHelper.GetDisplayFieldKeyValue(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Context,System.String)">
            <summary>
            获取配置显示的字段keyvalue值
            </summary>
            <param name="rowData">rowData</param>
            <returns>keyvalue值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnDetailDisplayHelper.AddDisplayFields(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Object)">
            <summary>
            加显示字段
            </summary>
            <param name="displayfields">显示字段</param>
            <param name="key">key</param>
            <param name="id">字段分录行id</param>
            <param name="value">值</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor">
            <summary>
            预警消息处理服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnSoultionData)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnSoultionData">预警方案数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.Process(System.Collections.Generic.List{System.Int64})">
            <summary>
            处理指定
            </summary>
            <param name="ids">消息ID列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.Process(System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage})">
            <summary>
            
            </summary>
            <param name="messageList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.OnProcessWarnMessage(Kingdee.BOS.Core.Warn.PlugIn.WarnLightAppMessagePlugInProxy,Kingdee.BOS.Core.Warn.PlugIn.Args.ProcessLightAppMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="warnMessagePlugInProxy"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.AfeterProcessWarnMessage(Kingdee.BOS.Core.Warn.PlugIn.WarnLightAppMessagePlugInProxy,Kingdee.BOS.Core.Warn.PlugIn.Args.AfterProcessLightAppMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="warnMessagePlugInProxy"></param>
            <param name="afterProcessArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.UpdateProcessWarnMessage(System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage})">
            <summary>
            
            </summary>
            <param name="messageList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.BeforeProcessWarnMessage(Kingdee.BOS.Core.Warn.PlugIn.WarnLightAppMessagePlugInProxy,Kingdee.BOS.Core.Warn.PlugIn.Args.BeforeProcessLightAppMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="warnMessagePlugInProxy"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.CheckPermission(System.String)">
            <summary>
            判断当前用户的权限
            </summary>
            <param name="strPermissionItemId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.CreateWarnMessageDataKeyValueItems(System.String)">
            <summary>
            
            </summary>
            <param name="jsoin"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.GetMessageListFormDataCollection(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            获取消息列表
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnMessageProcessor.WarnSoultionData">
            <summary>
            预警方案数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnMessageReceiverUtil">
            <summary>
            监控消息接收人辅助工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageReceiverUtil.GetReceiverPhoneNums(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember},Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection)">
            <summary>
            获取手机号变量值
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessageMembers">接收人Members</param>
            <param name="warnObjectDataCollection">监控数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageReceiverUtil.GetVariablePhoneNums(Kingdee.BOS.WorkflowMember.IMember,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,System.Collections.Generic.List{System.String})">
            <summary>
            获取手机号变量值
            </summary>
            <param name="member">接收人成员</param>
            <param name="warnObjectDataCollection">监控数据包</param>
            <param name="phoneNums">手机号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageReceiverUtil.GetReceiverEmails(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.IMember},Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection)">
            <summary>
            获取邮箱变量值
            </summary>
            <param name="ctx">ctx</param>
            <param name="warnMessageMembers">接收人Members</param>
            <param name="warnObjectDataCollection">监控数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnMessageReceiverUtil.GetVariableEmails(Kingdee.BOS.WorkflowMember.IMember,Kingdee.BOS.Core.Warn.Message.WarnObjectDataCollection,System.Collections.Generic.List{System.String})">
            <summary>
            获取邮箱变量值
            </summary>
            <param name="member">接收人成员</param>
            <param name="warnObjectDataCollection">监控数据包</param>
            <param name="emails">邮箱</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnObject.WarnObjectService">
            <summary>
            监控对象相关服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnObject.WarnObjectService.GetWarnObjRegPluginList(Kingdee.BOS.Context,System.String)">
            <summary>
            获取监控对象注册插件列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="ids">插件id</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnParserHelper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetWarnVariableDispalyJsonString(Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader,Kingdee.BOS.Core.Warn.Message.WarnRowData,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField})">
            <summary>
            获取预警变量key valuejson字符串
            </summary>
            <param name="rowData">单据行数据</param>
            <param name="warnNameVariableFields">预警变量字段列表值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetWarnVariableDispalyJsonString(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Warn.Variable.IVariableValueReader,Kingdee.BOS.Core.Warn.Message.WarnRowData,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.LlightApp.LightAppDisplayField})">
            <summary>
            获取预警变量key valuejson字符串
            </summary>
            <param name="rowData">单据行数据</param>
            <param name="warnNameVariableFields">预警变量字段列表值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.AddKeyValueToKeyValueString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加知道key value值到指定json字符串
            </summary>
            <param name="jsonString">json字符串</param>
            <param name="keyValues">key value字典列表</param>
            <returns>返回添加成功json字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.CloneDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            复制字典列表
            </summary>
            <param name="dict">待复制字典列表</param>
            <returns>返回复制字典列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.AddRangeDictionary(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将字典列表dict2列表值添加到dict列表中
            </summary>
            <param name="dict">原字典列表</param>
            <param name="dict2">待添加字典列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.AddDictionaryToJson``1(Kingdee.BOS.JSON.JSONObject,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            将字典列表dict2列表值添加到josn对象中
            </summary>
            <param name="json">原字典列表</param>
            <param name="dict2">待添加字典列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.AddWarnMobileMessageStyle(Kingdee.BOS.Core.Warn.Message.WarnMobileMessage,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mobileMessage"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isTitle"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.SetPropertyField(System.Object,System.String,System.Object)">
            <summary>
            设置指定属性值
            </summary>
            <param name="obj">对象obj</param>
            <param name="field">字段filed值</param>
            <param name="value">指定value</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetMatchValue(System.String,System.String)">
            <summary>
            获取字符串种匹配规则的所有子字符串
            </summary>
            <param name="str">待匹配字符串</param>
            <param name="pattern">正则表达式</param>
            <returns>返回所有匹配的字符串列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.TryGetRowDataValue(Kingdee.BOS.Core.Warn.Message.WarnRowData,System.String)">
            <summary>
            获取行数据的指定字段名称的值
            </summary>
            <param name="rowData">行数据</param>
            <param name="field">字段名称</param>
            <returns>存在返回当前字段名值，否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.IsExistsField(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            判断单据行数据是否存在指定id字段值
            </summary>
            <param name="dynamicObject">单据数据</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetFormMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="formid">表单ID</param>
            <returns>返回窗体元数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.Debug(System.String,System.Object[])">
            <summary>
            debug日志
            </summary>
            <param name="msgFormat">format消息</param>
            <param name="args">参数列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.WarnVariableFieldReplace(System.String,System.Collections.Generic.IEnumerable{Kingdee.BOS.App.Core.Warn.Parser.WarnVariableFieldValue})">
            <summary>
            预警变量格式化替换字符串值
            </summary>
            <param name="str">待格式化字符串</param>
            <param name="fieldValues">预警变量列表值</param>
            <returns>返回format格式后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.SummaryFieldReplace(System.String,System.Collections.Generic.IEnumerable{Kingdee.BOS.App.Core.Warn.Summary.SummaryField},System.String)">
            <summary>
            预警变量格式化替换字符串值
            </summary>
            <param name="str">待格式化字符串</param>
            <param name="fieldValues">汇总变量列表值</param>
            <param name="format"></param>
            <returns>返回format格式后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.MegertDictionary(Kingdee.BOS.Core.Warn.VariableValueDictionary,Kingdee.BOS.Core.Warn.VariableValueDictionary)">
            <summary>
            将字典列表dict2列表值添加到dict列表中
            </summary>
            <param name="dict">原字典列表</param>
            <param name="dict2">待添加字典列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetWarnSolutionDynamicData(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetWarnSolutionData(Kingdee.BOS.App.Core.Warn.ParsingContext)">
            <summary>
            获取方案信息
            </summary>
            <returns>方案信息对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetWarnSolutionData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取监控方案数据
            </summary>
            <returns>方案信息对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.Substring(System.String,System.Int32)">
            <summary>
            截取字符串指定长度
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetValueString(Kingdee.BOS.LocaleValue,System.Int32,System.Int32)">
            <summary>
            获取 value值
            </summary>
            <param name="localeValue"></param>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.CloneValue(Kingdee.BOS.LocaleValue)">
            <summary>
            clone value值
            </summary>
            <param name="localeValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.MargeListIgnoreCase(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            忽略大小写去重，合并两个字符串集合
            </summary>
            <param name="strList1">列表值1</param>
            <param name="strList2">列表值2</param>
            <returns>返回合并后列表值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetEntryPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取当前单据
            </summary>
            <param name="businessInfo">单据业务数据</param>
            <returns>返回当前单据主key值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.ConvertToWarnVariableField(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            转换为预警变量字段列表
            </summary>
            <param name="messageVariablies">预警消息变量列表</param>
            <returns>预警变量字段列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.LoadAllLanguageValue(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            加载当前系统所有多语言词条
            </summary>
            <param name="ctx">上下文</param>
            <param name="description">描述</param>
            <param name="ressoucreId">资源Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.FormatAllLanguageValue(Kingdee.BOS.Context,System.String,System.String,System.Object[])">
            <summary>
            加载当前系统所有多语言词条
            </summary>
            <param name="ctx">上下文</param>
            <param name="description">描述</param>
            <param name="ressoucreId">资源Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.Substring(Kingdee.BOS.LocaleValue,System.Int32)">
            <summary>
            截取字符串指定长度
            </summary>
            <param name="strLocaleValue">多语言文本</param>
            <param name="length">长度</param>
            <returns>多语言文本</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetLCID(Kingdee.BOS.Context)">
            <summary>
            获取当前语言Id
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回语言ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetFormMetadataBusinessInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定业务对象Id业务元数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="strObjectTypeId">业务对象Id</param>
            <returns>业务元数据信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetFlexData(Kingdee.BOS.Context,System.Object,System.String)">
            <summary>
            批量获取所有的辅助属性信息对象列表
            </summary>
            <param name="auxptyId">辅助属性ID</param>
            <param name="formid">关联字段维度类别</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetFlexValues(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取维度信息
            </summary>
            <param name="ctx">ctx</param>
            <param name="type">type</param>
            <returns>辅助属性字段KEYVALUE</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParserHelper.GetFlexDataName(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            拼接辅助属性信息
            </summary>
            <param name="auxPropValues">auxPropValues</param>
            <param name="auxObj">auxObj</param>
            <returns>拼接字符串</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnParseRunResult">
            <summary>
            执行预警解析结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParseRunResult.#ctor(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus)">
            <summary>
            构造函数
            </summary>
            <param name="executeStatus">执行状态</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParseRunResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParseRunResult.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParseRunResult.Message_L">
            <summary>
            多语言消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnParseRunResult.WarnName">
            <summary>
            预警方案名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnReaderUtils">
            <summary>
            WarnReaderUtils
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnReaderUtils.GetValue``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="fieldName">字段的名称</param>
            <param name="defaultValue">默认值</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.XunTongHanlder.IXunTongMessageHanlder">
            <summary>
            xutong消息处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.IXunTongMessageHanlder.SendXuntongMessage(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage)">
            <summary>
            发送讯通消息
            </summary>
            <param name="ctx">上下文件</param>
            <param name="xunTongMessage">讯通消息对象</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.IXunTongMessageHanlder.MobileCustomLightAppUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage">
            <summary>
            xuntong message
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.Title">
            <summary>
            消息标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.MsgLinkUrl">
            <summary>
            消息链接
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.LightAppMessageId">
            <summary>
            轻应用消息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage.LightAppUrl">
            <summary>
            轻应用App Url地址
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageHanlderFactory">
            <summary>
            factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageHanlderFactory.Create(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageHanlderFactory.CreateLink(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageHanlderFactory.CreateOld(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder">
            <summary>
            xutong消息处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.SendXuntongMessage(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage)">
            <summary>
            发送讯通消息
            </summary>
            <param name="ctx">上下文件</param>
            <param name="xunTongMessage">讯通消息对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.CreateLightAppUrl(Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage)">
            <summary>
            创建轻应用链接地址
            </summary>
            <param name="xunTongMessage">讯通消息</param>
            <returns>轻应用链接地址</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.MobilePubAcctCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.MobilePubAcctPrivateKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.MobileCustomLightAppUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.IsLinkUrl">
            <summary>
            是否添加相应超连接url地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessageLinkHanlder.CloudServiceHost">
            <summary>
            cloud Service host
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder">
            <summary>
            XUTONG消息处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.SendXuntongMessage(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Warn.XunTongHanlder.XunTongMessage)">
            <summary>
            发送讯通消息
            </summary>
            <param name="ctx">上下文件</param>
            <param name="xunTongMessage">讯通消息对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.SendXuntongMessage(Kingdee.BOS.Context,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="msgTitle"></param>
            <param name="content"></param>
            <param name="msgLinkUrl"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.CreateMessageLinkUrl(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.Create(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage)">
            <summary>
            创建迅通消息发送处理
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnMessage">预警消息</param>
            <returns>返回</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.MobilePubAcctCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.MobilePubAcctPrivateKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.MobileCustomLightAppUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.XunTongMessageHanlder.IsLinkUrl">
            <summary>
            是否添加相应超连接url地址
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WebAPI.HashCompareService.GetHashCompareTable(Kingdee.BOS.Context,System.String)">
            <summary>
            获取Hash值存储数据表名
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WebAPI.HashCompareService.CreateBOSHashTable(Kingdee.BOS.Context,System.String)">
            <summary>
            创建Hash值存储数据表
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WebAPI.HashCompareService.InsertHashTable(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            插入Hash值数据,通过数据库字段唯一性校验Hash一致性
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <param name="hashValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.EnterpriseWeChatService.GetWeChatConfig(Kingdee.BOS.Context)">
            <summary>
            获取用户配置信息
            </summary>
            <param name="ctx"></param>
            <param name="key">配置项标识</param>
            <param name="userId">指定用户ID</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.KingdeeCloudService">
            <summary>
            金蝶云服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.KingdeeCloudService.GetRegUserActivateType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取注册用户的激活方式
            </summary>
            <param name="ctx">上下文</param>
            <param name="productInstanceId">许可的实例ID</param>
            <returns>激活方式(0：手机激活 1： 邮箱激活  2：手机或者邮箱激活)</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.SendNews(Kingdee.BOS.Context,Kingdee.BOS.Mobile.DataEnties.MobileMessage)">
            <summary>
            发送微信消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.SendNews(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            发送微信消息==该方法废弃，请使用新接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.SendMessageNews(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            发送微信消息==该方法废弃，请使用新接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.SendMessage(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            发送微信消息==该方法废弃，请使用新接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.GetQYWxUserFromUsers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取微信用户映射中的openid，无应用隔离
            </summary>
            <param name="ctx"></param>
            <param name="users"></param>
            <param name="AppID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.HasDefaultAgent(Kingdee.BOS.Context,System.String@,System.Int32@)">
            <summary>
            是否拥有启用了工作流的企业微信应用
            </summary>
            <param name="ctx"></param>
            <param name="appId"></param>
            <param name="agentId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.HasDefaultAgent(Kingdee.BOS.Context)">
            <summary>
            是否拥有启用了工作流的企业微信应用
            </summary>
            <param name="ctx"></param>
            <param name="appId"></param>
            <param name="agentId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.QYWeiXinService.WriteLogs(Kingdee.BOS.Context,Kingdee.BOS.Mobile.DataEnties.MobileMessage,Kingdee.BOS.Mobile.DataEnties.MobileResponse)">
            <summary>
            记录微信消息日志
            </summary>
            <param name="ctx"></param>
            <param name="message"></param>
            <param name="response"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService">
            <summary>
            发送云之家消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._xunTongSettingObject">
            <summary>
            讯通绑定配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._xunTongConfig">
            <summary>
            云之家配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._yunZhiJiaUrl">
            <summary>
            云之家地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._isPrivate">
            <summary>
            是否私有云
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._isNotRebuildTransferUrl">
            <summary>
            是否云之家消息链接默认走转发（此值默认为false，即默认走转发）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService._cloudServiceHost">
            <summary>
            系统公网地址
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.#ctor(Kingdee.BOS.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService"/> class
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.SendPlainTextMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTPlainTextMessage)">
            <summary>
            发送纯正文消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">正文消息</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.SendSingleMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XTSingleTextMessage)">
            <summary>
            发送单文本消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">文本消息</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.ChangeMsgStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            修改待办消息状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessChangeTodoStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            统一流程中心更新待办
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessDeleteTodoStatus(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            统一流程中心删除待办
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessDealToDoByActivityId(Kingdee.BOS.Context,Kingdee.BOS.Msg.TodoStatusMessage)">
            <summary>
            统一流程中心标记待办为已办
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessChangeProssToCompleted(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心标记流程为已完成
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessChangeProssToDeleted(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心标记流程删除
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.UnifiedProcessChangeProcessToReset(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            统一流程中心标记流程为待发起
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.SendLightAppMessag(Kingdee.BOS.Context,Kingdee.BOS.Msg.LightAppMessage)">
            <summary>
            发送云之家轻应用消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">消息内容</param>
            <returns>消息结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.CheckMsgStatus(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            检查云之家消息当前状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">云之家apptoken</param>
            <param name="sourcetype">云之家appid</param>
            <param name="sourceitemid">消息msgid</param>
            <param name="openid">云之家用户openid</param>
            <returns>消息状态</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.InitXunTongConfig">
            <summary>
            获取讯通配置参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.SendPlainTextMessage(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送纯正文消息
            </summary>
            <param name="message">要发送消息</param>
            <param name="url">在讯通中点击消息打开的链接地址</param>
            <param name="users">接受消息的用户Id列表</param>
            <param name="pubAcctCode">发送消息的公共号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.CommonMessageService.SendSingleMessage(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送单文本消息
            </summary>
            <param name="title">消息的标题</param>
            <param name="message">消息正文</param>
            <param name="datetime">发送时间</param>
            <param name="url">在讯通中点击消息打开的链接地址，可以为空</param>
            <param name="zipHtml">在讯通中点击消息打开的html页面内容（格式：zip压缩后Base64编码），可以为空</param>
            <param name="users">接受消息的用户Id列表</param>
            <param name="pubAcctCode">发送消息的公共号</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XTUtils.IsBindXunTong(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            判断是否配置好讯通
            </summary>
            <param name="xunTongConfig">讯通系统参数</param>
            <returns>是否配置好讯通</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetDomainModelCacheKey(System.Int32)">
            <summary>
            构建一个缓存标识
            </summary>
            <param name="modelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetPropertyCacheKey">
            <summary>
            构建一个缓存标识
            </summary>
            <param name="modelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.ClearDomainModelCacheData">
            <summary>
            清除领域模型缓存信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetDomainModel(System.Int32)">
            <summary>
            构建指定领域模型实体对象
            </summary>
            <param name="modelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetDomainModelList(System.Collections.Generic.List{System.Int32})">
            <summary>
            构建指定的全部领域模型实体对象
            </summary>
            <param name="listModelTypeID">需要过滤出的领域模型内码列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetDomainModelList(System.String)">
            <summary>
            构建指定的全部领域模型实体对象
            </summary>
            <returns></returns>
            <param name="filter">
            过滤条件，包含领域模型内码， 类似于"100,200"；
            如果传入""，则过滤全部领域模型
            </param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetStaticProperties">
            <summary>
            设置静态变量值,避免重复读取属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetDomainModelSub(Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            读取领域模型子分组
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetElementGroup(Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            读取领域模型对应的工具栏分组信息
            </summary>
            <param name="modelTypeID"></param>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetElementType(Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            读取领域模型支持的全部元素
            </summary>
            <param name="modelTypeID"></param>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetElementProertyID(Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            读取全部元素与属性的对应关系
            </summary>
            <param name="modelTypeID"></param>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.GetMetaCheckRules(Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            从数据库读取领域模型的元数据校验规则
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainModelReader.ParseDomainModelIds(System.String)">
            <summary>
            把适用的领域(用逗号隔开领域内码)，转换为整数数组
            </summary>
            <param name="domainModelIds"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaDataLoadService.supportParallelExtend">
            <summary>
            是否支持平行扩展
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.#ctor(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            此构造仅供IDE里把扩展对象合并回父对象使用
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <param name="extId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.#ctor(Kingdee.BOS.Context,System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <param name="bRunTime">是否运行时获取元数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.InitialContext">
            <summary>
            初始化上下文中需要的一些变量
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.CheckMetaData">
            <summary>
            合法性检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.GetObjectTypeTree(System.String)">
            <summary>
            创建一棵树
            </summary>
            <param name="layoutViewId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.SetNodesDefaultSeq(System.Collections.Generic.List{Kingdee.BOS.App.Core.MetaDataNode})">
            <summary>
            设置元数据扩展树的节点的显示顺序（未设置时按元数据插入先后排序，已设置则按设置好的顺序号排序）
            </summary>
            <param name="nodes">当前业务对象涉及到的所有节点</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.GetLayoutTree(System.String)">
            <summary>
            构造布局树
            </summary>
            <param name="layoutViewId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.Load(System.String)">
            <summary>
            获取元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.PreLoad(System.String)">
            <summary>
            根据改动的XML预加载业务领域元数据
            </summary>
            <p>应用场景：</p>
            1. 设计器XML编辑界面保存预加载检查；
            <param name="xml">改动的XML</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.GetObjectTypeTreeForXmlEdit(System.String)">
            <summary>
            为设计器XML编辑场景创建业务对象元数据树
            </summary>
            <param name="xml">改动的XML</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.Merge(System.String[])">
            <summary>
            获取元数据
            </summary>
            <param name="extendFormIds">待合并的扩展表单标识集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.LoadEmbedRefObject(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            加载嵌套的基础资料
            </summary>
            <param name="meta"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.SetExtPropertyValue(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            给元数据的一些属性赋值
            </summary>
            <param name="metaData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.GetMetaData(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,Kingdee.BOS.App.Core.MetaDataNode,System.String[])">
            <summary>
            循环差量组装
            </summary>
            <param name="baseMetadata"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.IsInheritElement(Kingdee.BOS.App.Core.MetaDataNode)">
            <summary>
            元素是否是被继承的
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.Add(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,Kingdee.BOS.App.Core.MetaDataNode)">
            <summary>
            组装
            </summary>
            <param name="baseMetadata"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataLoadService.GetMetaDataVer">
            <summary>
            获取版本号,用于对比缓存是否过期   
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ObjectTypeTree">
            <summary>
            对象类型树结构
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree._bRuntime">
            <summary>
            是否运行时构造
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree.supportParallelExtend">
            <summary>
            是否支持平行扩展
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree._isInheritNode">
            <summary>
            是否是继承对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree._bLoadSubObject">
            <summary>
            是否加载扩展对象(子对象)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree._bMeetFirstNonExtendNode">
            <summary>
            是否遇到了第一个非扩展子节点
            如果是，接下来则会把第二个非扩展节点的子节点加入树结构中
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ObjectTypeTree.LayoutObjectTree">
            <summary>
            布局视图对象树
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.#ctor(System.String,System.Collections.Generic.List{Kingdee.BOS.App.Core.MetaDataNode},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="allNodes"></param>
            <param name="bRuntime"></param>
            <param name="isFindPreNode"></param>
            <param name="bLoadSubObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.#ctor(System.String,System.Collections.Generic.List{Kingdee.BOS.App.Core.MetaDataNode},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="allNodes"></param>
            <param name="bRuntime"></param>
            <param name="isFindPreNode"></param>
            <param name="bLoadSubObject"></param>
            <param name="bSupportParallelExtend"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.GetNodeIds">
            <summary>
            获得所有对象类型的Id集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.GetNonExtendNodeIds">
            <summary>
            获得所有对象类型的Id集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.GetNode(System.String)">
            <summary>
            根据Id，获得节点
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.FindNextNodes(Kingdee.BOS.App.Core.MetaDataNode,System.Collections.Generic.List{Kingdee.BOS.App.Core.MetaDataNode})">
            <summary>
            当前节点的下一个节点
            （这里只需开发类型为扩展包的节点）
            </summary>
            <param name="currentnode"></param>
            <param name="listNodes"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ObjectTypeTree.FindPreNodes(Kingdee.BOS.App.Core.MetaDataNode,System.Collections.Generic.List{Kingdee.BOS.App.Core.MetaDataNode})">
            <summary>
            当前节点的前一个节点
            </summary>
            <param name="currentnode"></param>
            <param name="listNodes"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ObjectTypeTree.RootNode">
            <summary>
            层次关系的根节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ObjectTypeTree.FirstNonExtendNodeID">
            <summary>
            从叶到根, 第一个遇到的非扩展对象ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ObjectTypeTree.Nodes">
            <summary>
            所有节点
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaDataNode">
            <summary>
            元素之间的树状关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataNode.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.KernelXml">
            <summary>
            xml
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.KernelXmlLang">
            <summary>
            多语言xml
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.PrevNode">
            <summary>
            父亲只有一个
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.NextNode">
            <summary>
            从它继承的节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.SubNodes">
            <summary>
            本节点子类节点集合（扩展的节点）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.Id">
            <summary>
            本节点的id号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.BaseObjectId">
            <summary>
            基类ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.DevType">
            <summary>
            开发类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaDataNode.Seq">
            <summary>
            显示顺序，同时也是平级元数据在进行差量化融合时的合并顺序(主要用于平行扩展场景)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetFormMetaDataVerion(Kingdee.BOS.Context,System.String)">
            <summary>
            获得元数据版本
            </summary>
            <param name="ctx"></param>
            <param name="formID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetFormTypeVersionFromMCAppCache(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="areaCacheKey"></param>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateFormTypeVersion2MCAppCache(Kingdee.BOS.Cache.MetaVersionCacheParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateFormTypeVersion(Kingdee.BOS.Context,System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetEnumObjectList(Kingdee.BOS.Context)">
            <summary>
            获取枚举类型
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetRecycleEnumObjectList(Kingdee.BOS.Context)">
            <summary>
            获取枚举类型
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.AddEnumObjectToRecycle(Kingdee.BOS.Context,System.String)">
            <summary>
            添加枚举类型到回收站,同时删除枚举类型
            </summary>
            <param name="ctx"></param>
            <param name="enumTypeId">枚举类型FID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.RecoverEnumObject(Kingdee.BOS.Context,System.String)">
            <summary>
            恢复回收站中的枚举类型
            </summary>
            <param name="enumTypeId">枚举类型FID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.CheckEnumObjectNameExists(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            检测枚举类型名称是否有重复
            </summary>
            <param name="ctx"></param>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.IsPresetEnumType(Kingdee.BOS.Context,System.String)">
            <summary>
            是否系统预置的枚举类型
            </summary>
            <param name="ctx"></param>
            <param name="enumTypeid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.CanEdit(Kingdee.BOS.Context,System.String,Kingdee.BOS.ISV)">
            <summary>
            检测当前开发商标识是否能修改指定元数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">元数据唯一标识</param>
            <param name="currentIsv">当前登录的开发商信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.IsExistSubClass(Kingdee.BOS.Context,System.String)">
            <summary>
            当前对象是否存在子类
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.IsExistRef(Kingdee.BOS.Context,System.String)">
            <summary>
            当前业务对象是否存在被引用
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetRefMetaObject(Kingdee.BOS.Context,System.String)">
            <summary>
            获取引用指定对象的所有对象
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.ListBaseDataDelException(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料引用检查例外配置列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.ListBaseDataReference(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料引用关系列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.IsExistMetaObjectType(Kingdee.BOS.Context,System.String)">
            <summary>
            当前元数据对象是否存在
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            保存更新元数据。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="metadata">待保存元数据对象。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存更新元数据。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="metadata">待保存元数据对象。</param>
            <param name="option">操作参数。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.SaveForIDE(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            IDE保存更新元数据。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="metadata">待保存元数据对象。</param>
            <returns>返回操作结果。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.SaveForIDE(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            IDE保存更新元数据。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="metadata">待保存元数据对象。</param>
            <param name="option">操作参数。</param>
            <returns>返回操作结果。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.CopyAndSaveIntegratedBill(Kingdee.BOS.Core.Objects.CreateIntegratedParam)">
             <summary>
            复制源单为外部接口单据模型
             </summary>
             <param name="ctx"></param>
             <param name="sourceFormId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateFormMetadataTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            创建/更新 业务单据使用的物理表格
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="metadata">业务单据模板</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.Load(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            默认为运行时加载
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.PreLoad(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            元数据预加载
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">业务对象Id</param>
            <param name="xml">改动XML</param>
            <p>应用场景：</p>
            1. 设计器XML编辑界面保存预加载检查；
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.Merge(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            合并对象元数据
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <param name="extendFormIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.LoadByModelTypeId(Kingdee.BOS.Context,System.String,System.Int32,System.Boolean)">
            <summary>
            根据领域模型Id加载
            默认为运行时加载
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetConvertFlowID(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据源单和目标单ID获取流程ID
            </summary>
            <param name="ctx"></param>
            <param name="sourceFormID"></param>
            <param name="targetFormID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetConvertRules(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据源单和目标单ID获取启用的转换规则
            </summary>
            <param name="ctx"></param>
            <param name="sourceFormID"></param>
            <param name="targetFormID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetConvertBills(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.FormOperationEnum,System.String)">
            <summary>
            根据一个单据ID获取单据转换流程中的源单或目标单
            </summary>
            <param name="ctx"></param>
            <param name="op">操作类型，ConvertPush:下推/ ConvertDraw:上拉</param>
            <param name="formID">源/目标单据ID，如果类型为下推，则formID为源单据，否则为目标单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetWebServerImageKeyList">
            <summary>
             获得服务器端，图标键的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetFilterSchemaObjectTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获得表单写过滤方案的对象类型Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetReallyFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            解析FormId
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetLogObjectTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获得表单写日志的对象类型Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateObjectTypeCache(Kingdee.BOS.Context,System.String)">
            <summary>
            更新业务对象的缓存；
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateAllObjectTypeCache(Kingdee.BOS.Context)">
            <summary>
            更新所有业务对象缓存
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetExtendObjectTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定父对象下所有扩展对象的标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.ClearDomainModelCacheData(Kingdee.BOS.Context)">
            <summary>
            清除领域模型缓存数据
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetFormInfoByFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据窗体标识获得窗体简短信息
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetFieldFuncControlInfos(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取字段功能控制信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">表单ID</param>
            <param name="controlType">控制类型<see cref="T:Kingdee.BOS.Core.FieldFuncControlType"/></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.BuildFilterSQL(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.FilterObject,System.Nullable{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            构建过滤对象的SQL
            </summary>
            <param name="filterObj">过滤条件对象</param>
            <param name="now">当前时间</param>
            <param name="returnSQL">是否返回SQL</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetObjectTypes(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            读取指定子系统下的所有业务对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="subsystemIDs">子系统</param>
            <param name="modelTypes">领域模型</param>
            <param name="isTemplate">是否是模板</param>
            <returns>返回指定子系统下的所有业务对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetTempInheritObjectTypes(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文对象，返回模板继承对象集合。
            </summary>
            <param name="ctx">登录上下文对象。</param>
            <returns>返回模板继承对象集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetDisableInheritObjectTypes(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文对象，返回禁止继承对象集合。
            </summary>
            <param name="ctx">登录上下文对象。</param>
            <returns>返回禁止继承对象集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetDisableExtendObjectTypes(Kingdee.BOS.Context)">
            <summary>
            传入登录上下文对象，返回禁止扩展对象集合。
            </summary>
            <param name="ctx">登录上下文对象。</param>
            <returns>返回禁止扩展对象集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.QueryObjectType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取查询的对象
            </summary>
            <param name="ctx"></param>
            <param name="queryVal">查询值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetObjectTypeWithDataRule(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            读取指定子系统下的业务对象（支持过滤）
            </summary>
            <param name="ctx">上下文</param>
            <param name="subsystemIDs">子系统</param>
            <param name="modelTypes">领域模型</param>
            <param name="isTemplate">是否是模板</param>
            <param name="dataRuleFormIdList">需要验证数据范围的表单</param>
            <returns>返回指定子系统下的所有业务对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetObjectTypeNodes(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定业务对象下面的全部节点
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetObjectTypeSqlServer(Kingdee.BOS.Context,System.String)">
            <summary>
            获取SQL server版本的递归获取脚本
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.SetNodesDefaultSeq(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            设置元数据扩展树的节点的显示顺序（未设置时按元数据插入先后排序，已设置则按设置好的顺序号排序）
            </summary>
            <param name="nodes">当前子系统下的所有节点</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateObjectTypeExtName(Kingdee.BOS.Context,System.String)">
            <summary>
            更新基对象扩展名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">业务对象内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateMainVersion(Kingdee.BOS.Context,System.String)">
            <summary>
            更新元数据主版本号（含派生类）
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">业务对象内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetMetadataLog(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            得到元数据修改日志
            </summary>
            <param name="ctx"></param>
            <param name="objectId"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetMetadataLogDetail(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
             传入元数据日志参数对象，返回元数据日志详细记录。
            </summary>
            <param name="ctx"></param>
            <param name="pkId"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetBaseObjectId(Kingdee.BOS.Context,System.String)">
            <summary>
            传入登录上下文及扩展业务对象标识，返回拓展节点树根节点唯一标识。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="formId">扩展业务对象标识。</param>
            <returns>返回拓展节点树根节点唯一标识。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.DeleteWarnObject(Kingdee.BOS.Context,System.String,Kingdee.BOS.ISV)">
            <summary>
            删除监控对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="formID">监控对象编码</param>
            <param name="currentIsv">开发商</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetMetaChangeListByBaseObject(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Objects.Metadata.MetaChangeParameter)">
            <summary>
            /基对象模式
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.GetMetaChangeList(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Objects.Metadata.MetaChangeParameter)">
            <summary>
            获取元数据变化/冲突情况
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.UpdateMetaCacheByEnumTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据枚举更新引用的元数据缓存
            </summary>
            <param name="ctx"></param>
            <param name="enumTypeId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaDataService.ExportEnumTypeSQL(Kingdee.BOS.Context,System.String)">
            <summary>
            编辑界面导出枚举类型SQL
            </summary>
            <remarks>
            该功能用于设计器枚举类型编辑界面使用。
            针对系统预置，则生成Update语句；对于非系统预置，则生成delete Insert语句
            </remarks>
            <param name="ctx">上下文</param>
            <param name="enumTypeId">枚举类型ID</param>
            <returns>SQL脚本</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.GetFormMetaDataVerion(System.String,System.Int32)">
            <summary>
            获取动态表单元模型版本
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.GetLayoutViewVison(System.String)">
            <summary>
            获取视图版本
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.GetEnumObjectList">
            <summary>
            获取所有的枚举列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.GetRecycleEnumObjectList">
            <summary>
            获取回收站枚举列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.AddEnumObjectToRecycle(System.String)">
            <summary>
            添加枚举类型到回收站,同时删除枚举类型
            </summary>
            <param name="enumTypeId">枚举类型FID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.RecoverEnumObject(System.String)">
            <summary>
            恢复回收站中的枚举类型
            </summary>
            <param name="enumTypeId">枚举类型FID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.GetConsoleDetailFunc(System.String)">
            <summary>
            获得发布的明细功能
            </summary>
            <param name="strSubFuncID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.CreateFormTemplate(System.Int32)">
            <summary>
            创建领域模型元数据模版
            </summary>
            <param name="domainModelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.CreateFormTemplate(System.Int32,Kingdee.BOS.ISV)">
            <summary>
            创建领域模型元数据模版
            </summary>
            <param name="domainModelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.Load(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            读取业务领域元数据区分设计时和运行时
            </summary>
            <param name="id"></param>
            <param name="bRuntime"></param>        
            <param name="loadEmbedRefObject">是否加载嵌套引用的基础资料元数据包</param>
            <param name="getBaseObject">是否是加载某个基类的元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.PreLoad(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            根据改动的XML预加载业务领域元数据
            </summary>
            <p>应用场景：</p>
            1. 设计器XML编辑界面保存预加载检查；
            <param name="id">业务对象Id</param>
            <param name="xml">改动的XML</param>
            <param name="loadEmbedRefObject">是否加载嵌套引用的基础资料元数据包</param>
            <param name="getBaseObject">是否是加载某个基类的元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.Load(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            读取业务领域元数据区分设计时和运行时
            </summary>
            <param name="id"></param>
            <param name="bRuntime"></param>        
            <param name="loadEmbedRefObject">是否加载嵌套引用的基础资料元数据包</param>
            <param name="getBaseObject">是否是加载某个基类的元数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.LoadFromCache(System.String,System.Boolean,System.Int32)">
            <summary>
            从缓存中读取业务对象元数据包
            </summary>
            <param name="id">业务对象编码</param>
            <param name="bGetBaseObject"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlReader.LoadFromCache(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            从缓存中读取视图元数据包
            </summary>
            <param name="id">业务对象编码</param>
            <param name="bGetBaseObject">bGetBaseObject</param>
            <param name="modelTypeId">modelTypeId</param>
            <param name="layoutViewId">layoutViewId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.Delete(System.String,Kingdee.BOS.ISV)">
            <summary>
            删除业务对象
            </summary>
            <param name="formId">业务对象Id</param>
            <param name="currentIsv">开发商</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.BeforeDelete(System.String,Kingdee.BOS.ISV)">
            <summary>
            业务对象删除字段的检查
            </summary>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.UpdateBarItemTmplate(Kingdee.BOS.Core.Metadata.BarElement.BarDataManager,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel,System.Int32)">
            <summary>
            保存模型(xml序列化)
            </summary>
            <param name="barDataManager">模型实例</param>
            <param name="domainModel">领域模型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.CheckBeforeSave(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            保存之前的检查
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.CheckControlFieldEndlessLoop(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            检测元数据死循环
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.Save(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,System.Boolean)">
            <summary>
            保存更新元数据。
            </summary>
            <param name="metadata">待保存元数据对象。</param>
            <param name="bUpdateVersion">是否更新元数据版本，默认true
            false：不更新，以metadata里的版本号更新当前业务对象FVersion
            true：更新，BOSIDE保存
            </param>
            <remarks>
            保存原理：
            获取基类对象（已加载所有语言，如果没有基类，则为null）；
            1、切换Binder语言为中性；
            2、当前对象与基类比较获得主差量 a；
            3、应用差量 a 到 基类；
            4、切换Binder语言为英文；
            5、当前对象与基类比较，获取到英文的差量；
            6、其他语言重复此操作。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.SaveForIDE(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            IDE保存更新元数据。
            </summary>
            <param name="metadata">待保存元数据对象。</param>
            <returns>返回操作结果。</returns>
            <remarks>
            保存原理：
            获取基类对象（已加载所有语言，如果没有基类，则为null）；
            1、切换Binder语言为中性；
            2、当前对象与基类比较获得主差量 a；
            3、应用差量 a 到 基类；
            4、切换Binder语言为英文；
            5、当前对象与基类比较，获取到英文的差量；
            6、其他语言重复此操作。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.SaveExtend(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            保存扩展数据,套打用,用于标记套打模板对应的语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.ClearUserFormParameter(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,System.String)">
            <summary>
            元数据修改，清除用户布局方案
            </summary>
            <param name="metadata"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.SaveLayoutView(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            保存视图元数据
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.CopyLayout(System.String,System.String,System.String,System.String)">
            <summary>
            复制视图
            </summary>
            <param name="baseObjectId">扩展对象的父对象ID</param>
            <param name="extendObjectId">扩展对象ID</param>
            <param name="ISVName">开发商</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.UpdateObjectTypeExtName(Kingdee.BOS.Context,System.String)">
            <summary>
            更新基对象扩展名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">业务对象内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.DeleteWarnObject(System.String,Kingdee.BOS.ISV)">
            <summary>
            删除监控对象
            </summary>
            <param name="formId">监控对象编码</param>
            <param name="currentIsv">开发商</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataXmlWriter.UpdateMetaCacheForDelete(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,System.Int64)">
            <summary>
            更新元数据缓存(删除)
            </summary>
            <param name="metadata"></param>
            <param name="version"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaVersionAsyncCache">
            <summary>
            元数据版本本地缓存类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.GetMetaVersionArea(Kingdee.BOS.Context)">
            <summary>
            获取元数据版本的缓存段
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.ClearLocalAllMetaVersion(Kingdee.BOS.Context)">
            <summary>
            清除当前环境版本信息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.GetMetaVersion(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.UpdateMetaVersion(Kingdee.BOS.Context,System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <param name="version"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.UpdateMetaVersion(Kingdee.BOS.Context,System.String[],System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="formIds"></param>
            <param name="modelTypeId"></param>
            <param name="version"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaVersionAsyncCache.AsyncMetaCacheFromMC(System.String,System.Collections.Concurrent.ConcurrentDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.OnLineViewService">
            <summary>
            用于在线预览服务数据库相关操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OnLineViewService.GetSwfInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取文件服务表中指定文件信息
            </summary>
            <param name="ctx"></param>
            <param name="fileid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OnLineViewService.FormAllowOnlinePreview(Kingdee.BOS.Context,System.String)">
            <summary>
            是否允许在这个窗体上做在线预览
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.Audit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            审核
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="PKIds"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.UnAudit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            反审核
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="PKIds"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.Audit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            审核
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.UnAudit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            反审核
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.Excute(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{System.Object})">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="billInfo"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
            <param name="formOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.Excute(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Object[],Kingdee.BOS.Orm.OperateOption,System.Collections.Generic.List{System.Object})">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="billInfo"></param>
            <param name="formOperation"></param>
            <param name="PKIds"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.CheckeBillInfo(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            
            </summary>
            <param name="billInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AuditService.CheckOperation(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormOperation)">
            <summary>
            
            </summary>
            <param name="billInfo"></param>
            <param name="formOperation"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DisaMergeService.SetMasterID(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            同步基础资料的多组织数据主键
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DisaMergeService.GetExecuteService(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ElementMetadata.FormBusinessServiceType},Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            返回下推表单服务运行类
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DisaMergeService.GetAllFormBusiness(Kingdee.BOS.Context)">
            <summary>
            读取全部表单服务到本地
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DetailObjectTypeInfoMore">
            <summary>
            扩展详情信息类，增加使用组织ID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DetailObjectTypeInfoMore.#ctor(System.String,System.String,System.String)">
            <summary>
            被分配的基础资料的详情信息（扩展）
            </summary>
            <param name="id">基础资料ID</param>
            <param name="name">基础资料名称</param>
            <param name="useOrgId">分配目标组织ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.LogResult(Kingdee.BOS.Context,System.String,System.Data.DataRow[],Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            记录分配结果,编辑基础资料后保存的分配结果信息
            </summary>
            <param name="result"></param>
            <param name="ctx"></param>
            <param name="oldObjects"></param>
            <param name="beginTime"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetFieldValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取某个字段的值
            </summary>
            <param name="dynamicObject"></param>
            <param name="businessInfo"></param>
            <param name="fieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.InsertAllocLogDetailPara(Kingdee.BOS.Context,System.String,System.Int64,Kingdee.BOS.Contracts.IDBService,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            详细信息写入到系统中(同步操作先进入此方法写日志)；
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="oldObjects"></param>
            <param name="baseId"></param>
            <param name="allocaLogId"></param>
            <param name="dbSerive"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.UpdateResult(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Context,System.String,System.Int64,System.DateTime,System.Int32,System.Collections.Generic.Dictionary{System.Int32,Kingdee.BOS.App.Core.BeforeSaveObject},System.Collections.Generic.HashSet{System.String},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            更新结果
            </summary>
            <param name="result"></param>
            <param name="ctx"></param>
            <param name="baseId"></param>
            <param name="beginTime"></param>
            <param name="indexobjecs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.UpdateAllocLogInf(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Contracts.IDBService,System.String,System.Int64,System.DateTime,System.Int32,System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            更新分配日志
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="dbSerive"></param>
            <param name="baseId"></param>
            <param name="allocaLogId"></param>
            <param name="beginTime"></param>
            <param name="totleCount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.DeleteSyncedDatas(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.HashSet{System.String})">
            <summary>
            删除日志详情表同步中的是数据
            </summary>
            <param name="ctx"></param>
            <param name="allocaLogId"></param>
            <param name="destIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.UpdateTotalAllocateLogInfoAtLast(Kingdee.BOS.Context,System.Int64,System.Int32,System.Int32)">
            <summary>
            更新分配日志(分批次同步时，所有批次执行完成后使用此更新总体状态)
            </summary>
            <param name="ctx">上下文</param>
            <param name="allocaLogId">分配日志ID</param>
            <param name="totleCount">同步总数量</param>
            <param name="failCount">同步失败数量</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.LogResult(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter,System.String)">
            <summary>
            记录分配结果,点击分配按钮后的分配结果信息
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.LogResult(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Context,System.String,System.DateTime,System.Collections.Generic.Dictionary{System.Int32,Kingdee.BOS.App.Core.BeforeSaveObject})">
            <summary>
            记录分配结果,编辑基础资料后保存的分配结果信息
            </summary>
            <param name="result"></param>
            <param name="ctx"></param>
            <param name="oldObjects"></param>
            <param name="beginTime"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.InsertAllocLogInf(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Contracts.IDBService,System.String,System.DateTime,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            记录分配结果日志信息，并返回日志主键及成功失败数量
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="dbSerive"></param>
            <param name="baseId"></param>
            <param name="beginTime"></param>
            <param name="totleCount">总数</param>
            <param name="successCount">成功数量</param>
            <param name="failCount">失败数量</param>
            <returns>分配日志主键</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.InsertAllocLogDetailPara(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IOperationResult,System.String,System.Int64,Kingdee.BOS.Contracts.IDBService,System.Collections.Generic.Dictionary{System.Int32,Kingdee.BOS.App.Core.BeforeSaveObject},System.Boolean)">
            <summary>
            详细信息写入到系统中(同步操作会调用)；
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="oldObjects"></param>
            <param name="baseId"></param>
            <param name="allocaLogId"></param>
            <param name="dbSerive"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.InsertAllocLogDetailPara(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter,Kingdee.BOS.Contracts.IDBService)">
            <summary>
            详细信息写入到系统中（手动分配/取消分配会调用）；
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="oldObjects"></param>
            <param name="baseId"></param>
            <param name="allocaLogId"></param>
            <param name="dbSerive"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetALLOCLOGDETAILTable">
            <summary>
            定义分配日志结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetALLOCLOGDETAIL_LTable">
            <summary>
            定义分配日志多语言结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.InsertAllocLogInf(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter,Kingdee.BOS.Contracts.IDBService)">
            <summary>
            手动分配，取消分配记录日志主表
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <param name="allocateParameter"></param>
            <param name="dbSerive"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetTime(System.TimeSpan)">
            <summary>
            对时间进行一次容错；
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.IsRecordSuccessLogDetails(Kingdee.BOS.Context)">
            <summary>
            是否记录成功的分配日志详情
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetTrueBillPkId(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidationErrorInfo,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter,Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            获取真正的主表ID（因为报错信息如果是子单据头中的，返回的BillPKId是子单据头的主键ID）
            </summary>
            <param name="ctx"></param>
            <param name="vlError"></param>
            <param name="allocateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetMasterFieldPropertyName(Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            获取masterID对应的标识
            </summary>
            <param name="allocateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateLogger.GetNumberFieldPropertyName(Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            获取number对应的标识
            </summary>
            <param name="allocateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataSavePlugIn.InsertDelayTable(System.String,System.String[])">
            <summary>
            插入延迟同步表
            </summary>
            <param name="formId">基础资料类型</param>
            <param name="ids">基础资料ID结合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataSavePlugIn.ClearCacheCustOtherInfo(Kingdee.BOS.Core.DynamicForm.PlugIn.Args.AfterExecuteOperationTransaction)">
            <summary>
            人为同步清除下客户联系人和客户地点的基础资料缓存数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Merge.GetValidateDeleteDatas(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            获取校验通过的子单集合（用于删除）
            </summary>
            <param name="headObjs">检验通过的主单</param>
            <param name="childDataEntitys">所有的子单集合</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SetSubEntryStatus">
            <summary>
            子单据体状态字段转换
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SetEntryStatus">
            <summary>
            单据体状态字段转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.AddWorflowValidator(System.Collections.Generic.List{Kingdee.BOS.Core.Validation.AbstractValidator})">
            <summary>
            增加工作流校验器（若单据配置了流程或正在流程中，则不允许直接转换状态，而是由流程执行操作）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.Excute(System.Object[])">
            <summary>
            获取序时簿对象集合 
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.BeforeInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行前：提前反写，避免库存更新服务长期锁库
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.ExecuteOperatinTransaction(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            执行操作
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.GetEntryIds(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.String)">
            <summary>
            取当前操作的分录集合 
            </summary>
            <param name="pkEntryIds"></param>
            <param name="pkId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SetEntryBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.Collections.Generic.List{System.Object})">
            <summary>
            设置单据体状态
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="dataObject"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SetHeadBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            设置整单状态(表头)
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="dataObject"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SetBillStatus(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{System.Object})">
            <summary>
            设置单据状态(表头/分录)
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="dataEntity"></param>
            <param name="paras"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractSetStatus._operater">
            <summary>
            当前操作员信息，当前登录用户信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.LoadCurrentOperater(Kingdee.BOS.Core.Metadata.FieldElement.UserField)">
            <summary>
            读取当前操作员信息; 读取一次后，缓存备用
            </summary>
            <remarks>
            能够缓存的理由：
            1. 当前登录用户不会改变
            2. 同一单据同样的基础资料，其orm模型一致；即同一单据的各用户字段的orm模型通用
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SetOperationInfo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.StatusElement.StatusItem)">
            <summary>
            设置操作人/操作日期
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="obj"></param>
            <param name="item"></param>
            <param name="statusValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.PreparePropertys(System.Collections.Generic.List{System.String})">
            <summary>
            打包字段属性
            </summary>
            <param name="fieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SaveConvertDataBefore(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.List{System.Object},Kingdee.BOS.Orm.OperateOption)">
            <summary>
            单据状态改变（如：审核、反审核等）时单据转换相关的数据处理：
            在单据状态改变之前执行：使用与反审核操作
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="objs">待处理的单据数据包数组</param>
            <param name="paras">审核参数包，其他操作本参数为null</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.SaveConvertDataAfter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.List{System.Object},Kingdee.BOS.Orm.OperateOption)">
            <summary>
            单据状态改变（如：审核、反审核等）时单据转换相关的数据处理：
            在单据状态改变之后执行，适用于审核、作废、反作废
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="objs">待处理的单据数据包数组</param>
            <param name="paras">审核参数包，其他操作本参数为null</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.AbstractSetStatus._reserveContext">
            <summary>
            在反写引擎中，构建出来的预留服务上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSetStatus.ExecuteReserveServer">
            <summary>
            执行预留服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.Initialize(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.Orm.OperateOption,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.Collections.Generic.List{System.Object})">
            <summary>
            初始化
            </summary>
            <param name="info"></param>
            <param name="operation"></param>
            <param name="option"></param>
            <param name="entryRows"></param>
            <param name="paras"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.Excute(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取单据对象集合 
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntryValidationService">
            <summary>
            对指定分录行进行校验的校验器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.ValidationService">
            <summary>
            提供验证功能的服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.GetValidators(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Validation.Enum_TimingPoint,System.String)">
            <summary>
            返回某个时机点下的所有校验器
            </summary>
            <param name="timingPoint">时机点描述字符</param>
            <returns>可用的校验器列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.GetBillTypeValidators(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取单据类型附加验证规则
            </summary>
            <param name="businessInfo"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.Validate(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Validation.ValidateContext,System.String)">
            <summary>
            对指定的一批实体进行验证
            </summary>
            <param name="dataEntities">要验证的实体列表</param>
            <param name="validateContext">校验上下文，即本次校验的一个周期</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.TryValidate(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Validation.ValidateContext,System.Collections.Generic.List{Kingdee.BOS.Core.Validation.ValidationErrorInfo}@)">
            <summary>
            对指定的一批实体进行验证：这里验证，返回是否验证成功，返回验证存在的错误信息，
            但是不抛出错误，以便处理未有错误的数据的后续处理
            </summary>
            <param name="dataEntities">要验证的实体列表</param>
            <param name="validateContext">校验上下文，即本次校验的一个周期</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.AddDataRuleValidator(Kingdee.BOS.Core.Validation.AbstractValidator[],Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            把校验规则的校验器加进去
            </summary>
            <param name="validators"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.AddOrgValidator(Kingdee.BOS.Core.Validation.AbstractValidator[],Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            把组织的校验器加进去
            </summary>
            <param name="validators"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.Validate(Kingdee.BOS.Core.Validation.ValidateContext,System.Object[])">
            <summary>
            对指定的一批实体进行验证；
            重载函数，用于删除时校验，调用函数仅传入主键数组
            </summary>
            <param name="objID">要验证的实体主键</param>
            <param name="validateContext">校验上下文，即本次校验的一个周期</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.GetValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Int32)">
            <summary>
            获得单据实体中指定字段的值
            </summary>
            <param name="billEntiry"></param>
            <param name="field"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.GetFieldDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Int32)">
            <summary>
            找到字段所在的实体
            </summary>
            <param name="billEntiry"></param>
            <param name="field"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidationService.GetEntryDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Int32)">
            <summary>
            查找非单据头动态实体集合
            </summary>
            <param name="billEntiry"></param>
            <param name="entity"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.ValidationService.Validators">
            <summary>
            外部传入的校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntryValidationService.#ctor(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="entityKey"></param>
            <param name="entryPks"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntryValidationService.CreateExtendedDataEntitySet(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            规划参与校验的扩展实体
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntryValidationService.EntityKey">
            <summary>
            实体标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntryValidationService.PkEntryIds">
            <summary>
            实体主键集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntrySet">
            <summary>
            指定分录行的实体集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntrySet.Parse(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            构造函数
            </summary>
            <param name="entityKey"></param>
            <param name="entryPks"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntrySet.GetEntryIds(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.String)">
            <summary>
            取当前操作的分录集合 
            </summary>
            <param name="pkEntryIds"></param>
            <param name="pkId"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntrySet.EntityKey">
            <summary>
            实体标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SetEntryStatus.SpecEntrySet.PkEntryIds">
            <summary>
            实体主键集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SetSubEntryStatus.pkSubEntryIds">
            <summary>
            选中的子分录主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SetSubEntryStatus.dictExtendedDatas">
            <summary>
            实体数据扁平结构
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SetSubEntryStatus.dataEntitys">
            <summary>
            分录行数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SetSubEntryStatus.sbRowInfo">
            <summary>
            行号信息，用于状态转换之后提示
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetSubEntryStatus.Initialize(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.Orm.OperateOption,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.Collections.Generic.List{System.Object})">
            <summary>
            初始化
            </summary>
            <param name="info"></param>
            <param name="operation"></param>
            <param name="option"></param>
            <param name="entryRows"></param>
            <param name="paras"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetSubEntryStatus.SetOperateResult(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            设置操作结果
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetSubEntryStatus.GetMessage(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取提示信息
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetSubEntryStatus.BuildRowInfo(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            构造提示行信息
            </summary>
            <param name="data"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetSubEntryStatus.GetExtendedDataEntitys(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            将实体数据转换成扁平结构
            </summary>
            <param name="dataEntities">实体数据</param>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UpdateAllocatedDataService.UpdateAllocateTable">
            <summary>
            更新分配的资料
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UpdateAllocatedDataService.CreateDataTable(System.String)">
            <summary>
            创建批量插入表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.SysReportServicePlugInProxy">
            <summary>
            帐表服务插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.SysReportServicePlugInProxy.ClearAllTempTable">
            <summary>
            删除创建的临时表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.SysReportServicePlugInProxy.GetTreeReportData(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.AssistantDataPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.AssistantDataPIDService.GetFormMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.AssistantDataPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.AssistantDataPIDService.Clear(Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.FilterSchemePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成默认过滤方案
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.FilterSchemePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新默认过滤方案
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ReportPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成当前单据相关的编码规则信息
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ReportPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新到帐套中去
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService">
            <summary>
            后台打印任务服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.AddPrintTask(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            添加后台打印任务
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="taskName"></param>
            <param name="formId"></param>
            <param name="schemeId"></param>
            <param name="filterParamter"></param>
            <param name="queryParamter"></param>
            <param name="context"></param>
            <param name="printParamter"></param>
            <param name="pageParamter"></param>
            <param name="actionTypeId"></param>
            <param name="operationTypeId"></param>
            <param name="exportmode"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.SetPrintTaskDoing(Kingdee.BOS.Context,System.String)">
            <summary>
            设置任务开始执行
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.UpdatePrintTaskStatus(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            更新任务状态
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="status"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.AddPrintData(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            保存报表xml打印数据包
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="printerName"></param>
            <param name="printData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.AddPrintData(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            保存报表xml打印数据包（支持指定子任务Id）
            </summary>
            <param name="ctx"></param>
            <param name="taskId">后台任务Id</param>
            <param name="entryId">子任务Id</param>
            <param name="printerName">打印机名称</param>
            <param name="printData">打印数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.AddPrintDataDetailPageByPage(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Tuple{System.Int32,System.String}})">
            <summary>
            逐页保存后台打印数据
            </summary>
            <param name="ctx"></param>
            <param name="entryId">子任务Id</param>
            <param name="printDataList">打印数据，该页序号，该页数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetPrintTaskList(Kingdee.BOS.Context,System.String[])">
            <summary>
            获取后台打印任务列表
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetPrintDataList(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            获取报表xml打印数据包列表
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="readPrintData">是否读取打印数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetPrintData(Kingdee.BOS.Context,System.String)">
            <summary>
            获取报表xml打印数据包
            </summary>
            <param name="ctx"></param>
            <param name="subTaskId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetPrintDataDetailPageByPage(Kingdee.BOS.Context,System.String,System.Int32,System.Int32)">
            <summary>
            按批逐页取报表套打数据
            </summary>
            <param name="ctx"></param>
            <param name="subTaskId">子任务Id</param>
            <param name="pageIdx">当前批次起始页码</param>
            <param name="pageCount">页数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.SetPrintTaskFailure(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            设置任务处理失败
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <param name="errorMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.CreateView(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean)">
            <summary>
            重建视图
            </summary>
            <param name="ctx"></param>
            <param name="task"></param>
            <param name="replaceCtx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetBackGroundPrintTaskCreator(Kingdee.BOS.Context,System.String)">
            <summary>
            获取后台打印任务的创建人
            </summary>
            <param name="ctx"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行计划入口函数：定期生成打印任务数据包
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.DoBackgroundPrintTask(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行后台打印任务取数操作
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetPrintParamter(System.String)">
            <summary>
            还原打印参数
            </summary>
            <param name="printParamter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.CreatePrintData(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.Collections.Generic.List{Kingdee.BOS.Core.NotePrint.PrintJob})">
            <summary>
            生成打印数据
            </summary>
            <param name="view"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.GetExportParamter(System.String)">
            <summary>
            还原套打引出参数
            </summary>
            <param name="printParamter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.CreateNoteExportData(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,Kingdee.BOS.Core.NotePrint.PrintExportInfo)">
            <summary>
            生成套打引出数据
            </summary>
            <param name="view"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Printing.BackgroundPrintTaskService.CreateListExportData(Kingdee.BOS.Core.DynamicForm.IDynamicFormView,System.String)">
            <summary>
            生成列表引出数据
            </summary>
            <param name="view"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.SysReport.ClearAllTempTable">
            <summary>
            清理临时表，不触发插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.SysReport.CreateSysReportServicePlugIns(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FormElement.PlugIn})">
            <summary>
            创建账表服务插件方法
            </summary>
            <param name="sysReportServicePlugins"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.SysReport.CreateSysReportServicePlugIn(Kingdee.BOS.Core.Metadata.FormElement.PlugIn)">
            <summary>
            创建账表服务插件私有方法
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Report.SysReport.PlugInProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService">
            <summary>
            为公有云服务的计划任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.GetAllScheduleList(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获得所有计划任务列表
            </summary>
            <param name="ctx"></param>
            <param name="lstProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.RunSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行计划任务
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.InitSchedule(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            初始化帐套服务
            </summary>
            <param name="ctx"></param>
            <param name="serviceClasses"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.UpdateAutoRecoverSchedules(Kingdee.BOS.Context)">
            <summary>
            更新自动恢复的执行计划
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.SetThreadCultureInfo(Kingdee.BOS.Context)">
            <summary>
            set thread cultureinfo
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.PaaS.PaaSScheduleService.IsRunWarnSchedule(Kingdee.BOS.Context)">
            <summary>
            是否需要跑业务监控执行计划
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BarUtils.GetBarItemTemplatesLang(System.Int32,Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="elementTypeID"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BarUtils.GetBarItemTemplates(System.Int32,Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="elementTypeID"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BarUtils.DeleteBarItemTemplate(System.Int32,Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="elementTypeID"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BASData.DomainIndustryDate">
            <summary>
            行业领域基础数据同步服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.selectSql">
            <summary>
            行业领域查询SQL语句
            1、行业领域存在，比较时间戳FSTAMP是否执行更新SQL语句
            2、下载的行业领域的数据，如果最新数据不包含本地的，执行删除SQL语句
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.insertSql">
            <summary>
            行业领域新增SQL语句
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.delSql">
            <summary>
            行业领域删除SQL语句
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetIndustryInfo(Kingdee.BOS.Context)">
            <summary>
            获取行业信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetDomainInfo(Kingdee.BOS.Context)">
            <summary>
            获取领域信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetIndustryLastVersion(Kingdee.BOS.Context)">
            <summary>
            获取行业数据版本
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetLastVersion(Kingdee.BOS.Context)">
            <summary>
             获取领域数据版本
            </summary>
            <param name="ctx"></param>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetVersion(Kingdee.BOS.Context,System.String)">
            <summary>
            获取本地行业领域版本信息
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.SaveMainInfo(Kingdee.BOS.Context,Kingdee.BOS.JSON.JSONArray,System.String)">
            <summary>
            保存行业领域主表信息
            </summary>
            <param name="ctx"></param>
            <param name="mainInfos"></param>
            <param name="table"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetMutInfo(Kingdee.BOS.Context,Kingdee.BOS.JSON.JSONArray,System.String)">
            <summary>
            保存行业领域多语言表信息
            </summary>
            <param name="ctx"></param>
            <param name="mutInfos"></param>
            <param name="table"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.GetCDPServiceProxy(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.SaveInfo(Kingdee.BOS.Context,System.String,System.Action{System.Data.DataTable})">
            <summary>
            保存行业领域的主表数据
            </summary>
            <param name="ctx"></param>
            <param name="table"></param>
            <param name="action"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BASData.DomainIndustryDate.SaveMutInfo(Kingdee.BOS.Context,System.String,System.Action{System.Data.DataTable})">
            <summary>
            保存行业领域的多语言表数据
            </summary>
            <param name="ctx"></param>
            <param name="table"></param>
            <param name="action"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataPkId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Object,System.Int64)">
            <summary>
            根据masterid+组织id读取对应的pkid
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="formId"></param>
            <param name="masterId"></param>
            <param name="userOrgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataPkIdByNumber(Kingdee.BOS.Context,System.String,System.String,System.Int64)">
            <summary>
            根据编码+组织id读取对应的pkid
            </summary>
            <param name="ctx"></param> 
            <param name="formId"></param>
            <param name="number"></param>
            <param name="userOrgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataPkIdByNumber(Kingdee.BOS.Context,System.String,System.String,System.Int64,System.String)">
            <summary>
            根据编码+组织id读取对应的pkid
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="number"></param>
            <param name="userOrgId"></param>
            <param name="assistantPid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.CacheBaseDataPkId(Kingdee.BOS.Context,System.String,System.Object,System.Int64,System.Object)">
            <summary>
            缓存基础资料主键信息
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="masterId"></param>
            <param name="userOrgId"></param>
            <param name="pkId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.CheckBaseDataRefInfo(Kingdee.BOS.Context,System.String,System.Object[],System.Type,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.PreInsertData.DataType.ObjectTypeRef},System.Int32)">
            <summary>
             检查某些基础资料被哪些单据引用，返回resultCount规定的结果数量；
             出于性能考虑，如果单纯是判断是否被引用，请指定返回结果的个数，一般请填写1；
            </summary>
            <param name="ctx"></param>
            <param name="baseDataFromId">基础资料唯一标识</param>
            <param name="ids">需要检查的基础资料内码列表</param>
            <param name="pkType">基础资料内码类型，可以通过form.GetPkFieldType()获得</param>
            <param name="exceptItems">不需要检查的业务单据</param>
            <param name="resultCount">返回结果条数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.IsCheckRefTableSameDynObj(Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Base.Object.BaseDataRefItem,System.String,System.String)">
            <summary>
            传入指定实体的数据包集合，遍历判断当前实体下基础资料内码是否为引用检查的基础资料数据。
            </summary>
            <param name="dataEntitySet">当前实体需要遍历判断的数据包集合。</param>
            <param name="entity">待遍历的实体。</param>
            <param name="refItem">待遍历的检查项。</param>
            <param name="tableName">待检查表格名。</param>
            <param name="pkValue">基础资料内码。</param>
            <returns>返回是否相同单的引用。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataRefInfo(Kingdee.BOS.Context,System.String,System.Object[],System.Type,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.PreInsertData.DataType.ObjectTypeRef})">
            <summary>
            获得某些基础资料被哪些单据引用
            </summary>
            <param name="ctx"></param>
            <param name="baseDataFromId">基础资料唯一标识</param>
            <param name="ids">基础资料内码列表</param>
            <param name="pkType">基础资料内码类型，可以通过form.GetPkFieldType()获得</param>
            <param name="exceptItems">不需要检查的业务单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResults(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object,System.Type)">
            <summary>
            获取基础资料引用(单个)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="id">基础资料内码</param>
            <param name="pkType">内码类型</param>
            <param name="getBaseObjectId">是否获取引用表单的基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResults(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object,System.Type,System.Boolean)">
            <summary>
            获取基础资料引用(单个)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="id">基础资料内码</param>
            <param name="pkType">内码类型</param>
            <param name="getBaseObjectId">是否获取引用表单的基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsIn(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type)">
            <summary>
            获取基础资料引用(20个以内)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsIn(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type,System.Boolean)">
            <summary>
            获取基础资料引用(20个以内)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <param name="getBaseObjectId">是否获取引用表单的基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsTab(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type)">
            <summary>
            获取基础资料引用(大于20)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsTab(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type,System.Boolean)">
            <summary>
            获取基础资料引用(大于20)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <param name="getBaseObjectId">是否获取引用表单的基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsAll(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type)">
            <summary>
            获取基础资料引用(全部)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefResultsAll(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Base.Object.BaseDataRefItem},System.Object[],System.Type,System.Boolean)">
            <summary>
            获取基础资料引用(全部)
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础资料表单id</param>
            <param name="datas">基础资料引用关系集合</param>
            <param name="ids">基础资料内码集合</param>
            <param name="pkType">内码类型</param>
            <param name="getBaseObjectId">是否获取引用表单的基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.ExecuteReader(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            执行结果读取
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <param name="resultCount">结果条数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.ExecuteReader(Kingdee.BOS.Context,System.String,System.Int32,Kingdee.BOS.SqlParam)">
            <summary>
            执行结果读取
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <param name="resultCount">结果条数</param>
            <param name="parm">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.ExecuteReader(Kingdee.BOS.Context,System.String,System.Int32,Kingdee.BOS.SqlParam,System.Boolean)">
            <summary>
            执行结果读取
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <param name="resultCount">结果条数</param>
            <param name="parm">查询参数</param>
            <param name="getBaseObjectId">是否获取基类Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.CheckDataRefType(Kingdee.BOS.Context,System.String,System.String,System.Type)">
            <summary>
            检查基础资料主键类型与引用的字段数据库类型是否一致
            </summary>
            <returns>true:一致；false：不一致</returns>>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataRefList(Kingdee.BOS.Context,System.String,System.Object[],System.Type,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.PreInsertData.DataType.ObjectTypeRef},System.Int32)">
            <summary>
            基础数据引用查询
            </summary>
            <param name="ctx"></param>
            <param name="baseDataFromId"></param>
            <param name="ids"></param>
            <param name="pkType"></param>
            <param name="exceptItems"></param>
            <param name="resultCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetDataRefList(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Base.Object.BaseDataRefItem,System.Object[],System.Int32)">
            <summary>
            查找引用表里的BillNo或Number。返回resultCount规定的结果数量；
            </summary>
            <param name="ctx"></param>
            <param name="baseDataFromId"></param>
            <param name="data"></param>
            <param name="ids"></param>
            <param name="resultCount">-1:返回全部结果</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataRefItem(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.PreInsertData.DataType.ObjectTypeRef})">
            <summary>
            获得基础资料被哪些业务对象引用
            </summary>
            <param name="ctx"></param>
            <param name="baseDataFromId"></param>
            <param name="exceptItems"></param>
            <returns></returns>        
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataRefItem(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.PreInsertData.DataType.ObjectTypeRef},System.Boolean)">
            <summary>
            获得某些基础资料被哪些单据引用
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础数据表单Id</param>
            <param name="exceptItems">例外集合</param>
            <param name="isInherit">是否有继承取继承</param>
            <returns></returns>    
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataRefResultList(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Base.Object.BaseDataRefItem,System.Object[],System.Type,System.Int32)">
            <summary>
            获取基础资料引用结果
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseDataFromId">基础数据表单Id</param>
            <param name="item">基础资料引用关系</param>
            <param name="id">基础资料内码集合</param>
            <param name="pkType">基础资料内码类型</param>
            <param name="resultCount">结果条数(是每个内码对应条数，不是总条数)</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataPolicyType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定基础资料的策略控制类型
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns>控制策略类型(BOSEnums.Enu_BaseDataPolicyType)</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BaseDataService.GetBaseDataTypeName(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料类型名称
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillCodeRuleService">
            <summary>
            编码规则服务类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRuleService.ValidateRepeatDisabledKey">
            <summary>
            取消编码规则校验参数key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRuleService.CODEWHENCREATE">
            <summary>
            创建时
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRuleService.CODEWHENSAVE">
            <summary>
            保存时
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BillCodeRuleService.billCodePlugIn">
            <summary>
            缓存插件类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.LoadPlugIn">
            <summary>
            加载编码规则插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetNextBillNoByRepair(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            通过补号获得一个单据编号(手工补号)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetNextBillNoByRepair(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            通过补号获得一个单据编号
            </summary>
            <param name="dataEntities"></param>
            <param name="ruleID">编码规则ID</param>
            <param name="lstOriBillNo">原有单据编号</param>
            <param name="billNoFieldName">单据编码字段</param>
            <param name="tableName">对应数据库表名</param>
            <returns>补号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetOtherFieldRepaireNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            从补号池获取其他非单据编号字段
            </summary>
            <param name="dataobj"></param>
            <param name="usedNoList"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetNextBillNoByRepair(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Collections.Generic.List{System.String})">
            <summary>
             在补号资源表获取补号
            </summary>
            <param name="dataEntity"></param>
            <param name="ruleID"></param>
            <param name="lstOriBillNo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetNextBillNoByRepair(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            获取补号
            </summary>
            <param name="project">流水号字段信息</param>
            <returns>补号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetNextBillNoByRepair(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Int32)">
            <summary>
            获取补号
            </summary>   
            <param name="project">流水号字段信息</param>
            <param name="count">取号数量</param>
            <returns>补号集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetRepairFlowNos(System.String,System.String,System.Int32)">
            <summary>
            在补号资源表获取补号流水号
            </summary>
            <param name="ruleID">编码规则ID</param>
            <param name="byValue">单据编号模板</param>
            <param name="count">取号数量</param>
            <returns>补号集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.CreateBillNo(System.Decimal,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>
            生成完整单据编号
            </summary>
            <param name="flowNo">流水值</param>
            <param name="project">编码规则</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.UpdateRepairNoResource(System.Decimal,System.String,System.String)">
            <summary>
            更新补号资源表对应记录的状态
            </summary>
            <param name="flowNo"></param>
            <param name="ruleID"></param>
            <param name="byValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.UpdateMaxSerialNo(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            更新生成流水号的凭据(流水号最大值)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetCodeRuleFieldList(System.String)">
            <summary>
            获取编码规则绑定的元素列表
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetUpdateMaxNoList(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            获取更新前后的最大值列表
            </summary>
            <param name="dataEntities"></param>
            <param name="specificRuleID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetUpdateMaxNoDictionary(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Data.DataTable,System.String)">
            <summary>
            获取当前规则所有编码依据的最大值
            </summary>
            <param name="dataEntities"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.RecoverBillNo(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            回收单据编号到补号池
            </summary>
            <param name="objList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.TryGetRepairNoStatus(System.Decimal,Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.String@)">
            <summary>
            获取补号池里面的补号状态，没有流水号，有流水号但是标记使用和已经写入了补号
            </summary>
            <param name="flowNo"></param>
            <param name="project"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetRuleId(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataTable,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField)">
            <summary>
            获取自动补号的编码规则id
            </summary>
            <param name="obj"></param>
            <param name="ruleTable"></param>
            <param name="billTypeField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.UpdateMaxSerialNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            更新生成流水号的凭据(流水号最大值)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.WriteUpdateLog(System.String,System.String)">
            <summary>
            记录更新最大流水日志（记录前十个的编码依据值）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetListBillNO(System.String,System.Int32,System.String,System.Object)">
            <summary>
            获得单据编号批量接口
            -- 依次对1、指定的编码规则. 2、单据类型指定的编码规则. 3、默认编码规则进行判断
            -- 如果取得编码规则ID, 不再继续判断立即进行编码生成
            NOTE: 这里没有传入实体的数据, 故仅生成结构为 固定文本 + 流水号 格式的编码
            </summary>
            <param name="formId">formId</param>
            <param name="listCount">编码数量</param>
            <param name="ruleId">编码规则ID</param>
            <param name="oBillTypeValue">单据类型对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetListBillNO(System.String,System.Int32,System.String,System.String)">
            <summary>
            获得单据编号批量接口
            -- 依次对1、指定的编码规则. 2、单据类型指定的编码规则. 3、默认编码规则进行判断
            -- 如果取得编码规则ID, 不再继续判断立即进行编码生成
            NOTE: 这里没有传入实体的数据, 故仅生成结构为 固定文本 + 流水号 格式的编码
            </summary>
            <param name="formId">formId</param>
            <param name="listCount">编码数量</param>
            <param name="ruleId">编码规则ID</param>
            <param name="billTypeId">单据类型ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetListBillNO(System.String,System.Int32,System.String)">
            <summary>
            批量获取单据编号, 如果编码规则ID为空, 那么会按照默认规则生成编码
            NOTE: 这里没有传入实体的数据, 故仅生成结构为 固定文本 + 流水号 格式的编码
            </summary>
            <param name="formId"></param>
            <param name="count"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取单据编码（支持指定非单据编号字段为编码字段）
            </summary>
            <param name="dataEntities"></param>
            <param name="options">获取编码规则的选项 
            Key:CodeTime,Type:Int32,Value:0-创建时,1-保存时;
            Key:UpdateMaxNum,Type:bool,Value:true-更新最大流水号,false:不更新
            Key:IsBillNo,Type:bool,Value:如果指定非单据编号为编码字段时，设置为false,其他情况可以不指定</param>
            <param name="specifiedCodeRule">指定的编码规则Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取单据编码（支持指定非单据编号字段为编码字段）
            </summary>
            <param name="dataEntities"></param>
            <param name="specifiedField">允许指定非单据编号字段的FieldName</param>
            <param name="lstOriBillNo">已经补号的集合</param>
            <param name="options">获取编码规则的选项 
            Key:CodeTime,Type:Int32,Value:0-创建时,1-保存时;
            Key:UpdateMaxNum,Type:bool,Value:true-更新最大流水号,false:不更新
            Key:IsBillNo,Type:bool,Value:如果指定非单据编号为编码字段时，设置为false,其他情况可以不指定</param>
            <param name="specifiedCodeRule">指定的编码规则Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetUniqueCodeRule(System.Data.DataTable)">
            <summary>
            获取唯一编码规则，如果不是唯一，返回为空
            </summary>
            <param name="curBillRuleData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.IsUniqueByValue(System.Data.DataTable,System.String)">
            <summary>
            当前单据是否是唯一编码元素唯一编码依据，且不启用自动补号
            </summary>
            <param name="curBillRuleData"></param>
            <param name="uniqueRuleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.BatchGetBySequence(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Data.DataTable,System.String)">
            <summary>
            仅有一个编码规则和编码依据，直接按顺序生成即可
            </summary>
            <param name="dataEntities"></param>
            <param name="tbRuleEntrys"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.BatchGetByNormal(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Data.DataTable)">
            <summary>
            普通方式获取单据编号
            </summary>
            <param name="dataEntities"></param>
            <param name="tbRuleEntrys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetCurRuleEntry(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Data.DataTable)">
            <summary>
            获取当前编码规则设置内容
            </summary>
            <param name="specificCodeRule"></param>
            <param name="dataobj"></param>
            <param name="tbRuleEntrys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.BatchGetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            批量获取单据编号
            </summary>
            <param name="dataEntities"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,System.String)">
            <summary>
             获取单据编码
            </summary>
            <param name="dataEntities"></param>
            <param name="isUpdateMaxNum">是否更新最大值</param>
            <param name="specifiedCodeRule">编码ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.HasDefaultBillCodeRule(System.String)">
            <summary>
            判断单据是否有设置默认的编码规则
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.UpdateBillCode(Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject)">
            <summary>     
            更新最大流水值表的单据模板字段
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(System.Data.DataRow[],Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Decimal)">
            <summary>
            生成单据编号
            NOTE: 这里没有传入实体的数据, 故仅生成结构为 固定文本 + 流水号 格式的编码
            </summary>
            <param name="codeRuleEntrys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Data.DataRow[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            生成单据编号
            NOTE： 单据编号字段为空时,不去回填到dataEntity中
            </summary>
            <param name="dataEntity"></param>
            <param name="billNoField"></param>
            <param name="codeRuleEntrys"></param>
            <param name="dctInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Data.DataRow[],Kingdee.BOS.App.Core.BillCodeRule.CodeRuleSeqProject,System.Decimal)">
            <summary>
            生成单据编号
            NOTE： 单据编号字段为空时,不去回填到dataEntity中
            </summary>
            <param name="dataEntity"></param>
            <param name="billNoField">单据编号字段</param>
            <param name="codeRuleEntrys"></param>
            <param name="seqField"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetBillNoByCheckScope(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String@)">
            <summary>
            超过长度自动截取
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.IsUniqueBillNo(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            检查保存校验器是否配置了单据编码唯一校验
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.ReCheckExistBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            按照编码依据检查编码是否重复（废弃）
            </summary>
            <param name="dataEntity"></param>
            <param name="billNoField"></param>
            <param name="billNo"></param>
            <param name="codeByFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.ReCheckExistBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            再次判断数据库中是否存在编号(弃用,仅支持基础资料)
            </summary>
            <param name="dataEntity"></param>
            <param name="billNoField"></param>
            <param name="billNo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.CheckBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String[])">
            <summary>
            检查实体是否需要重新获取编码
            </summary>
            <param name="dataEntities"></param>
            <param name="billNoField"></param>
            <param name="billNos">返回编码结果值，需要重新编码的则置空，否则填充传入的实体的编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillCodeRuleService.GetCodeRuleByBillType(Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取单据类型中配置的编码规则ID
            </summary>
            <param name="billTypeField"></param>
            <param name="dyObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetCurrentUserBusinessChartList(Kingdee.BOS.Context)">
            <summary>
            获取当前用户业务图表数据
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.CopyBusinessChartForUser(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            初始化当前用户业务图表数据
            根据用户所在的角色
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.CreateBusinessChartDynamicObject(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            创建业务图表实体
            </summary>
            <param name="ctx"></param>
            <param name="businessChartDbObj"></param>
            <param name="curIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetBusinessChartMetaData(Kingdee.BOS.Context)">
            <summary>
            获得业务图表元数据
            </summary>
            <param name="ctx">当前上下文</param>
            <returns>业务图表元数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetBusinessChartData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            获取业务图表的数据
            </summary>
            <param name="ctx"></param>
            <param name="businessChartObj">业务图表信息数据</param>
            <param name="sourceInfo">业务图表数据源编程模型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetBusinessChartData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.CommonFilter.FilterObject,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            获取业务图表的数据
            </summary>
            <param name="ctx"></param>
            <param name="businessChartObj">业务图表信息数据</param>
            <param name="sourceInfo">业务图表数据源编程模型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetCachedFilterMetaData(Kingdee.BOS.Context)">
            <summary>
            GetCachedFilterMetaData
            </summary>
            <param name="ctx">上下文</param>
            <returns>FilterMetaData</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.InitFieldList(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.CommonFilter.FilterObject,Kingdee.BOS.Context)">
            <summary>
            初始化字段list
            </summary>
            <param name="billBusinessInfo"></param>
            <param name="filterObject"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetFlexPropAppearance(Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Core.Metadata.FormMetadata}@)">
            <summary>
            获取弹性域纬度实际指向的外观类；需要据此外观类构建值编辑器
            </summary>
            <param name="selectField">弹性域纬度描述，如辅助属性.颜色</param>
            <param name="relateFlexField">弹性域关联字段，如单据上的辅助属性</param>
            <param name="ctx">上下文</param>
            <param name="dctFlexFormMetadata">缓存，缓存弹性域元数据，避免重复加载</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.AddFilterField(Kingdee.BOS.Core.CommonFilter.FilterObject,Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            添加字段到可选显示隐藏列集合
            </summary>
            <param name="selectField">待添加字段</param>
            <param name="fieldappearance">字段对应的模版</param>
            <param name="refFieldAppearance">弹性域字段纬度对应的实际模版</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.GetFilterString(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取图表【数据范围】界面的过滤条件
            </summary>
            <param name="businessChartObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessChartService.IsExistsSameName(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            是否存在相同的图表名字
            </summary>
            <param name="ctx"></param>
            <param name="chartName"></param>
            <param name="pkid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadSingle(System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            加载单个数据包
            <p>应用场景：</p>
            1. 获取单据或基础资料数据；
            2. loadReferenceData为true，将自动填写基础数据
            3. 该方法只会默认清除表头字段脏标记
            </summary>
            <param name="pk">主键</param>
            <param name="type">数据类型</param>
            <param name="loadReferenceData">是否需要加载基础数据包</param>
            <param name="option">加载选项</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadSingleNoDirty(System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            加载单个数据包，无数据脏标记
            <p>应用场景：</p>
            1. 单据界面加载数据；
            2. 自动填写基础数据
            3. 自动清除数据脏标记，得到一个没有任何脏标记的数据包
            </summary>
            <param name="pk">主键</param>
            <param name="type">ORM动态实体模型</param>
            <param name="option">加载选项</param>
            <returns>业务单据ORM动态实体数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadSingle(System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Boolean,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            加载单个数据包
            <p>应用场景：</p>
            1. 获取单据或基础资料数据；
            2. loadReferenceData为true，将自动填写基础数据
            3. 该方法只会默认清除表头字段脏标记
            </summary>
            <param name="pk">主键</param>
            <param name="type">数据类型</param>
            <param name="loadReferenceData">是否需要加载基础数据包</param>
            <param name="option">加载选项</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadSingle(System.Object,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.OQLFilter,System.Boolean)">
            <summary>
            获取动态实体。 若主键在过滤条件下存在，返回该实体，如果不存在，返回null
            </summary>
            <param name="pk"></param>
            <param name="type"></param>
            <param name="loadReferenceData"></param>
            <param name="oFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadBillTypePara(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Boolean)">
            <summary>
            返回单据类型参数
            </summary>
            <param name="businessInfo">单据类型参数表单逻辑元数据</param>
            <param name="billTypeId"></param>
            <param name="bRunTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadWithCache(System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            读取数据，并允许使用缓存。
            </summary>
            <param name="pkArray">主键数组。</param>
            <param name="dt">实体类型。</param>
            <param name="loadReferenceData">是否加载引用数据。</param>
            <param name="option">自定义选项。</param>
            <returns>一批实体对象。不保证给定的主键都能够找到对应的实体。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.Load4Private(System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean)">
            <summary>
            按主键查询数据，是私有数据加载，缓存不共享，用完释放
            </summary>
            <param name="pkArray"></param>
            <param name="type"></param>
            <param name="loadReferenceData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.TakeFilterString(Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            获得过滤条件
            </summary>
            <param name="oFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadPkValues(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            load pk values
            </summary>
            <param name="businessInfo"></param>
            <param name="oFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.GetDynamicObjectTypeUseSelector(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo})">
            <summary>
            get DynamicObjectType use Selector;
            根据selector构造动态实体类型
            </summary>
            <param name="businessInfo"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadForCvp(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            获取分页的单据（供Cvp使用）
            </summary>
            <param name="businessInfo">业务对象业务元数据</param>
            <param name="queryParemeter">查询参数（如要分页：则至少需要传入StartRow、Limit、OrderByClauseWihtKey，指定SelectItems减少数据量）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadWithCache(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            load data
            </summary>
            <param name="businessInfo"></param>
            <param name="selector"></param>
            <param name="oFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.GetBusinessInfo(System.String)">
            <summary>
            get bussiness info
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.Load(System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            load by formid
            </summary>
            <param name="formId"></param>
            <param name="selector"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadWithCache(System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            load from cache
            </summary>
            <param name="formId"></param>
            <param name="selector"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.Load(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Boolean)">
            <summary>
            加载业务数据；专供加载基础资料引用数据使用
            </summary>
            <param name="type">业务对象动态模型:完整版/节选版均可</param>
            <param name="queryParemeter">取数参数</param>
            <param name="loadReferenceData">是否读取引用的数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadFromCache(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Boolean)">
            <summary>
            加载业务数据；专供加载基础资料引用数据使用
            </summary>
            <param name="type">业务对象动态模型:完整版/节选版均可</param>
            <param name="queryParemeter">取数参数</param>
            <param name="loadReferenceData">是否读取引用的数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataReader.LoadPkValues(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            加载内码集合
            </summary>
            <param name="type"></param>
            <param name="queryParemeter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetPKIDString(System.Object[],Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType)">
            <summary>
            获取主键字符串
            </summary>
            <param name="pkIds"></param>
            <param name="pkFieldType"></param>
            <param name="pkType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.AddAssistData(Kingdee.BOS.Context,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            自动添加辅助资料
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="pkIDs"></param>
            <param name="orgIDs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.BatchGetBillNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            批量获取单据编号
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.AsyncComputeRepairNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Int64)">
            <summary>
            异步计算补号
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="objList"></param>
            <param name="operationId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetBillNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取单据编号
            </summary>
            <param name="dt"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetBillNoByField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.List{System.String})">
            <summary>
            获取单据编号（主要插件调用，用于支持多个单据编号字段）
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="isUpdateMaxNum"></param>
            <param name="specifiedCodeRule"></param>
            <param name="specifiedField"></param>
            <param name="lstOriBillNo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetBillNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,System.String)">
            <summary>
            获取单据编号
            </summary>
            <param name="ctx">Context</param>
            <param name="info">BusinessInfo</param>
            <param name="dataEntities">数据包</param>
            <param name="isUpdateMaxNum">是否更新最大值</param>
            <param name="specifiedCodeRule">指定编码规则</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetBillNo(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取单据编号
            </summary>
            <param name="ctx"></param>
            <param name="formID"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetListBillNO(Kingdee.BOS.Context,System.String,System.Int32,System.String,System.Object)">
            <summary>
            获得单据编号批量接口
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="listCount"></param>
            <param name="sRuleID"></param>
            <param name="oBillTypeValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetListBillNO(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Int32,System.String,System.String)">
            <summary>
            获得单据编号批量接口
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="formId"></param>
            <param name="count"></param>
            <param name="billCodeRuleId"></param>
            <param name="billTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetNextBillNoByRepair(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.Collections.Generic.List{System.String})">
            <summary>
            通过补号获得一个单据编号
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="ruleID"></param>
            <param name="lstOriBillNo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetNextBillNoByRepair(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            通过补号获得一个单据编号
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="ruleID">编码规则ID</param>
            <param name="lstOriBillNo"></param>
            <param name="billNoFieldName">单据编码字段key</param>
            <param name="tableName">对应数据库表名</param>
            <returns>补号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateMaxSerialNO(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            更新最大流水号
            </summary>
            <param name="ctx">Context</param>
            <param name="info">BusinessInfo</param>
            <param name="dataEntities">数据包</param>
            <param name="ruleID">编码规则ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetUpdateMaxNoList(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            获取当前数据更新最大值以及原始值列表
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="ruleID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetCodeRuleFieldList(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取编码规则绑定的元素列表
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.DeleteBillNoInCache(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            补号成功后,从缓存表中移除此条数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetBillTypeInfos(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
             根据formID和单据类型参数值获取对应的单据类型列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">单据本身的formID,如应付单就用AP_payable</param>
            <param name="fieldName">参数的字段名</param>
            <param name="fieldvalue">参数值</param>
            <param name="paraFormID">参数的FormID,动态表单的那个(继承于BOS_BILLTYPEPARAMODEL）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetConsoleSubSysIds(Kingdee.BOS.Context)">
            <summary>
            获取发布主控台的单据和基础资料对应的子系统Id列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            存储业务数据
            <p>应用场景：</p>
            1. 直接存储强命名实体对象到数据库，无对应的单据模型；
            2. 不触发保存数据检查、插件
            3. 不会自动填写主键信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="dataEntities">待存储的ORM动态实体数据集合</param>
            <param name="option"></param>
            <returns>存储成功后重新加载的ORM动态实体数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.Delete(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objID"></param>
            <param name="dynamicObjectType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ClearCache(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            清除业务数据缓存
            </summary>
            <param name="ctx"></param>
            <param name="dt"></param>
            <param name="oids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ClearCache(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            按Key移除缓存
            </summary>
            <param name="region"></param>
            <param name="area"></param>
            <param name="removeKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ClearRegion(System.String,System.String)">
            <summary>
            按Region移除缓存
            </summary>
            <param name="region"></param>
            <param name="area"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.NoticeMcToUpdateCacheByKey(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            通知管理中心更新其他APP站点缓存
            </summary>
            <param name="region">缓存段</param>
            <param name="area">缓存区</param>
            <param name="removeKeys">要移除的缓存Keys</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.NoticeMcToUpdateCacheByRegion(System.String,System.String)">
            <summary>
            通知管理中心更新其他APP站点缓存
            </summary>
            <remarks>
            更新整个region
            </remarks>
            <param name="region">缓存段</param>
            <param name="area">缓存区</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.NoticeMcToUpdateCache(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            通知管理中心更新其他APP站点缓存
            </summary>
            <param name="cacheItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.NoticeMcToUpdateCacheNoValidate(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            通知管理中心更新其他APP站点缓存,没有校验，强制通知更新
            </summary>
            <param name="cacheItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetConsoleSubSystem(Kingdee.BOS.Context)">
            <summary>
            获取发布主控台的单据和基础资料对应的子系统Id列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormRecordsCount(Kingdee.BOS.Context,System.String)">
            <summary>
            获得基础资料或者单据的记录数
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.NeedGetRecordsCount(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            业务对象是否需要检查记录数量：无业务数据关联的，如动态表单，无从检查
            </summary>
            <param name="formMetadata"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFileServerUrl(Kingdee.BOS.Context)">
            <summary>
            获取文件服务器地址
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormGroupLevelTableName(Kingdee.BOS.Context,System.String)">
            <summary>
            获取分组级次信息表名
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormGroupLevelTableName(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取分组级次信息表名
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName">分组表名</param>
            <param name="tempTableName">临时表名</param>
            <returns>分组级次信息表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormGroupLevelTableNameV2(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取分组级次信息表名（性能优化）
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName">分组表名</param>
            <param name="tempTableName">临时表名</param>
            <returns>分组级次信息表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormGroupLevelTableById(Kingdee.BOS.Context,System.String,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取分组级次信息表名（性能优化，通过计算id，而不是整表计算）
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <param name="tempTableName"></param>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.AddFormGroupLevel(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            新增分组级次信息
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateFormGroupLevel(Kingdee.BOS.Context,System.String)">
            <summary>
            更新分组级次信息表
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateFormGroupLevelByGroupId(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据分组编号更新分组级次信息
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.DeleteFormGroupLevelByGroupId(Kingdee.BOS.Context,System.String,System.Object[])">
            <summary>
            根据分组编号删除分组级次信息
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <param name="objID"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFormGroups(Kingdee.BOS.Context)">
            <summary>
            获取分组数据
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetFluidSettingsId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FluidSettingArgs)">
            <summary>
            获取流式配置的FID
            </summary>
            <param name="ctx"></param>
            <param name="args">获取流式配置参数对象</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.BusinessDataService.GetFormAllLayoutView(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FluidFormArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetMasterId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String)">
            <summary>
            得到单据体MasterId
            </summary>
            <param name="ctx"></param>
            <param name="bInfo"></param>
            <param name="entryKey">单据体实体标识。</param>
            <param name="entryId">单据体分录内码。</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.LoadFormGroupList(Kingdee.BOS.Context,System.String)">
            <summary>
            根据分组字段表名获取分组队列
            </summary>
            <param name="ctx"></param>
            <param name="groupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ClearRepairNoPool(Kingdee.BOS.Context,System.String)">
            <summary>
            按照编码规则清除补号池内的数据
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetAttachmentListFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Attachment.AttachmentKey,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取列表的过滤条件
            </summary>
            <param name="ctx"></param>
            <param name="attachmentKey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetAllAttachFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Attachment.AttachmentKey,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            返回过滤条件过滤当前单据所有附件，包括单据头单据体。
            </summary>
            <param name="ctx"></param>
            <param name="attachmentKey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetInterIds(Kingdee.BOS.Context,Kingdee.BOS.Core.Attachment.AttachmentKey,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            传入登录上下文对象、附件参数及业务对象元数据，判断是否受基础资料控制策略管控，
            返回需要加载附件的单据内码集合，包括附件参数指定的单据、创建组织基础资料的附件。
            </summary>
            <param name="ctx">登录上下文对象。</param>
            <param name="attachmentKey">附件参数。</param>
            <param name="info">业务对象元数据。</param>
            <returns>返回需要加载附件的单据内码集合，包括附件参数指定的单据、创建组织基础资料的附件。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetCreateOrgBillIds(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            传入登录上下文环境、基础资料业务元数据信息、基础资料数据包的masterId字典，获取主基础资料的内码集合。
            同时这也是本应该的变更后的MasterId，但是因为单据头的实际没有更新，所以重新计算获取。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="info">基础资料业务元数据信息。</param>
            <param name="mDataObjs">基础资料数据包的masterId字典。</param>
            <returns>获取主基础资料的内码集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.TryGetStatusByFuncDataAuth(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String,Kingdee.BOS.Core.Metadata.OperationStatus@)">
            <summary>
            传入业务元数据管理对象及单据主键值，验证用户是否具备编辑或查看操作权限，以及进行数据验权，返回是否有权及有权的操作状态。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="businessInfo">业务元数据管理对象。</param>
            <param name="parentFormId">父业务对象唯一标识，适应于基础资料按F8验权。</param>
            <param name="pkId">主键值。</param>
            <param name="status">返回的操作状态。</param>
            <returns>返回是否有权。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.DoAuthIsSameModifyMaker(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            传入业务元数据管理对象及单据内码，验证并返回创建人与当前用户是否一致。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="businessInfo">业务元数据管理对象。</param>
            <param name="pkId">单据内码。</param>
            <returns>返回创建人与当前用户是否一致。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetCreaterField(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取单据头或子单据头上的创建人字段。
            </summary>
            <param name="billInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.LoadFilterSymbolList(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取具体分组下的过滤符号集合
            </summary>
            <param name="ctx"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.LoadPresetFilter(Kingdee.BOS.Context)">
            <summary>
            获取系统预置过滤比较符合集
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.InsertSymbolGroup(Kingdee.BOS.Context,System.Int32[],System.Int32)">
            <summary>
            新增自定义过滤比较符分组
            </summary>
            <param name="ctx"></param>
            <param name="insertIds"></param>
            <param name="groupId">分组Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateSymbolGroup(Kingdee.BOS.Context,System.Int32[],System.Int32)">
            <summary>
            修改自定义过滤比较符分组(分组Id不变)
            </summary>
            <param name="ctx"></param>
            <param name="updateIds"></param>
            <param name="updateGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ClearFilterMetaDataCache(Kingdee.BOS.Context)">
            <summary>
            清除过滤元数据缓存
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.DeleteSymbolGroup(Kingdee.BOS.Context,System.Int32)">
            <summary>
            删除一个过滤分组
            </summary>
            <param name="ctx"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateGroupTableScheme(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Objects.Group.GroupFieldUpdate})">
            <summary>
            更新分组字段全路径
            </summary>
            <param name="ctx"></param>
            <param name="groupUpdateList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateGroupFieldPathData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Objects.Group.GroupFieldUpdate},Kingdee.BOS.Core.Objects.Group.EnumUpdateField)">
            <summary>
            更新分组字段全路径
            </summary>
            <param name="ctx"></param>
            <param name="groupUpdateList"></param>
            <param name="updateField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.IsHaveChildGroup(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            当前元数据下，所有分组字段是否有子分组
            </summary>
            <param name="context"></param>
            <param name="businessInfo"></param>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.IsUsedGroupFieldForFlex(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.GroupField,System.String)">
            <summary>
            分组字段是否被弹性域
            </summary>
            <param name="context"></param>
            <param name="businessInfo"></param>
            <param name="groupField"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetUsedGroupFieldForFlex(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.GroupField,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取分组字段是否被弹性域使用的分组内码
            </summary>
            <param name="context"></param>
            <param name="businessInfo"></param>
            <param name="groupField"></param>
            <param name="groupIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.UpdateRepairePool(Kingdee.BOS.Context,System.String)">
            <summary>
            更新补号池
            </summary>
            <param name="ctx"></param>
            <param name="ruleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetDefaultBookInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取默认账簿逻辑
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.IsListQueryCtrlExcept(Kingdee.BOS.Context,System.String)">
            <summary>
            是否是列表限制查询范围例外对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.GetSubSysIdByObjectId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取单据发布菜单子系统
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataService.ChangeBaseDataSeqType(Kingdee.BOS.Context,System.String)">
            <summary>
            切换为单类别基础资料
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">根节点的formId（非扩展）</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.Drivers.IOrmTransaction,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存基础数据,并清除缓存
            </summary>
            <param name="dataEntities"></param>
            <param name="tran"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.SaveBill(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.Drivers.IOrmTransaction,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存单据(不清除缓存)
            </summary>
            <param name="dataEntities"></param>
            <param name="tran"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存基础数据,并清除缓存
            </summary>
            <param name="dataEntities"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.Save(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存数据,根据businessinfo判断是否基础资料，决定是否清除缓存
            </summary>
            <param name="businessinfo"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.ClearCacheByPrimaryKey(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            保存场景下替代ClearCache的清理缓存方法
            </summary>
            <remarks>
            保存时不应该直接清除缓存，而是需要判断单据是否新增状态，新增无需清除缓存
            实际上清除缓存是有开销的，特别按主键清除，必须要清除所有按片段加载的缓存对象，这种对象有可能非常多
            </remarks>
            <param name="dt"></param>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.DeleteFormGroupRecursive(System.String,System.Object)">
            <summary>
            删除分组节点，及所有子孙节点
            </summary>
            <param name="groupId"></param>
            <param name="objID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetFormGroupLevelTableName(System.String)">
            <summary>
            根据分组表名获取分组级次信息表
            如果没有分组级次信息表则直接创建并填充数据
            </summary>
            <param name="groupTableName">分组级次信息表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetFormGroupLevelTableName(System.String,System.String)">
            <summary>
            获取分组级次信息表名
            </summary>
            <param name="groupTableName">分组表名</param>
            <param name="tempTableName">临时表名</param>
            <returns>分组级次信息表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetFormGroupLevelTableById(System.String,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            通过分组id获取分组汇总临时表
            </summary>
            <param name="groupTableName"></param>
            <param name="tempTableName"></param>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetFormGroupLevelTableNameV2(System.String,System.String)">
            <summary>
            获取分组级次信息表名（性能优化）
            </summary>
            <param name="groupTableName">分组表名</param>
            <param name="tempTableName">临时表名</param>
            <returns>分组级次信息表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.BachAddToFormGroupJobTable(Kingdee.BOS.Core.Enums.BOSEnums.FormGroupUpdateType,System.String,System.Object[])">
            <summary>
            批量添加分组级次数据
            </summary>
            <param name="updateType"></param>
            <param name="groupTableName"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.UpdateScheduleReady(Kingdee.BOS.Context)">
            <summary>
            设置更新分组级次的状态为准备（默认是停止，增加数据以后设置为准备）
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.AddFormGroupLevel(System.String,System.String)">
            <summary>
            新增分组级次信息
            </summary>
            <param name="groupTableName"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.UpdateFormGroupLevel(System.String)">
            <summary>
            更新分组级次信息
            </summary>
            <param name="groupTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.UpdateFormGroupLevelByGroupId(System.String,System.String)">
            <summary>
            根据分组编号更新单条分组级次信息
            </summary>
            <param name="groupTableName"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.DeleteFormGroupLevelByGroupId(System.String,System.Object[])">
            <summary>
            根据分组编号删除分组级次信息
            </summary>
            <param name="groupTableName"></param>
            <param name="objID"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetGroupLevelTableName(System.String)">
            <summary>
            获取分组级次信息表名
            </summary>
            <param name="groupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetAddGroupSQL(System.String,System.String)">
            <summary>
            更新分组级次信息表中分组列
            </summary>
            <param name="groupId"></param>
            <param name="groupLevelTableName"></param>
            <param name="sbSql"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.CreateCustomTable(System.String,System.String,System.Boolean)">
            <summary>
            创建自定义分组表
            </summary>
            <param name="groupTableName"></param>
            <param name="groupLevelTableName"></param>
            <param name="isRefesh"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.BuildCreateGroupSql(System.String,System.Int32)">
            <summary>
            根据分组级次数量构建动态添加字段语句
            </summary>
            <param name="groupLevelTableName"></param>
            <param name="iCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetGroupLevelCount(System.String)">
            <summary>
            获取分组级次数量
            </summary>
            <param name="groupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetIsExistTable(System.String)">
            <summary>
            判断数据表示否已存在
            </summary>
            <param name="groupLevelTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetCustomGroupData(System.String,System.String)">
            <summary>
            获取自定义分组数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetGroupDataOracle(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            ORACLE返回必要的分组数据
            </summary>
            <param name="groupTableName"></param>
            <param name="groupIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetGroupDataSqlServer(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            SQL Server返回必要的分组数据
            </summary>
            <param name="groupTableName"></param>
            <param name="groupIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetPrimaryKeyName(System.String)">
            <summary>
            获取主键名称
            </summary>
            <param name="strTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetIndexName(System.String)">
            <summary>
            构造索引名称
            </summary>
            <param name="strTableName">表名</param>
            <returns>索引名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.ClearBaseDataRuleCache(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            清除基础资料数据规则缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessDataWriter.GetTableName(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            获取实体所映射的物理表名称
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.AutoBackupSchedule">
            <summary>
            执行计划：定期自动备份业务流程实例
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.AutoBackupSchedule.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            自动计划，执行入口
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.BuildBFTrackerTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.LoadInstDatasWithHis(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisArgs)">
            <summary>
            合并正式表、历史表、归档表，读取指定单据的业务流程数据，输出到会话级临时表
            </summary>
            <param name="args">参数对象，含业务单据分录表格编码、内码集合</param>
            <returns>
            输出多个会话级临时表，表结构分别与t_BF_Instance、t_BF_InstanceEntry、t_BF_InstanceAmount相同；
            </returns>
            <remarks>
            因为输出的是会话级临时表，请在调用本函数之前，
            使用 using (Kingdee.BOS.App.Data.SessionScope scope = new SessionScope()) 创建会话空间，
            并在关闭会话空间前，通过 DBUtils.DropSessionTemplateTable() 删除各会话临时表；
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.LoadInstancesByEntityId(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.LoadInstancesByEntityIdArgs)">
            <summary>
            根据实体内码读取其所在的业务流程实例
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.LoadSubFlowInstance(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据流程版本找出关联的流程实例
            </summary>
            <param name="flowVersionId">子流程版本Id</param>
            <param name="fSourceId">来源流程实例</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.IsPush(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.IsPushArgs)">
            <summary>
            判断指定行数据是否下推了其他数据
            </summary>
            <param name="ctx"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.ChangeInstancesVersion(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ChangeInstancesVersionArgs)">
            <summary>
            指定业务流程实例，切换到新版本
            </summary>
            <param name="ctx"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.PushBusinessFlow(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.PushBusinessFlowArgs)">
            <summary>
            推进单据的业务流程，发送推进消息
            </summary>
            <param name="ctx"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.BackUpInstance(Kingdee.BOS.Context)">
            <summary>
            归档业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.BillIsPush(Kingdee.BOS.Context,System.String,System.String,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            单据是否下推过，返回下推过的单据内码，没有返回的内码说明没有下推过
            </summary>
            <param name="formId">单据formId</param>
            <param name="refParentEnityKey">关联父实体key</param>
            <param name="billIdEntryIds">单据内码和关联父实体内码集合</param>
            <param name="exceptTargetTbNames">需要排除的目标单据表编码和FSeq集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.GetTrackNodes(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,System.Collections.Generic.List{System.Int64}},System.Boolean)">
            <summary>
            得到过滤方案上下查表名和内码
            </summary>
            <param name="ctx"></param>
            <param name="dicTableDefineIds"></param>
            <param name="isTrackDown"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.GetExistTableDefinition(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获得现有的表定义
            </summary>
            <param name="ctx">登录上下文</param>
            <param name="formId">表单内码</param>
            <param name="entityKey">实体标识</param>
            <returns>现有的表定义</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataService.GetTargetEntityInfo(Kingdee.BOS.Context,System.String,System.String,System.Int64[],System.String)">
            <summary>
            获取流程实例数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">当前单据唯一标识</param>
            <param name="entityKey">单据体标识，可以为空，为空时表示整单查询</param>
            <param name="ids">entityKey不为空时为分录内码，否知为单据内码</param>
            <param name="targetFormId">指定关联查询的业务对象，可以为空，为空是表示查询所有关联的单据</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader._masterIdFields">
            <summary>
            业务流程实例临时表的字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader._formallyInstanceType">
            <summary>
            取自于正式表的流程实例跟踪表实体模型（不取历史数据）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.BuildBFTrackerTempTable(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs)">
            <summary>
            传入检索单据的数据主键，请求创建其业务流程推进横向表；每列代表了一种单据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.LoadInstancesByEntityId(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.LoadInstancesByEntityIdArgs)">
            <summary>
            根据实体内码读取其所在的业务流程实例
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.LoadSubFlowInstance(System.String,System.String)">
            <summary>
            根据流程版本找出关联的流程实例
            </summary>
            <param name="flowVersionId">子流程版本Id</param>
            <param name="fSourceId">来源流程实例</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.IsPush(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.IsPushArgs)">
            <summary>
            判断指定的行数据是否已经下推过其他单据
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.SearchCanPushEntityIds(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            搜索单据数据包中，可能有下游单据的实体行
            </summary>
            <param name="info"></param>
            <param name="activeRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.EntityRowIsPush(System.String,System.String,System.Int64)">
            <summary>
            判断单据体行是否有下游单据
            </summary>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.EntityRowsIsPush(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}})">
            <summary>
            判断指定的实体与数据行，是否有任一存在下游单据
            </summary>
            <param name="dctTableAndIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.GetBFTbNumber(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            得到业务流程实例所有表名编码
            </summary>
            <param name="context"></param>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.BuildInstanceType(System.String,System.String,System.String)">
            <summary>
            构建基于临时表的业务流程实例模型
            </summary>
            <param name="instTable">流程实例主表</param>
            <param name="entryTable">流程实例路线从表</param>
            <param name="amountTable">流程实例路线携带量子表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.InsertIdsToTempTable(System.String,System.Array)">
            <summary>
            把内码（long）插入到临时表
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataReader.CreateMasterIdTmpTable">
            <summary>
            创建临时表，用以存储待处理的业务流程MasterId
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.ChangeInstancesVersion(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ChangeInstancesVersionArgs)">
            <summary>
            对指定的业务流程实例，切换到新版本
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.PushBusinessFlow(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.PushBusinessFlowArgs)">
            <summary>
            指定单据，推进业务流程
            </summary>
            <param name="args"></param>
            <returns></returns>
            <remarks>实际表现，可能是发送一封消息</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.BackUpInstance">
            <summary>
            对业务流程路线进行归档归档：
            </summary>
            <remarks>
            归档方向： 
            1. 读取未归档的业务流程实例，对其路线进行首尾拼接，产生的数据灌入到业务流程跟踪横向表t_bf_InstanceTrack中
               (部分客户的数据，在1年中，业务流程实例膨胀到了惊人的700W条，存储空间达到10多G，如此大的数据量，构建InstanceTrack是巨大的浪费，暂停)
            2. 把长时间未使用的业务流程实例信息，存储历史表格中，避免占用数据空间（）
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadFlowElement(System.String)">
            <summary>
            根据内码加载流程图版本
            </summary>
            <param name="flowId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.GetTargetLinkFromMe(Kingdee.BOS.Core.BusinessFlow.FlowElement,System.String)">
            <summary>
            在流程图中，寻找从本单出发的全部路线
            </summary>
            <param name="flow"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadNodeBusinessInfo(Kingdee.BOS.Core.BusinessFlow.NodeElement)">
            <summary>
            读取流程图节点指向的单据元数据；如果节点为协作流程图，则读取其入口单据的元数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadBusinessInfo(System.String)">
            <summary>
            读取单据的元数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadBillDataObject(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[])">
            <summary>
            加载单据的数据包
            </summary>
            <param name="info"></param>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadTableDefine(System.String,System.String)">
            <summary>
            获取单据实体的表格定义对象
            </summary>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.BuildNodeMapBusinessInfo(Kingdee.BOS.Core.BusinessFlow.FlowElement)">
            <summary>
            把流程图展开，构建出其各个节点与业务单据之间的关系图
            </summary>
            <param name="flowElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.BuildChangeFlowVersionTasks(Kingdee.BOS.Core.BusinessFlow.FlowElement,Kingdee.BOS.Core.BusinessFlow.FlowElement,System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo},System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ChangeInstancesVersionResult@)">
            <summary>
            生产更新流程图版本的任务
            </summary>
            <param name="oldFlowElement">旧版本</param>
            <param name="newFlowElement">新版本</param>
            <param name="oldFlowNodeInfos">旧版本单据</param>
            <param name="newFlowNodeInfos">新版本单据</param>
            <param name="instances">待切换版本实例</param>
            <param name="operateResult">切换结果</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.TryAddNewTask(System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo},System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo},System.Collections.Generic.List{Kingdee.BOS.Core.BusinessFlow.NodeElement},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance,Kingdee.BOS.BusinessEntity.BusinessFlow.Id,System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask}@,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ChangeInstancesVersionResult@)">
            <summary>
            针对最终节点，尝试添加切换版本的任务;
            </summary>
            <param name="newFlowNodeInfos">新版本流程节点与元数据的映射</param>
            <param name="newFlowLastNodes">新版本流程图的终点</param>
            <param name="instance">实例数据包</param>
            <param name="lastNodeId">实例当前的节点</param>
            <param name="tasks">任务集合</param>
            <param name="operateResult">处理结果</param>
            <returns>如果符合切换版本的条件，则添加任务</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.BuildOperateResult(System.Object,System.Boolean,System.String)">
            <summary>
            生成一条提示信息
            </summary>
            <param name="pkValue"></param>
            <param name="success"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.ExecuteChangeFlowVersionTasks(System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask},System.String,System.String)">
            <summary>
            执行更新业务流程图版本的任务
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.LoadInstances(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            读取业务流程实例集合;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.SaveInstances(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            保存业务流程实例，更新业务流程状态
            </summary>
            <param name="ctx"></param>
            <param name="instances"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.BuildFlowMapDataEntities(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.BusinessFlowField})">
            <summary>
            构建每行数据选用的业务流程对应关系表
            </summary>
            <param name="dataEntitySet"></param>
            <param name="bfFields"></param>
            <returns></returns>
            <remarks>关注纬度：流程字段、数据行、单据内码、选用流程</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.ParseReceiverIds(Kingdee.BOS.Core.BusinessFlow.MessageElement)">
            <summary>
            解析出消息中包含的接收用户列表；列表没个元素，为一个用户Id
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.CreateExpressionContext(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            创建计算表达式需要的上下文对象
            </summary>
            <param name="activeRow"></param>
            <param name="entityKey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.GetUserMembersByRole(System.String)">
            <summary>
            根据角色获取用户
            </summary>
            <param name="ctx"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.PushOneBuinessFlow(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Linq.IGrouping{System.String,Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity}@)">
            <summary>
            推进某一流程
            </summary>
            <param name="info"></param>
            <param name="formId"></param>
            <param name="flowMaps"></param>
            <param name="messageEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.CreateMessageEntities(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity,Kingdee.BOS.Core.BusinessFlow.MessageElement,System.Collections.Generic.List{System.Int64})">
            <summary>
            创建待发送的消息
            </summary>
            <param name="formId"></param>
            <param name="pkValue"></param>
            <param name="title"></param>
            <param name="content"></param>
            <param name="receiverIds">接收用户列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowDataWriter.SendMessages(System.Collections.Generic.IEnumerable{Kingdee.BOS.BusinessEntity.BusinessFlow.MessageEntity})">
            <summary>
            发送消息
            </summary>
            <param name="messageEntities"></param>
            <remarks>实际只需要保存消息进数据库即可</remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo">
            <summary>
            流程图节点与单据元数据之间的映射关系
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo.Node">
            <summary>
            流程图节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo.BusinessInfo">
            <summary>
            对应的单据元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo.Entity">
            <summary>
            对应的单据体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.NodeMapBusinessInfo.TableName">
            <summary>
            采用的表格名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask">
            <summary>
            需切换流程图版本的任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask.FormId">
            <summary>
            单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask.BusinessInfo">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask.Entity">
            <summary>
            业务流程控制主实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask.TableName">
            <summary>
            物理表格名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ChangeFlowVersionTask.EntityIds">
            <summary>
            待切换流程版本的数据内码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity">
            <summary>
            数据结构：维护字段、实体行、采用的业务流程之间的关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.#ctor(Kingdee.BOS.Core.Metadata.FieldElement.BusinessFlowField,Kingdee.BOS.Core.ExtendedDataEntity,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="field"></param>
            <param name="dataEntity"></param>
            <param name="flowId"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.BusinessFlowField">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.ExtDataEntity">
            <summary>
            实体行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.BillId">
            <summary>
            单据数据主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.BillIndex">
            <summary>
            实体行所在的单据索引；同一单据的全部实体行，单据索引相同
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.FlowMapDataEntity.FlowId">
            <summary>
            流程
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack">
            <summary>
            业务流程跟踪时的反写处理控制组件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1">
            <summary>
            记录业务流程跟踪信息的组件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1._dctFlows">
            <summary>
            业务流程图元数据缓存字典
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1._freeFlowInstanceType">
            <summary>
            自由流程所采用的流程实例跟踪表实体模型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1._freeFlowTrackerType">
            <summary>
            自由流程所采用的流程路线跟踪表实体模型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SnapshotHis">
            <summary>
            删除时的反写快照，给反写日志使用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Draft(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            处理关联数据：包括写业务跟踪信息、执行反写等
            </summary>
            <param name="linkEntity"></param>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Save(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            处理关联数据：包括写业务跟踪信息、执行反写等
            </summary>
            <param name="linkEntity"></param>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Delete(System.String[],Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            删除单据处理：清除业务流程推进路线、撤销反写结果
            </summary>
            <param name="ids">快照id列表</param>
            <param name="dataObjects">待删除、作废数据包；把数据包挂在快照上，方便后续追查</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Audit(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            审核单据
            </summary>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.UnAudit(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            反审核单据
            </summary>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Cancel(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            作废单据
            </summary>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DoWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            反写处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ApplyPrivate(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            对增删改的行，整理出需增删的流程实例、流程路线；在循环检索的过程中，把ArticulationRow对应的源单来源实例也记录下来，反写时用
            </summary>
            <param name="aed"></param>
            <param name="newInstances">输出参数，业务流程新实例集合；在业务流程跨流程图流转时，需新增业务流程实例</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.FillHisAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection})">
            <summary>
            给反写快照填充控制字段反写值
            </summary>
            <param name="wRow"></param>
            <param name="dicAmount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.WriteDataToDB(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            执行写数据库操作
            </summary>
            <param name="newInstances"></param>
            <param name="trackerRows"></param>
            <param name="sheets"></param>
            <param name="snapshot"></param>
            <param name="aed">行增删改列表，据此来进行反写处理</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddBusinessFlowTrackers(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance},Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}}}@)">
            <summary>
            对新增的关联行，创建对应的业务流程实例推进路线；同时把检索出来的源单来源实例记录到ArticulationRow上，反写要用
            </summary>
            <param name="dctNewInstances">新增的流程实例</param>
            <param name="articulationRow"></param>
            <param name="trackerRows">全部路线集合，用于添加新生成的路线</param>
            <param name="dctTrackerKeyByTarget">全部路线字典，按目标单分组：Dicationary(tCId, List(路线))</param>
            <param name="dctTrackerKeyBySource">全部路线字典，按目标单、源单分组；本函数构建 Dicationary(tCId, Dicationary(sCId, List(路线)))</param>
            <remarks>
            处理逻辑：
            1. 寻找直接源单的来源路线；目的是为了获取来源路线的实例，保持路线的连续
            1.1  如果直接源单无来源路线，则直接创建新实例，添加路线
            1.2  来源路线一到多条，说明源单是合并而来的，
            1.2.1   对来源路线按实例进行合并，同一实例的只需要增加一条路线
            1.2.2.  判断本次流程采用的流程图是否发生了改变，
            1.2.2.1    如果改变，跨流程图推进，则创建新实例
            1.2.2.2    如果未改变，则添加路线即可
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.GetNoDupRoutes(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}}}@)">
            <summary>
            获取不重复的源头路线
            </summary>
            <param name="articulationRow"></param>
            <param name="dctTrackerKeyByTarget"></param>
            <param name="dctTrackerKeyBySource"></param>
            <returns></returns>
            <remarks>
            实例在推进到新流程图后，会产生新实例，并复制一条推进到新流程图入口单据的路线；
            这条复制的路线，在继续推进时，需要被剔出，避免多次推进
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.GroupBySCId(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker})">
            <summary>
            把同目标的节点，按照来源进行分组
            </summary>
            <param name="sourceTrackers">TCId相同的一组路线，通常发生在合并后</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.TrackerIsDup(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker)">
            <summary>
            判断两个路线是否重复：上游单据、下游单据完全一致
            </summary>
            <param name="trackerA"></param>
            <param name="trackerB"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddNewBusinessFlowInstance(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance},Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker)">
            <summary>
            添加新的业务流程实例数据，包含一条源单到本单的推进路线
            </summary>
            <param name="newInstances"></param>
            <param name="articulationRow"></param>
            <param name="flowId"></param>
            <param name="sourceTracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.BuildNewInstance(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker)">
            <summary>
            构建一个全新的业务流程实例
            </summary>
            <param name="articulationRow"></param>
            <param name="flowId"></param>
            <param name="sourceTracker"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.BuildNewInstanceKey(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker)">
            <summary>
            构建新实例的Key，Key相同，则不重复创建：SourceId, SCID, TCID, FlowId
            </summary>
            <param name="articulationRow"></param>
            <param name="flowId"></param>
            <param name="sourceTracker"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddSAmountsToTracker(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker,Kingdee.BOS.BusinessEntity.BusinessFlow.SAmounts)">
            <summary>
            给新的路线，添加其控制字段携带值
            </summary>
            <param name="articulationRow"></param>
            <param name="newTracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddSAmountsToInstance(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceEntity,Kingdee.BOS.BusinessEntity.BusinessFlow.SAmounts)">
            <summary>
            给新的路线，添加其控制字段携带值
            </summary>
            <param name="articulationRow"></param>
            <param name="newInstanceRoute"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.LoadTableDefine(System.String)">
            <summary>
            按表格编码，获取对应的单据、实体名
            </summary>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ReadBillIdAndNo(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.Int64@,System.String@)">
            <summary>
            根据单据行关联信息，读取其源单单据内码与编号
            </summary>
            <param name="billData">实体焦点行数据包；需要据此反查出整单数据包</param>
            <param name="billId">输出单据内码</param>
            <param name="billNo">输出单据编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddNewBusinessFlowTracker(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},System.String)">
            <summary>
            在源单的推进路线实例上，增加一条到本单的推进路线
            </summary>
            <param name="trackerRows"></param>
            <param name="articulationRow"></param>
            <param name="flowId"></param>
            <param name="sourceTracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ModifyBusinessFlowTrackers(System.Tuple{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}}@)">
            <summary>
            修改时，修改对应的推进路线携带量
            </summary>
            <param name="deleteItem"></param>
            <param name="rows"></param>
            <param name="migrationInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.NeedModifyArticulationRow(System.Tuple{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.SAmount}@)">
            <summary>
            待修改的钩稽行是否需要更新数据库
            </summary>
            <param name="editItem">待修改的钩稽行</param>
            <param name="aed">输出：携带数值的增删改状况</param>
            <returns></returns>
            <remarks>
            修改的钩稽行，其来源于目标Id已经确定，不需更新;
            需要更新跟踪表的唯一原因：携带数值发生变化
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.AddSAmountToTracker(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker,Kingdee.BOS.BusinessEntity.BusinessFlow.SAmount)">
            <summary>
            增加源单携带量到路线
            </summary>
            <param name="trackerRow"></param>
            <param name="samount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.IsThisTrackerRow(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0})">
            <summary>
            路线匹配钩稽行
            </summary>
            <param name="trackerRow"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.FindTrackerAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker,Kingdee.BOS.BusinessEntity.BusinessFlow.SAmount)">
            <summary>
            从路线中，寻找携带量记录
            </summary>
            <param name="trackerRow"></param>
            <param name="samount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DeleteBusinessFlowTrackers(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTracker}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.Int64}})">
            <summary>
            删除行时，删除对应的推进路线
            </summary>
            <param name="deleteItem"></param>
            <param name="trackerRows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ReadBusinessFlowTrackerRows(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            加载与当前请求相关的数据库中的业务流程推进路线信息；
            主要是加载推进到直接源单的路线；删除的条目，加载到本单的路线
            </summary>
            <param name="aed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.GetNeedLoadTableNumberAndId(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            收集需要加载的目标表格CId
            </summary>
            <param name="aed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SaveBusinessFlowTrackerRows(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            存储业务流程实例信息;包括新增的业务流程实例、推进路线集合
            </summary>
            <param name="trackRows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SaveSnapshot(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            存储本次操作的单据关联关系的快照
            </summary>
            <param name="sheets"></param>
            <param name="snapshot"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.Sync(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            比较当前请求与历史快照，获得增删改列表
            </summary>
            <param name="currentSheets"></param>
            <param name="snapshot"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SyncSheet(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            通过此函数做第一遍的比较，原理是：
            cuurentSheets上的单据如果在快照中未找到，说明此单是新增记录；
            currentSheets在快照上找到，说明是修改记录；
            由于快照根据currentSheets的ID读取，所有不存在快照中有而current中没有的情况。
            </summary>
            <param name="currentSheets">当前打算记录业务流程跟踪信息的最新请求单据集</param>
            <param name="snapshot">原始快照</param>
            <returns>新增和更新的结果集</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SyncRow(Kingdee.BOS.BusinessEntity.BusinessFlow.Rows{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Rows{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            此函数做第二遍比较，原理是和单据相同，但需要注意的是相等判断的细节：
            由于存在多个行公用一个ID（同一个目标行会有多源单行），相等比较时还额外比较勾稽的情况。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SyncArticulationSourceAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.SAmounts,Kingdee.BOS.BusinessEntity.BusinessFlow.SAmounts)">
            <summary>
            比较钩稽条目的数值携带列表，找出携带列表的差异
            </summary>
            <param name="currentSAmounts"></param>
            <param name="historySAmounts"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ValidateArgs(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            检查数据是否合法
            </summary>
            <param name="sheets"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.LoadRefrenceFlows(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            读取数据包所关联的全部业务流程图，填充到类私有变量中
            </summary>
            <param name="sheets"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.NoArticulationRows(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{`0}})">
            <summary>
            没有需要处理的钩稽行
            </summary>
            <returns>如果没有任何增删改的钩稽行，则不用处理业务流程推进信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ValidateStatus(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            验证需要反写的数据包状态是否跟数据库中的状态一直,只需要验证保存，其他的在反写之前会有验证
            </summary>
            <param name="currSheets"></param>
            <param name="hisSheets"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.OperationNumber">
            <summary>
            操作代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ReserveContext">
            <summary>
            预留相关上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.TargetBusinessInfo">
            <summary>
            目标单业务元数据，反写插件事件需要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.LinkEntity">
            <summary>
            关联实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.EventsProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DbService">
            <summary>
            业务流程跟踪信息读写服务接口
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.WriteBackRules">
            <summary>
            目标单据上配置的全部反写规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.SystemTime">
            <summary>
            当前系统时间: 对象初始化时，读取数据库时间给本属性，避免重复读取
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.CurrWriteBackOpType">
            <summary>
            反写操作类型，
            用来区分当前反写的操作是保存/删除/审核/反审核中的那种
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DeleteRows">
            <summary>
            保存操作，当前单据体上，被删除的行：字典以行内码为Key，行数据包为value
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DraftBills">
            <summary>
            删除操作，用此字典记录哪些单据是暂存的单据：暂存的单据被删除时，不需要进行任何的反写补偿
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.DataObjects">
            <summary>
            数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.NetWorkCtrlResults">
            <summary>
            各反写规则执行时，申请成功的网络控制记录；在操作完成后释放
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.IsReleaseAfterOperation">
            <summary>
            反写网控，是否在操作后释放，默认为false,由于存在外部调用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker`1.ExistHisBfInstance">
            <summary>
            存在业务流程实例，主要用来判断是否要取跨级流程实例数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctWriteBackRules">
            <summary>
            反写规则字典，通过反写规则Id检索反写规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctAutoFitAllRules">
            <summary>
            能够适用于全部流程路线，且启用、未禁用的反写规则字典
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctAutoFitFreeRules">
            <summary>
            能够适用于自由流程的反写规则，且已经启用，未禁用
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctRuleMapping">
            <summary>
            反写规则及其关联信息字典：预先把反写规则的一些重要信息解析出来，在循环中直接使用即可，避免重复解析
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctReverseTree">
            <summary>
            各目标单节点的反向树：Dictionary(TargetCId, 反向树)
            </summary>
            <remarks>
            目标单的流程路线反向树，是固定的，不需要针对各个反写规则重复构造，构造一次后，存入字典，下次直接使用
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._functionLib">
            <summary>
            表达式函数库，属于领域元数据，不会变化，能够用静态变量保存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.#ctor(Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            构造函数
            </summary>
            <param name="dbService"></param>
            <param name="schema"></param>
            <param name="billTracker">反写规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.DoWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            执行反写过程
            </summary>
            <param name="aed">包含了新增、删除、修改的行</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetFunctionLib(Kingdee.BOS.Context)">
            <summary>
            初始化并返回表达式函数管理器
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.LoadRefrenceWriteBackRules(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,System.Collections.Generic.List{System.String})">
            <summary>
            读取数据包所需要的反写规则；并刷新数据包中包含的反写规则集合
            这里只读取已审核并且启用或存在反写记录的反写规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetLinkSFormId(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.List{System.String})">
            <summary>
            得到关联的上游单据formId
            </summary>
            <param name="aed"></param>
            <param name="lstBFTbNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.CreateSheetWriteBackRows(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            根据单据绑定的反写规则，初始化钩稽行上的反写条目集合
            </summary>
            <param name="lstBillAllRules">本单绑定的全部反写规则</param>
            <param name="aed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillWriteBackRuleInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            给历史反写规则填充信息
            </summary>
            <param name="tRule"></param>
            <param name="sRule"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack._dctFlowLines">
            <summary>
            流程图路线Id指向的路线定义：Dictionary(FlowId+LineId, LineElement)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.CreateArticulationRowWriteBackRows(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            根据单据绑定的反写规则，初始化钩稽行上的反写条目集合
            </summary>
            <param name="lstBillAllRules"></param>
            <param name="row">钩稽行</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.CreateArticulationRowWriteBackRow(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement)">
            <summary>
            把反写条目绑定到钩稽行上
            </summary>
            <param name="model"></param>
            <param name="row"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.BuildRuleMapping(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement)">
            <summary>
            预解析反写规则及其相关信息，把结果放到字典中，避免后续循环中重复解析
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.ReplaceWriteBackFormula(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement,Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping)">
            <summary>
            替换反写规则中的计算公式：计算公式中用到的控制字段，替换为关联子表中的控制字段
            </summary>
            <param name="rule"></param>
            <remarks>
            单据体行中控制字段值，是来源于多个源单行的合计，反写时，必须使用各个源单行的携带值
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.BuildVerifyParameter(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping)">
            <summary>
            构建公式计算所需要的参数对象
            </summary>
            <param name="ruleMapping"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.BuildFieldScaleMapping(Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping)">
            <summary>
            构建取反写规则计算结果精度所需要的参数
            </summary>
            <param name="ruleMapping"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.TranslateFormula(System.String)">
            <summary>
            校验、翻译计算公式；翻译后的计算公式可以直接执行；
            </summary>
            <param name="formula"></param>
            <returns></returns>
            <remarks>
            先翻译好，以后直接使用，避免重复翻译
            根据性能测试结果，翻译计算公式占比很大
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillSheetWriteBackRows(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode})">
            <summary>
            填充关联行的全部反写条目:
            目标：填写反写条目的关键属性：
            1. 总反写量；
            2. 反写条件、模式、绑定的操作...
            3. 需反写的源单；
            </summary>
            <param name="sheets"></param>
            <param name="routeTrees">实例首节点</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillArticulationRowWriteBackRows(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode})">
            <summary>
            构建ArticulationRow的全部反写条目；
            </summary>
            <param name="model">model代理模型，用于公式计算</param>
            <param name="articulationRow">钩稽行</param>
            <param name="routeTrees">实例首节点</param>
            <remarks>
             每ArticulationRow代表了一条直接源单行到本单行的关联路线，可能附加了多条反写规则，每反写规则的目标上游源单可能不同，需要一一分析出来
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillWriteBackRowWithOutSourceAmount(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode})">
            <summary>
            填充反写条目的具体信息；反写目标上游源单的分配数量除外，此情此景还没有条件计算出来；
            </summary>
            <param name="model">model代理模型，用于公式计算</param>
            <param name="articulationRow"></param>
            <param name="writebackrow"></param>
            <param name="rowFirstNodes"></param>
            <remarks>
            未加载实际源单信息，无法了解实际应该分配多少；
            反写条目的构建，在构建ArticulationRow时，根据转换路线上绑定的反写规则构建；
            此函数进行关键属性的进一步确认；
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillWriteBackRowAmount(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping)">
            <summary>
            计算反写条目的反写总值；
            当上游源单有多个时，需要分解此反写总值；但本函数条件不足，只计算出总值，不分解
            </summary>
            <param name="articulationRow"></param>
            <param name="writebackrow"></param>
            <param name="ruleElement"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetMaxFieldScale(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping,Kingdee.BOS.RoundMode@)">
            <summary>
            获取计算公式涉及的全部字段中，最大的数值精度
            </summary>
            <param name="articulationRow"></param>
            <param name="ruleMapping"></param>
            <param name="roundMode">输出小数舍入模式(四舍五入、进位、舍位等)</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetQtyEtcFieldScale(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.DependencyRules.RowModel.DynamicRowModel,Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping,Kingdee.BOS.RoundMode@)">
            <summary>
            获取数量、单价、金额等字段的精度
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FillWriteBackRowSourceRows(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode},Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping)">
            <summary>
            初始化反写条目的目标上游单据列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SearchParentNodes(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode},Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement)">
            <summary>
            在给定的流程实例集合中，寻找指定类型的全部上游单据，按上游单据CId进行分组
            </summary>
            <param name="row"></param>
            <param name="writeBackRow"></param>
            <param name="rowFirstNodes"></param>
            <param name="ruleElement"></param>
            <returns></returns>
            <remarks>以直接上级单据为检索发起点，向上逆推</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SearchParentNodesInTree(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse,Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement,System.String,System.Decimal,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse}}@,System.Collections.Generic.Dictionary{System.String,System.Decimal}@)">
            <summary>
            在本节点及父节点中，寻找指定的节点集合;
            含本节点;
            如果本节点即时目标节点，直接返回，否则遍历其上游
            </summary>
            <param name="routeTreeReverse">反向树</param>
            <param name="sourceTableNumber">上游目标单</param>
            <param name="targetControlField">目标单控制字段</param>
            <param name="amount">总携带量</param>
            <param name="parentNodes">输出参数，搜索结果</param>
            <param name="dctTakeAmountRecords">已经遍历过的节点</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.AddNodeToReturnList(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse,System.String,System.String,System.Decimal,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse}}@,System.Collections.Generic.Dictionary{System.String,System.Decimal}@)">
            <summary>
            把本节点，添加到待返回的节点列表中
            </summary>
            <param name="routeTreeReverse"></param>
            <param name="sourceTableNumber"></param>
            <param name="targetControlField"></param>
            <param name="amount"></param>
            <param name="parentNodes"></param>
            <param name="dctTakeAmountRecords"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SearchParentNodesAfterDistribute(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse,Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement,System.String,System.Decimal,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse}}@,System.Collections.Generic.Dictionary{System.String,System.Decimal}@)">
            <summary>
            先对源单进行分配后，再递归查询
            </summary>
            <param name="routeTreeReverse">反向树</param>
            <param name="sourceId">上游目标单</param>
            <param name="targetControlField">目标单控制字段</param>
            <param name="amount">待分配数值</param>
            <param name="parentNodes">输出参数，搜索结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SearchTackAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse,System.String,System.String@)">
            <summary>
            在源单节点中，搜索其携带到本单的量，以及源单对应控制字段名称
            </summary>
            <param name="parentNode"></param>
            <param name="targetControlField"></param>
            <param name="sourceControlField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.ClearParentNodesCalRecord(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNodeReverse,System.Collections.Generic.Dictionary{System.String,System.Decimal}@)">
            <summary>
            把本节点及父节点的累计计算结果清除掉
            </summary>
            <param name="routeTreeReverse"></param>
            <param name="parentNodesCalRecord"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.IsWriteBackSourceNode(Kingdee.BOS.BusinessEntity.BusinessFlow.Id,Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement)">
            <summary>
            判断上游节点是否为反写源单节点：
            1. TableNumber 符合；
            2. 如果反写规则为反写到源单表头，则上游节点FormId符合即可；
            </summary>
            <param name="sid"></param>
            <param name="ruleElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.BuildRouteTree(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.List{System.String})">
            <summary>
            构建相关的全部实例链接树
            </summary>
            <param name="aed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.IsNeedCrossLevel(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            是否需要取跨级反写数据，判断所有的反写规则是否存在跨级
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.IsMindReserveService">
            <summary>
            是否要考虑预留服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.LoadInstances(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.List{System.String})">
            <summary>
            加载反写涉及的业务流程实例集合
            </summary>
            <param name="writeBackRows"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetAllMasterIds(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            得到所有的业务流程根实例Id
            </summary>
            <param name="aed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetBFTbNumber(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            得到所有的业务流程根实例Id
            </summary>
            <param name="aed"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.CreateRouteTrees(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            把业务流程实例分解为以masterid标示的字典
            </summary>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.JoinGroupRouteTree(System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode}@)">
            <summary>
            对一组实例的首尾节点进行合并；结果计入字典中；以MasterId为标示
            </summary>
            <param name="groupInstances"></param>
            <param name="firstNodes"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FindAndJoinChildInstance(Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstance}})">
            <summary>
            寻找流程实例的直接下级，并把直接下级的节点，追加到本实例的节点序列中；
            </summary>
            <param name="parentInstance">父实例</param>
            <param name="dctChildInstances">父实例内码与子实例集合的映射字典：Dictionary(Instance.SourceId, List(childInstance))</param>
            <remarks>本函数需要递归</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.JoinRouteTreeNode(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode,Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode)">
            <summary>
            把子流程的首节点，合并到父流程的尾节点中
            </summary>
            <param name="childInstanceNode">子实例</param>
            <param name="parentInstanceNode">父实例</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.MergeWriteBackRowWithHistroy(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes}@)">
            <summary>
            对增删改的关联条目进行分析，得出全部融合过历史的反写条目；
            并分析反写条目当前操作能否执行（判断标准：条件 + 操作 + 条目类型，不分析改变量）
            </summary>
            <param name="aed">增删改的关联行</param>
            <param name="dctSrcRowsCount">记录每个源单行被反写的次数：Dictionary(sourceRow.CId, count)</param>
            <returns>
            反写条目包含了当前目标量以及历史反写量；
            缺少：当前反写源单，即数量的分配；
            </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RecordSourceRowsCount(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes}@,Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            抽取反写规则涉及的源单行，并累计其各字段被反写的次数
            </summary>
            <param name="dctSrcRowsCount"></param>
            <param name="writebackrow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SplitByRule(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes})">
            <summary>
            按反写规则对反写条目进行分类，以反写规则标示为字典的Key
            反写时，按规则进行循环，上游源单一致、反写方式一致，方便批量加载源单数据包，批量处理
            </summary>
            <param name="writeBackRows">反写条目列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SyncArticulationRow(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            比较关联行，分析其中增删改的反写条目
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.SyncWriteBackRow(Kingdee.BOS.BusinessEntity.BusinessFlow.WRules{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WRules{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            此函数做第三遍比较，比较需要进行的反写要求是否一致，并据此生成需要增加的反写要求列表;
            对于所谓的需要修改\删除的反写要求,都应该通过增加新的反写要求来表达
            </summary>
            <param name="currentRows">当前行的反写要求</param>
            <param name="snapshotRows">历史反写要求</param>
            <param name="r">差异列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.LoadEntityTableNumber(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleElement,System.Boolean@)">
            <summary>
            获取上游单据实体的表格编码；
            </summary>
            <param name="ruleElement">反写规则</param>
            <param name="isHeadEntity">
            反写字段是否在单据头上，
            如果在单据头上，则寻找源单时，只要节点FormId符合，即可认定为其源单；
            （场景：关联在单据体，反写到单据头） 
            </param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.LoadRouteNodeFormId(System.String)">
            <summary>
            获取流程节点对应的单据FormId
            </summary>
            <param name="tableNumber">流程节点的tableNumber</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.LoadFormMetadata(System.String)">
            <summary>
            加载指定单据的元数据；服务端函数已经实现了缓存，本处不考虑缓存
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetOperationControllers">
            <summary>
            检查并初始化操作反写条目执行策略分析组件字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.DoWriteBackEachRule(System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}}},Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext)">
            <summary>
            对每种反写规则进行反写执行
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.DoCommitNetworkCtrl">
            <summary>
            释放网络控制
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetHisWBRuleIds(Kingdee.BOS.BusinessEntity.BusinessFlow.AED{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            得到反写快照中的反写规则内码集合
            </summary>
            <param name="routeTrees"></param>
            <param name="aed"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.GetRouteTableName(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode,System.Collections.Generic.List{System.String})">
            <summary>
            得到节点表名
            </summary>
            <param name="parentNode"></param>
            <param name="lstTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.InitWBLog(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            初始化反写日志帮助类
            </summary>
            <param name="sheets"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping">
            <summary>
            反写规则及其相关信息，在循环外预解析，把反写规则及其相关信息对应起来，避免循环中重复解析
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.Rule">
            <summary>
            反写规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.RunByAuditStatus">
            <summary>
            反写规则的执行条件中，包含了已审核的条件：把此规则归于审核操作时运行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.RowModel">
            <summary>
            当前行数据模型：用于快速读取当前行字段值，无视字段所在的实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.ConditionVerifyParameter">
            <summary>
            计算执行条件所需要依赖的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.FormulaVerifyParameter">
            <summary>
            计算反写公式所需要依赖的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.FormulaFieldProperty">
            <summary>
            反写计算公式仅包含一个字段时，可以通过直接取字段值的方式，获取反写量，避免使用公式计算，增加开销
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.RuleMapping.FieldScaleMapping">
            <summary>
            反写计算公式中，涉及到的字段的精度读取参数对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping">
            <summary>
            读取字段精度所需要用到的属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.Field">
            <summary>
            需要读取精度的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.ControlField">
            <summary>
            控制字段，如数量的单位
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.InSampleEntity">
            <summary>
            数量与控制字段属于同一实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.ScaleFieldKey">
            <summary>
            控制字段中，存储精度的属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.ScalePropName">
            <summary>
            控制字段数据包中，存储精度的属性名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.ScaleProperty">
            <summary>
            控制字段数据包中，存储精度的属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.RoundPropName">
            <summary>
            控制字段数据包中，存储舍入模式的属性名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowWriteBack.FieldScaleMapping.RoundProperty">
            <summary>
            控制字段数据包中，舍入模式属性
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.AuditController`1">
            <summary>
            审核操作对反写条目的执行策略分析类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.AuditController`1.CheckCanWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            分析反写条目的执行策略
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.AuditController`1.WriteBackRowIsMe(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            反写条目要求的操作是否符合本操作？
            </summary>
            <param name="row"></param>
            <returns></returns>
            <remarks>
            审核需覆盖补偿保存时未执行的反写条目；即审核时需执行的条目是涵盖了保存操作的；
            至于实际是否需要执行，则取决于目标量与历史反写的比较结果
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.CancelController`1">
            <summary>
            作废操作对反写条目的执行策略分析类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.CancelController`1.CheckCanWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            分析反写条目的执行策略
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.CancelController`1.CalcNewWriteBackRowRealAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            计算新增的反写条目本次的实际反写需求；不同的操作有不同的计算方法，需重载；
            </summary>
            <param name="writebackrow"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.DeleteController`1">
            <summary>
            删除操作对反写条目的执行策略分析类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.DeleteController`1.CheckCanWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            分析反写条目的执行策略
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.DeleteController`1.CalcNewWriteBackRowRealAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            计算新增的反写条目本次的实际反写需求；不同的操作有不同的计算方法，需重载；
            </summary>
            <param name="writebackrow"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.SaveController`1">
            <summary>
            保存操作对反写条目的执行策略分析类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.SaveController`1.CheckCanWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            分析反写条目的执行策略
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.SaveController`1.WriteBackRowIsMe(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            反写条目要求的操作是否符合本操作？
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.UnAuditController`1">
            <summary>
            反审核操作对反写条目的执行策略分析类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.UnAuditController`1.CheckCanWriteBack(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            分析反写条目的执行策略
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.UnAuditController`1.WriteBackRowIsMe(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            反写条目要求的操作是否符合本操作？反写条目是由历史审核造成的；
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.OperationController.UnAuditController`1.CalcNewWriteBackRowRealAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{`0})">
            <summary>
            计算新增的反写条目本次的实际反写需求；不同的操作有不同的计算方法，需重载；
            </summary>
            <param name="writebackrow"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.OperationController.UnCancelController`1">
            <summary>
            反作废操作对反写条目的执行策略分析类: 暂同保存，不需特别处理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1">
            <summary>
            业务流程跟踪表读存、快照读存接口
            </summary>
            <typeparam name="T">数据行唯一标示</typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.ReadSnapshot(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            读取快照
            </summary>
            <param name="ctx"></param>
            <param name="sheets"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.ReadSnapshot(Kingdee.BOS.Context,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据单据的识别符读取快照数据。
            </summary>
            <param name="ctx"></param>
            <param name="ids">快照识别字符串集合。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.SaveSnapshot(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},System.DateTime)">
            <summary>
            更新快照内容。
            </summary>
            <param name="sheets">快照集合，包含了从数据库读取的数据</param>
            <param name="now">当前时间，用于记录快照信息的创建、更新事件</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.ReadBusinessFlowInstances(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            根据业务流程MasterId读取实例详细数据；每MasterId可能对应多个实例
            </summary>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.ReadRouteCount(Kingdee.BOS.Context,System.String[])">
            <summary>
            读取业务流程的路线数目：如果路线太多，则需要对路线进行筛选，避免一次加载太多路线，加载失败
            </summary>
            <param name="context"></param>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.ReadBusinessFlowTrackerRows(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.Int64}})">
            <summary>
            读取流向到指定目标单据的业务流程路线
            </summary>
            <param name="context"></param>
            <param name="dt">路线的ORM模型</param>
            <param name="dctTargetTableAndIds">cids，表格编码及内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.SaveBusinessFlowTrackerRows(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            存储业务流程路线推进信息
            </summary>
            <param name="ctx"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.IBusinessFlowTrackerDbService`1.SaveBusinessFlowInstances(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            存储业务流程实例
            </summary>
            <param name="ctx"></param>
            <param name="instances"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository">
            <summary>
            业务流程追踪数据存取服务组件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository._instEntryFields">
            <summary>
            业务流程实例路线临时表的字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository._instEntryFields64">
            <summary>
            业务流程实例路线临时表的字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildBFTrackerTempTable(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs)">
            <summary>
            构建临时表，输出所选单据的业务流程追踪数据
            </summary>
            <param name="args">参数对象：包含发起搜索的单据、内码集合等...</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository._clusteredIndex">
            <summary>
             创建索引语句：CREATE  INDEX IDX_{0} ON {1}(fidentityid)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository._pkIndex">
            <summary>
            创建主键索引语句：CREATE  INDEX IDX_{0}_PK ON {1}({2})
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildBFTrackerTempTableWithHis(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs)">
            <summary>
            合并业务流程正式、历史表，构建业务流程追踪临时表
            </summary>
            <param name="args">参数对象：包含发起搜索的单据、内码集合等...</param>
            <returns></returns>
            <remarks>
            业务流程推进路线，采用链表存储，每行记录只有来源与目标；
            对于希望快速检索隔级上下游数据行的需求，链表难以满足；
            需要经过一定的算法，并进行行列转换，才能输出需求的数据 - 横向的业务数据推进关系表；
            本函数，用于解决上述问题，输出所选单据的全部上下游单据到临时表；
            使用者之后到临时表取数即可
            
            逻辑：
            . 寻找所选单据所在的全部流程实例，把实例、实例路线，迁移到临时表，后续将基于临时表处理
            . 寻找出业务流程实例涉及的全部TableName，以此为输出列；
            . 寻找业务流程的首节点行；
            . 以首节点行的目标单据，关联其他行的源单据，获知首节点的隔代下游单据；
            . 依次循环关联，找出首节点的全部隔代下游单据；循环关联的次数以TableName的个数为准
            . 利用Case when then end 语句，归纳分类每行的涉及单据，输出到对应列下
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.CopyEntryToTmpTable(System.String,System.String,System.String)">
            <summary>
            把符合条件，待处理的业务流程路线，迁移到临时表
            </summary>
            <param name="tmpTableInstEntry">输出临时表：业务流程路线</param>
            <param name="instTable">输入临时表：业务流程实例</param>
            <param name="entryTable">输入临时表：业务流程路线</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.ReadAllTableNames(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs,System.String)">
            <summary>
            构建需要读取的全部表格列表：含实际存在的表格 + 参数传入，明确要求读取的表格
            </summary>
            <param name="args"></param>
            <param name="tmpTableInstEntry">临时表，存储了本次待处理的全部流程实例路线</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.ReadTableNames(System.String)">
            <summary>
            从业务流程路线临时表，读取本次搜索路线涉及的全部表格名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildReadDataSQL(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            生成读取业务流程推进横向表格的SQL
            </summary>
            <param name="tableNames"></param>
            <param name="tmpTableOut">临时表，输出：存储了流程推进路线的临时表</param>
            <param name="tmpTableMasterIds">输入临时表：存储了待处理的流程实例MasterIds</param>
            <param name="tmpTableInstEntry">输入临时表：存储了待处理的流程路线</param>
            <param name="sIDColumnAlias">同步输出各单直接源单列别名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildTableNameSId(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            构建输出的源单内码字段名，默认为tableName_SId，超长后进行自动截取，保留27位+x_S;x为0-9
            </summary>
            <param name="tableName"></param>
            <param name="subTableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.DeleteRedundancyData(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            删除冗余的数据
            </summary>
            <param name="tempTable">临时表名</param>
            <param name="allNodeCout">实例中，流经的全部表格总数</param>
            <param name="tableNumbers"></param>
            <remarks>
            背景：读取流程实例的全部路线后，会有部分走向其他路径的路线也会被关联进来，需要被删除掉
            删除原理：
            1. 流经的各个表格，以t{0}_TableNumber的格式来命名，由前往后，代表了其流过的单据类型
            2. 路线全部表格中，不包含tableNumbers的首个表格，则直接删除；
            3. 其他路线，符合要求的路线，优于半路分叉出去的路线；如果仅有分叉出去的路线，则保留分叉路线
            4. 仅用分叉的路线，对分叉前的数据进行合并，每分组，仅保留一条路线，其余路线删除
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildSQLDeleteNoTable(System.String,System.Int32,System.String)">
            <summary>
            构建SQL: 删除不包含目标表格的记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildSQLDeleteFork(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            构建SQL: 删除有主线，同时有分叉时，全部分叉路线;
            删除条件：
            1. 第forkIndex个节点为本表；
            2. 后续节点与待查询表格无关（分叉了）
            3. 数据内码，不在后续节点与待查询表格有关的内码中，同时具有分叉与不分叉的路线
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildSQLDeleteForkDup(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            构建SQL: 对只有分叉路线，进行冗余删除，每批分叉路线，仅保留一条
            1. 第forkIndex个节点为本表；
            2. 后续节点与待查询表格无关（分叉了）
            3. 数据内码，不在后续节点与待查询表格有关的内码中，同时具有分叉与不分叉的路线
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.CreateInstEntryTmpTable(System.Boolean)">
            <summary>
            创建临时表，用以存储待处理的业务流程路线信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.ReadEntryTableName(System.String,System.String)">
            <summary>
            获取实体的表格定义编码
            </summary>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <returns></returns>
            <remarks>
            业务流程采用的表格名，是表格编码，默认为实际物理表格名，但有表格重用时，会增加后缀
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.BuildBFTrackerTempTableWithHis2(Kingdee.BOS.Core.BusinessFlow.ServiceArgs.BuildBFTrackerTempTableArgs)">
            <summary>
            最新优化方法，分层按路线图取数，再把路线图数据合并到输出临时表, 把流程实例节点数据横向输出
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.GeneralLineTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisResult,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String[]}@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}@)">
            <summary>
            构建每条路线的数据
            </summary>
            <param name="context"></param>
            <param name="readInstResult"></param>
            <param name="rootTbNumber"></param>
            <param name="dicAllColumnAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.GetTargetTbNumbers(Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.Line,Kingdee.BOS.Core.BusinessFlow.ServiceArgs.ReadInstDatasWithHisResult)">
            <summary>
            得到下游表名
            </summary>
            <param name="sLine"></param>
            <param name="readInstResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.CreateTempTableOut(System.String,System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            创建输出临时表结构
            </summary>
            <param name="dicColumnAlias"></param>
            <param name="tempTableOut"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.InputDataTempTableOut(System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.Line},System.Collections.Generic.Dictionary{System.String,System.String[]},System.String)">
            <summary>
            得到横向临时表数据
            </summary>
            <param name="lstLine"></param>
            <param name="dicAllColumnAlias"></param>
            <param name="tempTableOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.GetColumnAlias(System.String,System.Int32,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String[]}@)">
            <summary>
            得到每张表名对应的列别名，包含对重复表的处理，
            重复的依据是线路图包含的表名
            </summary>
            <param name="tbNumber">表名</param>
            <param name="times">在线路图重复的次数</param>
            <param name="allColumnAlias">所有表对应的列别名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.DropTempTable(System.Collections.Generic.HashSet{System.String})">
            <summary>
            删除临时表
            </summary>
            <param name="hs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.CreateTempTableName(Kingdee.BOS.Context)">
            <summary>
            创建临时表名
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.GetAllTbNumber(System.String,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            得到所有表名
            </summary>
            <param name="tempInstEntry"></param>
            <param name="allTbNumbers"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.Repositories.InstanceTrackRepository.Line">
            <summary>
            路线图，此线路是个动态的，是一个生成的过程
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.ReserveApply">
            <summary>
            预留服务执行入口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveApply.#ctor(Kingdee.BOS.Context,Kingdee.BOS.App.Core.BusinessFlow.ReserveContext)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">数据库上下文</param>
            <param name="reserveContext">预留服务上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveApply.Execute">
            <summary>
            执行预留
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveApply.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveApply.ReserveContext">
            <summary>
            预留相关上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.STK_Inventory">
            <summary>
            即时库存单据标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.ReserveContext">
            <summary>
            预留相关操作上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.MrpBills">
            <summary>
            MRP运算单据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.MrpDemandBills">
            <summary>
            MRP运算单据中作为需求的单据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.AllRouteTreeNodes">
            <summary>
            所有正向树节点的平铺集合
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.DicTreeNodes">
            <summary>
            所有正向树节点的平铺集合的字典集合，用于提高性能
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.currentDataBillMap">
            <summary>
            当前所有内存数据包的映射表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.Do">
            <summary>
            执行实际操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.InitProperty">
            <summary>
            初始化属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.AnalysisRouteToConvertRow">
            <summary>
            通过分析单据转换正向树获得预留转换关系所需要的真正的源单与目标单数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.CreateDataBillMap(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            创建单据映射包
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetConvetInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            根据反写行获得单据转换信息
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetBatchConvertDetaiInfo(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}})">
            <summary>
            获得批量的中间运算结果，用于后续批量访问数据库
            </summary>
            <param name="lstRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetBatchConvertInfo(System.Collections.Generic.List{Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.ConvertDetailInfo},System.Collections.Generic.Dictionary{Kingdee.BOS.BusinessEntity.BusinessFlow.Id,Kingdee.BOS.Core.BusinessFlow.ReserveLogic.OriBillInfo})">
            <summary>
            根据中间结结果获是预留所需要的预留转转换结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.InsertIdsToTempTable(Kingdee.BOS.Context,System.Array)">
            <summary>
            把内码插入到临时表
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.CreateBillInfoMapByMenData(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            创建所有目标单的数据包映射，因为目标单己在内存中存在，没必要从数据库再load
            </summary>
            <param name="lstBillInfo"></param>
            <param name="entityInfo"></param>
            <param name="metaInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.CreateBillInfoMap(System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            预留信息在表头，不涉及表体，直接根据内存构造单据信息
            </summary>
            <param name="lstConvetDetailInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetBillInfoByTableInfo(Kingdee.BOS.BusinessEntity.BusinessFlow.TableDefine,Kingdee.BOS.BusinessEntity.BusinessFlow.Id,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取源单相关信息
            </summary>
            <param name="srcTableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetConvertDeleteInfoInWb">
            <summary>
            获得在单据转换中删除的行信息(一般是保存后，删除某行再点保存会有数据)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetInventoryInfo(System.Collections.Generic.List{Kingdee.BOS.Core.BusinessFlow.ReserveLogic.BusinessFlowConvertInfo})">
            <summary>
            如果为库存单据,则获得相应的库存信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.IsRelease">
            <summary>
            是否为释放操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.IsOutStock">
            <summary>
            是否为出库操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetInventoryUpdateInfo(System.String,System.Boolean)">
            <summary>
            根据事务ID获取库存更新信息
            FISCHARGEOFF 是否保存时反向冲减以前的更新数据  排除掉'1'的记录
            </summary>
            <param name="tranId">事务ID</param>
            <returns>库存更新信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetQtyField">
            <summary>
            从元数据获得数量字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetIsStockBill">
            <summary>
            是否为库存单据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetPreCondition">
            <summary>
            获得表体过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetRealSrcBillNode(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode)">
            <summary>
            获取预留关系所需要的真正源单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.LoadFormMetadata(System.String)">
            <summary>
            加载指定单据的元数据；服务端函数已经实现了缓存，本处不考虑缓存
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetAllNotes">
            <summary>
            获得所有节点平铺记录集
            </summary>
            <param name="rootNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetNoteByParent(Kingdee.BOS.BusinessEntity.BusinessFlow.RouteTreeNode)">
            <summary>
            根据父节点找到所有的子节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetHeadData(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据行分录实体数据获得整单数据
            </summary>
            <param name="entryData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.LoadMrpDataBills">
            <summary>
            获取参与MRP运算的单据类型
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.ValidateFilterExpression(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String)">
            <summary>
            校验表达式
            </summary>
            <param name="activeRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.GetFunctionLib">
            <summary>
            创建表达式函数管理器; 利用缓存，避免重复构造
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.QtyField">
            <summary>
            预留服务指定的预留数量字段名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.IsStockBill">
            <summary>
            是否为库存单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.AbstractReserveLinkService.ConverInfoInWb">
            <summary>
            在反写过程中获得的预留所需要的单据转换信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.ConvertDetailInfo">
            <summary>
            中间记录结果运算类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext">
            <summary>
            预留操作相关上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.FormOption">
            <summary>
            单据操作选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.TargetBusinessInfo">
            <summary>
            目标单元数据
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.CurrWriteBackOpType”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.RouteTrees">
            <summary>
            单据流转的正向表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.Sheets">
            <summary>
            单据集合数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.AEDRows">
            <summary>
            本次操作的增删改行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveContext.ReserveServiceMetaData">
            <summary>
            预留服务元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.ReserveLinkConvertPoxy.CallReserveReleaseAction">
            <summary>
            调用预留释放服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveLogic.ReserveLinkConvertPoxy.CallReserveConvertAction">
            <summary>
            调用预留转换服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.ReserveOpationFactory">
            <summary>
            预留服务调用工厂类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveOpationFactory.CallReserveOpation">
            <summary>
            执行预留服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.ReserveOpationFactory.AnalysisReserveLinkServiceType">
            <summary>
            分析当前的操作中有那些预留服务
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.ReserveOpationFactory.ReserveContext">
            <summary>
            上下文信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.SqlInCommand`1">
            <summary>
            一种辅助使用in子句的查询类。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadSnapshot(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0})">
            <summary>
            获取要处理请求的上次快照。
            </summary>
            <param name="sheets">当前的单据列表</param>
            <returns>之前的快照</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadSnapshot(Kingdee.BOS.Context,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据单据的识别符读取快照数据。
            </summary>
            <param name="ids">快照识别字符串集合。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.CreateSerializer">
            <summary>
            构建反序列对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.SaveSnapshot(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{`0},System.DateTime)">
            <summary>
            保存快照
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadBusinessFlowTrackerRows(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.Int64}})">
            <summary>
            读取流向到指定目标单据的业务流程路线
            </summary>
            <param name="trgTableNumber">目标单关联主实体表格编码</param>
            <param name="trgEntryIds">目标单关联主实体内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadBusinessFlowInstances(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{`0},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            读取业务流程实例集合;根据业务流程实例MasterId读取，一个MasterId可能对应多个实例，之间是流程的流转协作关系
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadBusinessFlowByLevel(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceType,System.Collections.Generic.List{`0},System.Collections.Generic.List{System.String},Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            大节点统一取数流程，优点：
            1. 分层取数减少每次取数总量
            2. 通过表名和内码取数，减少连接和只取需要的数据
            </summary>
            <param name="context"></param>
            <param name="dtInstance"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.GetCurrentIds(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            得到当前批次处理的MasterId集合
            </summary>
            <param name="masterIds"></param>
            <param name="masterIdCount"></param>
            <param name="index"></param>
            <param name="everyCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadRouteCount(Kingdee.BOS.Context,System.String[])">
            <summary>
            读取业务流程的路线数目：如果路线太多，则需要对路线进行筛选，避免一次加载太多路线，加载失败
            </summary>
            <param name="context"></param>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.InsertIdsToTempTable2(Kingdee.BOS.Context,System.String,System.Array)">
            <summary>
            把内码插入到临时表，字符型的组件
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.SaveBusinessFlowTrackerRows(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowTrackerCollection)">
            <summary>
            保存业务流程路线推进信息；
            1. 新增的路线：快照中不存在内码
            2. 忽略的路线：快照中存在，路线集合中亦存在，无改变，忽略；
            3. 删除的路线：快照中存在，但是路线集合中已经不存在了
            </summary>
            <param name="ctx"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.DeleteBusinessFlowTrackerRows(Kingdee.BOS.Context,System.String[])">
            <summary>
            批量删除路线
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.InsertIdsToTempTable(Kingdee.BOS.Context,System.String,System.Array)">
            <summary>
            把内码插入到临时表
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.SaveBusinessFlowInstances(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.BusinessEntity.BusinessFlow.BusinessFlowInstanceCollection)">
            <summary>
            保存业务流程实例
            1. 全部都是新增的实例，并包含了一条推进路线
            </summary>
            <param name="ctx"></param>
            <param name="instances"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.GetSnapShotCountByFormId(System.String)">
            <summary>
            得到快照记录数据总算
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.GetSnapShotFCIDByFormId(System.String)">
            <summary>
            得到快照记录表Id集合,每次最多取一千条
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.UpgradeSnapshot(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{`0},System.DateTime)">
            <summary>
            数据升级
            </summary>
            <param name="sheets"></param>
            <param name="now"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ReadSnapshot1(Kingdee.BOS.Context,System.String)">
            <summary>
            根据单据的识别符读取快照数据。
            </summary>
            <param name="ids">快照识别字符串集合。</param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.UpgateSheet(Kingdee.BOS.Context,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.GetUpgrateTotalCount(Kingdee.BOS.Context)">
            <summary>
            得到所有带升级行数
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.UpgrateSheet(Kingdee.BOS.Context)">
            <summary>
            反写快照升级，每次升级10000条
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerDbService`1.ArticulationSheetBinder">
            <summary>
            序列化采用的对象字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.IsFlowUsed(System.String)">
            <summary>
            判断业务流程是否被引用
            1、被业务流程配置引用；
            2、被其他流程引用；
            </summary>
            <param name="procDefId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetUsedFlowIds(System.String[])">
            <summary>
            获取已经被引用的流程
            </summary>
            <param name="flowIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetEnableVersionIds(System.String[])">
            <summary>
            获取已经可以流程版本
            </summary>
            <param name="flowIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetFlowVersionEntryFormId(System.String)">
            <summary>
            获取流程版本入口单据Id
            </summary>
            <param name="flowVersoionId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetWriteBackRulesByForm(System.String)">
            <summary>
            按表单加载反写规则
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetWriteBackRulesByFormId(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            加载反写规则
            </summary>
            <param name="formId">下游单formId</param>
            <param name="sourceFormIds">上游单formId集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetBusinessFlow(System.String,System.String,System.Boolean)">
            <summary>
            获取入口单据的单据类型适用的业务流程
            </summary>
            <param name="formId"></param>
            <param name="billTypeId"></param>
            <param name="onlyDefault">仅加载默认流程</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetTableDefine(System.String,System.String,System.Boolean)">
            <summary>
            根据单据与实体，加载其表格定义对象；获知其表格使用的编码
            </summary>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <param name="addFornotExist">如果单据与实体对应的表格定义对象不存在，则自动向数据库中插入一条定义</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetTableDefine(System.String)">
            <summary>
            根据表格编码（默认与表格名相同），加载其表格定义对象，从而获知其对应的单据与实体
            </summary>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetTableDefine(System.Int32)">
            <summary>
            根据表格Seq
            </summary>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.UpdateTableSeq">
            <summary>
            为各表格分配一个不重复的表格序号，从5000开始
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader._tableDefineType">
            <summary>
            静态变量：表格定义实体描述
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader._tableDefineCacheKey">
            <summary>
            业务流程表格定义缓存Key
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetTableDefineCollection">
            <summary>
            从缓存中按照数据中心读取表格定义集合；如果未缓存，则创建并缓存；
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.ReadAllTableDefine">
            <summary>
            读取现有全部的表格定义对象；
            </summary>
            <remarks>全部的业务单据实体数量是有限的，读取到内存中，可以减少数据库交互</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.ReadTableDefineFromDB(System.String,System.String)">
            <summary>
            尝试从数据库中读取表格定义
            </summary>
            <remarks>
            新增表格定义对象前，调用本函数，可以避免重复增加
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.DoUpdateTableSeq">
            <summary>
            为各表格分配一个不重复的表格序号，从5000开始
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.SetProcDefInfo(Kingdee.BOS.Core.BusinessFlow.BusinessFlowVersionMetadata,Kingdee.BOS.Core.BusinessFlow.Extend.BusinessflowModel)">
            <summary>
            设置流程草稿信息
            </summary>
            <param name="tmpmeta"></param>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetTabelDefineByFormId(System.String)">
            <summary>
            根据表单Id得到表定义
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataReader.GetWBRules(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            得到反写规则集合
            只包含有反写记录的或已启用的反写规则
            </summary>
            <param name="tFormId"></param>
            <param name="snapWBRuleIds"></param>
            <param name="sourceFormIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadALinkToBFlows(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取从A单据直接连到B单据的全部业务流程图，以及其连接的路线
            </summary>
            <param name="ctx">上下文</param>
            <param name="sourceFormId">上游单据</param>
            <param name="targetFormId">下游目标单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetBusinessFlow(Kingdee.BOS.Context,System.String,System.String,System.Boolean)">
            <summary>
            获取与入口单据单据类型匹配的业务流程图版本；
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="billTypeId"></param>
            <param name="onlyDefault">仅加载默认流程</param>
            <returns>如果有多个版本同时支持，则返回列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadFlowVersionMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            获取流程版本元数据
            </summary>
            <param name="ctx"></param>
            <param name="versionId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadTableDefine(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据单据与实体，加载其表格定义对象；从而获知其表格使用的编码
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <returns></returns>
            <remarks>
            如果单据与实体对应的表格定义对象不存在，则自动向数据库中插入一条定义
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadTableDefine(Kingdee.BOS.Context,System.String,System.String,System.Boolean)">
            <summary>
            根据单据与实体，加载其表格定义对象；从而获知其表格使用的编码
            参数addForNotExist：如果在数据库中不存在是否增加到数据库表中， true代表增加； false不增加（会返回null）
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <param name="addForNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadTableDefine(Kingdee.BOS.Context,System.String)">
            <summary>
            根据表格编码（默认与表格名相同），加载其表格定义对象，从而获知其对应的单据与实体
            </summary>
            <param name="ctx"></param>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.AddFavouriteBFlow(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            将业务流程配置，添加到我的收藏中
            </summary>
            <param name="publishEntryIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.DelFavouriteBFlow(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            删除我收藏的业务流程
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetFlowVersionEntryFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据流程版本Id获取入口单据
            </summary>
            <param name="ctx"></param>
            <param name="flowVersoionId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetBFPublishEntryByBillType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取单据类型流程配置信息
            </summary>
            <param name="ctx"></param>
            <param name="rowPKId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.SetBillTypeDefaultFlow(Kingdee.BOS.Context,System.String)">
            <summary>
            单据类型设置默认业务流程
            </summary>
            <param name="ctx"></param>
            <param name="rowPKId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.SaveModelBase64(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.Extend.BusinessflowModel)">
            <summary>
            保存业务流模型（前端首先对模型内XML进行Base64序列化后再调用本服务）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.IsFlowUsed(Kingdee.BOS.Context,System.String)">
            <summary>
            判断业务流程是否被引用
            1、被业务流程配置引用；
            2、被其他流程引用；
            </summary>
            <param name="ctx"></param>
            <param name="procDefId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetUsedFlowIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            获取已经被引用的流程
            </summary>
            <param name="ctx"></param>
            <param name="flowIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.SetVersionsStatus(Kingdee.BOS.Context,System.String[],System.Int32)">
            <summary>
            设置版本状态
            </summary>
            <param name="ctx"></param>
            <param name="versionIds"></param>
            <param name="status"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.SetDefaultVersion(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            设置默认版本
            </summary>
            <param name="ctx"></param>
            <param name="procDefId"></param>
            <param name="versionId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.ValidateConvert(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.Extend.BusinessflowModel)">
            <summary>
            流程发布时验证转换规则是否存在（前端首先对模型内XML进行Base64序列化后再调用本服务）
            </summary>
            <param name="ctx"></param>
            <param name="flow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.SaveFlow(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.FlowElement)">
            <summary>
            保存流程--保存草稿
            </summary>
            <param name="ctx"></param>
            <param name="flow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadFlow(Kingdee.BOS.Context,System.String)">
            <summary>
            加载流程-草稿
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.LoadVersionFlow(Kingdee.BOS.Context,System.String)">
            <summary>
            加载流程-发布的版本
            </summary>
            <param name="ctx"></param>
            <param name="versionId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetVersionSerialNumber(Kingdee.BOS.Context,System.String)">
            <summary>
            获取流程版本序列号
            </summary>
            <param name="ctx"></param>
            <param name="procDefId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.ValidateVersionNo(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            验证版本号是否重复
            </summary>
            <param name="ctx"></param>
            <param name="procDefId"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataService.GetTabelDefineByFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据表单Id得到表定义
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.MetadataUtils.SetFlowStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.BusinessFlow.FlowElement)">
            <summary>
            为流程设置最新状态
            </summary>
            <param name="ctx"></param>
            <param name="flow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataWriter.ResetFlow(Kingdee.BOS.Core.BusinessFlow.FlowElement)">
            <summary>
            直接传就行会丢失数据，因此要通过xml反序列化。
            </summary>
            <param name="flow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataWriter.AddFavouriteBFlow(System.Int64[])">
            <summary>
            将业务流程配置，添加到我的收藏中
            </summary>
            <param name="publishEntryIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataWriter.ExistFavourite(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断是否已经收藏
            </summary>
            <param name="userId"></param>
            <param name="orgId"></param>
            <param name="publishEntryId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataWriter.DelFavouriteBFlow(System.Int64[])">
            <summary>
            删除我收藏的业务流程
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowMetadataWriter.WriteLog(System.String,System.String)">
            <summary>
            写日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply">
            <summary>
            处理各操作业务流程跟踪信息的入口组件；保存、删除、审核、反审核、作废、反作废等
            </summary>
            <remarks>
            封装此组件，可减少泛型处理的复杂度
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply._eventsProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.PreparePropertys(Kingdee.BOS.Core.Metadata.FormElement.FormOperation,System.Collections.Generic.List{System.String})">
            <summary>
            添加业务流程跟踪记录，需要用到的字段
            </summary>
            <param name="fieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Draft(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            暂存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Delete(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            删除入账申请
            </summary>
            <param name="Id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Audit(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.UnAudit(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            反审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Cancel(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.UnCancel(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            保存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Draft(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            暂存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Delete(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            删除入账申请
            </summary>
            <param name="dataObjects">待删除的单据数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Audit(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.UnAudit(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            反审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Cancel(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.UnCancel(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.ReLoadDataObjects(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            重新加载数据包；一般来说，设置状态操作采用的数据包不完整，难以进行反写等处理，需重新加载
            </summary>
            <param name="dataObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.GetLinkObjs(Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取关联关系集合
            </summary>
            <param name="linkEntity">关联关系配置信息</param>
            <param name="entityRowData">关联关系所在单据体行数据包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreateBusinessFlowTracker(Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            创建业务流程跟踪、反写信息实际读写控制组件
            </summary>
            <param name="linkEntity">关联实体</param>
            <param name="dataObjects"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply._dctFirstSaveFlags">
            <summary>
            标志字段：记录各Sheet对应的单据，是否为首次执行保存操作
            </summary>
            <remarks>
            暂存单据，也会创建反写快照；
            如果不加以区分，会把暂存的数据，当成是历史保存过的数据，在执行反写规则时，会触发RuleFirstRunning事件，通知插件进行补偿。
            因此，需要特别增加标志，排除先暂存，后保存这样的处理情况，明确要求此情况，不触发RuleFirstRunning事件
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreateArticulationSheet(Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTracker{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            根据数据包中包含的业务流程流转关系，创建ArticulationRow到ArticulationSheet中；
            </summary>
            <param name="tracker">关联记录实现类</param>
            <param name="linkEntity">关联实体配置信息</param>
            <param name="dataObject">待分析数据包</param>
            <param name="optionFirstSaveFlags">标志字典：单据是首次执行保存操作</param>
            <returns>
            ArticulationRow: 包含了直接源单标示、本单标示、采用的流程图、流转路线、从源单携带来的可用量；
            多行合并下推，反写时不能直接采用目标行上的总数量；应分解到不同的源单上；此时确定的可用量，就是分解后的结果；
            </returns>
            <remarks>
            后续的操作，将以本函数产生的关联关系为基准，进行增删改分析，并决定行是否需要进行重新反写
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreateArticulationEntityRow(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,System.String,Kingdee.BOS.Core.BusinessFlow.PlugIn.Args.BeforeCreateArticulationRowEventArgs,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            构建目标行的全部ArticulationRow, 直接添加到sheet上
            </summary>
            <param name="sheet"></param>
            <param name="entity"></param>
            <param name="entityRow"></param>
            <param name="linkEntity"></param>
            <param name="entryTableNumber">表格编码</param>
            <remarks>
            目标行由多行源单下推而来时，需要创建多条ArticulationRow;
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.ReDistributeAmountFields(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            重新把目标单行上的最终可用量分配到各源单上
            </summary>
            <param name="entity"></param>
            <param name="entityRow"></param>
            <param name="linkEntityRows"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.dicLeavingAmount">
            <summary>
            剩余可用量，一张多行分录关联上游单同一行分录时，需要逐行扣减可以量
            以stablename和sid作为字典key
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.ReDistributeAmountField(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            重新把目标行上的最终可用量分配到各源单上；默认采用自上而下分配方式
            </summary>
            <param name="entity"></param>
            <param name="entityRow"></param>
            <param name="amounField"></param>
            <param name="linkEntityRows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreateArticulationRow(Kingdee.BOS.BusinessEntity.BusinessFlow.Sheet{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Int64)">
            <summary>
            创建ArticulationRow
            </summary>
            <param name="sheet">记录ArticulationRow的Sheet</param>
            <param name="entityRow">目标行数据包</param>
            <param name="linkEntityRow">关联关系行数据包</param>
            <param name="entityTableNumber">目标行所在实体的表格编码</param>
            <param name="entityId">目标行数据内码</param>
            <remarks>
            每LinkEntiryRow 创建一行 ArticulationRow；
            如一目标行来源于多个源行，则对应此目标行，会创建多个ArticulationRow, 并记录每源单携带过来的可用量
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.GetTableDefineNumber(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            得到表定义中的表编码，这里主要解决两个问题
            1. 关联数据包中的表名跟表定义中的表名大小写不一致的问题，这个可能是导致联查有问题
            2. 关联数据包中的表名在表定义中根本不存在
            </summary>
            <param name="sTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreateSourceAmountRows(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.BusinessEntity.BusinessFlow.Row{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            构建数据集合，记录控制字段的携带量
            </summary>
            <param name="row"></param>
            <param name="ruleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.GetDynamicObjectCollection(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取分录集合，不支持子单据体
            </summary>
            <param name="dataObject"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.IsNoLink(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            是否由上游单据下推而来
            </summary>
            <param name="linkEntityRows"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.GetEntityTableId(System.String)">
            <summary>
            获取TableId
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.BuildSnapCId(System.String,System.String,System.Object)">
            <summary>
            构建关联关系信息包快照的主键：单据FormId,关联子实体Key,单据内码
            </summary>
            <param name="formId"></param>
            <param name="linkEntityKey"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.IsDraftBill(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField)">
            <summary>
            单据是否为暂存状态：删除暂存状态的单据时，不需要进行任何补偿
            </summary>
            <param name="dataObject"></param>
            <param name="statusField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.CreatePlugInProxy(Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            创建插件代理对象
            </summary>
            <param name="billTracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.PlugInCancelTrackBusinessFlow">
            <summary>
            插件是否取消了业务流程跟踪处理
            </summary>
            <param name="dataObjects"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply._dctWBFieldMaps">
            <summary>
            缓存的单据转换规则中，控制字段的对应关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.LoadWBFieldMaps(System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            读取转换规则中，控制字段的对应关系
            </summary>
            <param name="sheets"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply._writeBackRules">
            <summary>
            缓存的反写规则：目标单据上配置的全部反写规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.LoadRefrenceWriteBackRules">
            <summary>
            读取单据上全部的全部反写规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.AddFieldKey(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            向字段列表中增加新字段，及其控制字段
            </summary>
            <param name="fieldKeys"></param>
            <param name="fieldKey">字段Key，或者是字段的属性(FKey.FProperty)</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.AttachmentHandler(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            处理附件信息
            </summary>
            <param name="objs"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.ReserveContext">
            <summary>
            预留相关上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.BusinessInfo">
            <summary>
            业务对象元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.OperateOption">
            <summary>
            操作参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.NetWorkCtrlResults">
            <summary>
            各反写规则执行时，申请成功的网络控制记录；在操作完成后释放
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerApply.IsReleaseAfterOperation">
            <summary>
            反写网控，是否在操作后释放，默认为false,由于存在外部调用
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService">
            <summary>
            业务流程跟踪信息更新服务提供者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.Delete(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            删除时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="lstPkIds"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.Audit(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            审核时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.UnAudit(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            反审核时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.Cancel(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            作废时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.UnCancel(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            反作废时更新业务流程跟踪信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.GetSnapShotFCIDByFormId(Kingdee.BOS.Context,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.GetSnapShotCountByFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            得到快照记录数据总算
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.ReadSnapshot(Kingdee.BOS.Context,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            读取快照数据
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.SaveSnapshot(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.Sheets{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.DateTime)">
            <summary>
            保存快照数据
            </summary>
            <param name="sheets"></param>
            <param name="now"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.UpgradeSnapshot(Kingdee.BOS.Context,System.String)">
            <summary>
            升级快照数据
            </summary>
            <param name="ctx"></param>
            <param name="fcid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.UpgateSheet(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
            反写记录数据升级
            </summary>
            <param name="ctx"></param>
            <param name="everyUpgrateCount"></param>
            <param name="threadCount"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.GetUpgrateTotalCount(Kingdee.BOS.Context)">
            <summary>
            得到所有带升级行数
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.BusinessFlowTrackerService.BreakBusinessFlow(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BusinessFlow.BreakFlowData)">
            <summary>
            阻断业务流程
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine">
            <summary>
            反写规则执行引擎
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.lstWriteBackLogicUnit">
            <summary>
            反写逻辑单元
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine._formulaVars">
            <summary>
            反写计算公式中包含的全部变量
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.#ctor(Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext)">
            <summary>
            创建反写引擎实例
            </summary>
            <param name="engineContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.RegisterLogicUnit(Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit)">
            <summary>
            向引擎中注册一个逻辑单元实例
            </summary>
            <param name="logicUnit"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.RegisterLogicUnit(Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit,System.Int32)">
            <summary>
            向引擎中插入一个逻辑单元实例
            </summary>
            <param name="logicUnit"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.InitLogicUnitContext">
            <summary>
            初始化、刷新反写逻辑单元的上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.InitLogicUnitRowModel">
            <summary>
            初始化反写逻辑单元的源单行数据模型
            </summary>
            <remarks>
            行数据模型，只需要每个反写规则构建一次，之后仅更新数据包即可，避免重复构建模型消耗性能；
            构建模型，需要依赖于源单元数据片段，以及源单行数据，故必须在加载数据之后，反写之前执行
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.Do">
            <summary>
            执行反写逻辑单元处理过程
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.NeedLoadSourceData(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}}@)">
            <summary>
            是否需要加载源单数据,同时输出源单分录行内码
            </summary>
            <param name="sourceEntryIds">数据字典，返回源单表格编码与内码集合</param>
            <returns>dictionary(tablenumber, list(entityId))</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetDictionaryValue(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}},System.String)">
            <summary>
            在字典中加载指定键的值。如果不存在则创建新值并存入字典
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.CustomReadFields">
            <summary>
            确定需要加载到数据包中的字段列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.LoadWriteBackData(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int64}},Kingdee.BOS.Orm.DataEntity.DynamicObject[]@)">
            <summary>
            根据请求的字段读取源单数据
            </summary>
            <param name="lstFieldKeys">请求的字段集合</param>
            <param name="sourceEntryIds">源单分录内码字典： Dictioanry(tableNumber, List(entityId))</param>
            <param name="billDataObjs">加载出来的源单数据包</param>
            <returns>返回源单数据实体对象集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetEntityByTableNumber(System.String)">
            <summary>
            根据表格编码，找对应的实体
            </summary>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.LoadSrcBillPKValues(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{System.Int64})">
            <summary>
            根据源单分录内码，读取对应的源单主表内码：后续直接用这些内码读取源单数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.StartNetworkCtrl(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            开始网络控制：同一反写规则，同一源单，不允许并行执行
            </summary>
            <param name="billDataObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.DoStartNetworkCtrl(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            到网控服务端请求网控，返回请求结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetBillNo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取源单编码
            </summary>
            <param name="billDataObj"></param>
            <param name="billNoField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SaveSourceData(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.ExtendedDataEntitySet)">
            <summary>
            把源单反写结果，批量保存到数据库
            </summary>
            <param name="writeBackData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SyncWriteBackSourceRow(Kingdee.BOS.BusinessEntity.BusinessFlow.WSRows{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WSRows{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            比较反写条目的源行列表，找出源行列表的差异
            </summary>
            <param name="currentRows">当前行的反写要求</param>
            <param name="snapshotRows">历史反写要求</param>
            <param name="r">差异列表</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine._dctSourceRowsDistHist">
            <summary>
            各源单行的分配对象字典，用源单行内码检索
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SearchSRCRowsAndDistributeAmount(Kingdee.BOS.Core.ExtendedDataEntitySet)">
            <summary>
            1. 寻找反写条目的上游数据行
            2. 并计算上游数据行的可分配上限，对反写条目的本次反写量进行分配（多源时自动按分配规则分配）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.ReleaseDistHis(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id})">
            <summary>
            释放分配历史：把历史已经反写过的量，恢复到源单行上，然后再统一重新分配
            </summary>
            <param name="writebackrow">反写行</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SearchSRCRowAndDistributeAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.Core.Metadata.Util.VerifyExpressionParameter)">
            <summary>
            寻找指定反写条目的上游数据行，并分配
            </summary>
            <param name="entity"></param>
            <param name="entryDataObjects"></param>
            <param name="writebackrow"></param>
            <param name="formula"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SearchSourceDataEntity(System.Int64)">
            <summary>
            寻找上游单据实体行
            </summary>
            <param name="entityDataEntities">上游单据实体行数据集合</param>
            <param name="sourceEntityId">待查找的上游实体行内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.DistributeSourceRowsAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.List{System.Tuple{Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}}},Kingdee.BOS.Core.Metadata.Util.VerifyExpressionParameter)">
            <summary>
            对反写条目的反写值进行分配，分配到其对应的上游源单行上；多源单时，需按分配规则分配
            </summary>
            <param name="entity">源单数值字段所在实体</param>
            <param name="entryDataObjects">源单数值字段所在实体数据包集合</param>
            <param name="writebackrow">反写条目</param>
            <param name="lstTupleSourceRows">新增或修改的源单行；删除的源行直接进行反向操作即可，不需计算分配量</param>
            <param name="formula">计算源单当前可接受的最大分配量的公式；扣减模式以扣减字段值为上限；而累加模式以基准字段为上限</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.RegistDistributeValue(System.Tuple{Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}},System.Decimal)">
            <summary>
            登记本次分配到源单行的量
            </summary>
            <param name="tuple">对源单的反写需求：item1 = 当前, item2 = 历史</param>
            <param name="distValue">本次分配</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.CalcSRCRowMaxAmount(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Collections.Generic.List{System.Tuple{Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},Kingdee.BOS.BusinessEntity.BusinessFlow.WSRow{Kingdee.BOS.BusinessEntity.BusinessFlow.Id}}},Kingdee.BOS.Core.Metadata.Util.VerifyExpressionParameter,Kingdee.BOS.Core.BusinessFlow.DistributeLogic.IDistributeLogic)">
            <summary>
            计算反写条目各关联源单的实际可分配量
            </summary>
            <param name="entity"></param>
            <param name="entryDataEntities"></param>
            <param name="writebackrow"></param>
            <param name="lstTupleSourceRows"></param>
            <param name="formula"></param>
            <param name="distributeLogic"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.CalcTakeMaxValue(Kingdee.BOS.BusinessEntity.BusinessFlow.WRule{Kingdee.BOS.BusinessEntity.BusinessFlow.Id},System.Decimal)">
            <summary>
            根据控制字段携带量，计算反写公式值：据此计算出可分配量
            </summary>
            <param name="controlFieldValue"></param>
            <returns></returns>
            <remarks>
            在反写公式，并不是直接使用控制字段时，很有必要进行重新计算：
            如反写公式为 qty(10) * price(100) = 1000, 即反写金额；
            控制字段携带量为10，计算出实际携带量，必须为 1000；
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.ReplaceWriteBackFieldKey(System.String,System.String,System.Decimal,System.Boolean@)">
            <summary>
            替换反写值计算公式中的控制字段为控制字段携带量
            </summary>
            <param name="oldFormula"></param>
            <param name="writebackFieldKey"></param>
            <param name="writebackFieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetAbsMinValue(System.Decimal,System.Decimal)">
            <summary>
            在两个数中,取绝对值小的数
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.RemoveWriteTimes">
            <summary>
            扣减对源单的反写需求：对源单的最后一次反写，才检查超额，因此每次反写，都需要扣减次数，以便程序侦测是否为最后一次反写
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.CalcWriteBackRowsRealAmount">
            <summary>
            计算反写条目实际需要执行的量，以及本次执行完毕后，其对源单的总影响量
            </summary>
            <remarks>
            根据当前目标量、历史量、计算实际需要执行的源行，及其量；并得出最终影响; 不执行反写规则也要计算，用于生成快照
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.WriteToSourceDataEntity">
            <summary>
            对反写条目的实际需反写的源行，逐一执行反写
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.EavlWriteBackFallbackValue">
            <summary>
            解析反写回退值
            </summary>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetClearValue(Kingdee.BOS.Core.Metadata.FieldElement.Field)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.GetDefaultValue(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            反写回退值：字段缺省值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.IsCancelNetworkCtrl">
            <summary>
            是否取消网控
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.SubSrcBusinessInfo">
            <summary>
            源单精简版的元数据对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.WriteBackEngineContext">
            <summary>
            反写引擎的上下文信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngine.NetWorkCtrlResults">
            <summary>
            各反写规则执行时，申请成功的网络控制记录；这些网控记录，必须在全部反写规则执行完毕后，才能释放
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis">
            <summary>
            每条源单数据行的计算、分配情况登记对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.EntityId">
            <summary>
            源单行内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.RowDataEntity">
            <summary>
            源单行数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.HadCalc">
            <summary>
            已经根据公式计算过其上限？
            默认不计算，只有需要分配时才开始计算。毕竟大部分情况，并不存在合并，无需计算可分配量并分配
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.CalcValue">
            <summary>
            本批分配前，分配上限计算结果，即还剩余的可分配量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.RollBackValue">
            <summary>
            本批累计回滚的数量：重复保存时，先把已经反写的量回滚，然后重新分配
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SRowDistributeHis.DistValue">
            <summary>
            本批累计已经分配的量
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext">
            <summary>
            回写引擎上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.RemoveWriteTime(System.String,System.String)">
            <summary>
            扣减一次反写需求：每次反写执行后，需要减少一次反写需求
            </summary>
            <param name="cid">源单行CId</param>
            <param name="ruleGroup">源单字段</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.WriteTimes(System.String,System.String)">
            <summary>
            计算源单字段剩余的反写次数；可以据此判断是否为最后一次反写
            </summary>
            <param name="cid"></param>
            <param name="ruleGroup">反写规则分组</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.Context">
            <summary>
            数据库连接上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.FunctionLib">
            <summary>
            公式计算扩展函数库
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.TargetBusinessInfo">
            <summary>
            当前处理的下游单据元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.SourceBusinessInfo">
            <summary>
            需反写的上游单据元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.SubSrcBusinessInfo">
            <summary>
            需反写的上游单据元数据片段，与源单数据包对应
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.TargetLinkEntity">
            <summary>
            目标单据关联实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.Rule">
            <summary>
            反写使用的反写规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.SourceEntity">
            <summary>
            源单关联实体
            </summary>
            <remarks>
            某些特殊反写规则，关联发生在单据体，反写到单据头，因此不能直接把反写字段的实体为关联实体
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.WriteBackRows">
            <summary>
            反写规则对应的待执行反写条目列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.SourceRowWriteTimes">
            <summary>
            源单行待反写次数：按源单行、反写规则分组记录反写需求；
            可以通过累加与扣减此反写需求，了解是否最后一次执行对某一源单行的修改
            </summary>
            <remarks>
            同一批次反写中，多次更新同一源行的目标字段值，应该要在最后一次才校验超额；
            但是因为涉及到多个反写规则，有可能其超额校验规则并不一致，如果自动忽略前面的校验，可能会错过检测时机；
            因此，默认时，仅进行反写需求累加 - 扣减处理，并不据此进行进行超额校验控制；
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.ExcessWarnMessages">
            <summary>
            超额警告消息集合
            </summary>
            <remarks>
            逐行反写源单并检查是否超额；
            为实现批量显示超额的行，反写检查出的超额信息，累加到本集合上，并不即刻抛错中断反写
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.CurrWriteBackOpType">
            <summary>
            反写操作类型，
            用来区分当前反写的操作是保存/删除/审核/反审核中的那种
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.ServicePlugInProxy">
            <summary>
            插件代理对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.WritedCIds">
            <summary>
            记录在反写规则分组下被反写过的源单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext.WBLogHelper">
            <summary>
            反写日志帮助类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes">
            <summary>
            记录某一源单，被标记为同一组的反写规则，反写的次数；多次反写，只有最后一次才需要进行超额检查
            </summary>
            <remarks>
            对于某一批反写规则，反写的是同一组源单字段，超额检查公式需要对这一组字段的值进行检查；
            在同一组的全部反写规则执行前，超额检查公式是不准确的，因此需要在最后一个反写规则执行时，才超额检查；
            但是就某一个具体的源单来说，同一批反写规则，不一定都需要执行。
            所以，增加一个计数器，对于某一源单，扫描到了一次反写需求，则增加一次；执行一次，则减少一次。次数为0时，为最后一次
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="cid">源单行的CId</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.Add(System.String)">
            <summary>
            对反写字段追加一次反写需求
            </summary>
            <param name="ruleGroup">反写规则分组</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.Remove(System.String)">
            <summary>
            完成反写后，需移除一次反写需求
            </summary>
            <param name="ruleGroup"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.WriteTimes(System.String)">
            <summary>
            计算反写规则组还剩下的反写次数，当剩下的反写次数为0时，需要进行超额检查
            </summary>
            <param name="ruleGroup"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.CId">
            <summary>
            源单的唯一标示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.SourceRowWriteTimes.RuleGroupWirteTimes">
            <summary>
            同一组反写规则，反写的次数: Dictionary(Rule.Group, count)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic">
            <summary>
            正常对单据的反写逻辑单元抽象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit">
            <summary>
            单据流转后反写逻辑单元
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.BOSDynamicRow">
            <summary>
            本次操作的分录行数据包取值对象，通过本对象，可以很方便的取其父实体上的字段值，无需分析字段的位置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.InitializeContext(Kingdee.BOS.App.Core.BusinessFlow.WriteBackEngineContext)">
            <summary>
            初始化逻辑单元上下文信息
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CustomReadFields">
            <summary>
            提供时机点，允许自定义读取需要反写的源单字段。例如关闭插件可以期望读取关闭相关的字段
            </summary>
            <returns>返回你需要读取的字段Key列表(不要返回null)。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.InitDynamicRowModel">
            <summary>
            初始化行数据模型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.WriteBack">
            <summary>
            当源单数据已经读取完毕，调用此方法，执行反写单元的任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.AddFieldElement(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            向字段列表中添加指定的字段
            </summary>
            <param name="lstFields"></param>
            <param name="fieldKey"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.Context">
            <summary>
            服务上下文。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.EngineContext">
            <summary>
            回写引擎上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.Rule">
            <summary>
            当前采用的反写规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceBusinessInfo">
            <summary>
            上游源单的元数据定义。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SubSrcBusinessInfo">
            <summary>
            上游源单的元数据片段，与数据包结构一致
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceEntity">
            <summary>
            上游源单的关联主实体，与反写的源单分录内码一致；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.WriteBackRow">
            <summary>
            反写条目：含反写方式等
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceRow">
            <summary>
            对上游源单的反写要求：含数据包、本次已分配量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceCommitField">
            <summary>
            上游源单接收反写结果的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceEntryCloseField">
            <summary>
            上游源单分录关闭字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceBillCloseField">
            <summary>
            上游源单整单关闭字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic._billDataEntity">
            <summary>
            本次操作的单据数据包
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic._entityDataEntity">
            <summary>
            本次操作的分录行数据包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.CustomReadFields">
            <summary>
            要求加载反写单元需要的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.WriteBack">
            <summary>
            反写功能执行入口函数；
            </summary>
            <remarks>
            此函数将反写功能按顺序进行细分，分为前中后几个阶段，以便插件捕捉；
            标记不可重载，即派生类只能重载前中后事件来完成反写功能
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.DoTaskBefore">
            <summary>
            任务执行前事件；
            </summary>
            <param name="dataEntity"></param>
            <remarks>此事件可选重载</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.DoTask">
            <summary>
            任务执行事件；
            </summary>
            <param name="entryData"></param>
            <remarks>此事件必须重载</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.DoTaskLast">
            <summary>
            任务执行完毕事件；
            </summary>
            <remarks>此事件可选重载</remarks>
            <param name="dataEntity"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.AbstractBillWritebackLogic.CanWriteBack">
            <summary>
            是否可以执行反写,用于检查全局条件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic">
            <summary>
            达成关闭下限后，关闭上游源单行及单据的处理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic._verifyParameter">
            <summary>
            公式计算参数包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.CustomReadFields">
            <summary>
            添加需要加载到数据包中的源单字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.AddStatusFields(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            增加状态字段相关的字段，如操作人，操作日期。
            </summary>
            <param name="lstFields"></param>
            <param name="p"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.DoTaskBefore">
            <summary>
            任务处理前事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.DoTask">
            <summary>
            任务处理事件
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.CloseEntityObject(Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField,System.String)">
            <summary>
            关闭数据
            </summary>
            <param name="entityCloseFieldProperty"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.UncloseEntityObject(Kingdee.BOS.Core.Metadata.FieldElement.BillStatusField,System.String)">
            <summary>
            反关闭数据
            </summary>
            <param name="entityObject"></param>
            <param name="closeField"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic._entryCloseStatus">
            <summary>
            本次处理最终写到上游单据行上的关闭状态值；默认为失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic._billCloseStatus">
            <summary>
            本次处理最终写到上游单据整体数据包上的关闭状态值；默认为失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic._entryOldCloseStatus">
            <summary>
            本次处理前分录的关闭状态值；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic._billOldCloseStatus">
            <summary>
            本次处理前单据的关闭状态值；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.DoTaskLast">
            <summary>
            任务处理完后事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.TryCloseBill">
            <summary>
            尝试关闭整单：
            1. 默认整单关闭策略，判断全部单据体是否已经关闭，之后整单关闭；
            2. 如果整单关闭策略为一行分录关闭即关闭整单，则直接关闭
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.TryUnCloseBill">
            <summary>
            尝试反关闭整单，在不同的整单关闭策略下，有不同的处理：
            1. 默认为只要有一行反关闭则反关闭整单；
            2. 如果整单关闭策略为一行分录关闭即关闭整单，则需要等所有分录均反关闭，才能反关闭
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CloseRowLogic.CanWriteBack">
            <summary>
            本任务能否被执行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic">
            <summary>
            完成反写条目中的数值反写处理；
            </summary>
            <remarks>
            即[累加/扣减/覆盖][上游源单.接收提交字段] = 本次待更新量
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.CustomReadFields">
            <summary>
            添加需要加载到数据包中的源单字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.DoTaskBefore">
            <summary>
            任务处理前事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.DoTask">
            <summary>
            任务处理事件
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.SetPkValue(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            给多选基础资料设置主键
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.DoTaskLast">
            <summary>
            任务处理完后事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.CommitAmountLogic.CanWriteBack">
            <summary>
            本任务能否被执行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic">
            <summary>
            反写完毕后的超额检查处理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic._realExpression">
            <summary>
            超额检查公式对象：公式需要预编译，避免每次使用重复编译，重复执行消耗性能
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic._verifyParameter">
            <summary>
            公式计算参数包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.CustomReadFields">
            <summary>
            添加需要加载到数据包中的源单字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.DoTaskBefore">
            <summary>
            任务处理前事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.DoTask">
            <summary>
            任务处理事件
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.DoTaskLast">
            <summary>
            任务处理完后事件
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.CanCheckInOverOneTimeModel">
            <summary>
            允许一次超额模式，是否需要检查超额
            </summary>
            <returns></returns>
            <remarks>
            是否冲销，判断原理：与上游单据累计量、本次反写总影响量、本次反写量相关
            本行反写之前（累计量-反写总量）    本行总影响      本次反写量       超额检查方式       理由
            ----------------------------    ------------  ------------     ---------------   -----------------------------------
            1.0   0                          0              正数(100)       无需检查            删除红字，冲销本行对源单的影响，而且源单并无其他下游单
            1.1   0                          0              负数(-100)      无需检查            删除蓝字，冲销本行对源单的影响，而且源单并无其他下游单
            1.2   0                          正数(100)      正数(100)       无需检查            本行为蓝字正向累加，源单仅本行一个下游，无需检查超额
            1.3   0                          正数(100)      负数(-50)       无需检查            本行为蓝字反向冲销，源单仅本行一个下游，无需检查超额
            1.4   0                          负数(-100)     正数(100)       无需检查            本行为红字反向冲销，源单仅本行一个下游，无需检查超额
            1.5   0                          负数(-100)     负数(-50)       无需检查            本行为红字正向累加，源单仅本行一个下游，无需检查超额
            --------------------------------------------------------------------------------------------------------------------------
            2.0   正数(150)                  0              正数(60)        无需检查             删除红字，冲销本行对源单的影响，无需检查 (100 -> 80 + 70 -60，马上删除-60，允许删除，特殊情况：100 : 80 + 70 - 60 + 60, 此时删除-60，也会允许删除）
            2.1   正数(80)                   0              负数(-70)       无需检查             删除蓝字，相当于扣减，增加了可用量，无需检查超额（100 : 80 + 70, 此时删除70，应该允许删除）
            2.2   正数(90)                   正数(50)       正数(+30)       累计量-总影响        追加用量，累加了源单，减少了可用量，需要检查（100：90 + 20，此时把20修改为50，需要检查）
            2.3   正数(90)                   正数(10)       负数(-50)       无需检查             减少携带值，相当于扣减，增加了可用量，不需要检查（100：90 + 60，此时修改60，改为10，允许修改）
            2.4   正数(150)                  负数(-50)      正数(10)        无需检查             减少红字量，减少本行对源单的影响，无需检查 (100 -> 80 + 70 -60，马上修改-60，为-50，允许修改，特殊情况：100 : 80 + 70 - 60 + 60, 此时修改-60，为-50，也允许）
            2.5   正数(210)                  负数(-80)      负数(-20)       无需检查             增加红字量，相当于扣减，增加了可用量，不需要检查（100 -> 80 + 70 - 60 + 60，此时修改-60 为 -80，允许）
            --------------------------------------------------------------------------------------------------------------------------
            3.0   负数(-80)                  0              正数(70)       无需检查              删除红字，相当于扣减，增加了可用量，无需检查（-100 -> -80 - 70，此时删除-70，允许）
            3.1   负数(-150)                 0              负数(-60)      无需检查              删除蓝字，消除了本行对源单的影响，无需检查（-100 -> -80 -70 + 60，马上删除60，允许；特殊情况：-100 -> -80 -70 + 60 - 60，此时删除60，被允许删除，使超额多次）
            3.2   负数(-150)                 正数(80)       正数(20)       无需检查              增加蓝字量，相当于增加了可用量，允许 (-100: -80 -70 + 60, 此时修改60为80，允许）
            3.3   负数(-150)                 正数(50)       负数(-10)      无需检查              减少蓝字量，减少本行对源单的影响，无需检查（-100 -> -80 -70 + 60，此时修改60为50，允许）
            3.4   负数(-90)                  负数(-10)      正数(50)       无需检查              减少携带量，相当于扣减，增加了可用量，无需检查（-100: -90 -60，此时把-60，修改为-10，允许）
            3.5   负数(-100)                 负数(-100)     负数(-50)      累计量-总影响         追加用量，累加了源单，减少了可用量，需要检查（-100-> -90 -20，此时把-20修改为-50，需要检查） 
            --------------------------------------------------------------------------------------------------------------------------
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.ReplaceCommitFieldKey(System.String,System.Decimal)">
            <summary>
            替换超额检查公式中使用的反写字段：允许一次超额，需要采用反写前的值进行超额判断
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.BuildRowIndexTip">
            <summary>
            构造出更加人性化的行索引提示:  采购订单[XXXX]，[单据体]第XXX行：数量超过可采购数量；
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.GetBillNoTip(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            取单据编号
            </summary>
            <param name="activeRow"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic._excessCheckType">
            <summary>
            当前行采用的超额检查级别
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.BuildGetCheckTypeFunc">
            <summary>
            根据反写规则的配置情况，构建读取超额级别的函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.GetSourceBillNoTip">
            <summary>
            获取源单的单据编码格式化提示
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.CanWriteBack">
            <summary>
            本任务能否被执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckLogic.GetCurrRowExcessCheckType">
            <summary>
            当前行的超额级别读取函数：在本逻辑单元构建时，即做好判断，定义好函数实现代码，避免循环中重复判断
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.ExcessCheckBeforeWriteLogic">
            <summary>
            反写前进行超额检查：适用于正向操作时，允许超额一次检查的检查模式
            </summary>
            <remarks>
            允许超额一次检查，适用于在反写前检查；而禁止超额，则适用于在反写后检查
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic">
            <summary>
            常用单位数量计算
            </summary>
            <remarks>
            基本单位数量字段反写完毕, 推算常用单位数量值
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic._writeBackFields">
            <summary>
             根据基本单位数量找到所有需要反写的字段集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.CustomReadFields">
            <summary>
            自动单位换算过程中所需要用到的数据字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.DoTaskBefore">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.DoTask">
            <summary>
            
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.DoTaskLast">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.AddQtyRefField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.String)">
            <summary>
            添加基本单位数量及关联其的数量字段
            </summary>
            <param name="fields">需引用加载到数据包中的字段集合</param>
            <param name="baseQtyFieldKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.AddRelUnitQtyField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            关联了该单位的数量，也添加进去
            </summary>
            <param name="fields"></param>
            <param name="unitfield"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.HandleUnitTransferLogic">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BusinessFlow.WriteBackLogicUnit.UnitTransLogic.WriteBackRefQtyField(System.Int64,System.String)">
            <summary>
            执行数量同步
            </summary>
            <param name="baseunitId"></param>
            <param name="baseQtyFieldKey"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CachedLoadReferenceObjectManager">
            <summary>
            实现使用缓存服务器缓存引用加载功能
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.CachedLoadReferenceObjectManager.IsUseLocalCache">
            <summary>
            是否启用用本地缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ClearTemporaryFolderService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            删除服务器上临时文件夹的后台服务，定期清理临时文件夹
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ClearTemporaryFolderService.DeleteAllFiles(System.String)">
            <summary>
            删除目录下的所有文件及子目录
            </summary>
            <param name="strPath"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterReadercs.GetFilterMetaData(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="filter">类似如 fconditiontypeid = 1 的过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterReadercs.GetCompareType(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="filter">类似如 fconditiontypeid = 1 的过滤条件</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.CommonFilterService.C_MAX_PUBLISHSCHEME_COUNT">
            <summary>
            每个用户最多发布的方案数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterService.UpdateFilterSchemeSeq(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新用户过滤方案的显示顺序
            </summary>
            <param name="ctx"></param>
            <param name="strFormId"></param>
            <param name="strSchemeId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterService.PublishScheme(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.SchemeEntity,System.Boolean)">
            <summary>
            发布方案
            </summary>
            <param name="ctx"></param>
            <param name="schemeEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterService.GetMaxSchemeShowCount">
            <summary>
            获取快速查看方案最大显示数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterWriter.SaveSchemeEntry(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.CommonFilter.FilterObjectType,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="schemeID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterWriter.GetDeleteSchemeSql(System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject})">
            <summary>
            
            </summary>
            <param name="schemeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterWriter.DeleteScheme(Kingdee.BOS.Context,System.String)">
            <summary>
            删除过滤方案
            </summary>
            <param name="ctx"></param>
            <param name="schemeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterWriter.UpdateScheme(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.SchemeEntity)">
            <summary>
            该方法在5.0前都没有使用，暂时也仅仅用来更新是否共享等信息，
            过滤方案的保存本身直接用的是save方法
            </summary>
            <param name="ctx"></param>
            <param name="scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CommonFilterWriter.UpdateFilterSchemeSeq(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新用户过滤方案的显示顺序
            </summary>
            <param name="ctx"></param>
            <param name="strFormId"></param>
            <param name="strSchemeId"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue">
            <summary>
            批量处理数值字段的精度修正
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue._requests">
            <summary>
            需要处理精度的请求集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.RegisterSetValueRequest(Kingdee.BOS.App.Core.Convertible.BatchRequest.DecimalFieldSetValueRequest)">
            <summary>
            添加一个新的请求
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.SetDecimalScale">
            <summary>
            开始设置计算精度，并设置到数据包中
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.GetFieldScale(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.DecimalField,Kingdee.BOS.RoundMode@,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取字段的精度
            </summary>
            <param name="activeRow">字段所在当前行数据包</param>
            <param name="decimalField">数值字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.GetQtyEtcFieldScale(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String,System.String,System.Int32@,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取数量、单价、金额等字段的精度
            </summary>
            <param name="activeRow">数量字段所在的焦点行数据包</param>
            <param name="qtyField">数量字段</param>
            <param name="scaleFieldKey">控制字段中存储精度的属性</param>
            <param name="roundPropName">控制字段中存储舍入类型的ORM属性名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.GetControlFieldDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField@,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取控制字段的数据包
            </summary>
            <param name="activeRow">数量字段所在的焦点行数据包</param>
            <param name="qtyField">数量字段</param>
            <param name="controlField">输出控制字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.GetControlFieldDataObject(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取控制字段的数据包
            </summary>
            <param name="controlField">控制字段</param>
            <param name="ExtEntity">目标字段所在的实体扩展包</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.BusinessInfo">
            <summary>
            业务对象元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchDecimalFieldSetValue.TargetExtendedDataEntities">
            <summary>
            目标单扩展对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchOrgSeprFieldSetValue">
            <summary>
            批量组织隔离字段赋值
            单据转换过程中组织隔离字段复制，需要到目标组织中获取基础资料Id,为了提高性能，做成批量处理。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchOrgSeprFieldSetValue.BaseDataIdRelation">
            <summary>
            基础资料在两个不同组织中的Id关系
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.DecimalFieldSetValueRequest">
            <summary>
            赋值请求，记录调整精度的数值字段、对应的数据包、以及其他计算精度必要的依赖项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.DecimalFieldSetValueRequest.DecimalField">
            <summary>
            需设置精度的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.DecimalFieldSetValueRequest.OldValue">
            <summary>
            计算出的字段值，未处理精度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.DecimalFieldSetValueRequest.ExtEntity">
            <summary>
            数值字段对应实体扩展数据包
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.OrgSeprFieldSetValueRequest">
            <summary>
            组织隔离字段赋值值，
            这里只做RefId的复制，详细信息赋值，不再这里处理。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.OrgSeprFieldSetValueRequest.Field">
            <summary>
            组织隔离的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.OrgSeprFieldSetValueRequest.SourceRefId">
            <summary>
            源组织RefId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.OrgSeprFieldSetValueRequest.TargetRefId">
            <summary>
            目标组织RefId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.OrgSeprFieldSetValueRequest.EntityObject">
            <summary>
            字段所在实体数据包
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.BatchUnitConvert">
            <summary>
            批量单位换算
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest">
            <summary>
            单位换算
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.QtyField">
            <summary>
            要单位换算的数量字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.MaterialId">
            <summary>
            物料Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.BaseUnitId">
            <summary>
            基本单位Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.BaseQty">
            <summary>
            基本单位数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.UnitId">
            <summary>
            目标单位
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.Qty">
            <summary>
            换算结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.DataEntity">
            <summary>
            字段所在实体的数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.BatchRequest.UnitConvertRequest.UnitConvertObject">
            <summary>
            单位换算对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate">
            <summary>
            表单服务执行类：计算定义公式的值并填写到指定列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate.GetLoopEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            分析计算公式中的字段，找出循环实体
            </summary>
            <param name="info"></param>
            <param name="serviceElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate.GetHeadDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据单据体行，获取其所在的单据完整数据包
            </summary>
            <param name="entityRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate.ParseFieldAndSubField(System.String,System.String@,System.String@)">
            <summary>
            解析出字段及子字段
            </summary>
            <param name="key">字段名表达式如FOwnerID.FNumber</param>
            <param name="sField">字段标识</param>
            <param name="subField">字段的属性</param>
            <example>
            Key:FOwnerID.FNumber将解析出:
            sField:FOwnerID,subField:FNumber
            </example>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak">
            <summary>
            表单服务执行类：计算定义公式的值并填写到指定列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.GetLoopEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            分析计算公式中的字段，找出循环实体
            </summary>
            <param name="info"></param>
            <param name="serviceElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.GetValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.String)">
            <summary>
            计算公式，返回计算结果
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntitySet"></param>
            <param name="fireDataEntity"></param>
            <param name="fireEntity"></param>
            <param name="formula"></param>
            <param name="resultFieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.AddValueToPayOp(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Expression.Calc,System.String[])">
            <summary>
            把计算公式涉及的变量、值，添加到计算器
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据元数据</param>
            <param name="dataEntitySet">完整的数据包</param>
            <param name="fireDataEntity">触发计算的实体行数据包</param>
            <param name="fireEntity">触发计算的实体</param>
            <param name="PayOp">计算器</param>
            <param name="sParaKeys">字段Key数组</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.AddPayNoteItem(Kingdee.BOS.Expression.Calc,System.String,System.Object)">
            <summary>
            向计算器重添加变量、值
            </summary>
            <param name="PayNote"></param>
            <param name="strName"></param>
            <param name="objVal"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.ParseFieldAndSubField(System.String,System.String@,System.String@)">
            <summary>
            解析出字段及子字段
            </summary>
            <param name="key">字段名表达式如FOwnerID.FNumber</param>
            <param name="sField">字段标识</param>
            <param name="subField">字段的属性</param>
            <example>
            Key:FOwnerID.FNumber将解析出:
            sField:FOwnerID,subField:FNumber
            </example>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.Calculate_Bak.GetBaseDataPropValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String)">
            <summary>
            获取基础资料某个属性的值
            </summary>
            <param name="value"></param>
            <param name="baseKey"></param>
            <param name="propKey"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurDiscount">
            <summary>
            下推操作 表单服务执行类：获取采购折扣
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurDiscount.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurDiscount.GetLoopEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            分析计算公式中的字段，找出循环实体
            </summary>
            <param name="info"></param>
            <param name="serviceElement"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurPrice">
            <summary>
            下推操作 表单服务执行类：获取采购价格
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurPrice.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.GetPurPrice.GetLoopEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            分析计算公式中的字段，找出循环实体
            </summary>
            <param name="info"></param>
            <param name="serviceElement"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.QTYConversion">
            <summary>
            下推时表单服务执行类：单位换算
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.QTYConversion.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.QTYConversion.GetLoopEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            分析计算公式中的字段，找出循环实体
            </summary>
            <param name="info"></param>
            <param name="serviceElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.QTYConversion.SetDestQtyPropertyData(System.String[],System.String,Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            设置目标数量数值
            </summary>
            <param name="parameters"></param>
            <param name="e"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.BusinessService.SetOrgDefaultValue">
            <summary>
            给组织字段赋默认值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.BusinessService.SetOrgDefaultValue.DoAction(Kingdee.BOS.Core.Bill.PushBusinessServiceArgs)">
            <summary>
            执行服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper">
            <summary>
            计算表达式，返回结果；基于源单字段、数据行(DataRow)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.CONST_CALCULATERESULT">
            <summary>
            接收计算结果的变量名
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.CalculateFormula(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.String)">
            <summary>
            计算表达式；基于源单字段、数据行(DataRow)
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="info">单据元数据</param>
            <param name="dicFieldAlias">源单字段与别名关系字典</param>
            <param name="sourceRow">源单数据</param>
            <param name="formula">计算公式</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.GetValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.String,System.String)">
            <summary>
            实际计算表达式
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据元数据</param>
            <param name="dicFieldAlias">源单字段与别名关系字典</param>
            <param name="sourceRow">源单数据</param>
            <param name="formula">计算公式</param>
            <param name="resultFieldKey">接收计算结果的变量</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.AddValueToPayOp(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.String[],Kingdee.BOS.Expression.Calc)">
            <summary>
            把公式依赖的源单字段值添加到计算器
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">单据元数据</param>
            <param name="dicFieldAlias">源单字段与别名关系字典</param>
            <param name="sourceRow">源单数据</param>
            <param name="sParaKeys">表达式依赖的源单字段</param>
            <param name="PayOp">计算器</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.AddPayNoteItem(Kingdee.BOS.Expression.Calc,System.String,System.Object)">
            <summary>
            把变量添加到计算器
            </summary>
            <param name="PayNote">计算器</param>
            <param name="strName">变量</param>
            <param name="objVal">值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.CalculateFormulaHelper.ParseFieldAndSubField(System.String,System.String@,System.String@)">
            <summary>
            解析出字段及子字段
            </summary>
            <param name="key">字段名表达式如FOwnerID.FNumber</param>
            <param name="sField">字段标识</param>
            <param name="subField">字段的属性</param>
            <example>
            Key:FOwnerID.FNumber将解析出:
            sField:FOwnerID,subField:FNumber
            </example>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertDataService">
            <summary>
            单据转换数据服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRowCollection)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetDefaultOrgId(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRow[])">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetTargetOptionalOrgs(Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.GetTargetOptionalOrgsArgs)">
            <summary>
            获取下游单据可选的主业务组织列表，符合权限、职能、委托关系要求
            <p>应用场景：</p>
            1. 下推界面，用户选择目标单据后，需根据所选的上游单据、组织映射关系，确定下游单据可选的组织范围
            </summary>
            <param name="ctx">数据库上下文</param>
            <param name="args">参数对象，包括转换规则、所选上游单据</param>
            <returns>
            如果下游单据无主业务组织，返回空集合；
            如果下游单据有主业务组织，返回可选组织列表
            </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.ExecQuery(Kingdee.BOS.Core.List.ListSelectedRow[],System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.Boolean)">
            <summary>
            执行查询
            </summary>
            <param name="selectedRows"></param>
            <param name="sourceFieldKey"></param>
            <param name="sourceInfo"></param>
            <param name="sourceField"></param>
            <param name="QueryBuilderParemeter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.IsOrgMapValueEmpty(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRowCollection)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.IsOrgMapValueEmpty(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRow[])">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetVaildOrgIds(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取有权，且符合职能要求的有效组织列表
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetPermissionOrgIds(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取用户对指定单据，有权新增的组织
            </summary>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.GetFuncOrgIds(Kingdee.BOS.Core.Metadata.FieldElement.OrgField)">
            <summary>
            获取符合组织字段职能的组织
            </summary>
            <param name="optionalOrgIds"></param>
            <param name="businessInfo"></param>
            <returns>
            如果没有限定职能，将返回null；
            如果限定了职能，但是无符合职能的组织，将返回0个元素的空集合；</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.CheckSrcOrgIsEmpty(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.List.ListSelectedRow[],System.Collections.Generic.HashSet{System.Int64}@,System.Collections.Generic.HashSet{System.Int64}@)">
            <summary>
            读取源单行，检查映射组织及关联组织字段是否为空
            </summary>
            <param name="sourceInfo">源单元数据</param>
            <param name="sourceOrgField">源单映射组织字段</param>
            <param name="selectedRows">源单所选行</param>
            <param name="orgFldIds">映射组织字段值</param>
            <param name="bizOrgIds">空组织字段对应的关联组织值（映射组织为空，则需据关联组织，搜索符合委托条件的映射组织）</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertDataService.LoadOrgIdsByBizRelation(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Collections.Generic.HashSet{System.Int64},System.Collections.Generic.HashSet{System.Int64}@)">
            <summary>
            根据委托关系、委托组织，寻找可选的受托组织
            </summary>
            <param name="sourceInfo">单据元数据</param>
            <param name="sourceOrgField">受托组织字段据，本函数寻找可以填写到此字段的组织列表</param>
            <param name="bizOrgIds">委托组织</param>
            <param name="orgFldIds">输出可选受托组织列表</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertEngine">
            <summary>
            单据转换引擎
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertFormBusinessPolicy">
            <summary>
            单据转换，表单服务策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertFormBusinessPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            下推创建目标单据数据包的过程，附加执行表单服务活动
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertFormBusinessPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            选单创建目标单据数据包的过程，附加执行表单服务活动
            </summary>
            <param name="units"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction">
            <summary>
            执行表单服务活动
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.GetExecuteService(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ElementMetadata.FormBusinessServiceType},Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService)">
            <summary>
            返回下推表单服务运行类
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.GetAllFormBusiness(Kingdee.BOS.Context)">
            <summary>
            读取全部表单服务到本地
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.TargetBusinessInfo">
            <summary>
            目标单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.EventProxy">
            <summary>
            插件代理对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.Option">
            <summary>
            操作扩展参数对象，内部可以携带客户定制信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.AfterCreateLink">
            <summary>
            输入参数，是否已经处理完毕字段映射携带
            </summary>
            <remarks>
            通过此参数，控制本活动的执行顺序，必须在MappingAction之后
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.TargetExtendedDataEntities">
            <summary>
            输入输出参数：目标单扩展数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.Rule">
            <summary>
            选用的单据转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ExecuteFormBusinessAction.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建动作集合
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建动作集合
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.SwitchGroupByMode(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GetGroupingsResult(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.String,System.String,System.String,System.Int32,Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取分组结果
            </summary>
            <param name="sourceData"></param>
            <param name="groupFields"></param>
            <param name="groupFields2"></param>
            <param name="groupFields3"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GetGroupValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo},System.Int32,System.String)">
            <summary>
             获取分组字段值
            </summary>
            <param name="obj"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo">
            <summary>
            分单信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo.GroupKey">
            <summary>
            键值，分单字段值组合起来的字符串
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo.RowCount">
            <summary>
            已记录的源单总行数，过程中不断累加
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo.CurrBatchIndex">
            <summary>
            当前批次，默认为0，达到每批次上限后，往上递增
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.ConvertGroupByPolicy.GroupKeyInfo.CurrBatchRowCount">
            <summary>
            当前批次，已记录的源单总行数，过程中不断累加
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.ConvertHelper.ConvSourceExtKey">
            <summary>
            单据转换目标单上用来存放对应源单数据的扩展对象列的Key
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取映射关系的实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetEntityPkFieldName(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取实体在QueryService中使用的主键字段名
            </summary>
            <param name="info"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetMainOrgMap(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.ConvertElement.DefaultConvertPolicyElement,Kingdee.BOS.Core.Metadata.FieldElement.OrgField@)">
            <summary>
            取下游单据主业务组织字段的字段映射配置
            </summary>
            <param name="targetBusinessInfo"></param>
            <param name="mapPolicy"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetBusinessInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务对象
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.BuildFilterObject(Kingdee.BOS.Context,System.String)">
            <summary>
            构建过滤条件对象
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.BuildFilterObject2(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
             构建过滤条件对象,支持是否显示隐藏的字段
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="isShowHide"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetSourceFieldValue(Kingdee.BOS.Context,System.Object,Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            获取源单字段值
            </summary>
            <param name="row">数据行</param>
            <param name="fieldMap">字段映射关系</param>
            <param name="getTargetOrgField">取目标组织基础资料值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetPKFieldName(System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取字段所在单据体的主键
            </summary>
            <param name="fieldKey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetPKFieldName(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取字段所在单据体的主键
            </summary>
            <param name="fieldKey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetFieldProperty(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            获取真实字段的属性描述
            </summary>
            <param name="fieldKey"></param>
            <param name="dicFieldAlias"></param>
            <param name="getTargetOrgField">是否取目标组织基础资料；默认为是</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetRealFieldName(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            获取真实字段名称
            </summary>
            <param name="fieldKey"></param>
            <param name="dicFieldAlias"></param>
            <param name="getTargetOrgField">是否取目标组织基础资料；默认为是</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.IsMultiOrgBDField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            是否为多组织基础资料
            </summary>
            <param name="ctx"></param>
            <param name="bdField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetFieldValue(Kingdee.BOS.Context,System.Object,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据源字段名直接获取字段值；不考虑对源字段进行汇总/平均等处理；
            </summary>
            <param name="row">数据行</param>
            <param name="fieldMap">源字段名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetObjValue(Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement,System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            获取行数据，可能是一行，也可能是多行，如果是多行返回的是计算结果值，或默认值
            </summary>
            <param name="fieldMap"></param>
            <param name="fieldValue"></param>
            <param name="fieldName"></param>
            <param name="dataObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetObjValue(System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            获取行数据，可能是一行，也可能是多行，如果是多行返回的是计算结果值，或默认值
            </summary>
            <param name="fieldMap"></param>
            <param name="fieldValue"></param>
            <param name="fieldName"></param>
            <param name="dataObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetDeciamlFieldValue(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取数量字段值
            </summary>
            <param name="fieldName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetDataObjList(System.Object,System.Int32,System.Int32)">
            <summary>
            获取数据行列表
            </summary>
            <param name="sourceObj"></param>
            <param name="count">递归限制次数</param>
            <param name="time">第几次递归调用</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetTrackerTableId(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据表名获取表ID
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetTableNameByTableId(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            根据表ID获取表名
            </summary>
            <param name="ctx"></param>
            <param name="tableId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetFormIDByTableId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据表ID获取单据标识
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetFormIDByTableNumber(Kingdee.BOS.Context,System.String)">
            <summary>
            根据Name获取单据标识
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetSourceBusinessInfo(Kingdee.BOS.Context,System.Int32,System.String@)">
            <summary>
            根据表ID获取表对应的业务对象类型内码，该函数建立要做修改
            </summary>
            <param name="ctx"></param>
            <param name="tableId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetStateTracker(Kingdee.BOS.Context,System.String)">
            <summary>
            获取状态迁移图元数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetUnitTransQty(Kingdee.BOS.Context,System.Int64,System.Int64,System.Int64,System.Decimal)">
            <summary>
            获取单位之间的转换率
            </summary>
            <param name="destUnitObj"></param>
            <param name="srcUintObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.IsInvalidBillTracker(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            反写规则是否有效
            </summary>
            <param name="billTracker"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetFormulaResult(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            表达式计算结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddSelectItem(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.ConvertElement.DefaultConvertPolicyElement,System.Int64,Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement,System.String)">
            <summary>
            添加读取源单数据的选择项SelectItem对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="dctFieldAlias">已经添加的key字典</param>
            <param name="qbParemeter"></param>
            <param name="sourceInfo">上游单据</param>
            <param name="targetInfo">下游单据</param>
            <param name="defaultConvertPolicy">默认转换策略</param>
            <param name="targetOrgId">强制指定的下游单据主组织值</param>
            <param name="fieldMap">字段映射关系</param>
            <param name="sourceFieldKey">上游字段</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.CreateSelectItem(System.String)">
            <summary>
            创建选择项
            </summary>
            <param name="fieldKey">被选择的字段名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddSelectorSimpleItemInfo(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            添加无关联的简单字段
            </summary>
            <param name="dctFieldAlias">字段别名对应字典</param>
            <param name="qbParemeter"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddSelectorRefItemInfo(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String,System.String[])">
            <summary>
            添加普通的基础资料属性；非组织隔离
            </summary>
            <param name="dctFieldAlias">字段别名对照字典</param>
            <param name="qbParemeter"></param>
            <param name="field"></param>
            <param name="sourceFieldKey"></param>
            <param name="sourceFieldKey">映射关系中，源单字段的完整格式：包含了字段名.属性</param>
            <param name="keyItems">源单字段key拆分后的数组</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddSelectorOrgItemInfo(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.String,System.String[],System.String,System.Int64)">
            <summary>
            增加目标组织基础资料属性；组织隔离
            </summary>
            <param name="dctFieldAlias">字段别名对照字典</param>
            <param name="qbParemeter"></param>
            <param name="bdField">单据上引用的基础资料字段</param>
            <param name="sourceFieldKey">映射关系中，源单字段的完整格式：包含了字段名.属性</param>
            <param name="keyItems">源单字段key拆分后的数组</param>
            <param name="orgFullFieldName">业务单据上的组织字段名</param>
            <param name="useOrgId">目标组织常量值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddAllStatusItemInfo(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.Boolean,System.String,System.Int64)">
            <summary>
            根据基础资料携带映射关系的配置（仅携带已审核的数据），增加基础资料的状态字段；
            </summary>
            <param name="dctFieldAlias">字段别名对照字典</param>
            <param name="qbParemeter"></param>
            <param name="bdField">单据上引用的基础资料字段</param>
            <param name="fieldMap">基础资料携带关系</param>
            <param name="needAddOrgSelectItem">是否需增加目标组织资料属性</param>
            <param name="orgFullFieldName">业务单据上的组织字段名</param>
            <param name="useOrgId">目标组织常量值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.AddMaterailBillNo(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            加入组织隔离的物料编码信息
            </summary>
            <param name="ctx"></param>
            <param name="dctFieldAlias"></param>
            <param name="qbParemeter"></param>
            <param name="bdField"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.NeedGetBDOrgValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.ConvertElement.DefaultConvertPolicyElement,Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement)">
            <summary>
            判断基础资料字段，是否需要进行组织切换，取分配给目标组织的基础资料
            </summary>
            <param name="ctx">上下文</param>
            <param name="sourceInfo">上游单据</param>
            <param name="targetInfo">下游单据</param>
            <param name="defaultConvertPolicy">默认转换策略</param>
            <param name="fieldMap">字段映射关系</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetBDFieldUseOrgFieldKey(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            获取基础资料字段的控制组织字段名
            </summary>
            <param name="info"></param>
            <param name="bdField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.GetOrgFullFieldName(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.String)">
            <summary>
            获取组织字段的完整字段名: 表别名.字段
            </summary>
            <param name="queryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.SortSourceData(Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.List.ListSelectedRow},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            对读取到的源单行，按照在源单列表上，下推时所选的顺序，进行排序
            </summary>
            <param name="option">下推参数</param>
            <param name="rule">转换规则</param>
            <param name="sourceBusinessInfo">源单元数据</param>
            <param name="sourceEntryKey">源单单据体Key</param>
            <param name="sourceSubEntryKey">子单据体Key</param>
            <param name="dctFieldAlias">字段映射字典</param>
            <param name="selectedRows">源单所选下推行</param>
            <param name="data">未排序的源单数据行</param>
            <returns>排序后的源单数据行</returns>
            <remarks>
            排序原理：
            源单列表所选行，记录在SelectedRows对象中；
            到数据库读取到了源单行之后，根据SelectedRows对象中的顺序，进行重新组织；
            特别注意：SelectedRows中，可能是单据主键、单据体主键，子单据体主键，需根据此明细级别排序
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertHelper.SortPolicyIsEmpty(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement)">
            <summary>
            判断单据转换规则是否设置了排序策略
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService">
            <summary>
            单据转换元数据服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertFlowID(System.String,System.String,System.String)">
            <summary>
            根据源单和目标单ID获取流程ID
            </summary>
            <param name="sourceFormID">源单ID</param>
            <param name="targetFormID">目标单ID</param>
            <param name="oldFlowId">排除旧的流程标识</param>
            <returns>流程ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertBusinessFlows(Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.GetConvertBusinessFlowsArgs)">
            <summary>
            根据单据ID, 单据的分录内码，获取适用的业务流程
            </summary>
            <param name="serviceArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.ReadPushSourceBillInfo(System.String,Kingdee.BOS.Core.List.ListSelectedRow,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.GetConvertBusinessFlowsResult@)">
            <summary>
            读取源单数据，获取源单上必要的信息
            </summary>
            <param name="formId"></param>
            <param name="selectedRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.BuildFilterReadEntityRow(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.List.ListSelectedRow)">
            <summary>
            构建读取指定实体行数据的过滤条件
            </summary>
            <param name="info"></param>
            <param name="entity"></param>
            <param name="selectedRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertBills(Kingdee.BOS.Core.DynamicForm.FormOperationEnum,System.String,System.Boolean)">
            <summary>
            根据一个单据ID获取单据转换流程中的源单或目标单
            </summary>
            <param name="op">操作类型，ConvertPush:下推/ ConvertDraw:上拉</param>
            <param name="formID">源/目标单据ID，如果类型为下推，则formID为源单据，否则为目标单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.ReadSourceLinkToMeFlows(System.String)">
            <summary>
            读取能够指向到本单的业务流程图;
            </summary>
            <param name="formId"></param>
            <returns>只要发布的版本，都会被返回，不分析是否有效</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.ReadALinkToBFlows(System.String,System.String)">
            <summary>
            读取能够从A单据到B单据的全部流程图
            </summary>
            <param name="sourceFormId">上游单据</param>
            <param name="targetFormId">目标单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SearchTargetNodes(System.Collections.Generic.List{Kingdee.BOS.Core.BusinessFlow.FlowElement},Kingdee.BOS.Core.BusinessFlow.FlowElement,System.String)">
            <summary>
            在流程图上获取目标单所在的节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SearchSourceLines(Kingdee.BOS.Core.BusinessFlow.FlowElement,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.BusinessFlow.NodeElement},System.Collections.Generic.List{Kingdee.BOS.Core.BusinessFlow.LineElement}@)">
            <summary>
            在业务流程图上，寻找能够流向到指定节点的路线；且路线的起点单据为下推的源单
            </summary>
            <param name="flow"></param>
            <param name="formId"></param>
            <param name="targetNodes"></param>
            <param name="sourceNodes"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.CheckFormIsEntry(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            分析单据是否为入口单据；是则进入协作流程集合，否则进行有效流程集合
            </summary>
            <param name="formId"></param>
            <param name="obj"></param>
            <param name="partnerFlowIds"></param>
            <param name="validFlowIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetAllPaths">
            <summary>
            设计器——获取所有转换路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetRulesByFormId(System.String,System.String)">
            <summary>
            设计器——获取指定源单，目标单的转换规则元数据
            </summary>
            <param name="sourceFormId"></param>
            <param name="targetFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetLastExtendId(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.Object,System.Int32,System.Int32)">
            <summary>
            获取最后的扩展元数据Id
            </summary>
            <param name="data"></param>
            <param name="baseId"></param>
            <param name="count">递归限制次数</param>
            <param name="time">第几次递归调用</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetRules">
            <summary>
            设计器——取转换规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SaveRules(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData},System.String[],Kingdee.BOS.ISV)">
            <summary>
            设计器——保存规则
            </summary>
            <param name="rules"></param>
            <param name="oldIds"></param>
            <param name="isv"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SaveRules(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData},System.String[],Kingdee.BOS.ISV,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            设计器——保存规则
            </summary>
            <param name="rules"></param>
            <param name="oldIds"></param>
            <param name="isv"></param>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SaveIsDefaultCustValue(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData})">
            <summary>
            保存客户自己设置的默认值
            设计器重现保存时设置的默认值
            </summary>
            <param name="rules"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.SaveExtendMetadata(Kingdee.BOS.App.Core.MetadataXmlWriter,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData,Kingdee.BOS.ISV)">
            <summary>
            设计器——保存扩展的增量数据
            </summary>
            <param name="meta"></param>
            <param name="isv"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetExtendBaseId(System.String,System.String@,System.Int32,System.Int32)">
            <summary>
            获取要扩展的基类Id
            </summary>
            <param name="baseid"></param>
            <param name="id"></param>
            <param name="count">递归限制次数</param>
            <param name="time">第几次递归调用</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.DeleteRules(System.String,System.String)">
            <summary>
             设计器——删除规则
            </summary>
            <param name="sourceFormId"></param>
            <param name="targetFormId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.DeleteRules(System.String[])">
            <summary>
            设计器——删除规则
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetTargetForms(System.String,System.Boolean)">
            <summary>
            获取可下推的目标单
            </summary>
            <param name="sourceFormId">源单formId</param>
            <param name="notIncludeInvisible">不包含隐藏规则</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetSourceForms(System.String,System.Boolean)">
            <summary>
            获取可上拉的源单
            </summary>
            <param name="targetFormId">目标单FormId</param>
            <param name="notIncludeInvisible">不包含隐藏规则</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertForms(System.String,Kingdee.BOS.SqlParam[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="paramList"></param>
            <param name="notIncludeInvisible"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertRule(System.String,System.String,System.String)">
            <summary>
            根据源单和目标单ID获取启用的转换规则
            </summary>
            <param name="sourceFormID">源单ID</param>
            <param name="targetFormID">目标单ID</param>
            <returns>规则集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertRules(System.String,System.String)">
            <summary>
            根据源单和目标单ID获取启用的转换规则
            </summary>
            <param name="sourceFormID">源单ID</param>
            <param name="targetFormID">目标单ID</param>
            <returns>规则集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertFormIds(Kingdee.BOS.Core.DynamicForm.FormOperationEnum,System.String)">
            <summary>
            获取转换规则（下推/选单）可见的单据列表
            </summary>
            <param name="op">下推/选单</param>
            <param name="formId">源单/目标单</param>
            <returns>源单/目标单列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertRuleDataEntityForDelete(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取指定路径可删除的规则
            FPACKAGEID = null，即当前编辑的规则，可以删除
            </summary>
            <param name="context"></param>
            <param name="sourceFormId"></param>
            <param name="targetFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.GetConvertRuleDatas(System.String,System.String)">
            <summary>
            根据源单、目标单获取转换规则数据行。
            包括基类数据和扩展数据。可以用这些数据构造扩展结构树。
            </summary>
            <param name="sourceFormId"></param>
            <param name="targetFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.ConvertMetaDataService.UpdateConvertRuleVersion(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData)">
            <summary>
            更新转换规则基对象和其派生对象版本
            </summary>
            <param name="baseMeta"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.ConvertPlugInPolicy">
            <summary>
            单据转换,插件策略
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction">
            <summary>
            创建插件活动
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.CreateConvertPlugIns">
            <summary>
            创建插件实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.CreatePythonPlugIn(Kingdee.BOS.Core.Metadata.FormElement.PlugIn)">
            <summary>
            创建python插件
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.EventProxy">
            <summary>
            插件代理对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.Rule">
            <summary>
            单据转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.PlugInCreateAction.Option">
            <summary>
            调用方传入的业务控制选项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.DrawAgainOptionsAction">
            <summary>
            解析字段映射关系中配置的再次选单（仅追加）选项
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.DrawAgainOptionsAction.IsDrawAgain">
            <summary>
            是否追加选单
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.DrawAgainOptionsAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction">
            <summary>
            根据单据类型映射关系，生成筛选上游单据类型的过滤条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.GetCanPushSrcBillTypeIds(Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField,System.Boolean@,System.Boolean@,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject}@)">
            <summary>
            获取上游单据类型，这些都可以下推到目标单单据类型
            </summary>
            <param name="srcBillTypeField"></param>
            <param name="canDrawAll">不限源单类型</param>
            <param name="cannotDrawAnyOne">禁止选单</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.GetBillTypeId(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从单据类型数据包中获取单据类型内码
            </summary>
            <param name="billTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.GetBillTypeName(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从单据类型数据包中获取单据类型名称
            </summary>
            <param name="billTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.BuildIdAndNames(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.String@,System.String@)">
            <summary>
            拼接输出单据类型的内码与名称，用于过滤条件的in('xxx')中
            </summary>
            <param name="billTypeInfos">待输出的单据类型</param>
            <param name="ids">内码组合</param>
            <param name="names">名称组合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.GetPrefixDesc">
            <summary>
            得到提示前缀信息，为了使用户更清晰的理解
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.TargetBusinessInfo">
            <summary>
            目标单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.TargetBillTypeId">
            <summary>
            目标单单据类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterByBillTypeAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作添加基于单据类型映射关系生成的条件
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction">
            <summary>
            读取目标单据上的单据类型字段值；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction.TargetBusinessInfo">
            <summary>
            下游单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction.TargetData">
            <summary>
            下游单数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetBillTypeIdAction.TargetBillTypeId">
            <summary>
            输出目标单单据类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetMainOrgIdAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetMainOrgIdAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetMainOrgIdAction.TargetBusinessInfo">
            <summary>
            下游单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetMainOrgIdAction.TargetData">
            <summary>
            下游单数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.ReadTargetMainOrgIdAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.JustSaveAction">
            <summary>
            检查选项，看是否需要立即将下推后的结果立即保存
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction">
            <summary>
            目标单主组织映射值为空时，设置指定值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.TargetBusinessInfo">
            <summary>
            目标单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.DicFieldAlias">
            <summary>
            字段Key与字段别名关系字典
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SetTargetOrgAction.SourceData">
            <summary>
            序事簿上选择数的源单据数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction">
            <summary>
            在LinkEntry实体上记录源单的信息
            </summary>
            <remarks>
            CreateLinkAction的升级版，适用业务流程图推进
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._batchUnitConvert">
            <summary>
            批量单位转换需求管理对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcFormId">
            <summary>
            源单FormId
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcBillNoField">
            <summary>
            源单单据编号字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcEntity">
            <summary>
            源单关联主实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcEntityTableDefine">
            <summary>
            源单实体，表格定义对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcBillNoFieldProperty">
            <summary>
            源单单据编号属性，用于在源单数据包快速读取主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcPKFieldProperty">
            <summary>
            源单单据主键属性，用于在源单数据包中快速读取主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcEntryPKFieldProperty">
            <summary>
            源单关联实体主键属性，用于在源单数据包中快速读取主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcBFField">
            <summary>
            源单上的业务流程字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._srcBFFieldProperty">
            <summary>
            源单上的业务流程字段属性
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetBFField">
            <summary>
            目标单据体上的业务流程字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetEntity">
            <summary>
            目标单关联主实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetEntityRowModel">
            <summary>
            目标单关联主实体行数据模型，方便读取目标单据字段值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetLinkEntity">
            <summary>
            目标单关联实体配置信息，记录关联主实体、关联子实体、控制字段等配置信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetLinkSubEntity">
            <summary>
            目标单关联子实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetLinkSubEntityProperty">
            <summary>
            目标单关联子实体在父实体中的属性对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetSrcBillNoField">
            <summary>
            目标单上，记录源单编号的字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._targetSrcFormIdField">
            <summary>
            目标单上，记录源单类型的字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkFlowIdProperty">
            <summary>
            关联子实体，流程图
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkFlowLineIdProperty">
            <summary>
            关联子实体，流程路线
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkRuleIdProperty">
            <summary>
            关联子实体，转换规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkSTableNameProperty">
            <summary>
            关联子实体，源单表格编码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkSBillIdProperty">
            <summary>
            关联子实体，源单单据内码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._linkSIdProperty">
            <summary>
            关联子实体，源单分录内码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._dctTargetFlowIds">
            <summary>
            字典，记录每个源单流程图，到本单以后采用的新流程图
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._dctFlowDataObject">
            <summary>
            目标单据选用的业务流程字段数据包
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._dctWriteFieldMap">
            <summary>
            数据字典，记录各控制字段与其紧密相关的属性；在循环外把这些关联属性计算好，避免重复计算
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._dctFieldMapByTargetKey">
            <summary>
            用目标单据字段的Key，建立起字段映射关系字典，方便快速读取映射关系
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction._lstSourceBillNo">
            <summary>
            源单编号集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.CreateLinkEntity">
            <summary>
            填写关联关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.FillBusinessFlowField(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.ExtendedDataEntity,System.String@,System.Int32@)">
            <summary>
            填写目标单据体行上业务流程字段值；该字段值限定目标单据下推时，将采用的业务流程图
            </summary>
            <param name="targetEntry"></param>
            <param name="entryExtEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.InitFieldProperty(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            初始化一些关键字段的属性对象，用于后续快速读取数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.CreateLinkEntityRow(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            为目标单的行填写关联关系
            </summary>
            <param name="targetDataEntity">目标单据关联主实体数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.FillLinkOjb(System.String,System.String,System.String,System.Int32,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            关联关系表填值
            </summary>
            <param name="id">分录主键</param>
            <param name="billid">单据主键</param>
            <param name="obj">关联子实体数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.GetSourceEntityKey(System.String)">
            <summary>
            获取源单对应的实体  
            固定规则：单据头-->单据头  单据体-->单据体  子单据体-->子单据体
            </summary>
            <param name="targetEntityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.AddListValue(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            添加上游单据编号，用于填充下游单据的源单编号字段
            </summary>
            <param name="lst"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.GetEntityPkFieldName(System.String)">
            <summary>
            根据实体Key，获取主键的字段名称
            </summary>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.BuildWriteFieldMap">
            <summary>
            构建出控制字段各种关联属性；一次构建，重复使用，避免在循环中临时用，临时建
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.GetWriteBackFieldFormula(System.String)">
            <summary>
            寻找关联控制字段的值携带公式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.CalcFormula(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Scripting.BOSExpression)">
            <summary>
            计算公式, 获取数值型的返回结果
            </summary>
            <param name="extEntity"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.UnitConvert(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap,System.Decimal)">
            <summary>
            进行单位转换,根据基本单位数量，求常用单位数量；(实际是注册单据转换请求，最后批量处理)
            </summary>
            <param name="baseQtyField"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.GetSelectedLine(System.String)">
            <summary>
            根据上游单据的流程图，确定下推到本单采用的流程图与路线
            </summary>
            <param name="sourceFlowId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.ReadTargetFlowId(System.String,System.String@,System.Int32@)">
            <summary>
            根据当前流程图，读取下推后采用的流程图
            </summary>
            <param name="sourceFlowId"></param>
            <param name="targetFlowId"></param>
            <param name="lineId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteLog">
            <summary>
            记录单据转换日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.DictFlows">
            <summary>
            与下游单据有关联的全部流程图
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.TargetBillTypeId">
            <summary>
            目标单据类型；如为string.Empty，表示未限定单据类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.Rule">
            <summary>
            选用的单据转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.AfterCreateLink">
            <summary>
            输出参数，标记已经结束了关联关系记录处理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.Option">
            <summary>
            /操作选项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap">
            <summary>
            控制字段相关属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.WriteField">
            <summary>
            控制字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.Formula">
            <summary>
            控制字段值携带公式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.LinkWriteFieldProperty">
            <summary>
            控制字段在关联子实体中的字段属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.LinkWriteFieldOldProperty">
            <summary>
            控制字段在关联子实体中的旧值属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.UnitField">
            <summary>
            控制字段(基本数量)对应的单位
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.WriteFieldMap.RefQtyFields">
            <summary>
            基本数量对应的常用单位数量字段及其关联信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.RefQtyFieldMap">
            <summary>
            基本数量对应的常用单位数量字段及其关联信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.RefQtyFieldMap.QtyField">
            <summary>
            常用单位数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.RefQtyFieldMap.UnitField">
            <summary>
            常用单位
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FillLinkInfoAction.RefQtyFieldMap.MaterialField">
            <summary>
            物料字段
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SelectedLine">
            <summary>
            选择的流程图路线
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SelectedLine.FlowId">
            <summary>
            流程图
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.SelectedLine.LineId">
            <summary>
            路线
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction">
            <summary>
            根据指定的业务流程图，生成过滤条件语句，以筛选可选/可下推的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.BuildFilterByRule(System.String@)">
            <summary>
            根据转换规则，生成一个粗旷的过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.BuildFilterByFlowId(Kingdee.BOS.Core.Metadata.FieldElement.BusinessFlowField,System.String)">
            <summary>
            根据指定的业务流程图，生成准确的过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.Rule">
            <summary>
            转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.TargetBusinessInfo">
            <summary>
            下游单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作增加业务流程限制条件
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.AfterFilterByFlow">
            <summary>
            完成时设置本属性为空，以确定本活动在过滤数据活动之前执行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FilterByFlowAction.DictFlows">
            <summary>
            符合指定转换规则的流程图
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.GetResultAction">
            <summary>
            构建源单选择中行的Id的IN语句
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.GetResultAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.GetResultAction.SourceBusinessInfo">
            <summary>
            源单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.GetResultAction.TargetBusinessInfo">
            <summary>
            目标单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.GetResultAction.Result">
            <summary>
            转换结果
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction">
            <summary>
            检索出上游单据与下游单据之间存在的业务流程图
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.ReadSourceLinkToMeFlows">
            <summary>
            读取从上游单据到本单的全部业务流程图，以及其使用的路线
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.Rule">
            <summary>
            转换规则
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.TargetBusinessInfo">
            <summary>
            下游单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessFlowAction.DictFlows">
            <summary>
            上游单据与下游单据之间，允许转换的流程图
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessInfoAction">
            <summary>
            根据转换规则，初始化单据元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessInfoAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessInfoAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessInfoAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitBusinessInfoAction.EntryUpperLimitValue">
            <summary>
            分录行拆单上限值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.FilterPolicy.AddDrawFilter">
            <summary>
            选单时，把选单前产生的过滤条件，添加到取源单查询对象上
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.AddDrawFilter.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.AddDrawFilter.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.AddDrawFilter.ConvertFilter">
            <summary>
            选单过滤条件
            </summary>
            <remarks>
            由转换引擎，接收选单参数中的过滤条件后，设置到ConvertFilter变量上
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.AddDrawFilter.QueryBuilderParemeter">
            <summary>
            源单数据的查询对象，包括所选字段、过滤条件
            </summary>
            <remarks>
            本动作会把选单前服务产生的过滤条件，增加到源单数据查询对象中，确保抓出的所有源单行，均符合条件
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.FilterDescription">
            <summary>
            下推筛选源单条件描述对象
            </summary>
            <remarks>
            通过条件对象，记录各个筛选条件、条件的说明，条件的作用；
            取源单后，如果根据合并后的组合条件未取到任何数据，则需要逐个条件分析原因，以便明确提示用户；
            因此，在组合条件时，即同步构建条件描述对象备用，逐个记录条件及其描述、来源
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterDescription.#ctor(System.String,System.String,System.String,Kingdee.BOS.App.Core.Convertible.FilterModel)">
            <summary>
            构造函数
            </summary>
            <param name="filterSource">条件来源</param>
            <param name="filter">条件</param>
            <param name="filterDesc">条件说明</param>
            <param name="filterModel">取数目的：取基准记录，或者是基于基准取符合条件的记录</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterDescription.#ctor(System.String,System.String,System.String,Kingdee.BOS.App.Core.Convertible.FilterModel,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="filterSource">条件来源</param>
            <param name="filter">条件</param>
            <param name="filterDesc">条件说明</param>
            <param name="filterModel">取数目的：取基准记录，或者是基于基准取符合条件的记录</param>
            <param name="isDefualt">是否是默认说明，用于其他条件不满足时调用，做默认显示说明</param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.FilterSource">
            <summary>
            条件来源描述，说明过滤条件的来源，如来自过滤策略、来自插件、来自业务流程限制等...
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.Filter">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.FilterDesc">
            <summary>
            过滤条件描述，可选，如果为空，可以直接输出过滤条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.FilterModel">
            <summary>
            条件取数目的：取基准记录，或者是取合乎条件的记录；全部条件描述对象中，只有一个是取基准记录的条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.DataEntities">
            <summary>
            基准记录，或者是基于基准记录，被本条件排除的记录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterDescription.IsDefualt">
            <summary>
            是否是默认说明，用于其他条件不满足时调用，做默认显示说明
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.FilterModel">
            <summary>
            条件取数目的
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.FilterModel.GetAllRecords">
            <summary>
            读取全部记录，后续将要基于此，判断哪些记录因为条件不符，被排除了
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.FilterModel.GetFilterRecords">
            <summary>
            读取符合条件的记录，需要结合全部记录与此结果，分析出哪些记录被排除了
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GetSourceFieldValue.AutoMode.GetDeciamlFieldValue(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取数量字段值
            </summary>
            <param name="fieldName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GetSourceFieldValue.FormulaMode.GetExpressionValue(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context,Kingdee.BOS.Scripting.BOSExpression)">
            <summary>
            单据转换专业，计算一个表达式的值，例如：F1*F2
            </summary>
            <param name="dynamicRow">要进行计算的当前行。</param>
            <param name="businessInfo">整个表单对象的元数据</param>
            <param name="currentEntityKey">当前的实体</param>
            <param name="context">BOS的上下文</param>
            <param name="expression">取数表达式。</param>
            <returns>最终执行的值。</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.LinkEntityPolicy">
            <summary>
            关联实体策略实现类；
            </summary>
            <remarks>
            本策略实际影响的是反写，在下推选单过程中无影响，不需对应活动
            </remarks>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingMultiLangTextField.BatchMultiField”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingMultiLangTextField.SourceDataEntities">
            <summary>
            源单数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingMultiLangTextField.SourceMutilField">
            <summary>
            源单上游字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingMultiLangTextField.IsEabledTakeMultiLang">
            <summary>
            是否启用了单据转换支持多语言携带
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingDecimalField.MappingValue">
            <summary>
            把字段值填充到数据包中；
            重载此函数，拦截填充的过程：对于计算公式得出的字段值，需处理精度；精度可能依赖其它字段(如币别、单位)，故需要延迟到全部字段携带完毕时才处理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingDecimalField.BatchRequest">
            <summary>
            批量处理精度的任务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingLotField">
            <summary>
            批次处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DesignerMetadataService.FieldNamePathService.GetFieldNamePath(System.String)">
            <summary>
            获取字段的名称路径,如果是长路径则，则按‘,’拆分Key，再循环获取各级路径。
            </summary>
            <param name="fieldKeyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.TrackByStateDiagram(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,System.Boolean)">
            <summary>
            根据状态迁移图进行上下查
            </summary>
            <param name="ctx"></param>
            <param name="expandNodes">需要查找的单据节点</param>
            <param name="isCrossSameState">是否根据相同状态定位跨状态迁移图</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.TrackByLinkCopy(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.Boolean)">
            <summary>
            根据关联复制查找上下游单据
            </summary>
            <param name="ctx"></param>
            <param name="expandNodes">需要查找的单据节点</param>
            <param name="targetBill">目标单据</param>
            <param name="onlyDirectLinkBill">是否仅仅查找直接关联上下查单据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FillTrackByStates(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData)">
            <summary>
            遍历所有路由状态上下游
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FillTrackByState(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.StateRouteData)">
            <summary>
            查找单个路由状态上下游
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="stateRouteData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetTrackerDataByState_CID(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            查找单个路由状态路由记录
            </summary>
            <param name="ctx"></param>
            <param name="linkCIDs">关联表与内码</param>
            <param name="currentState">当前状态</param>
            <param name="stateTrackerTable">状态追踪表</param>
            <param name="linkStates">关联状态</param>
            <returns>关联状态记录</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildStateRouteBills(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData)">
            <summary>
            上下遍历路由记录，构造上下游单据
            </summary>
            <param name="stateTrackerElement"></param>
            <param name="curStateElement"></param>
            <param name="nodeDirection"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildStateRouteBill(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,System.Int32)">
            <summary>
            递归构造上/下查单据
            </summary>
            <param name="ctx"></param>
            <param name="trackRecords"></param>
            <param name="stateTrackerElement"></param>
            <param name="curStateElement"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="trackDirection">1: 上查， 2：下查</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildBillNode(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.String,System.Int32)">
            <summary>
            构造单据节点
            </summary>
            <param name="ctx"></param>
            <param name="sourceNode"></param>
            <param name="targetNode"></param>
            <param name="trackNode"></param>
            <param name="linkTrackRecords"></param>
            <param name="expandBillTrackData"></param>
            <param name="stateTrackerElement"></param>
            <param name="linkStateKey"></param>
            <param name="trackDirection"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildLinkNode(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,System.String,System.String,System.String)">
            <summary>
            构造单据连接节点
            </summary>
            <param name="ctx"></param>
            <param name="sourceNode"></param>
            <param name="targetNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="linkTrackRecords"></param>
            <param name="linkStateKey"></param>
            <param name="stateDiagramId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.IsCreateBillNode(Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,Kingdee.BOS.BusinessEntity.BillTrack.BillNode@,System.Int32,System.String)">
            <summary>
            判断是否合并单据，可以按照单据，也可以按照状态合并，原则不支持循环
            </summary>
            <param name="expandBillTrackData"></param>
            <param name="trackNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FilterDirectTrackRecords(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Int32,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement)">
            <summary>
            过滤出直接上下游记录
            </summary>
            <param name="trackRecords"></param>
            <param name="trackDirection"></param>
            <param name="sourceStateElement"></param>
            <param name="targetStateElement"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FilterSameStateTrackRecords(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.String,Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.Int32)">
            <summary>
            继续过滤掉, 当目标多个状态关联一个分录，并进行自由切换的场景。
            且目标其他状态关联值时，应该过滤掉记录。   
            比如： 
            A1-B1  A-B1-B2  A1->B1->B2->C1  
            A-B1-B2 和 A1->B1->B2->C1 不是A1->B1的直接下游记录, 因为下游单据B已经跳到B2状态了，说明B关联多个状态
            </summary>
            <param name="ctx"></param>
            <param name="trackRecords"></param>
            <param name="expandStateElement"></param>
            <param name="linkStateKey"></param>
            <param name="stateTrackerElement"></param>
            <param name="trackDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FillCrossStateProperties(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,System.Boolean)">
            <summary>
            计算出单据节点是否有跨状态迁移图的扩展节点
            (目前决定是否跨状态路由过，根据状态键是否相等处理）
            </summary>
            <param name="ctx"></param>
            <param name="expandBillTrackData"></param>
            <param name="isTrackState">是否根据状态判断是否在其他状态迁移图中路由过</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetBillTrackers(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BillTrack.StateRouteData},System.Boolean)">
            <summary>
            获得跨状态迁移图的反写规则
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FillCrossStateRouteDatas(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement},System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.BillTrack.StateRouteData},System.Boolean)">
            <summary>
            填充跨状态路由数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.IsHaveDataRoute(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            判断是否真的有数据路由过
            </summary>
            <param name="ctx"></param>
            <param name="linkCIds"></param>
            <param name="stateKey"></param>
            <param name="stateTrackerTable"></param>
            <param name="linkStateKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.TrackLinkCopyBills(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.Boolean)">
            <summary>
            查找关联复制单据
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="onlyFindDirectLinkBill"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.UpTrackLinkCopyBills(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.Boolean,System.Boolean)">
            <summary>
            上查关联复制单据
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="onlyFindDirectLinkBill"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.DownTrackLinkCopyBills(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.Boolean,System.Boolean)">
            <summary>
            下查关联复制单据
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="expandBillTrackData"></param>
            <param name="onlyFindDirectLinkBill"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetLinkEntity(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.BusinessEntity.BillTrack.BillNode)">
            <summary>
            寻找发起联查的单据实体
            </summary>
            <param name="businessInfo"></param>
            <param name="expendNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.HasViewPermission(Kingdee.BOS.Context,System.String)">
            <summary>
            检查当前用户在任何一个所属组织是否有查看单据的权限
            </summary>
            <param name="ctx"></param>
            <param name="formKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.IsMergeNode(Kingdee.BOS.BusinessEntity.BillTrack.BillTrackData,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillNode)">
            <summary>
            检查单据合并规则，基本原则不支持循环
            可以按照单据合并，也可以按照状态合并，目前按照单据合并
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.FindLinkCopyFormID(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            查找当前节点的上下查单据Id
            </summary>
            <param name="formKey"></param>
            <param name="trackDirection">1: 上查 2：下查</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetDownTrackFormKeys(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillNode)">
            <summary>
            得到下查的FormKeys
            </summary>
            <param name="ctx"></param>
            <param name="expandNode"></param>
            <param name="targetNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetDownTrackLinkRecords(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.String,System.String@)">
            <summary>
            得到下查关联记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetUpTrackLinkRecords(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,System.String)">
            <summary>
            得到上查关联记录
            </summary>
            <param name="ctx"></param>
            <param name="expandNode">当前单(下游)</param>
            <param name="srcFormId">联查目标单(上游)</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.GetBusinessInfoByTableNumber(Kingdee.BOS.Context,System.String)">
            <summary>
            根据Table得到BusinessInfo
            </summary>
            <param name="ctx"></param>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildTrackNode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构造状态构造上下查的单据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.BuildLinkCopyNode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构造需要关联上下查的单据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.TrackHelper.CreateLinkTrack(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.BillTrack.BillNode,Kingdee.BOS.BusinessEntity.BillTrack.BillNode)">
            <summary>
            创建一个关联上下查操作服务
            </summary>
            <param name="ctx"></param>
            <param name="billNode"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CheckSourceDrawDate">
            <summary>
            检验上拉时源单数据行，上拉不允许生成多行目标单
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction">
            <summary>
            下拉
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.GetTargetEntryEntity(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.ConvertElement.FieldMapElement}})">
            <summary>
            获取目标单实体
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.ModelProxy">
            <summary>
            服务端动态实体操作模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.TargetExtendedDataEntities">
            <summary>
            扩展数据实体数据集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.Option">
            <summary>
            操作选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.CreateDrawTargetAction.SrcDynObjs">
            <summary>
            源单数据包集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterOptionsAction">
            <summary>
            解析字段映射关系中配置的过滤选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterOptionsAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.FilterOptionsAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawResultAction">
            <summary>
            获取上拉结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawResultAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawResultAction.TargetExtendedDataEntities">
            <summary>
            目标单扩展对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction">
            <summary>
            获取上拉源单数据行
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SqlParamPKValues">
            <summary>
            内码参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SelectedRows">
            <summary>
            用户在序事簿上的选择对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.SourceData">
            <summary>
            序事簿上选择数的源单据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyDraw.GetDrawSourceDataAction.ConvertTakeData">
            <summary>
            转换携带数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction">
            <summary>
            下推时，在映射其他字段前，必须先处理主业务组织字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.SourceBusinessInfo">
            <summary>
            源单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.TargetBusinessInfo">
            <summary>
            目标单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.PushTargetExtendedDataEntities">
            <summary>
            下推生成的目标单扩展对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.DicFieldAlias">
            <summary>
            字段Key与字段别名关系字典
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.TargetExtendedDataEntities">
            <summary>
            目标单扩展对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.TargetBillTypeId">
            <summary>
            目标单单据类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.MappingMainOrgAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction">
            <summary>
            下推权限验证，删除没有权限的组织
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.Context">
            <summary>
            数据连接上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.TargetBusinessInfo">
            <summary>
            目标单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.TargetExtendedDataEntities">
            <summary>
            目标单扩展实体集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.ValidatePermissionAction.PushResult">
            <summary>
            下推结果
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction">
            <summary>
            根据分组数据创建目标实体
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction._EntityIGroupings">
            <summary>
            实体分组
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction._targetEntry">
            <summary>
            下游单据的关联实体
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.SetDefValueCalculatorBillType(Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField@)">
            <summary>
            设置默认值计算器依赖的单据类型；如果目标单据未采用单据类型管理，则忽略
            </summary>
            <param name="billTypeField"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.CreateSubHeadEntity(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Int32,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            按目标单据涉及的子单据头循环
            </summary>
            <param name="targetExtSet"></param>
            <param name="dataEntityIndex"></param>
            <param name="lstDataObjs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.CreateEntryEntity(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Int32,System.Object)">
            <summary>
            创建单据体实体对象
            </summary>
            <param name="targetExtSet"></param>
            <param name="dataEntityIndex"></param>
            <param name="GroupingRows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.GetTargetEntryEntity">
            <summary>
            获取目标单实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.CreateSubEntryEntity(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Int32,System.Int32,System.Object,Kingdee.BOS.Core.Metadata.EntityElement.EntryEntity)">
            <summary>
            按目标单据涉及的子单据头循环
            </summary>
            <param name="targetExtSet"></param>
            <param name="dataEntityIndex"></param>
            <param name="rowIndex"></param>
            <param name="subEntryGrouping"></param>
            <param name="iSubEntryGrouping"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.TargetBillTypeId">
            <summary>
            目标单据类型；如为string.Empty，表示未限定单据类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.GroupingData">
            <summary>
            分组数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.TargetBusinessInfo">
            <summary>
            目标单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.ModelProxy">
            <summary>
            服务端动态实体操作模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.PushTargetExtendedDataEntities">
            <summary>
            下推生成的扩展数据实体数据集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.CreateTargetAction.SrcDynObjs">
            <summary>
            源单数据包集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction">
            <summary>
            获取下推时主业务组织Id
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.Do">
            <summary>
            执行Action
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.MainOrgID">
            <summary>
            直接传入的目标组织内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.Option">
            <summary>
            下推选项，在下推是会在这里指定目标组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.SelectedRows">
            <summary>
            用户在序事簿上的选择对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.TargetBusinessInfo">
            <summary>
            目标单业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushMainOrgIDAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction">
            <summary>
            获取下推结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.Context">
            <summary>
            数据连接上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.SourceBusinessInfo">
            <summary>
            源单模型信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.TargetExtendedDataEntities">
            <summary>
            目标单扩展对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.TargetBusinessInfo">
            <summary>
            目标单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.PushResult">
            <summary>
            下推结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetPushResultAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction">
            <summary>
            下推时获取源单数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction._allCount">
            <summary>
            选择的行数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction._filterDescDatas">
            <summary>
            过滤说明数据列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction._testDataDict">
            <summary>
            转换测试数据字典
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction._isTest">
            <summary>
            是否是单据转换测试
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction._convertService">
            <summary>
            单据转换服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SetPushOperateVariables(System.String,System.Int32)">
            <summary>
            设置下推操作变量
            </summary>
            <param name="querySql">查询SQL</param>
            <param name="dataCount">下推的数据数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.AnalyzeTakeFail(Kingdee.BOS.Contracts.IQueryService,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            分析携带失败行数
            </summary>
            <param name="service"></param>
            <param name="data"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.AddFilterDescDataItem(Kingdee.BOS.App.Core.Convertible.FilterDescription,System.Int64,System.String)">
            <summary>
            添加过滤说明
            </summary>
            <param name="filterItem">下推筛选源单条件描述对象</param>
            <param name="row"></param>
            <param name="rowsMsg">过滤行说明</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.WhyNoData(Kingdee.BOS.Contracts.IQueryService)">
            <summary>
            尝试分析为什么没有加载到数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.GetFilterRowsMsg(Kingdee.BOS.App.Core.Convertible.FilterDescription,System.Int32,System.Int64,System.String,Kingdee.BOS.App.Core.Convertible.FilterDescription)">
            <summary>
            获得过滤行信息
            </summary>
            <param name="filterSeq">过滤序号</param>
            <param name="filterCount">被过滤掉的数据行数</param>
            <param name="filterDesc">过滤描述</param>
            <param name="defualtDesc">默认描述对象</param>
            <param name="filterObject">下推筛选源单条件描述对象</param>
            <returns>过滤行信息</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作将基于此集合，分析未取到源单行的原因
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.FilterAlertMessage">
            <summary>
            选单提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SqlParamPKValues">
            <summary>
            内码参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SelectedRows">
            <summary>
            用户在序事簿上的选择对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SourceData">
            <summary>
            序事簿上选择数的源单据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SelectedConvertBillCount">
            <summary>
            选择的单据转换行数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.SelectedByBill">
            <summary>
            是否按整单下推
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.ConvertTakeData">
            <summary>
            转换携带数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicyPush.GetSourceDataAction.FilterAdditionalInstructions">
            <summary>
            过滤附加说明
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitVariableAction">
            <summary>
            初始化重要的变量，包括转换模板、源/目标的BusinessInfo
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitVariableAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitVariableAction.ModelProxy">
            <summary>
            服务端动态实体操作模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InitVariableAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作对此集合进行初始化，方便后续动作使用
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction">
            <summary>
            在创建目标单据后，将源中的数据赋值到目标单据上。（使用配置的映射）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction._batchSetDecimalScale">
            <summary>
            批量设置数值精度的任务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction._batchMultiLangSetValue">
            <summary>
            多语言字段批量赋值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction._isEabledTakeMultiLang">
            <summary>
            是否启用了单据转换支持多语言携带
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction._lstNoTake">
            <summary>
            字段未携带信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.GetDateTimeValues``1(System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            获得日期字段值列表，用于日期字段取最大最小值判断
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="dataObjs">数据列表</param>
            <param name="dp">动态属性对象</param>
            <returns>日期字段值列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.BuildBaseDataProperty(Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingBaseDataField,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            构建基础资料的数据状态、禁用状态等特别的取数属性
            </summary>
            <param name="bdMapping"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.LoadReferenceObject">
            <summary>
            加载单据引用对象，
            前面的基础资料字段的映射只处理了RefId，这里才加载它的完整信息。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.MappingValue(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.App.Core.Convertible.MappingHelper.IMappingField,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Object,System.Object,System.String)">
            <summary>
            映射值
            </summary>
            <param name="extEntity"></param>
            <param name="mapping"></param>
            <param name="targetField"></param>
            <param name="mapValue"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.AnalyzeTakeFail(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Object,System.Object)">
            <summary>
            分析携带失败,对物料的分配进行检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.AnalyzeTakeFail2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.GetDetailEntityPKProperty(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String)">
            <summary>
            分析计算公式中依赖的字段，获取最明细单据体的主键属性对象；计算时，据此判断源单行是否重复计算
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.GetEntityLevel(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            为单据体划分等级，等级值最高的，为最明细实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.IsEnableMultiTak">
            <summary>
            是否启用单据转换支持多语言携带
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.SourceBusinessInfo">
            <summary>
            源单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.TargetBusinessInfo">
            <summary>
            目标单BusinessInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.DicFieldAlias">
            <summary>
            字段Key与字段别名关系字典
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.TargetExtendedDataEntities">
            <summary>
            目标单扩展对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.ConvertTakeData">
            <summary>
            转换携带数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldMappingAction.MappingRule.GetBDOrgValue">
            <summary>
            基础资料字段，是否需要进行组织切换，取目标组织字段值
            </summary>
            <remarks>
            1. 非基础资料字段，无需取目标组织字段值
            2. 共享基础资料，无需取目标组织字段值
            3. 分配型基础资料，但是上下游单据之间，基础资料的使用组织没有改变，无需取目标组织字段值
            4. 分配型基础资料，上下游单据之间，基础资料使用组织发生了改变，需取目标组织字段值
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.FieldNoTakeInfo">
            <summary>
            未携带信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction">
            <summary>
            获取关系映射使用的表和字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.DefaultSelectItems(Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            添加默认查询列，包括主键，单据编号，单据类型，分录序号
            </summary>
            <param name="qbParemeter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.GetBusinessFlowField">
            <summary>
            获取源单关联主实体上的业务流程字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.AddPKField(Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            主键Key
            </summary>
            <param name="qbParemeter"></param>
            <param name="entryEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.GetFormulaKeys(System.String)">
            <summary>
            分解计算公式，返回变量数组，排除常量
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.TargetBusinessInfo">
            <summary>
            下游单据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.EventProxy">
            <summary>
            插件代理对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.DicFieldAlias">
            <summary>
            基础资料字段Key与字段别名关系字典，因为默认别名可能会超出自定长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.QueryBuilderParemeterAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction">
            <summary>
            构建源单选择中行的Id的IN语句
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.Option">
            <summary>
            下推运行时选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.SelectedRows">
            <summary>
            用户在序事簿上的选择对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.AfterFilterByFlow">
            <summary>
            已经按照流程生成了过滤条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作增加基准过滤条件
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.SqlParamPKValues">
            <summary>
            内码参数对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.SelectedConvertBillCount">
            <summary>
            选择的单据转换行数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.DefaultPolicy.InSelectedRowAction.SelectedByBill">
            <summary>
            是否按整单下推
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.DefaultConvertPolicy">
            <summary>
            默认策略转换实现
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultConvertPolicy.OnCreating(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建下推动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultConvertPolicy.OnBeforeDraw(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            下拉选单前事件处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.DefaultConvertPolicy.OnDrawing(Kingdee.BOS.Core.BusinessPolicyModel.LogicalUnitCollection)">
            <summary>
            构建上拉动作集合
            </summary>
            <param name="units"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction">
            <summary>
            下推时，解析过滤策略中配置的过滤条件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.BuildTargetOrgBDFilter(System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            解析全部过滤对象，生成完整过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.BuildOneTargetBDOrgFilter(Kingdee.BOS.Core.Metadata.ConvertElement.TargetOrgBDFilterElement,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            解析过滤对象，生成一条过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.GetUseOrgId(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField)">
            <summary>
            在目标单数据包中，读取基础资俩的控制组织值
            </summary>
            <param name="bdField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.JoinFilter(System.String,System.String)">
            <summary>
            拼接两个过滤条件
            </summary>
            <param name="filter1"></param>
            <param name="filter2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.BuildFilterDesc(Kingdee.BOS.Core.CommonFilter.FilterObject,System.Nullable{System.DateTime})">
            <summary>
            分解过滤方案中的条件，逐行取条件及其描述
            </summary>
            <param name="filterObject"></param>
            <param name="now"></param>
            <param name="filterPolicys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.BuildCustFilterDesc(System.String)">
            <summary>
            构建附加条件的描述
            </summary>
            <param name="custFilterSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.BuildPlugFilterDesc(System.String,System.String,System.String)">
            <summary>
            构建插件条件的描述对象
            </summary>
            <param name="eventFilter">插件返回的条件</param>
            <param name="eventFilterDesc">插件给出的条件描述</param>
            <param name="oldFullFilter">插件事件之前，系统构建的条件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.SplitFilterRows(System.Collections.Generic.List{Kingdee.BOS.Core.CommonFilter.FilterRow},System.Int32,System.Int32)">
            <summary>
            分解条件行，按括号进行组合划分，划分为更小的条件组合返回；本函数允许递归
            </summary>
            <param name="rows"></param>
            <param name="count">递归限制次数</param>
            <param name="time">第几次递归调用</param>
            <returns></returns>
            <remarks>
            1. 由前到后，按括号进行组合，括号匹配成功，即为一个小组合；
            2. 如果总共只能划分出一个组合，则把前后括号去掉一个，再次递归分解
            3. 如果小组合间，采用or拼接，则放弃划分，整体返回；
            4. 如果小组合间，采用and拼接，则继续深入，递归分解
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.SourceBusinessInfo">
            <summary>
            源单业务信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.QueryBuilderParemeter">
            <summary>
            源单数据的查询语句
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.FilterDescList">
            <summary>
            过滤条件对象集合，集合了取数时使用的各个条件及其描述，在未取到数据时，要基于此分析取数失败原因
            </summary>
            <remarks>
            本动作添加条件策略配置的过滤条件
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.TargetMainOrgID">
            <summary>
            目标单主组织Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.FilterAlertMessage">
            <summary>
            选单提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.FilterPolicy.FilterDefaultAction.FilterAdditionalInstructions">
            <summary>
            过滤附加说明
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction">
            <summary>
            获取分组使用的表和字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction.AddSelectorItem(System.String)">
            <summary>
            设置表表名，选择字段字典
            </summary>
            <param name="groupFields"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.AddGroupByFieldItemAction.QueryBuilderParemeter">
            <summary>
            查询对象的参数对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction">
            <summary>
            默认分组方式，所有明细合并到一张单据中
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.GetHeadGroupKey">
            <summary>
            构建分单策略: 映射组织
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.TargetBusinessInfo">
            <summary>
            目标单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.GroupingData">
            <summary>
            分组后结果输出
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.EntryUpperLimitValue">
            <summary>
            分录行拆单上限值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByDefaultAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction">
            <summary>
            按指定的字段分组
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.Do">
            <summary>
            do
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.GetHeadGroupKey">
            <summary>
            构建分单策略: 源单内码 + 映射组织
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.GetEntryGroupKey">
            <summary>
            获取单据体数据分组配置；默认按照源单的单据体内码分组；
            用户配置分组字段后，将按这些字段分组，同一组的数据，灌入同一行分录；实际上是达成合并的效果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.GetSubEntryGroupKey">
            <summary>
            获取子单据体数据分组配置，默认按照源单的子单据体内码分组，如果源单无子单据体...
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.GetSourceBFlowField">
            <summary>
            获取上游单据单据体上的业务流程字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.TargetBusinessInfo">
            <summary>
            目标单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFieldAction.EntryUpperLimitValue">
            <summary>
            分录行拆单上限值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction">
            <summary>
            使用表达式分组
            </summary>
            <remarks>暂未支持此分组模式</remarks>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.TargetBusinessInfo">
            <summary>
            目标单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.EntryUpperLimitValue">
            <summary>
            分录行拆单上限值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByFormulaAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction">
            <summary>
            一张源单据生成一张目标单据方式，创建分组依据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.GetHeadGroupKey">
            <summary>
            构建分单策略: 源单内码 + 映射组织
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.SourceData">
            <summary>
            序事簿上选择数的源单据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.SourceBusinessInfo">
            <summary>
            源单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.TargetBusinessInfo">
            <summary>
            目标单据业务对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.SourceEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.SourceSubEntryKey">
            <summary>
            单据体分录Key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.EventProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.GroupingData">
            <summary>
            源单据分组数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.EntryUpperLimitValue">
            <summary>
            分录行拆单上限值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.GroupByPolicy.GroupByOneToOneAction.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingFieldFactory._mappingFields">
            <summary>
            服务接口-实现类 映射关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingFieldFactory.GetMappingClass(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取编辑器实例
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.MappingValue">
            <summary>
            填写字段值事件
            </summary>
            <remarks>
            多类别基础资料，从基础资料中派生；
            默认可以按照普通的基础资料字段进行赋值，即支持组织隔离；
            在所选类别为共享型基础资料时，创建组织与目标组织可能有不同，关联取数时，会取不到。此时，需要直接使用源单字段值
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.ValueIsNull(System.Object)">
            <summary>
            判断多类别基础资料值是否为空或者0，即未取到值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.GetControlField">
            <summary>
            取多类别基础资料字段在目标单据上的控制字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.GetControlFieldValue(Kingdee.BOS.Core.Metadata.FieldElement.ItemClassTypeField)">
            <summary>
            获取控制字段的值
            </summary>
            <param name="controlField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.IsMultiOrgBDField(Kingdee.BOS.Core.Metadata.LookUpObject)">
            <summary>
            是否为多组织基础资料
            </summary>
            <param name="ctx"></param>
            <param name="bdField"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingItemClassField.ItemClassTypeMapping">
            <summary>
            控制字段的映射对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField">
            <summary>
            弹性域
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.MappingValue">
            <summary>
            Mapu
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.LoadDataObject(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Object)">
            <summary>
            加载数据包
            </summary>
            <param name="formId">基础资料FormId</param>
            <param name="id">基础资料Id</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.Context">
            <summary>
            上下问
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.SourceBusinessInfo">
            <summary>
            源单单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.TargetBusinessInfo">
            <summary>
            目标单业务对象业务元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.SourceDataEntities">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.SourceOrgBDId">
            <summary>
            原始组织基础资料值: 用于判断基础资料是否分配
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.DicFieldAlias">
            <summary>
            字段别名字典
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Convertible.MappingHelper.MappingRelatedFlexGroupField.batchRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ConvertService">
            <summary>
            单据转换服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ConvertService.CST_OperationResultKey">
            <summary>
            不要随便重构这个常量名字，后面单据转换的输入属性会用到
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.PushByRuleKey(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.PushByRuleKeyArgs)">
            <summary>
            下推
            </summary>
            <param name="ctx">上下文</param>
            <param name="pushByRuleKeyArgs">参数对象</param>
            <returns>目标单数据包</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.Push(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.PushArgs,Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            下推服务: 增加了业务流程图的控制处理
            </summary>
            <param name="ctx">数据上下文</param>
            <param name="serviceArgs">下推控制参数</param>
            <param name="option">标准操作扩展参数包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.BeforeDraw(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.BeforeDrawArgs)">
            <summary>
            上拉选单前操作
            </summary>
            <param name="ctx"></param>
            <param name="beforeDrawArgs">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.Draw(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.DrawArgs,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            上拉
            </summary>
            <param name="ctx">数据上下文</param>
            <param name="drawArgs">上拉控制参数</param>
            <param name="option">标准操作扩展参数包</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetTrackerData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,System.String)">
            <summary>
            获取可钩稽数量
            </summary>
            <param name="ctx"></param>
            <param name="linkObjs">关联关系集合</param>
            <param name="billTracker">反写规则</param>
            <param name="targetId">目标单的行Id，当前编辑行内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetDefaultOrgId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRowCollection)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetTargetOptionalOrgs(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.GetTargetOptionalOrgsArgs)">
            <summary>
            获取下游单据可选的主业务组织列表，符合权限、职能、委托关系要求
            <p>应用场景：</p>
            1. 下推界面，用户选择目标单据后，需根据所选的上游单据、组织映射关系，确定下游单据可选的组织范围
            </summary>
            <param name="ctx">数据库上下文</param>
            <param name="args">参数对象，包括转换规则、所选上游单据</param>
            <returns>
            如果下游单据无主业务组织，返回空集合；
            如果下游单据有主业务组织，返回可选组织列表
            </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.IsOrgMapValueEmpty(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleElement,Kingdee.BOS.Core.List.ListSelectedRowCollection)">
            <summary>
            获取默认组织Id，单据下推时获取目标组织的默认Id
            </summary>
            <param name="rule">规则Id</param>
            <param name="selectedRows">下推选择的数据行</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetConvertRules(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据源单和目标单ID获取启用的转换规则
            </summary>
            <param name="ctx"></param>
            <param name="sourceFormID"></param>
            <param name="targetFormID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetConvertBills(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.FormOperationEnum,System.String,System.Boolean)">
            <summary>
            根据一个单据ID获取单据转换流程中的源单或目标单
            </summary>
            <param name="ctx"></param>
            <param name="op">操作类型，ConvertPush:下推/ ConvertDraw:上拉</param>
            <param name="formID">源/目标单据ID，如果类型为下推，则formID为源单据，否则为目标单据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetConvertBusinessFlows(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ServiceArgs.GetConvertBusinessFlowsArgs)">
            <summary>
            获取选中单据已经限定的业务流程图
            </summary>
            <param name="ctx"></param>
            <param name="serviceArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.SplitConvertRule(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="flowId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetConvertFormIds(Kingdee.BOS.Context,Kingdee.BOS.Core.DynamicForm.FormOperationEnum,System.String)">
            <summary>
            获取转换规则（下推/选单）可见的单据列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="op">下推/选单</param>
            <param name="formId">源单/目标单</param>
            <returns>源单/目标单列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.IsExistConvertRuleID(Kingdee.BOS.Context,System.String)">
            <summary>
            判断单据转换规则是否存在
            </summary>
            <param name="ctx"></param>
            <param name="convertRuleId"></param>
            <returns></returns>       
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetBillNos(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取源单编号
            </summary>
            <param name="ctx"></param>
            <param name="linkObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetUnitTransQty(Kingdee.BOS.Context,System.Int64,System.Int64,System.Int64,System.Decimal)">
            <summary>
            获取单位之间的转换率
            </summary>
            <param name="destUnitObj"></param>
            <param name="srcUintObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetUnitTransQty(Kingdee.BOS.Context,System.Int64,System.Int64,System.Decimal)">
            <summary>
            根据源单位数量获得单位数量
            </summary>
            <param name="ctx">上下文信息</param>
            <param name="materialId">物料ID</param>
            <param name="sourceUnitId">源单位ID</param>
            <param name="destUnitId">目标单位ID</param>
            <param name="qty">源单位数量</param>
            <returns>带精度格式的数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetDestUnitQtyByBaseQty(Kingdee.BOS.Context,System.Int64,System.Int64,System.Decimal)">
            <summary>
            根据基本单位数量获得单位数量
            </summary>
            <param name="ctx">上下文信息</param>
            <param name="materialId">物料ID</param>
            <param name="destunitId">目标单位ID</param>
            <param name="baseqty">基本单位数量</param>
            <returns>带精度格式的数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetBaseUnitQty(Kingdee.BOS.Context,System.Int64,System.Int64,System.Decimal)">
            <summary>
            根据单位数量获得基本单位数量
            </summary>
            <param name="ctx">上下文信息</param>
            <param name="materialId">物料ID</param>
            <param name="unitId">源单位ID</param>
            <param name="qty">源单位数量</param>
            <returns>带精度格式的数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetStateLinkAmount(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,System.String)">
            <summary>
            获取指定状态的勾稽数量
            </summary>
            <param name="ctx"></param>
            <param name="entityData">数据包</param>
            <param name="businessInfo">业务元数据</param>
            <param name="billTracker">反写规则</param>
            <param name="targetStateKey">目标状态</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetStateLinkAmount(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.Int64[])">
            <summary>
            获取指定状态的勾稽数量
            </summary>
            <param name="ctx"></param>
            <param name="sourceState">源单状态</param>
            <param name="targetState">目标状态</param>
            <param name="sourceIds">源单分录内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.IsSameIsv(Kingdee.BOS.Context,Kingdee.BOS.ISV,System.String)">
            <summary>
            判断当前packageID是否属于该开发商
            </summary>
            <param name="ctx"></param>
            <param name="isv"></param>
            <param name="packageId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.IsKingdeeIsv(Kingdee.BOS.Context,System.String)">
            <summary>
            判断当前包ID是不是属于金蝶
            </summary>
            <param name="ctx"></param>
            <param name="packageId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.UpdateConvertRuleVersion(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.ConvertRuleMetaData)">
            <summary>
            更新转换规则基对象和其派生对象版本
            </summary>
            <param name="ctx"></param>
            <param name="baseMeta"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.CorrectTailDiff(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ConvertElement.TailDiffType,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            矫正尾差
            </summary>
            <param name="ctx"></param>
            <param name="diffType"></param>
            <param name="dataEntitis"></param>
            <param name="bInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ConvertService.GetEnableWhyNoData(Kingdee.BOS.Context)">
            <summary>
            获得是否启用单据转换携带失败时，详情界面显示逐个条件的分析结果
            </summary>
            <param name="ctx">登录上下文</param>
            <returns>否启用</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustPortalService.GetPersonalCustPortalInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取客户门户公共信息（购物篮商品数量、我的收藏商品数量）
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustPortalService.ReadBasketGoodsCount(Kingdee.BOS.Context,System.Int64,Kingdee.BOS.BusinessEntity.CustPortal.CustPortalInfo@)">
            <summary>
            读取购物篮商品的数量
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="custPortalInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustPortalService.ReadFavoriteGoodsCount(Kingdee.BOS.Context,System.Int64,Kingdee.BOS.BusinessEntity.CustPortal.CustPortalInfo@)">
            <summary>
            读取我的收藏的商品数量
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="custPortalInfo"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Utils.CacheObjectExcluded">
            <summary>
            设置不允许缓存基础数据的对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.CacheObjectExcluded.AllowedCache(System.String)">
            <summary>
            判断基础数据是否允许缓存
            </summary>
            <param name="region">如果存在dataEntityAttr.Alias则用的是物理表名，否则是dt.Name</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DataEntityCacheManager">
            <summary>
            帮助处理实体缓存的管理工具，未处理版本。请勿长时间持有此对象。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            通过传入上下文和实体类型，创建实例。
            </summary>
            <remarks>
            使用参考
            using (DataEntityCacheManager cacheManager = new DataEntityCacheManager(ctx, dt))
            {
                // TODO:
            }
            </remarks>
            <param name="ctx">BOS识别的上下文对象。</param>
            <param name="dt">实体类型，一个DataEntityCacheManager只能管理一个实体类型。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Boolean)">
            <summary>
            通过传入上下文和实体类型，创建实例。
            </summary>       
            <param name="ctx"></param>
            <param name="dt"></param>
            <param name="useLocalCache">7.3版本后该参数已无效</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.TryGetFromCache(System.Object,System.Object@)">
            <summary>
            通过给定一个主键，尝试从缓存中获取其实体。
            </summary>
            <param name="pk">主键的值</param>
            <param name="dataEntity">如果在缓存中找到此主键的值，将返回对应缓存的数据。否则返回null</param>
            <returns>如果在缓存中找到此主键的实体，返回true，否则返回false.</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.RemoveCacheByPrimaryKey(System.Object)">
            <summary>
            在更新或删除某个实体时，需调用此方法删除缓存中的数据。
            </summary>
            <param name="pk">实体其主键的值。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.PutCache(System.Object)">
            <summary>
            传入某个实体，将其存放到缓存中。
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DataEntityCacheManager.GetTableName(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            获取实体所映射的物理表名称
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.DataEntityCacheManager.AllowedCache">
            <summary>
            是否允许缓存
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DefaultValueService.BillTypeDefaultValue">
            <summary>
            单据类型默认值扩展类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.BillTypeDefaultValue.Initialize(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel)">
            <summary>
            初始化的时候准备单据类型的值
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.BillTypeDefaultValue.GetDefaltValue(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            重载方法，字段的默认值从单据类型配置信息中获取
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.DefaultValueService.BillTypeDefaultValue.BillTypeId">
            <summary>
            单据类型内码：
            此树形必须在计算默认值前完成设置，否则单据类型的默认值不会起作用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetBillNoFunction.Eval">
            <summary>
            获取新的单据编号默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetBusinessFlowFunction.Eval">
            <summary>
            获取新的单据编号默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetBusinessFlowFunction.PutCacheDefaultFlowId(Kingdee.BOS.Core.Bill.BillOpenParameter,System.String,System.String)">
            <summary>
            缓存单据类型、默认业务流程
            </summary>
            <param name="openParam"></param>
            <param name="billTypeId"></param>
            <param name="defaultFlowId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetBusinessFlowFunction.GetCacheDefaultFlowId(Kingdee.BOS.Core.Bill.BillOpenParameter,System.String,System.String@)">
            <summary>
            从缓存中读取默认业务流程
            </summary>
            <param name="openParam"></param>
            <param name="billTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DefaultValueService.Function.GetDateFunction">
            <summary>
            取当前日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetDateFunction.GetCurrentUserTime">
            <summary>
            获取用户时区时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetDateFunction.GetCurrentSystemTime">
            <summary>
            获取系统时区时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetTimeFunction.GetCurrentUserTime">
            <summary>
            取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DefaultValueService.Function.GetTimeFunction.GetCurrentSystemTime">
            <summary>
            获取系统时区时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DynamicPasswordCardService.GetDynamicPasswordInfo(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取动态密码卡信息
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DynamicPasswordCardService.UpdateBindingStatus(Kingdee.BOS.Context,System.Int32,System.String,System.Int32)">
            <summary>
            更新动态密码卡的绑定状态
            </summary>
            <param name="ctx"></param>
            <param name="dynamicPasswordId"></param>
            <param name="bindingStatus"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DynamicPasswordCardService.UpdateSecretKey(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            更新动态密码卡加密信息
            </summary>
            <param name="ctx"></param>
            <param name="serialNumber"></param>
            <param name="secretKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DynamicPasswordCardService.UpdateUserDynamicPassword(Kingdee.BOS.Context,System.Int32,System.Int32)">
            <summary>
            用户绑定动态密码卡
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="dynamicPasswordCardId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DynamicPasswordCardService.GetDynamicPasswordInfoByUserId(Kingdee.BOS.Context,System.Int32)">
            <summary>
            根据用户ID获取动态密码卡信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>动态密码卡信息</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Expression.ExprFuncService">
            <summary>
            函数调用外界功能实现类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.IsPush(Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DependencyRules.IBOSDynamicRow)">
            <summary>
            判断行数据是否已经下推其他单据
            </summary>
            <param name="model"></param>
            <param name="info"></param>
            <param name="activeRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.GetParamter(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            返回系统参数值
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.GetBillTypeParameter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            返回单据类型参数
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="billtypeid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.GetBillTypeParameter(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            返回单据类型参数
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="billtypeid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.IsFloadUnitConvert(Kingdee.BOS.Context,System.Int64,System.Int64,System.Int64)">
            <summary>
            返回当前物料是否浮动单位换算
            </summary>
            <param name="materialId"></param>
            <param name="sourceUnitId"></param>
            <param name="targetUnitId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.GetAcronym(Kingdee.BOS.Context,System.String)">
            <summary>
            获取生僻字首字母
            </summary>
            <param name="ctx"></param>
            <param name="inputStr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Expression.ExprFuncService.GetBaseDataPKValue(Kingdee.BOS.Context,System.String,System.String,System.Int64,System.String)">
            <summary>
            获取基础资料内码
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="number"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.SaveFlexFixedColumn(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            通用保存操作调用，根据规划，弹性域固定列只在单据体列表
            </summary>
            <param name="info"></param>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.BatchSaveEntityFlexObject(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            批量保存实体的所有弹性域字段
            </summary>
            <param name="dataEntities"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.GetFlexEntitys(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Boolean)">
            <summary>
            获取弹性域对象字段
            </summary>
            <param name="entity">实体元数据</param>
            <param name="isFixColSave">是否有固定列保存（单据保存服务时，仅固定列调用弹性域保存）</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.BatchSaveFlexObject(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field}},Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            批量保存弹性域对象
            </summary>
            <param name="dataEntities">单据数据对象</param>
            <param name="entitys">弹性域字段所在实体</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.GetFlexObjectsOfDataEntities(Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.FlexDataObject},System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject}},System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            从数据对象分录取弹性域对象，并将对象与单据实体的弹性域对象匹配，方便保存后根据匹配直接反写，避免再次循环数据
            </summary>
            <param name="info"></param>
            <param name="dictFlexDatas">弹性域数据对象（包含弹性域对象和单据行对象数据）</param>
            <param name="list"></param>
            <param name="rowObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.SaveFlexObjects(System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.FlexDataObject})">
            <summary>
            保存弹性域对象，并反写id到数据包
            </summary>
            <param name="dictFlexDatas">弹性域数据对象（包含弹性域对象和单据行对象数据）</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.FlexValToString(System.Text.StringBuilder,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            构造新的对象并返回对象是否为空
            </summary>
            <param name="sb">key值</param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.GetFlexDataId(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject}},System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            根据弹性域动态字段值匹配ID（在弹出和固定列弹性域保存时调用，检查弹性域的数据是否已存在，避免弹性域数据冗余）
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.GetFlexDataFilter(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            字段组合过滤条件
            </summary>
            <param name="obj"></param>
            <param name="objList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexSaveService.GetFlexDataByFilter(Kingdee.BOS.Context,System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取维度数据集
            </summary>
            <param name="ctx"></param>
            <param name="flexDataFormId"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.FlexService">
            <summary>
            弹性域服务类
            科目核算维度
            物料辅助属性
            仓库辅助属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetInUseFlexItemInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取前基础资料所启用的维度信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.IsExistRefSelf(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            检查弹性域引用的基础资料是否又引用自身，例如物料有辅助属性，辅助属性又添加了物料
            </summary>
            <param name="ctx"></param>
            <param name="flexDataFormId">主要针对核算维度和辅助属性检查</param>
            <param name="sourceFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexItemPropertys(Kingdee.BOS.Context,System.String)">
            <summary>
            FlexAuxProperty用于元数据构建和维度编辑界面显示，但需求变化特殊属性用于运行时（未来可考虑元数据定义增加属性，目前仅辅助属性自定义用到没有通用性）
            </summary>
            <param name="ctx"></param>
            <param name="flexDataFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetAuxPropIdByOrgId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            根据组织ID获取该组织启用的辅助属性
            </summary>
            <param name="ctx"></param>
            <param name="orgId">组织ID</param>
            <returns>辅助属性ID和FNumber</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.FlexService.GetAuxPropIdInAllOrgs(Kingdee.BOS.Context)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetStockLocId(Kingdee.BOS.Context)">
            <summary>
            获取该仓位值集
            </summary>
            <param name="ctx"></param>
            <returns>仓位值集</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.FlexService.GetStockLocIdByDB(Kingdee.BOS.Context)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexDataByFilter(Kingdee.BOS.Context,System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取维度数据集
            </summary>
            <param name="ctx"></param>
            <param name="flexDataFormId"></param>
            <param name="conditon"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexDataFilter(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            字段组合过滤条件
            </summary>
            <param name="obj"></param>
            <param name="objList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexDataId(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            根据弹性域动态字段值匹配ID（在弹出和固定列弹性域保存时调用，检查弹性域的数据是否已存在，避免弹性域数据冗余）
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexItemInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取前基础资料所启用的维度信息（有缓存）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexItemInfoWithNoCache(Kingdee.BOS.Context,System.String)">
            <summary>
            获取前基础资料所启用的维度信息（直接从数据库获取）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FlexService.GetFlexTypeNameAllLang(Kingdee.BOS.Context)">
            <summary>
            获取核算维度类型名称（多语言）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.RemoveObjectCache(Kingdee.BOS.Context,System.String[])">
            <summary>
            清除元数据的缓存，以便运行时加载正确；   
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.RemoveSubClassMetaDataCache(Kingdee.BOS.Context,System.String)">
            <summary>
            如果基类更新元数据，则子类同样需要更新缓存
            </summary>
            <param name="formid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.UpdateAllObjectTypeCache(Kingdee.BOS.Context)">
            <summary>
            更新所有业务对象缓存(慎用)
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetFormCacheKey(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            统一管理窗体缓存id号
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetModelTypeCacheKey(System.String,System.Int32)">
            <summary>
            获取领域模型元数据的缓存id号
            目前单据转换、反写规则、业务流程需要增加领域模型Id作为缓存id号
            </summary>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistMetaObjectType(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            判断业务对象是否存在。（不支持工作流和弹性域模型）
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="modelTypeId">模型类型，不支持工作流和弹性域模型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistsMetaObjectRef(Kingdee.BOS.Context,System.String)">
            <summary>
            判断是否存在业务对象引用
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistSubClass(Kingdee.BOS.Context,System.String)">
            <summary>
            某个对象是否存在子类
            </summary>
            <param name="id">对象id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistMetaObjectType(Kingdee.BOS.Context,System.String)">
            <summary>
            当前元数据对象是否存在`
            </summary>
            <param name="id">对象id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistLayoutView(Kingdee.BOS.Context,System.String)">
            <summary>
            当前视图对象是否存在
            </summary>
            <param name="id">对象id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.UpdateFormTypeVersion(System.Collections.Generic.IEnumerable{System.String},Kingdee.BOS.Context,System.Int32,System.String)">
            <summary>
            此方法会创建新的版本号（慎用）
            </summary>
            <param name="formids"></param>
            <param name="ctx"></param>
            <param name="modelTypeId"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetFormTypeVersion(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="areaCacheKey"></param>
            <param name="formId"></param>
            <param name="modelTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.UpdateFormTypeVersion(System.String,System.Int64,Kingdee.BOS.Context,System.Int32,System.String)">
            <summary>
            更新自己和此对象派生的对象的版本
            </summary>
            <param name="baseObjectId"></param>
            <param name="version"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.RemoveObjectTypeDataCache(Kingdee.BOS.Context,System.String)">
            <summary>
            移除业务对象数据缓存
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">业务对象标识(非扩展节点)</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetLookUpObjects(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取基础资料LookUpObjects
            </summary>
            <param name="ctx"></param>
            <param name="ids">LookUpObject.FID集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetLookUpFieldConfig(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取基础资料Lookup配置-模板查询字段配置
            </summary>
            <param name="ctx"></param>
            <param name="ids">fformid集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetLookupObjects(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.LookUpObjectFilter)">
            <summary>
            获取基础资料LookUpObjects；设计器使用，运行器勿用，关键属性缺失
            </summary>
            <param name="oFilter">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetLookupObjectsRuntime(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.LookUpObjectFilter)">
            <summary>
            获取基础资料LookUpObjects；运行时使用
            </summary>
            <param name="oFilter">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetNotePrintExtendObject(System.String,Kingdee.BOS.Context)">
            <summary>
            获取套打的扩展对象
            </summary>
            <param name="formId"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetLayoutViewByID(System.String,Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="layoutViewID"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetSubClassInfo(System.String,Kingdee.BOS.Context)">
            <summary>
            获取子类信息
            </summary>
            <param name="formId"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetSubOjbects(System.String,Kingdee.BOS.Context)">
            <summary>
            获取子类信息
            </summary>
            <param name="formId"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetExtendFormIds(Kingdee.BOS.Context,System.String)">
            <summary>
            获得单据的扩展单据列表
            </summary>
            <param name="ctx"></param>
            <param name="formid">当前单据</param>
            <returns>返回扩展当前单据的列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetRefMetaObject(Kingdee.BOS.Context,System.String)">
            <summary>
            获取引用指定对象的所有对象
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ListBaseDataDelException(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料引用检查例外配置列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ListBaseDataReference(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料引用关系列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">formId</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ComputePassword(System.String,System.Byte[])">
            <summary>
            计算密码
            </summary>
            <remarks>
            算法：
            1、合并xml字节数组+开发商密码MD5字节数组。
            2、计算第1步字节数组MD5。
            </remarks>
            <param name="xml"></param>
            <param name="localpsw"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetCloudContactsBaseField(Kingdee.BOS.Context,System.String)">
            <summary>
            云之家讯通集成，判断联系对象配置
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.IsExistsMultiApprovalTable(Kingdee.BOS.Context,System.String)">
            <summary>
            是否存在多级审核表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ExistMultiApprovalReveiverColumn(Kingdee.BOS.Context,System.String)">
            <summary>
            多级审核表是否存在当前处理人字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ExistMultiApprovalASCProcInstStateColumn(Kingdee.BOS.Context,System.String)">
            <summary>
            多级审核表是否存在影像状态字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.CreateMultiApprovalReceiver(Kingdee.BOS.Context,System.String)">
            <summary>
            创建多级审核表的当前处理人字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.AlterMultiApprovalReceiver(Kingdee.BOS.Context,System.String)">
            <summary>
            修改多级审核表的当前处理人字段长度为510
            </summary>
            <param name="ctx"></param>
            <param name="multiApprovalTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.CreateMultiApprovalASCProcInstState(Kingdee.BOS.Context,System.String)">
            <summary>
            创建多级审核表的影像状态字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetDatatableFieldType(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段在内存Datatable中对应的类型
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetDatatableFieldType(Kingdee.BOS.SqlStorageType)">
            <summary>
            获取字段在内存Datatable中对应的类型
            </summary>
            <param name="storageType">数据库存储类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.ExistsObjectType(Kingdee.BOS.Context,System.String)">
            <summary>
            业务对象是否存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">业务对象标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="versionXml">修改后主元数据xml</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="remark">备注</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="dicSourceLang">修改前多语言元数据集合</param>
            <param name="dicVersionLang">修改后多语言元数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            获取元数据修改日志Insert SQL
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="remark">备注</param>
            <param name="dicSourceLang">修改前多语言元数据集合</param>
            <param name="dicVersionLang">修改后多语言元数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.GetMetadataLogInsertSql(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Meta.MetadataLogParam)">
            <summary>
            传入登录上下文及元数据修改日志参数，返回插入元数据修改日志的执行脚本集合。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="logParam">元数据修改日志参数。</param>
            <returns>返回插入元数据修改日志的执行脚本集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.WriteMetadataLog(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            记录元数据修改日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="versionXml">修改后主元数据xml</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.WriteMetadataLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            记录元数据修改日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="dicSourceLang">修改前多语言元数据集合</param>
            <param name="dicVersionLang">修改前多语言元数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.WriteMetadataLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            记录元数据修改日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="objectId">业务对象标识</param>
            <param name="type">1-表单元数据 3-表单视图 4-套打模板 5-单据转换规则 6-反写规则</param>
            <param name="sourceXml">修改前主元数据xml</param>
            <param name="versionXml">修改后主元数据xml</param>
            <param name="fullVersionXml">修改后完整主元数据xml</param>
            <param name="remark">备注</param>
            <param name="dicSourceLang">修改前多语言元数据集合</param>
            <param name="dicVersionLang">修改前多语言元数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.FormDBUtils.WriteMetadataLog(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Meta.MetadataLogParam)">
            <summary>
            传入登录上下文及元数据修改日志参数，记录元数据修改日志。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="logParam">元数据修改日志参数。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ImprotantNoticeService.GetCurrentImportantNoticeList(Kingdee.BOS.Context)">
            <summary>
            返回重要公告列表（主控台）---已发布的前20条
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InputOutput.InputBuildParameter">
            <summary>
            引入操作在构建实体时需要的参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InputOutput.InputOutputLib">
            <summary>
            引出由DynamicObject[] 转换为DataSet
            </summary>
            <summary>
            引入时，由DataSet构造DynamicObject[]
            </summary>
            <summary>
            引入引出校验
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.Waiting">
            <summary>
            等待引出
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.Running">
            <summary>
            正在引出
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.Completed">
            <summary>
            引出完成
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.Break">
            <summary>
            引出中断
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.Error">
            <summary>
            引出异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildTempTable(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32,System.Int32)">
            <summary>
            根据Excel建立临时表，并将数据存入临时表
            </summary>
            <param name="ctx"></param>
            <param name="entityDatas">数据</param>
            <param name="meta">业务对象</param>
            <param name="pageCount">总页数,默认为一页</param>
            <param name="pageIndex">当前页索引,从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.ImportDataFromTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.ImportDataFromTempTableEventArg)">
             <summary>
             将临时表中的数据存入到正式业务表中
             </summary>
             <param name="ctx">上下文</param>
            <param name="e">参数包</param>
             <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CustomUpgradeData(Kingdee.BOS.Context,Kingdee.BOS.Context,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             自定义升级数据
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="source">源库(</param>
            <param name="plugName">插件</param>
            <param name="result">结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.LoadDataSet(Kingdee.BOS.Context,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取DataSet，仅限升级工具相关模块使用
            </summary>
            <param name="ctx"></param>
            <param name="commandText"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetMaxASSISTANTDATASeq(Kingdee.BOS.Context,System.String)">
            <summary>
            获取辅助资料类别的最大显示序号
            </summary>
            <param name="ctx"></param>
            <param name="categoryNumber">类别编号</param>
            <returns>仅当反回值大于0时表示有意义</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.LoadTemplateWithDefault(Kingdee.BOS.Context,System.String)">
            <summary>
            获取对象的默认值
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.ClearDataMigrationTempTable(Kingdee.BOS.Context)">
            <summary>
            清除数据迁移相关的临时表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetDBType(System.Object)">
            <summary>
            类别
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.UpdateMaxSerialNo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            更新编码规则流水号最大值
            </summary>
            <param name="ctx">Context</param>
            <param name="formId">FormId</param>
            <param name="billCodes">编码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.WaitToExport(Kingdee.BOS.Context,System.Int64,System.Func{System.Boolean},System.Action{System.String})">
            <summary>
            等待引出
            </summary>
            <param name="ctx">上下文</param> 
            <param name="recId">引出操作记录Id</param>    
            <param name="funCheckExportIsBreak">检测引出操作是否中断</param>  
            <param name="notice">更新提示消息处理委托</param>  
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.JoinToExportQueue(Kingdee.BOS.Context,System.Int32)">
            <summary>
            加入引出队列
            </summary>
            <param name="ctx"></param>
            <param name="totalRows">总行数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.UpdateExportSuccess(Kingdee.BOS.Context,System.Int64)">
            <summary>
            更新引出操作记录为成功
            </summary>
            <param name="ctx"></param>
            <param name="recId">引出操作记录Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.UpdateExportError(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            更新引出操作记录为失败
            </summary>
            <param name="ctx"></param>
            <param name="recId">引出操作记录Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.UpdateExportBreak(Kingdee.BOS.Context,System.Int64)">
            <summary>
            更新当前用户的引出操作记录为中断
            </summary>
            <param name="ctx"></param>
            <param name="recId">引出操作记录Id</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._layOutInfo">
            <summary>
            做引入引出的业务对象的第一个布局信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.langs">
            <summary>
            支持的多语言信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.currentLang">
            <summary>
            当前登录使用的语言
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.isForImport">
            <summary>
            标记是否为了引入
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._mkScheme">
            <summary>
            脱敏方案
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean)">
            <summary>
            构造需要引出的数据：按引出模板引出数据（合并所有实体到单页签）
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportBillDataHeaderByImport(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean)">
            <summary>
            获取按引入模板引出的表头列
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportBillDataByImport(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean)">
            <summary>
            获取按引入模板引出的数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportOutTemplateHeader(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean,Kingdee.BOS.Core.Objects.Export.ExportQueryDataParameter)">
            <summary>
            按引出模板引出表头字段
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="isControl"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportOutTemplate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,Kingdee.BOS.Core.Objects.Export.ExportQueryDataParameter)">
            <summary>
            按引出模板引出数据部分
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <param name="exportPara"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportDataByImportHeader(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean)">
            <summary>
            获取按引出模板引出的表头header（多sheet页）
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportDataByImportTemplate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean)">
            <summary>
            构造需要引出的数据：按引入模板引出数据（合并所有实体到单页签）
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetImportTemplateData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构造需要下载的引入模板（合并所有实体到单页签）
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExportDataByMutSheetImportTemplate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean)">
            <summary>
            构造需要引出的数据：按引入模板引出数据（多页签模板）
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetMutSheetImportTemplateData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构造需要下载的引入模板（多页签模板）
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetUserConfigDataVersion(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户的引入模板设置版本信息
            </summary>
            <param name="ctx"></param>
            <param name="parentFormID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetImportTemplateNoGroup(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取模板，不要分组页签
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetDataByImportTempNoGroup(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean)">
            <summary>
            按引入模板获取数据，不要分组页签
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="isControl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetUserConfigData(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户设置的引入模板
            </summary>
            <param name="ctx"></param>
            <param name="parentFormID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetGroupImportTemplate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Boolean,Kingdee.BOS.Core.Objects.Export.ExportQueryDataParameter)">
            <summary>
            构造树形列表的分组数据的引入模板
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.TransformGroupData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.Core.Permission.Objects.GroupTreeNodeInfo})">
            <summary>
            将接口数据转换成为DynamicObject[]
            </summary>
            <param name="ctx"></param>
            <param name="groupBusinessInfo"></param>
            <param name="groupNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildDataSet(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            按引出模板引出数据，生成DataSet的结构
            </summary>
            <param name="businessInfo">元数据</param>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildDataSet(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context,System.Boolean)">
            <summary>
            按引出模板引出数据，生成DataSet的结构
            </summary>
            <param name="businessInfo">元数据</param>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildImportDataSet(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            下载引入模板，生成DataSet的结构
            </summary>
            <param name="businessInfo">元数据</param>
            <param name="ctx">上下文</param>
            <param name="isGetImportTemplate">是否为获取引入模板的DataSet结构</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.AddEntityToImportData(System.Data.DataTable@,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Boolean,Kingdee.BOS.JSON.JSONObject,System.Int32@)">
            <summary>
            将各实体的字段填入ImportData中
            </summary>
            <param name="dt">表结构</param>
            <param name="entity">实体</param>
            <param name="businessInfo">源数据</param>
            <param name="ctx">上下文</param>
            <param name="mainOrg">主要组织</param>
            <param name="isUserConfig">用户配置</param>
            <param name="jsUserConfigData">用户配置数据</param>
            <param name="splitNum">实体分隔符</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.AddEntityToExportData(System.Data.DataTable@,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context,System.Int32@)">
            <summary>
            将各实体的字段填入dt中
            </summary>
            <param name="dt">表结构</param>
            <param name="entity">实体</param>
            <param name="businessInfo">源数据</param>
            <param name="ctx">上下文</param>
            <param name="mainOrg">主要组织</param>
            <param name="isUserConfig">用户配置</param>
            <param name="jsUserConfigData">用户配置数据</param>
            <param name="splitNum">实体分隔符</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.ImportDataFieldFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Boolean,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            过滤引入模板实体中的字段
            </summary>
            <param name="entity"></param>
            <param name="mainOrg"></param>
            <param name="isUserConfig"></param>
            <param name="jsUserConfigData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillImportDataNew(System.Data.DataSet@,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Context,System.Boolean)">
            <summary>
            按引入模板引出数据时填充数据
            </summary>
            <param name="dataSet">数据结构</param>
            <param name="businessInfo">元数据</param>
            <param name="collection">数据包</param>
            <param name="ctx">上下文</param>
            <param name="isControl">权限控制</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.ReSortBySeqField(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            分录数据根据序号进行排序
            </summary>
            <param name="entity"></param>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FindFirstColFromImportRow(System.Data.DataTable,System.String)">
            <summary>
            找到实体的key在DT中的位置
            </summary>
            <param name="keyEntrySpilt">序列</param>
            <param name="dtHead">目标表</param>
            <param name="key">所要查询的列名</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillFieldNameNew(System.Data.DataSet@,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            填充引入模板的 列名
            </summary>
            <param name="dataSet"></param>
            <param name="businessInfo"></param>
            <param name="isForImport">是否为了引入</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetMainOrg(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            读取业务对象的主业务组织字段；如果是基础资料，则读取使用组织
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CanExportField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            判断字段是否允许引出到文件中
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CanImportField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            判断字段是否允许引出到引入模板中
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillFieldName(System.Data.DataSet@,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="businessInfo"></param>
            <param name="isForImport">是否为了引入</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillData(System.Data.DataSet@,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Context,System.Boolean)">
            <summary>
            按引出模板引出数据，填充数据
            </summary>
            <param name="dataSet"></param>
            <param name="businessInfo"></param>
            <param name="collection"></param>
            <param name="ctx"></param>
            <param name="isControl"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillImportData(System.Data.DataSet@,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Context,System.Boolean)">
            <summary>
            按引入模板引出数据时填充数据
            </summary>
            <param name="dataSet">数据结构</param>
            <param name="businessInfo">元数据</param>
            <param name="collection">数据包</param>
            <param name="ctx">上下文</param>
            <param name="isControl">权限控制</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FillRowData(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean,System.String,System.Int32@)">
            <summary>
            填充字段的值
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="isControl"></param>
            <param name="pkValue"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetLargeTextRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出大文本字段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetFlexRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出弹性域字段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetBaseDataRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出基础资料字段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetMultiLangTextRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出多语言文本值：为了方便将文件作为引入的源文件，将多语言字段分多列输出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetMulBaseDataRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出多选基础资料字段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetMulAssistantRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32@)">
            <summary>
            输出多选辅助资料字段段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetDateRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            输出日期字段内容；日期字段，不需要输出时间：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetDateTimeRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            输出长日期字段内容：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetTimeRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            输出时间字段内容：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.SetNoViewRowValue(System.Data.DataRow,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Int32@)">
            <summary>
            输出无权限字段值：引出
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.IsSpiltCol(System.String)">
            <summary>
            是否为实体分隔列
            </summary>
            <param name="colKey">列标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.TableNameToSheetName(System.String)">
            <summary>
            由于Excel工作表名的长度限制，所以需要截取一下
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetFormatString(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取字段的 显示格式化字符串
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetIsExportGroupField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取是否设置引出分组字段
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetGlobalIsExportGroup(Kingdee.BOS.Context)">
            <summary>
            获取参数设置中是否允许引出分组字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetValuebyKey(Kingdee.BOS.JSON.JSONArray,System.String)">
            <summary>
            JSON中按键值取数
            </summary>
            <param name="jsonArray"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetMskValue(System.Object,System.String)">
            <summary>
            生成脱敏数据
            </summary>
            <param name="inputData"></param>
            <param name="mkType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.WriteMkLog">
            <summary>
            脱敏日志埋点
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._mainOrgField">
            <summary>
            当前单据的主业务组织字段；无主业务组织时，为null；在构建每张单据的数据包时创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._mainOrgId">
            <summary>
            当前单据数据包对应的主业务组织：如果本单无主业务组织，则为null；在构建基础资料数据映射表时创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._orgMap">
            <summary>
            组织编码与数据映射表：在构建基础资料数据映射表时同时创建、输出
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._numAndIDMapList">
            <summary>
            基础资料映射列表：存储编码与数据包的对应关系
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._flexDicList">
            <summary>
            弹性域数据缓存列表：存储各个弹性域字段的纬度数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputLib._allowDefineOrgList">
            <summary>
            允许操作的组织列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildDynamicFromDataSet(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.InputOutputParameter,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            拼装实体模型
            </summary>
            <param name="dataSet">excel中读取到的数据</param>
            <param name="businessInfo">业务对象元数据</param>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildDynamicObject(Kingdee.BOS.Context,Kingdee.BOS.App.Core.InputOutput.InputBuildParameter,Kingdee.BOS.App.Core.InputOutput.RelateRowData,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            构建单据数据包
            </summary>
            <param name="buildParameter"></param>
            <param name="relateRow"></param>
            <param name="businessInfo"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.InitModifyerInfo(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context)">
            <summary>
            更新当前单据修改人/修改日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildRelateData(Kingdee.BOS.Core.InputOutput.InputOutputParameter,Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            构建关系型待引入行数据对象集合
            </summary>
            <param name="parameter">引入参数对象，包含了元数据、待引入数据集合</param>
            <param name="result">引入结果，主要记录提示信息</param>
            <returns>以内码标示的单据头行数据对象；单据体的行数据对象，直接挂在单据头的ChildRows中</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.BuildRelate(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Data.DataTable,System.Collections.Generic.Dictionary{Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.InputOutput.RelateRowData}},Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            构建指定实体的关系型行数据包，即把行挂到其父行下
            </summary>
            <param name="entity">本次处理的实体</param>
            <param name="dt">实体对应的数据包</param>
            <param name="relateDatas">已经构建完毕的关系型行数据包字典；其中必须包含本实体的父实体全部行</param>
            <param name="result">操作处理结果，主要记录需反馈给前端的消息</param>
            <param name="parentEntity">父实体</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.GetExcelDate(System.String)">
            <summary>
            excel时间数字转化为时间
            </summary>
            <param name="dateText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckDataTable(System.Data.DataSet,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            模板数据的校验，校验时机为从excel中读取到数据后
            </summary>
            <param name="dataSet"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckDynamicObject(Kingdee.BOS.Core.ExtendedDataEntitySet,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            拼装完实体后校验必录项是否已经录入
            </summary>
            <param name="extendedDataEntitySet">拼装后的实体</param>
            <param name="businessInfo">业务对象</param>
            <param name="result">校验的结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckDataSetScheme(System.Data.DataSet,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            检查模板结构
            </summary>
            <param name="dataSet">引入文件对应的数据集</param>
            <param name="businessInfo">目标单据元数据</param>
            <param name="result">检查结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckDataSetData(System.Data.DataSet,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            检查模板数据
            </summary>
            <param name="dataSet">引入文件对应的数据集</param>
            <param name="businessInfo">目标单据元数据</param>
            <param name="result">检查结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckLessField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.DynamicForm.IOperationResult@,System.Data.DataTable)">
            <summary>
            校验是否缺少必录字段
            </summary>
            <param name="entry">目标实体</param>
            <param name="result">校验结果</param>
            <param name="dataTable"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.MustImportField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            字段是否必须引入
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.MultiLangTextFieldMustInputCheck(Kingdee.BOS.Core.DynamicForm.IOperationResult,System.Data.DataTable,System.Collections.Generic.List{System.Data.DataColumn},Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            多语言字段必录检查
            </summary>
            <param name="result"></param>
            <param name="dataTable"></param>
            <param name="columns"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckFieldEntry(System.String,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.DynamicForm.IOperationResult@,System.String)">
            <summary>
            校验该字段是否在正确的实体中
            </summary>
            <param name="entryKey"></param>
            <param name="field"></param>
            <param name="result"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckillegalField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.DynamicForm.IOperationResult@,System.String,System.String)">
            <summary>
            检查字段是否可引入
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="columnName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.CheckErrField(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Data.DataTable,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            检查字段是否在实体中有对应的元数据
            </summary>
            <param name="entry"></param>
            <param name="dt"></param>
            <param name="businessInfo"></param>
            <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputLib.FlexFieldCheck(System.Data.DataTable,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Int32@,Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            从指定位置开始，检查页签中，弹性域字段的列名是否存在
            </summary>
            <param name="dt">待引入的数据集</param>
            <param name="field">弹性域字段</param>
            <param name="result">检查结果</param>
            <param name="colIndex">开始检查位置</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.MyTimer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.GetIdAndNumMapList(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.InputOutputParameter,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.InputOutput.RelateRowData},Kingdee.BOS.Core.DynamicForm.IOperationResult@,Kingdee.BOS.Core.Metadata.FieldElement.OrgField@,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap@)">
            <summary>
            生成基础资料映射表
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="parameter">引入参数包：含了元数据、待引入数据等</param>
            <param name="relateRows">待引入的关系型单据头行数据对象集合，单据体行包含在ChildRows中</param>
            <param name="result">引入处理结果，主要用来记录消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.InitMapOnlyNumber(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.InputOutputParameter,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.InputOutput.RelateRowData},Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            构建出待引入的基础资料数据映射对象：暂时只包含编码，未对应数据
            </summary>
            <param name="ctx"></param>
            <param name="parameter">引入引出参数对象，包含了元数据</param>
            <param name="orgMap">组织编码与数据映射集合</param>
            <param name="mainOrgField">主业务组织，可以为null</param>
            <param name="relateRows">关系型主表数据行集合，以内码为字典的Key</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.InitMapOnlyNumberEachRow(Kingdee.BOS.App.Core.InputOutput.BuildIdAndNumMapWrapper,Kingdee.BOS.App.Core.InputOutput.RelateRowData,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            搜索每行中的基础资料字段，记录其编码到映射对象中
            </summary>
            <param name="result"></param>
            <param name="wrapper"></param>
            <param name="relateRow"></param>
            <remarks>可递归调用,逐层深入处理其ChildRows</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.GetBaseDataList(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取全部需要引入的基础资料字段，按实体进行划分
            </summary>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.IsImportBaseDataField(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            字段是否为需要引入的基础资料字段；组织字段被特别排出
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.AddNumberToBaseDataMap(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.App.Core.InputOutput.RelateRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Nullable{System.Int64},System.Collections.Generic.List{Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap}@,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            向基础资料编码数据映射对象，添加本行基础资料编码；如果映射对象不存在，创建并添加到集合
            </summary>
            <param name="businessInfo"></param>
            <param name="relateRow"></param>
            <param name="baseDataField"></param>
            <param name="orgMap"></param>
            <param name="mainOrgField"></param>
            <param name="mainOrgId"></param>
            <param name="mapList"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.InitTemplateTable(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap})">
            <summary>
            创建临时表用来做关联查询
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.DeleteTemplateTable(System.String,Kingdee.BOS.Context)">
            <summary>
            删除临时表
            </summary>
            <param name="templateTableName"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.FillIDAndNumMapData(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap}@)">
            <summary>
            初始化ID与编码之间的映射关系
            </summary>
            <param name="ctx"></param>
            <param name="templateTableName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.MainOrgFieldIsExists(Kingdee.BOS.Core.InputOutput.InputOutputParameter,Kingdee.BOS.Core.Metadata.FieldElement.OrgField@,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            主业务组织存在检查：有主业务组织，存在则返回true；没有主业务组织，则直接返回true
            </summary>
            <param name="parameter"></param>
            <param name="mainOrgField">输出找到的主业务组织字段</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.InitOrgMap(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            读取全部组织，构建出组织的编码与数据包之间的映射集合
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="parameter">引入引出参数对象，包含了元数据、数据表等</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.GetBaseDataUseOrgId(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.App.Core.InputOutput.RelateRowData,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Nullable{System.Int64},Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            获取基础资料的使用组织值
            </summary>
            <param name="parameter"></param>
            <param name="relateRow"></param>
            <param name="baseDataField"></param>
            <param name="orgMap"></param>
            <param name="mainOrgField"></param>
            <param name="mainOrgId"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.IdAndNumberConvertLib.GetOrgId(Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap,System.String)">
            <summary>
            根据组织编码，在组织编码数据映射集合中，找组织内码
            </summary>
            <param name="orgMap">组织编码数据映射集合</param>
            <param name="orgNum">组织编码</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputConst.NotExportElementType">
            <summary>
            系统内置默认不引出的元素
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InputOutput.InputOutputConst.NotImportElementType">
            <summary>
            系统内置默认不引入的元素
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.NotExportField(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            是否系统内置不允许引出
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.NotImportField(Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            是否系统内置不允许引入
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetIdAndNumMapList(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.InputOutputParameter,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.App.Core.InputOutput.RelateRowData},Kingdee.BOS.Core.DynamicForm.IOperationResult@,Kingdee.BOS.Core.Metadata.FieldElement.OrgField@,Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap@)">
            <summary>
            生成基础资料映射表
            </summary>
            <param name="ctx">上下文环境</param>
            <param name="parameter">引入参数包：含了元数据、待引入数据等</param>
            <param name="relateRows">待引入的关系型单据头行数据对象集合，单据体行包含在ChildRows中</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetEntityColName(System.String,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获得单据体列名称
            </summary>
            <param name="strFormId"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetEntityKeyFromTableName(System.String)">
            <summary>
            从DataTable的表名中拆出实体标识（括号中的即为实体标识）
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetEntryName(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获得单据体实际名称
            </summary>
            <param name="businessInfo"></param>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.TryGetColValueWithParent(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.App.Core.InputOutput.RelateRowData,System.String,System.String@)">
            <summary>
            尝试在本行及父行中，寻找指定列的值；找到则返回true, 并输出找到的内容
            </summary>
            <param name="relateRow"></param>
            <param name="colName"></param>
            <param name="colValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetBizObjects(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获得符合权限验证的业务对象
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetOrgFieldKey(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获得组织字段的key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InputOutput.InputOutputHelper.GetItemClassType(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.ItemClassField,Kingdee.BOS.App.Core.InputOutput.RelateRowData,System.String@)">
            <summary>
            获取多类别基础资料字段的类别属性值，所在列为"Key#Type"，此列在模板中必须同多类别基础资料一并引出
            </summary>
            <param name="itemClassField"></param>
            <param name="relateRow"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.TableName">
            <summary>
            基础资料对应的数据库表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.IsOrgControl">
            <summary>
            标识是否是私有型基础资料
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.OrgFieldKey">
            <summary>
            基础资料对应数据库表的使用组织字段的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.OrgId">
            <summary>
            对应的组织内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.baseObjtType">
            <summary>
            基础资料对应的实体类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.NumberFieldKey">
            <summary>
            基础资料对应数据库表的编码字段的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.NumberProperty">
            <summary>
            对应基础资料实体编码的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.ItemTypeValue">
            <summary>
            多类别基础资料的类型内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.IDFieldKey">
            <summary>
            基础资料对应数据库表的内码字段的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.NumberAndIDMap.NumberAndKeyRelation">
            <summary>
            编码与内码之间的映射关系：key为编码值，value 为内码值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InputOutput.BuildIdAndNumMapWrapper">
            <summary>
            构造id和内码之间映射关系的数据包
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InputOutput.RelateRowData">
            <summary>
            关系型行数据包：包含了父行、本行、子行集合等层次关系
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.RelateRowData.Row">
            <summary>
            本行数据包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.RelateRowData.ChildRows">
            <summary>
            本行包含的子实体行集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.RelateRowData.ParentKey">
            <summary>
            父实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.RelateRowData.EntryKey">
            <summary>
            本实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InputOutput.RelateRowData.Parent">
            <summary>
            父行数据对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Language.LangTextTranslateService.GetMulLangVersion(Kingdee.BOS.Context,Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.Version})">
            <summary>
            获取当前账套多语言版本号
            </summary>
            <param name="dbCtx"></param>
            <param name="mcCtx"></param>
            <param name="installPkgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuArray(Kingdee.BOS.Context,System.String)">
            <summary>
             根据节点ID取菜单
            </summary>
            <param name="strSubSystemId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuArrayForCache(Kingdee.BOS.Context)">
            <summary>
            设置获取系统菜单的缓存数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.ClearMenuArrayCache(Kingdee.BOS.Context)">
            <summary>
            清除所有的登录时创建的菜单缓存数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetAllSubSystemId(Kingdee.BOS.Context)">
            <summary>
            获取所有子系统下的节点菜单
            </summary>
            <param name="ctx">上下文</param>
            <returns>所有子系统下的节点菜单，结构为子节点id+子菜单的array</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuArray(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
             获取指定菜单
            </summary>
            <param name="ctx"></param>
            <param name="strSubSystemId"></param>
            <param name="siteId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuArray(Kingdee.BOS.Context,System.String,System.String,System.Boolean)">
            <summary>
            获取指定菜单，增加了一个参数，查出来的菜单是否在当前用户的添加的常用功能里面
            </summary>
            <param name="ctx"></param>
            <param name="strSubSystemId"></param>
            <param name="siteId"></param>
            <param name="hasOfenFun">查出来的菜单是否在当前用户的添加的常用功能里面</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuArrayCore(Kingdee.BOS.Context,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             获取指定菜单
            </summary>
            <param name="ctx"></param>
            <param name="strSubSystemId"></param>
            <param name="siteId"></param>
            <param name="isHtml">是否html</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetTopRecentMenus(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MenuClickSourceType[],System.String,System.Boolean,System.Int32)">
            <summary>
            获取最近菜单
            </summary>
            <param name="ctx">上下文</param>
            <returns>搜搜信息</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSearchMenuData(Kingdee.BOS.Context,System.String,System.Collections.Generic.HashSet{System.String}@,System.Collections.Generic.HashSet{System.String}@)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSearchMenuDataForRecentMenu(Kingdee.BOS.Context,System.String,System.Collections.Generic.HashSet{System.String}@,System.Collections.Generic.HashSet{System.String}@,Kingdee.BOS.JSON.JSONArray@)">
            <summary>
            获取菜列表(输出获取最近使用功能)
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <param name="subSystem"></param>
            <param name="allHasPermissionObjectTypes"></param>
            <param name="recentMenuItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetFullTextSearchMenuData(Kingdee.BOS.Context,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取菜列表.智能搜索
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <param name="filterHidedMenu">是否过滤隐藏的菜单</param>
            <param name="filterNoPermMenu">是否过滤没权限的菜单</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMyFavor(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            获取我的收藏夹
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <param name="isClear"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetRecentFuncSet(Kingdee.BOS.Context,System.String)">
            <summary>
            获取最新使用过的功能
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetObjectTypeFilter(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            本方法专供BusinessChartPlugIn临时使用，非此勿扰
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetAllowDetailFunc(Kingdee.BOS.Context,System.String,System.Collections.Generic.HashSet{System.String}@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            获取指定站点允许发布的菜单模块明细
            </summary>
            <param name="ctx"></param>  
            <param name="siteId">站点ID</param>
            <returns>
            true:启用过滤
            false:不启用过滤
            </returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetDeploySlnKey(Kingdee.BOS.Context,System.String,Kingdee.BOS.Contracts.IDBService)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <param name="dbService"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.LoadDetailFunc(System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="allowDetailFuncIds"></param>
            <param name="allowSubFuncIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.LoadDetailFunc(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.String,Kingdee.BOS.Contracts.IDBService)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="allowDetailFuncIds"></param>
            <param name="allowSubFuncIds"></param>
            <param name="deploySln"></param>
            <param name="dbService"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.ConsoleDetailVisible(Kingdee.BOS.Context,System.Object)">
            <summary>
            创建可见性过滤
            </summary>
            <param name="prex"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.IsAuthorisedObjectItem(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Objects.MainConsole.MainCFilterParameter)">
            <summary>
            是否授权的业务对象
            </summary>
            <param name="ctx"></param>
            <param name="objectId"></param>
            <param name="permissionItemId"></param>
            <param name="strSubSystemId"></param>
            <param name="isOrgFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.IsAuthorisedObjectItem(Kingdee.BOS.Context,System.Data.DataRow,Kingdee.BOS.Core.Objects.MainConsole.MainCFilterParameter)">
            <summary>
            是否授权的业务对象
            </summary>
            <param name="ctx"></param>
            <param name="dr"></param>
            <param name="permissionItemId"></param>
            <param name="strSubSystemId"></param>
            <param name="isOrgFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.IsSiteAuthorisedDetailFunc(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            是否站点授权该功能点
            </summary>
            <param name="ctx"></param>
            <param name="siteId"></param>
            <param name="detailFuncId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSystemTreeNodes(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.TreeNode},Kingdee.BOS.Core.Objects.MainConsole.MainCFilterParameter)">
            <summary>
            根据当前登陆用户，过滤系统树
            </summary>
            <param name="treeNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetHtml5CardLayoutDataID(Kingdee.BOS.Context)">
            <summary>
            获取卡片式布局默认ID
            </summary>
            <param name="ctx">当前上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetHtml5CardLayoutData(Kingdee.BOS.Context,System.Boolean@,System.Boolean)">
            <summary>
            获取Html5卡片式布局数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="isDefault">是否为内置数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.CurrentUserIsUseDefaultH5CardLayout(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection@)">
             <summary>
            判断当前用户是否使用H5卡片式布局内置数据 
             </summary>
             <param name="ctx">上下文</param>
             <param name="dobj">布局实体对象</param>
             <param name="FId">内置布局ID 可以不设置</param>
             <returns>返回类型 true false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.UpdateH5CardSetting(Kingdee.BOS.Context,System.Int32,System.String,System.Int32@)">
            <summary>
            更新卡片的设置参数
            </summary>
            <param name="ctx"></param>
            <param name="cardId"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSystemSubFuncAndDetail(Kingdee.BOS.Context,System.String)">
            <summary>
            根据子系统Id得到模块及菜单
            </summary>
            <param name="ctx"></param>
            <param name="subSysId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCommFuncCardParameterByID(Kingdee.BOS.Context,System.Int32)">
            <summary>
            通过卡片Id获取常用功能卡片参数
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">卡片Id</param>
            <returns>常用功能参数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCurrentAllCommFuncCard(Kingdee.BOS.Context)">
            <summary>
            获取当前用户所有的常用功能卡片
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetDurationOnLineCurUser(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取当前用户最近几个月的在线时长
            </summary>
            <param name="ctx"></param>
            <param name="months">请求多少个月的数据</param>
            <returns>月在线时长映射</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetHtml5BaseCardList(Kingdee.BOS.Context)">
            <summary>
            获取所有卡片列表(以DevType存储卡片内置参数)
            </summary>
            <param name="ctx">当前上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.UpdateCommonFunctionCardId(Kingdee.BOS.Context,System.String,System.Int32,System.Boolean)">
            <summary>
            更新常用功能所属卡片Id
            </summary>
            <param name="ctx">上下文</param>
            <param name="functionId">常用功能Id</param>
            <param name="cardId">该功能所属卡片Id</param>
            <param name="isUpdateByOftenFunctionId">是根据常用功能Id还是功能Id更新卡片 默认常用功能Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.CardCacheData(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.CardCacheDataObject)">
            <summary>
            获取、更新、插入卡片式缓存数据(主要根据formid、userid，数据卡片则加入cardid进行匹配操作)
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="cardCacheDataObject">类型卡片缓存数据实体</param>
            /// <returns>返回获取卡片式缓存数据实体</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCardCacheInsertItem(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo,System.String)">
            <summary>
            获取插入缓存数据的实体对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardItem">卡片基础信息对象</param>
            <param name="valueObj">缓存数据具体内容</param>
            <returns>返回tuple对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCardCacheUpdateItem(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.MainConsole.Html5CardInfo,System.String)">
            <summary>
            获取更新缓存数据的实体对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardItem">卡片基础信息对象</param>
            <param name="valueObj">缓存数据具体内容</param>
            <returns>返回Tuple对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetUserHtml5LayoutCardList(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取指定用户布局卡片列表
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetUserHtml5StdAppList(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            获取指定用户布局卡片列表
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetStdAppMenuName(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务应用对象名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="nodeId">节点id</param>
            <returns>菜单名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.CheckIsUseStdApp(Kingdee.BOS.Context,System.String)">
            <summary>
            检查是否应用业务应用
            </summary>
            <param name="ctx">上下文</param>
            <param name="nodeId">节点id</param>
            <returns>是否启用业务应用</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetHtml5UserList(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            获取Html5需要缓存卡片数据的用户列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userParameters">用户参数列表 Html5HasCardCacheDataMaxUserId： 上次已执行的最大用户id</param>
            <returns>返回用户列表表格集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetUsersHtml5LayoutCardList(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            获取用户集合布局卡片列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户id集合</param>
            <returns>返回用户</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSchemaName(Kingdee.BOS.Context,System.String)">
            <summary>
            获取过滤方案名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="schemaId">过滤方案id</param>
            <returns>过滤方案对应语言的名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.UpdteDataViewCardParmInfo(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.BusinessEntity.MainConsole.DataViewCardType)">
            <summary>
            更新卡片参数
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardId">卡片Id</param>
            <param name="cardInfo">卡片参数</param>
            <param name="CardType">数据卡片类型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetNameByDetailFuncId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据Id获取功能菜单的中文名
            </summary>
            <param name="ctx"></param>
            <param name="detailFuncId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.InsertDataForUserPrivacyBigDataCollection(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            用户使用协议与隐私大数据收集表插入
            </summary>
            <param name="ctx">上下文</param>
            <param name="inst_Code">产品实例id</param>
            <param name="isAgress">是否同意</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetUserCurrentLoginLayoutType(Kingdee.BOS.Context,System.Int64,System.Boolean@)">
            <summary>
            获取用户当前使用的默认主页方案Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCurrentUserLayoutSolution(Kingdee.BOS.Context,Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution@)">
            <summary>
            获取当前用户所有显示的方案列表
            </summary>
            <param name="ctx"></param>
            <param name="defalutlayout">返回默认显示主页</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.CheckLayoutSolutionName(Kingdee.BOS.Context,Kingdee.BOS.LocaleValue,System.Int64)">
            <summary>
            检测方案名称是否有重复
            </summary>
            <param name="ctx"></param>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.UpdateLayoutSolutionName(Kingdee.BOS.Context,Kingdee.BOS.LocaleValue,System.Int64)">
            <summary>
            检测方案名称是否有重复，并更新
            </summary>
            <param name="ctx"></param>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.SaveUserCardLayoutData(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail}},System.Int32)">
            <summary>
            根据当前编辑的布局方案卡片明细实体进行重新保存
            </summary>
            <param name="ctx"></param>
            <param name="solutionid">所需要保存的方案布局ID（如果系统布局则复制为个人布局方案）</param>
            <param name="newcardlist">新的列卡片布局列表，也可以只传变动的卡片，如新增，换卡片位置，删除卡片</param>
            <param name="layoutcols">调整后的卡片布局是在哪列数布局下调整的</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.SaveUserCardLayoutData(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail}},System.Int32,Kingdee.BOS.LocaleValue,System.String@,System.Boolean)">
            <summary>
            根据当前编辑的布局方案卡片明细实体进行重新保存
            </summary>
            <param name="ctx"></param>
            <param name="solutionid">所需要保存的方案布局ID（如果系统布局则复制为个人布局方案）</param>
            <param name="newcardlist">新的列卡片布局列表，也可以只传变动的卡片，如新增，换卡片位置，删除卡片</param>
            <param name="layoutcols">调整后的卡片布局是在哪列数布局下调整的</param>
            /// <param name="layoutName">方案名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCreatePersonalLayoutName(Kingdee.BOS.Context,System.String)">
            <summary>
            根据当前方案名称获取用户另存方案当前语言的新的方案名称
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSolutionCardMaxLayoutColumn(Kingdee.BOS.Context,System.Int64)">
            <summary>
            查找某个方案关联最大的显示列数
            </summary>
            <param name="ctx"></param>
            <param name="solutionid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCardDetailsForColLayout(Kingdee.BOS.Context,System.Int64,System.Int32)">
            <summary>
            根据显示布局列数，获取每列所显示的卡片集合
            </summary>
            <param name="ctx"></param>
            <param name="solutionid">布局方案ID（主键）</param>
            <param name="layoutcols">布局显示列数</param>
            <returns>返回每一列的卡片明细集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetCardDetailsForColLayout(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32)">
            <summary>
            根据H5主页方案DynamicObject获取组合某列布局卡片组合
            </summary>
            <param name="ctx"></param>
            <param name="solutionDyObj"></param>
            <param name="layoutcols"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetConsoleFunInfoByDetailFuncId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据发布Id获取功能菜单的formid和单据名
            </summary>
            <param name="ctx"></param>
            <param name="detailFuncId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetH5SmartDataViewCards(Kingdee.BOS.Context,System.Int64,System.Int64)">
            <summary>
            新版数据卡片获取卡片信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="pkValue">数据卡片主键</param>
            <param name="cardid">卡片基础资料id</param>
            <returns>卡片信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetNewStdDatViewCards(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.MainConsole.H5ToDoListInfo},System.String)">
            <summary>
            获取待办卡片信息（注：新版工作台专用）
            </summary>
            <param name="ctx"></param>
            <param name="toDoListInfo"></param>
            <param name="appMenuId">子系统节点id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetH5ToDoList(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务应用待办事项的数据卡片列表（注：旧工作台专用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="nodeId">节点id</param>
            <returns>业务应用待办事项的数据卡片列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GeneratePersonalToDoListSolution(Kingdee.BOS.Context)">
            <summary>
            生成个人待办事项方案(所有工作台)
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GeneratePersonalToDoListSolutionByNode(Kingdee.BOS.Context,System.String)">
            <summary>
            生成个人待办事项方案（注：新版工作台专用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="nodeId">节点id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GeneratePersonalToDoListSolutionCore(Kingdee.BOS.Context,System.String,System.Boolean,System.Boolean)">
            <summary>
            按照模板生成方案
            </summary>
            <param name="ctx"></param>
            <param name="nodeId"></param>
            <param name="isPersonSolution">是否个人方案</param>
            <param name="isExistPersonalSolution">是否存在个人方案</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.StdConsoleAddCardFromList(Kingdee.BOS.Context,System.String,System.String,System.Int32)">
            <summary>
            从列表添加卡片
            </summary>
            <param name="ctx">上下文</param>
            <param name="oldCardId">返回卡片ID</param>
            <param name="nodeId">子系统ID</param>
            <param name="seq">最大的卡片顺序</param>
            <returns>卡片主键</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.InsertOrUpdateLayOutCardInfo(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            更新卡片列表中的参数字段
            </summary>
            <param name="ctx"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.IsAllowdEditDataViewSmartCard(Kingdee.BOS.Context,System.Int64)">
            <summary>
            判断数据卡片是否允许编辑
            </summary>
            <param name="ctx">上下文</param>
            <param name="settingInfoId">卡片ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.IsAllowEditMainConsole(Kingdee.BOS.Context,System.Int64)">
            <summary>
            主控台是否允许编辑
            </summary>
            <param name="ctx"></param>
            <param name="solutionID">方案id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMyMonitor(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取我的监控卡片
            </summary>
            <param name="ctx"></param>
            <param name="layoutId">用户id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.UpdateSmartCartTitleFromEdit(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            编辑卡片时保存卡片名称（存在主页卡片表中）
            </summary>
            <param name="ctx"></param>
            <param name="cardInfoId">主页卡片ID</param>
            <param name="cardName">更新的卡片名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSmartCardTitleFromEdit(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取编辑卡片时保存卡片名称（存在主页卡片表中）
            </summary>
            <param name="ctx"></param>
            <param name="cardInfoId">主页卡片ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetStdConsoleInfo(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取业务领域主页信息
            </summary>
            <param name="ctx"></param>
            <param name="solutionId">业务领域方案ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.VaildShowCloudAppraise(Kingdee.BOS.Context,System.Boolean@)">
            <summary>
            验证该用户是否根据邀请用户评价列表，判断需要弹出评价
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetSubSystemMenuIfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取点击子系统的节点信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="subSystemId">子系统id</param>
            <returns>子系统的节点信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetMenuWidthFromParamterForm(Kingdee.BOS.Context)">
            <summary>
            从参数设置中获取菜单宽度
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.VaildH5CardLayoutDataCache(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.MainConsole.LayoutCardCacheData)">
            <summary>
            校验H5卡片主页缓存是否有效缓存数据
            </summary>
            <param name="ctx"></param>
            <param name="cardcachedata"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GetYunzhijiaLightAppUrl(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据详细参数获取轻应用中转路径
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用ID</param>
            <param name="urlParam">自定义参数</param>
            <param name="clientTypeId">获取lgtk端口号</param>
            <param name="domainName">域名</param>
            <param name="siteName">站点名</param>
            <param name="lgtk">云之家通行证</param>
            <param name="toEid">工作圈ID</param>
            <returns>轻应用中转路径对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MainConsoleServer.GeYunzhijiatLgtk(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据产品EID获取协同云登录令牌（Lgtk）
            </summary>
            <param name="ctx">上下文</param>
            <param name="eid">产品EID</param>
            <param name="clientTypeId">获取lgtk端口号</param>
            <returns>协同云登录令牌</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.MLSystemProxy">
            <summary>
            多语言菜单代理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy">
            <summary>
            系统菜单代理
            </summary>
            <remarks>
            涉及系统菜单相关的逻辑封装在此，如按用户类别过滤等
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.SystemAuthorisedItems">
            <summary>
            子系统下通过业务对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsAuthorisedObjectItem(System.String[],System.String,System.String,System.Boolean)">
            <summary>
            其中一个业务有权即可
            </summary>
            <param name="ids"></param>
            <param name="permissionItemId"></param>
            <param name="strSubSystemId"></param>
            <param name="isOrgFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsAuthorisedObjectItem(System.String,Kingdee.BOS.Core.Objects.MainConsole.MainCFilterParameter)">
            <summary>
            是否有权的业务对象
            </summary>
            <param name="objectId">业务对象ID</param>
            <param name="permissionItemId">权限项ID</param>
            <param name="strSubSystemId">子系统ID，默认为空</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetSystemTreeNodes(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.TreeNode})">
            <summary>
            根据当前登陆用户，过滤系统树
            </summary>
            <param name="treeNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsAdminsTreeNode(Kingdee.BOS.Core.Metadata.TreeNode)">
            <summary>
            管理员所能使用的业务领域
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetAdminsTreeNodes(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.TreeNode})">
            <summary>
            
            </summary>
            <param name="treeNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetAllowDetailFunc(System.String)">
            <summary>
            获得某个子系统下有权限的功能明细
            </summary>
            <param name="strSubSystemId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.FilterDetailFuncByUserType(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            依据用户类型及权限进行过滤
            </summary>
            <param name="lstObjectAction"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetSessionKey">
            <summary>
            获取权限会话缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.SetSessionObjectActions(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetAdminsFuncList(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            
            </summary>
            <param name="lstObjectAction"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetBizObjectPermissionActions(System.String)">
            <summary>
            获取子系统下所有详细功能（不做权限过滤，但可能会按用户类别过滤）
            </summary>
            <param name="strSubSystemId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetAuthPMObjectTypeId(System.Data.IDataReader)">
            <summary>
            获得需要验权限的对象
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsWarnSystem(System.String)">
            <summary>
            是否是预警子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsBaseSubSystem(System.String)">
            <summary>
            是否是基础资料子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsInitializeSubSystem(System.String)">
            <summary>
            是否系统初始化子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsWarnSubSystem(System.String)">
            <summary>
            业务预警子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsNeedSubSystem(System.String)">
            <summary>
            需求管理子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsBussinessChangeSubSystem(System.String)">
            <summary>
            业务变更子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsMCSystemMenuSubSystem(System.String)">
            <summary>
            是否是管理中心的子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsSystemManageSubSystem(System.String)">
            <summary>
            是否是系统管理子系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsYDSZSubSystem(System.String)">
            <summary>
            是否是移动设置子系统
            </summary>
            <param name="subsystemid">子系统id</param>
            <returns>是否移动设置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsSystemSettingSubSystem(System.String)">
            <summary>
            是否是系统设置子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsCloudServiceSystem(System.String)">
            <summary>
            是否是云服务子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.IsDataWiseServiseSystem(System.String)">
            <summary>
            是否是云服务子系统
            </summary>
            <param name="subsystemid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.SetUserType(Kingdee.BOS.Context)">
            <summary>
            获取用户类别
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.FunActionListAuthedPermission(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            功能权限对象列表验证功能权限，返回有权的权限对象列表
            </summary>
            <param name="lst">功能权限对象列表</param>
            <returns>功能权限对象列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.SystemMenuProxy.GetNoAllowObjectIds(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction},System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            根据当前验证功能权限列表，以及验证有权的对象列表中获取中无权的对象Id列表
            </summary>
            <param name="funContorlList">验证权限对象列表</param>
            <param name="allowPermissionObjects">有权对象列表</param>
            <returns>无权对象ID列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MainConsole.MLSystemProxy.FilterDetailFuncByUserType(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.ObjectPermissionAction})">
            <summary>
            依据用户类型进行过滤
            </summary>
            <param name="lstObjectAction"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.BaseManageTopClassId">
            <summary>
            基础管理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.ManageCenterTopClassId">
            <summary>
            数据中心管理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.OperationCenterTopClassId">
            <summary>
            运维管理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.SystemManageTopClassId">
            <summary>
            系统管理业务领域
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.CloudSkyTopClassId">
            <summary>
            星空云服务 领域
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MainConsole.TopClassID.CollaborativeCloudTopClassId">
            <summary>
            智能协同云服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.MessageService._xunTongSettingObject">
            <summary>
            讯通绑定配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.MessageService._xunTongConfig">
            <summary>
            云之家配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.MessageService._isPrivate">
            <summary>
            是否私有云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.MessageService._isNotRebuildTransferUrl">
            <summary>
            是否云之家消息链接默认走转发（此值默认为false，即默认走转发）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.MessageService._cloudServiceHost">
            <summary>
            系统公网地址
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.#ctor(Kingdee.BOS.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingdee.BOS.App.Core.Messages.XunTong.MessageService"/> class.
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.Send(Kingdee.BOS.Msg.XunTongMessage,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送讯通消息
            </summary>
            <param name="message">消息</param>
            <param name="users">用户</param>
            <param name="sPubAcctCode">消息编码</param>
            <param name="sPubAcctKey">消息密钥</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.DoSend(Kingdee.BOS.Msg.XunTongMessage,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            发送讯通消息
            </summary>
            <param name="message">消息信息</param>
            <param name="users">用户信息</param>
            <param name="sPubAcctCode">编码</param>
            <param name="sPubAcctKey">密钥</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.XunTongMessage)">
            <summary>
            发送单图文信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">消息</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.GetYZJMsgType(Kingdee.BOS.Msg.XunTongMessage,Kingdee.Xuntong.MessageTypeEnum)">
            <summary>
            获取云之家消息类型 -- 此消息类型，决定补发任务时走的逻辑
            </summary>
            <param name="message"></param>
            <param name="msgTypeEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.GetAcctCode(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取公共号
            </summary>
            <param name="dictWorkFlow">工作流列表</param>
            <returns>公共号信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.MessageService.InitXunTongConfig">
            <summary>
            获取讯通配置参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.PubAcctConfig.#ctor(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            
            </summary>
            <param name="paramObj"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Messages.XunTong.PubAcctConfig.XunTongSettingObject">
            <summary>
            数据中心在启用讯通的时候的相关设置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongBillHtmlBuilder._entryKey">
            <summary>
            实体分录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Messages.XunTong.XunTongBillHtmlBuilder._entryRowDatasFlag">
            <summary>
            分录行数据占位符
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongBillHtmlBuilder.GetFieldKeyForXunTong(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            设置微博详情的字段
            </summary>
            <param name="billData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Messages.XunTong.XunTongBillHtmlBuilder.GetFieldTemplate(System.Text.StringBuilder,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String)">
            <summary>
            字段模板，一个字段一行
            </summary>
            <param name="temp"></param>
            <param name="field"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowMetaDataServicePlugIn">
            <summary>
            单据转换元数据存储服务插件类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowMetaDataServicePlugIn.SaveLangDescription(Kingdee.BOS.Core.BusinessFlow.BusinessFlowMetadata)">
            <summary>
            保存描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowMetaDataServicePlugIn.LoadLangDescription(Kingdee.BOS.Core.BusinessFlow.BusinessFlowMetadata)">
            <summary>
            获取描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertRuleMetaDataServicePlugIn">
            <summary>
            单据转换元数据存储服务插件类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertRuleMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertRuleMetaDataServicePlugIn.AfterSaveTransaction(System.EventArgs)">
            <summary>
            事务结束之后
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn">
            <summary>
            单据转换元数据存储服务插件类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.SaveLangDescription(Kingdee.BOS.Core.BusinessFlow.BusinessFlowVersionMetadata)">
            <summary>
            保存描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.LoadLangDescription(Kingdee.BOS.Core.BusinessFlow.BusinessFlowVersionMetadata)">
            <summary>
            获取描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.OnGetMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.GetMetadataResourceArgs)">
            <summary>
            获取元数据多语言资源对象
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.OnLoadMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.OnLoadMetadataResourceArgs)">
            <summary>
            元数据加载多语言资源事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.GetResourceData(Kingdee.BOS.Core.BusinessFlow.BusinessFlowVersionMetadata,System.Int32)">
            <summary>
            获取单据转换的多语言数据
            </summary>
            <param name="el"></param>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BusinessFlowVersionMetaDataServicePlugIn.LoadResource(Kingdee.BOS.Core.BusinessFlow.BusinessFlowVersionMetadata,Kingdee.BOS.Resource.ResourceData,System.Int32)">
            <summary>
            加载单据转换的多语言数据
            </summary>
            <param name="tracker"></param>
            <param name="resource"></param>
            <param name="localeId"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.MobileMetaServicePlugIn">
            <summary>
            移动平台元数据插件
            1 处理移动平台元数据的特殊逻辑
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SUBBUSINESSINFOCACHEKEY">
            <summary>
            基础资料元数据片段缓存类型名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn._dctMetaDataCache">
            <summary>
            元数据缓存
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn._dicNeedProperty">
            <summary>
            记录必须加载得基础资料属性
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn._CloudContactsBaseField">
            <summary>
            定义云之家沟通基础资料配置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.AfterRead(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.AfterReadArgs)">
            <summary>
            元数据读取完毕后事件处理函数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetDataMonitor(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置是否启用数据监控
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetGroupFieldFullPath(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置分组的属性
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ReloadPlugInDescription(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            读取插件的描述信息
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetEncrypFieldKey(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置加密字段的密钥
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetCvpMkInfo(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置脱敏信息
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetOrgFieldVisibleAndEnable(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置组织字段的可见性和锁定性
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetOrgFieldVisibleAndEnableForSE(Kingdee.BOS.Core.Metadata.ControlElement.ControlAppearance)">
            <summary>
            设置标准版的组织字段的可见性和锁定性
            </summary>
            <param name="fieldApp"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.AddVchFieldInfo(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            处理凭证信息相关
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.OnLoadEmbedRefObject(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.AfterReadArgs)">
            <summary>
            元数据读取完毕后，构建引用基础资料详细动态实体对象事件处理函数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateTVRelationFieldProperties(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            如果是树形结构的，构建层级关系（FParentID）字段和级次（FLevel）字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.DeleteBillCodeRule">
            <summary>
            删除编码规则数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.DeleteBillType">
            <summary>
            删除单据类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ForceImplementFuncInterface(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            如果元数据已经实际实现特性，强制申明功能特性
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CheckFuncInterface(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            检查已经申明的功能特性是否配置了对应的元数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ReadFuncInterfaceElements">
            <summary>
            读取可选的功能特性到缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.FuncInterfaceDoAfterSave">
            <summary>
            功能特性保存后处理；通过此事件，存储/清除功能特性各自附加的元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.FuncInterfaceDoAfterDelete">
            <summary>
            功能特性删除后处理；通过此事件，存储/清除功能特性各自附加的元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.Validate(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            保存前校验, 主要校验关联的状态迁移图是否存在，当然可以根据需要不断扩展
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CheckNoExists(System.Collections.Generic.List{System.String})">
            <summary>
            判断元数据对象是否存在
            </summary>
            <param name="formIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateLinkEntry(Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata)">
            <summary>
            更新关联关系表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateObjectTypeCache">
            <summary>
             更新缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateObjectTypeRefTable">
            <summary>
            更新业务对象与基础资料的对应关系表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateObjectTypePermission">
            <summary>
            更新业务对象与权限对象关系对照表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.AddPermissionItemToPermissionObject">
            <summary>
            把权限项加入到权限对象中去
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SyncPermissionItem">
            <summary>
            权限项同步跟踪表：（1）在基类权限项变动时，记录到此表；（2）在授权的时候，检查此表，并同步；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFormPermissionObject(Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            构建于业务对象绑定的权限对象
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFormPermissionItem(Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            构建窗体操作的关联的权限项
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.BindDataAfterReadXml(Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            XML反序列化对象后，后期绑定其他数据
            </summary>
            <param name="formMetadata"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateBaseDataSeqType(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            更新单类别基础资料
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.InitEsSetting(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            初始化全局搜索对象配置，便于后续ORM层监控处理
            </summary>
            <param name="businessInfo"></param>
            <param name="form"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetMainOrg(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            设置主业务组织
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SingleOrgContext(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            在单组织的情况下控制单据组织相关字段
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateSourceBillType(Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.SourceBillTypeField})">
            <summary>
            创建源单类型数据
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.InitRunTimeClassInfo(Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            初始化表单元数据的相关运行时类信息
            </summary>
            <param name="formMetadata"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateBillType(System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField)">
            <summary>
            构造单据类型字段的单据类型列表
            </summary>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateMenuButtonOperation(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            更新按钮的操作Id（目前为附件快传使用）
            </summary>
            <param name="formMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdatMenuOperationId(Kingdee.BOS.Core.Metadata.BarElement.BarItem,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FormElement.FormOperation})">
            <summary>
            更新菜单按钮附件快传操作Id
            </summary>
            <param name="item"></param>
            <param name="operationList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateLookUpObject(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            构建基础资料字段的LookUpObject属性
            </summary>
            <param name="businessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateEnumObjects(Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ComboField})">
            <summary>
            构造下拉列表字段枚举值
            </summary>
            <param name="comboFields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.SetPrivateEnumObject(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ComboField})">
            <summary>
            设置私有下拉列表的枚举项值
            </summary>
            <param name="formMetadata"></param>
            <param name="comboFields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFormGroup(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.Form,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.GroupField})">
            <summary>
            扫描支持分组的字段，构建分组纬度集合；
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFuncInterfaces(System.String,Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            读取业务对象之后，构建其引入的功能特性集合
            </summary>
            <param name="sourceObjectForm">需要附加功能特性集合的表单</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateFuncInterfaces(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            保存业务对象之后，保存其引入的功能特性集合
            </summary>
            <param name="sourceObjectForm">需要保存功能特性集合的表单</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateItemClassTypeLookUpObject(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            列表过滤 构建多类别基础资料列表的可选值,以及覆盖的各基础资料LookUpObject
            </summary>
            <param name="formMetadata"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateItemClassTypeLookUpObject(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构建多类别基础资料列表的可选值,以及覆盖的各基础资料LookUpObject
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateRefQtyFieldList(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            整理出基本数量字段关联的数量字段集合
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.LoadDynamicObjectData(System.String,System.String[])">
            <summary>
            加载数据
            </summary>
            <param name="strFormId"></param>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFieldRefProperties(Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            根据业务对象引用基础资料的动态实体对象(包含被引用的全部属性)
            </summary>
            <param name="formId">当前业务对象FormId</param>
            <param name="info">当前业务对象的元数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFieldRefPropertieyKeys(Kingdee.BOS.Core.Metadata.FormMetadata,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            构建基础资料字段被引用的属性Key列表
            </summary>
            <param name="info">业务对象元数据包</param>
            <param name="lookUpField">基础资料字段</param>
            <param name="refBusiness">引用的基础资料元数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateSimpleBaseDataInfo(Kingdee.BOS.Core.Metadata.LookUpObject)">
            <summary>
            构建一个简单的基础资料元数据包返回，仅包括内码、代码、名称；
            构建出来的元模型，仅用于创建动态实体模型，因此，只需要关注动态实体模型需要的属性
            </summary>
            <param name="lookUpObject"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateSimpleRefDynamicObjectType(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            创建基础资料字段，嵌套引用的其他基础资料字段，简单动态实体模型
            </summary>
            <param name="refBaseInfo">基础资料字段指向的元数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.BuildSimpleRefDataTypeExtendName(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            构建类型的扩展名称，用于缓存标示
            </summary>
            <param name="info"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateFlexFieldRefProperties(Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            根据维度字段引用的属性列表，构建其简化版的ORM模版
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateNeedBillType">
            <summary>
            更新需要单据类型的单据元数据表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.UpdateBillCodeRule">
            <summary>
            更新了表单ID，同步编码规则表记录的表单ID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.AddNeedPropByBussiness(Kingdee.BOS.Core.Metadata.FormElement.FormBusinessService,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            添加服务中需要的基础资料属性
            </summary>
            <param name="srv"></param>
            <remarks>暂时只处理计算和携带基础资料的服务</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.AddNeedPropByTakeBaseData(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String)">
            <summary>
            添加携带基础资料属性服务所需要的属性
            </summary>
            <param name="field"></param>
            <param name="express"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.CreateDateItems(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            构建日期字段在快捷过滤面板上面，控件的可选值
            </summary>
            <param name="info"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.LoadNetworkCtrlObjects(Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            读取本单据各操作对应的网控对象
            </summary>
            <param name="form"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.DomainModelSub">
            <summary>
            子领域模型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible">
            <summary>
            字段可见性定义（定义来自Kingdee.BOS.DomainModelDesigner.Utils.ElementVisible）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.GetVisibleValue(Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible)">
            <summary>
            生成字段可见性int值（算法来自Kingdee.BOS.DomainModelDesigner.Utils.ElementVisibleUtil.GetVisibleValue）
            </summary>
            <param name="elementVisible"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsListVis">
            <summary>
            单据列表是否可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsFilterListVis">
            <summary>
            过滤列表是否可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsSortListVis">
            <summary>
            排序列表是否可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsDefListVis">
            <summary>
            列表默认可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsEditVis">
            <summary>
            修改可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsViewVis">
            <summary>
            查看可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.MetaServicePlugIn.FormMetaServicePlugIn.ElementVisible.IsNewVis">
            <summary>
            新增可见
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.MobileMetaServicePlugIn.BeforeSave(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            保存前对于元数据的逻辑进行检查
            1 例如列表不能多个嵌套等等
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.WarnMetaServicePlugIn">
            <summary>
            预警对象元数据服务插件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WarnMetaServicePlugIn.AddWarnObjectToList">
            <summary>
            加入预警对象到预警对象基础资料
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn">
            <summary>
            单据转换元数据存储服务插件类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn.SaveLangDescription(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleMetadata)">
            <summary>
            保存描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn.LoadLangDescription(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleMetadata)">
            <summary>
            获取描述字段的多语言
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn.LoadCustSetting(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleMetadata)">
            <summary>
            获取客户自定义属性
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.WriteBackRuleMetaDataServicePlugIn.InsertCustSetting(Kingdee.BOS.Core.BusinessFlow.WriteBackRuleMetadata)">
            <summary>
            初始化客户自定义属性，向表格插入行
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetWorkCtrlMInfoRepository.Create(Kingdee.BOS.Core.NetworkCtrl.NetWorkCtrlMonitorInfo[])">
            <summary>
            批量创建、保存网络监控记录
            </summary>
            <param name="netCtrlMonitorObjs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetWorkCtrlMInfoRepository.GetNetworkCtrlMInfos(System.String)">
            <summary>
            根据条件加载网控记录：适合小范围加载
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetWorkCtrlMInfoRepository.GetNetworkCtrlMInfos(System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.Metadata.ISqlParam},Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据条件加载网控记录：适合小范围加载
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetWorkCtrlMInfoRepository.GetNetworkCtrlMInfos(System.String[])">
            <summary>
            根据网控记录的内码加载数据：适合大批量加载
            </summary>
            <param name="pkIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSave.AddValidtionErrors">
            <summary>
             添加校验失败信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSave.SetMasterID(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            同步基础资料的多组织数据主键
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractSave.RegisterWorkflowPlugIn(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            注册工作流插件
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.InheritType,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            构造函数
            </summary>
            <param name="ctx">上下文</param>
            <param name="isInherit">是否继承自模板</param>
            <param name="strBaseDataTypeId">分配的基础资料的ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GetAllocatedOfbs(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取初始化分配后数据信息
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.SetOperateResult(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            设置提示信息
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AutoSubmitAndAudit">
            <summary>
            自动提交审核
            </summary>
            <param name="submitEntitys"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Allocate._entryAllocationSqls">
            <summary>
            单据体的插入SQL
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Allocate.lstAllocateInfo">
             <summary>
            单据头分配信息
             </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Allocate.lstEntryAllocateInfo">
            <summary>
            单据体分配信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.CreateDataTable">
            <summary>
            创建批量插入表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.CreateEntryDT(System.String)">
            <summary>
            创建单据体批量插入表
            </summary>
            <param name="entryTable"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AjustEntitis(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Boolean)">
            <summary>
            调整分配后数据的内容
            </summary>
            <param name="dataEntities"></param>
            <param name="isModified"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AjustEntitisFast(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Boolean,System.Data.DataTable)">
            <summary>
            调整分配后数据的内容NEW
            </summary>
            <param name="dataEntities">分配数据包集合</param>
            <param name="isModified"></param>
            <param name="tbAllocateCollection">所有相关引用表的分配数据</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GetAllocateCollection(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            查询所有基础资料引用表的分配数据
            </summary>
            <param name="dataEntities">分配数据包集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.CreateMasterIdField(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            创建MasterId
            </summary>
            <param name="businessInfo"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GenAllocateInfo(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            产生单据头分配信息
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GenEntityAllocateInfo(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.DateTime,System.String,System.String)">
            <summary>
            对单条记录产生分配记录
            </summary>
            <param name="obj"></param>
            <param name="sourceObj"></param>
            <param name="entity"></param>
            <param name="now"></param>
            <param name="strUseOrgFieldKey"></param>
            <param name="strCreateOrgFieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AdjDataAccToBDCPolicy(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean)">
            <summary>
            根据基础资料控制策略对数据进行调整
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AdjDataAccToBDCPolicyFast(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean,System.Data.DataTable)">
            <summary>
            根据基础资料控制策略对数据进行调整（传入allocateCollection，减少每次sql查询）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GetLookUpFields(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取所有引用类型字段集合
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.GetItemClassFields(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取所有的多类型基础资料集合
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.CheckPreRepotFieldIsSetNull(System.String,System.Int32,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.List{System.String})">
            <summary>
            检查元数据单据体中上级汇报字段是否为空
            </summary>
            <param name="formId"></param>
            <param name="controlType"></param>
            <param name="field"></param>
            <param name="preReportFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AllocateValidator.Exists(System.Collections.Generic.Dictionary{Kingdee.BOS.Core.ExtendedDataEntity,System.String},Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            是否已经分配的目的组织
            </summary>
            <param name="hasExist"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AllocateValidator.GetUseOrgId(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            获取分配目标组织ID
            </summary>
            <param name="dObj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AllocateValidator.GetDestOrgNameById(System.Int64)">
            <summary>
            根据组织ID获取组织名称
            </summary>
            <param name="destOrgId">组织ID</param>
            <returns>组织名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Allocate.AllocateValidator.AddError(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            写入错误记录
            </summary>
            <param name="validateContext"></param>
            <param name="dataEntity"></param>
            <param name="allert"></param>
            <param name="numberPN"></param>
            <param name="customerParameter">自定义错误信息</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AbstractTrack">
            <summary>
            实现一些上下查通用的行为与属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AbstractTrack.Validate">
            <summary>
            执行操作校验
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <param name="option"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BaseDataDeletePlugIn">
            <summary>
            删除基础资料
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAllocate.ExecuteOperatinTransaction(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            删除的时候走删除校验逻辑
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAllocate.CancelAllocateValidator.ExistsAllocatePredicate(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.BusinessEntity.Organizations.AllocateInfo@,System.String@)">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
            <param name="allcate"></param>
            <param name="curAllocate"></param>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CancelAllocate.CancelAllocateValidator.GetInSyncAllocateDestIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取在同步中的基础资料ID（这些不能做取消分配操作）
            </summary>
            <param name="ctx"></param>
            <param name="destIds"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.CustomOperation">
            <summary>
            自定义的操作服务，服务逻辑由插件完成
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Delete.Excute(System.Object[])">
            <summary>
            重写删除执行，如果删除成功，需要写入补号池
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Delete.GetFilterInterIdSql(System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Object[])">
            <summary>
            传入SQL参数对象集合及单据内码集合，返回拼接的单据内码过滤条件。
            </summary>
            <param name="listParams">SQL参数对象集合。</param>
            <param name="interIds">单据内码集合。</param>
            <returns>返回拼接的单据内码过滤条件。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Delete.BeforeInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行前：提前反写，避免库存更新服务长期锁库
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Delete.DeleteConvertData(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            处理删除时单据转换相关的数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObj"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Delete._reserveContext">
            <summary>
            在反写引擎中，构建出来的预留服务上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Delete.ExecuteReserveServer">
            <summary>
            执行预留服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DoNothing">
            <summary>
            空操作服务端实现类; 标准的操作处理，如插件事件触发等等，都由基类实现
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DoNothing.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DoNothing.ExecuteOperatinTransaction(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            开始一个事物
            </summary>
            <param name="objs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Draft">
            <summary>
            暂存服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Draft.BeforeInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行前：提前反写，避免库存更新服务长期锁库
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Draft.SaveConvertData(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            处理暂存时单据转换相关的数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObject"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Draft._reserveContext">
            <summary>
            在反写引擎中，构建出来的预留服务上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Draft.ExecuteReserveServer">
            <summary>
            执行预留服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EntityAllcationAddInfo">
            <summary>
            现在要把原组织和目标组织实现，并把Deal实现即可....(Deal实现过程中把SQL拼接好就可以了)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EntityAllocationInfo">
            <summary>
            实体分配对象（对于新增行处理，采用和分配相同的处理）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EntityAllcationClearInfo">
            <summary>
            单据体内对垃圾进行回收(现在不需要做任何事情)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.EntityAllcationDelInfo">
            <summary>
            同步删除的分录（用户自己在目标组织加的分录不需要同步）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.EntityAllcationDelInfo.RetainIds">
            <summary>
            需要保留的分录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.EntityAllocationInfoCollection.CreateDataTable(System.String)">
            <summary>
            创建批量插入表
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ImportData.IsTempStor">
            <summary>
            是否暂存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ImportData.SaveConvertData(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            处理保存时单据转换相关的数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObject"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PkIdsUtil">
            <summary>
            主键工具
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PkIdsUtil.GetPKIDString(System.Object[],Kingdee.BOS.Core.Metadata.FormElement.EnumPkFieldType)">
            <summary>
            获取主键字符串
            </summary>
            <param name="pkIds"></param>
            <param name="pkFieldType"></param>
            <param name="pkType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.CreateBeginOperationTransactionArgs(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            由于InvokeFormBusiness可能需要用到完整的数据，因此更新单据编号需要提前，
            执行完此函数后，再调用InvokeFormBusiness(objs)
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.BeforeInvokeFormBusiness(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            业务服务执行前：提前反写，避免库存更新服务长期锁库
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.SetBillDate(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            更新表单日期字段, 修改人
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.UpdateSha(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            更新哈希值
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.SaveConvertData(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            处理保存时单据转换相关的数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObject"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Save._reserveContext">
            <summary>
            在反写引擎中，构建出来的预留服务上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Save.ExecuteReserveServer">
            <summary>
            执行预留服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SetStatus">
            <summary>
            单据头状态字段转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetStatus.Initialize(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.Orm.OperateOption,System.Collections.Generic.List{System.Object})">
            <summary>
            初始化
            </summary>
            <param name="info"></param>
            <param name="operation"></param>
            <param name="option"></param>
            <param name="entryRows"></param>
            <param name="paras"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Submit">
            <summary>
            提交服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.Excute(System.Object[])">
            <summary>
            获取序时簿对象集合 
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.Excute(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取单据对象集合 
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.CallOperatinTransaction(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            调用操作
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.PreparePropertys(System.Collections.Generic.List{System.String})">
            <summary>
            准备字段属性
            </summary>
            <param name="fieldKeys"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.SaveTempObjs(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            保存暂存状态数据
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Submit.ExecuteOperatinTransaction(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            执行操作
            </summary>
            <param name="objs"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.BillNoValidatator">
            <summary>
            TODO:提交时自动生成单据编码的方案未确认，此处在提交前做一次单据编码必录的校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.BillNoValidatator.GetBillPKId(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取单据内码
            </summary>
            <param name="row">单据体数据包</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SysParaSave.CONFIRM_TRAN_TABLE">
            <summary>
            事务确认表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysParaSave.ResetEntityPrimaryId(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            重置主键，由于参数是一个xml，没有设置单据体主键，导致无法对比分录多行情况，这里重置下主键
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysParaSave.AddTransactionConfirmTask(System.String)">
            <summary>
            添加一个日志确认SQL计划
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysParaSave.GetParameterCacheKey(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            获得参数缓存唯一标识
            </summary>
            <param name="parameterObjId"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="acctpolicyID"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Track">
            <summary>
            上下查操作服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Track.SupportPlugin">
            <summary>
            是否支持插件扩展
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.FindByStateDiagram">
            <summary>
            是否根据状态追踪表查找上下游
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.IsCrossSameState">
            <summary>
            是否根据相同状态键追踪跨状态节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.IsFindAll">
            <summary>
            是否查找所有跨状态内迁移图的间接节点数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.IsUpDownTrack">
            <summary>
            是否仅仅上查或下查
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.OnlyDirectLinkBill">
            <summary>
            仅查询直接关联上下查
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Track.TargetBill">
            <summary>
            目标节点，针对上查，下查选中目标单查找的情况
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TreeModelSavePlugIn.MoveTVRelation(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            节点移动，维护树形结构嵌套表
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TreeModelSavePlugIn.InsertTVRelationTable(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            更新树形结构的嵌套表
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.RepairEntryTable(System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context)">
            <summary>
            根据业务的原始表获取对应的分配表
            </summary>
            <param name="billAllocationName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetObjValues(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获得ILookUpField所有的原始值，为在分配表中查到目的值做好准备
            </summary>
            <param name="lookUpFields"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetObjValues(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            获取动态表单的值
            </summary>
            <param name="obj"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetTableIdsDic(Kingdee.BOS.Core.Metadata.LookUpObject,System.Object)">
            <summary>
            设置对应表要查询Id的值
            </summary>
            <param name="lookupObject"></param>
            <param name="id"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetAllocateData(Kingdee.BOS.Context)">
            <summary>
            获取找到目标组织下基础资料ID的SQL
            </summary>
            <param name="objValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetFormTable(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField,System.String@)">
            <summary>
            获取数据使用的表
            </summary>
            <param name="obj"></param>
            <param name="lookUpField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetUseOrgId(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取基础资料使用组织信息（使用组织在处理基础资料之前已经赋值）
            </summary>
            <param name="headerObj"></param>
            <param name="field"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetTargetId(System.Data.DataTable,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取目标组织下对应的ID
            </summary>
            <param name="allocateCollection"></param>
            <param name="obj"></param>
            <param name="headerObj"></param>
            <param name="field"></param>
            <param name="info"></param>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.FindTargetDObj(System.String,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            找到目标的对象
            </summary>
            <param name="Key"></param>
            <param name="targetEntityObjs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetNumberAndName(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            为提示信息做准备
            </summary>
            <param name="curBaseDataField"></param>
            <param name="dObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetValueAccConfig(Kingdee.BOS.App.Core.BillInfo,Kingdee.BOS.App.Core.OrgRefFieldConfig)">
            <summary>
            设置组织相关的基础资料
            </summary>
            <param name="billInfo"></param>
            <param name="config"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.RecordEntryDelMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            记录单据体、子单据体的处理信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetObjValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            为系统付不同的值（把obj中的值赋给新的值）
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.DealILookUpField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            处理有关联的控件类型。(同步时调用)
            </summary>
            <param name="lookUpFields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetValueInDiffType(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Data.DataTable,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            在不同情况下设值
            </summary>
            <param name="obj"></param>
            <param name="source"></param>
            <param name="field"></param>
            <param name="allocateCollection"></param>
            <param name="headerObj"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetEntrySeqs(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            设置序列
            </summary>
            <param name="sourceObj"></param>
            <param name="targetObj"></param>
            <param name="bussinessInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.DealILookUpField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            处理有关联的控件类型。
            </summary>
            <param name="lookUpFields"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.DealILookUpFieldFast(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Data.DataTable)">
            <summary>
            处理有关联的控件类型。（传入allocateCollection，减少每次sql查询）
            </summary>
            <param name="lookUpFields"></param>
            <param name="obj"></param>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="allocateCollection"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetObjValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Object,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            为系统付同一个值
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="field"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.DealWithItemClassFieldFast(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ItemClassField},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Data.DataTable)">
            <summary>
            处理多类别基础资料（传入allocateCollection，减少每次sql查询）
            </summary>
            <param name="itemClassFieldFields"></param>
            <param name="obj"></param>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="allocateCollection"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.SetFlexObjPkValue(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            设置辅助属性维度的对象Id（根据_Id）
            </summary>
            <param name="field"></param>
            <param name="obj"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.ValueSetter.allocateHash">
            <summary>
            提供获取allocateCollection的信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetAllocateCollectionAll(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject},Kingdee.BOS.Context)">
            <summary>
            批量获取所有分配集合
            </summary>
            <param name="lookUpFields"></param>
            <param name="lstObjs"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetObjValues(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ILookUpField},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.EntryEntity,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            获得ILookUpField所有的原始值，为在分配表中查到目的值做好准备
            </summary>
            <param name="lookUpFields"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ValueSetter.GetParentEntityTop(Kingdee.BOS.Core.Metadata.EntityElement.SubEntryEntity)">
            <summary>
            获取顶层的单据体（多层子单据体嵌套时）
            </summary>
            <param name="parentEntity">子单据体</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.ValueSetter.UnAllocatedInfo">
            <summary>
            提示哪些分配型基础资料字段在目标组织没有对应的值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.InOutDataService">
            <summary>
            引入引出服务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.DocumentStatus">
             <summary>
            文档状态属性
             </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.PreFix">
            <summary>
            数据迁移临时表前辍
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.OperatorNumber_Save">
            <summary>
            保存操作数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.OperatorNumber_Submit">
            <summary>
            提交操作数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.OperatorNumber_Audit">
            <summary>
            审核操作数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.OperatorNumber_Disable">
            <summary>
            禁用操作数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.ForbidStatus">
            <summary>
            禁用属性
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.ForbidStatus_B">
            <summary>
            禁用状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.ForbidStatus_A">
            <summary>
            正常状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.ForbiderId">
            <summary>
            禁用人
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.ForbidDate">
            <summary>
            禁用日期
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.AuditStatus_A">
            <summary>
            创建状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.AuditStatus_C">
            <summary>
            审核对状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.InOutDataService.AuditStatus_B">
            <summary>
            审核中状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.ImportDataToTempTable(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32,System.Int32)">
            <summary>
            根据Excel建立临时表，并将数据存入临时表
            </summary>
            <param name="ctx"></param>
            <param name="entityDatas">数据</param>
            <param name="busienssInfo">业务对象</param>
            <param name="pageCount">总页数,默认为一页</param>
            <param name="pageIndex">当前页索引,从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.ImportDataFromTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.InputOutput.ImportDataFromTempTableEventArg)">
             <summary>
             将临时表中的数据存入到正式业务表中
             </summary>
             <param name="ctx">上下文</param>
            <param name="e">参数包</param>
             <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.SingleImportFromTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.DataMigrationOperationResult,Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.App.Core.SaveService,Kingdee.BOS.App.Core.SetStatusService,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.IList{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.IDictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String},System.Collections.Generic.IDictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String},Kingdee.BOS.App.Core.InputOutput.MyTimer)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="realBusinessInfo"></param>
            <param name="timer"></param>
            <param name="result"></param>
            <param name="option"></param>
            <param name="service"></param>
            <param name="ss"></param>
            <param name="billField"></param>
            <param name="nameField"></param>
            <param name="tempList"></param>
            <param name="arrayLists"></param>
            <param name="dyTargetDocStatus"></param>
            <param name="dyTargetForbidStatus"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.BatchImportFromTempTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.DataMigrationOperationResult,Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.App.Core.SaveService,Kingdee.BOS.App.Core.SetStatusService,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Collections.Generic.IList{Kingdee.BOS.Orm.DataEntity.DynamicObject},System.Collections.Generic.IDictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String},System.Collections.Generic.IDictionary{Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String},Kingdee.BOS.App.Core.InputOutput.MyTimer)">
            <summary>
            批量导入
            </summary>
            <param name="ctx"></param>
            <param name="realBusinessInfo"></param>
            <param name="timer"></param>
            <param name="result"></param>
            <param name="option"></param>
            <param name="service"></param>
            <param name="ss"></param>
            <param name="billField"></param>
            <param name="nameField"></param>
            <param name="tempList"></param>
            <param name="arrayLists"></param>
            <param name="dyTargetDocStatus"></param>
            <param name="dyTargetForbidStatus"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.AnalysisResult(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.DynamicForm.DataMigrationOperationResult,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Int32,System.String,System.Boolean)">
            <summary>
            分板结果
            </summary>
            <param name="sources"></param>
            <param name="r"></param>
            <param name="result"></param>
            <param name="billField"></param>
            <param name="nameField"></param>
            <param name="baseRecordIndex"></param>
            <param name="messagePre"></param>
            <param name="isFail"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.ClearDataMigrationTempTable(Kingdee.BOS.Context)">
            <summary>
            清除数据迁移相关的临时表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CustomUpgradeData(Kingdee.BOS.Context,Kingdee.BOS.Context,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             自定义升级数据
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="source">源库(</param>
            <param name="plugName">插件</param>
            <param name="result">结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.WriteLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            写日志
            </summary>
            <param name="ctx"></param>
            <param name="message"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CopyEntityData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.DynamicForm.IDynamicFormModel,System.Boolean,System.Boolean,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            Copy实体数据
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CopyEntityProperties(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean)">
            <summary>
            Copy复性值
            </summary>
            <param name="ctx">上下文</param>
            <param name="entity">实体</param>
            <param name="d">源对象</param>
            <param name="nd">目标对象</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.IsForbiderId(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            判断是否为禁用人
            </summary>
            <param name="f"></param>
            <param name="type"></param>
            <returns>禁用日期(若能返回禁用日期则需要处理，否则不需要处理</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.SetFixField(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context)">
            <summary>
            设置固定列属性
            创建人\创建日期\修改人\修改日期\组织
            </summary>
            <param name="f"></param>
            <param name="nd"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CopyBaseDataField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field)">
            <summary>
            复制基础资料类型属性
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="d"></param>
            <param name="nd"></param>
            <param name="f"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CopyBillTypeField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.BillTypeField)">
            <summary>
            设置弹性域字段的值
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="d"></param>
            <param name="nd"></param>
            <param name="f"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CopyRelatedFlexField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.RelatedFlexGroupField)">
            <summary>
            设置弹性域字段的值
            </summary>
            <param name="ctx"></param>
            <param name="entity"></param>
            <param name="d"></param>
            <param name="nd"></param>
            <param name="f"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.SetDefaultValueWithTemplate(Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            使用模版更新默认值
            </summary>
            <param name="entity"></param>
            <param name="ndy"></param>
            <param name="template"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.GetDynmaicFromCachePool(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从缓存池获取基础资料对象
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="entityKey"></param>
            <param name="number"></param>
            <param name="bf"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.GetDynmaicFromCachePool(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.RelatedFlexGroupField,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            从缓存池获取弹性域对象
            </summary>
            <param name="ctx"></param>
            <param name="rf"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.GetDynmaicFromCachePool(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            从缓存池获取对象实例
            </summary>
            <param name="ctx"></param>
            <param name="type"></param>
            <param name="qbparam"></param>
            <param name="entityKey"></param>
            <param name="numberKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.GetCwZJObj(Kingdee.BOS.Context)">
            <summary>
            库存值集对象（因为是在循环中访问，特将作为成员变量减少数据库访问次数）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.CreateTempTablWithMeta(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Contracts.IDBService)">
            <summary>
            CreateTempTablWithMeta
            </summary>
            <param name="ctx"></param>
            <param name="meta"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.RegisterTempTable(Kingdee.BOS.Context)">
            <summary>
            注册未在运行过程中产生的临时表(如索引表等）
            </summary>
            <param name="ctx"></param>
            <param name="dbSerice"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.RegisterTempTable(Kingdee.BOS.Context,Kingdee.BOS.Contracts.IDBService,System.String)">
            <summary>
            注册临时表
            </summary>
            <param name="ctx"></param>
            <param name="dbSerice"></param>
            <param name="tempTBName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.BuildOperationResult(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Build操作结果明细
            </summary>
            <param name="pk"></param>
            <param name="number"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.SubmitBill(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.App.Core.SetStatusService,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String)">
            <summary>
            提交单据
            </summary>
            <param name="ctx"></param>
            <param name="realBusinessInfo"></param>
            <param name="ss"></param>
            <param name="ndy"></param>
            <param name="targetStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.InOutDataService.MergeErrorInfo(Kingdee.BOS.Core.DynamicForm.IOperationResult,System.Int32)">
            <summary>
            合并Error信息
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.InOutDataService.TempCacheBaseDataPools">
            <summary>
            基础资料对象池
            Key为唯一对象标识
            Value为该对象集合，只加载了两列：PKField与NumberField
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetadataProvider.ElementAsm">
            <summary>
            元素组合构造，yaojunsong，2011-08-03
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetadataProvider.DomainAsm">
            <summary>
            领域构造
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetadataProvider.AbstractMetadataProvider">
            <summary>
            元数据提供者抽象基类，yaojunsong，2011-08-03
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetadataProvider.IMetadataProvider">
            <summary>
            元数据提供者标准接口，yaojunsong,2011-08-03
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.IMetadataProvider.GetLogObjectTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获得表单写日志的对象类型Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.IMetadataProvider.GetFilterSchemaObjectTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获得表单写过滤方案的对象类型Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.IMetadataProvider.GetBaseFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基类表单Id
            </summary>
            <param name="ctx"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.AbstractMetadataProvider.GetBaseFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基本模板的FormId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.AbstractMetadataProvider.DynaAssemblyFormMeta(Kingdee.BOS.Context,Kingdee.BOS.App.Core.MetadataProvider.DomainAsm,System.String)">
            <summary>
            动态组装表单模型数据
            </summary>
            <param name="da"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.AbstractMetadataProvider.CreateField(Kingdee.BOS.Core.Metadata.FormMetadata,System.String,Kingdee.BOS.Core.Metadata.ElementMetadata.ElementType,System.String,System.String,System.Boolean)">
            <summary>
            创建字段
            </summary>
            <param name="elementType"></param>
            <param name="rect"></param>
            <param name="ContainerName"></param>
            <param name="entityKey"></param>
            <param name="withAppeance"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.AbstractMetadataProvider.UpdateFormMetadataTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata)">
            <summary>
            构造表结构
            </summary>
            <param name="ctx"></param>
            <param name="fm"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory">
            <summary>
            元数据提供者单态工厂类，yaojunsong，2011-08-03
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.FromProvider(System.String)">
            <summary>
            判断ID是否使用提供者产生元数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.GetProviderKeyById(System.String)">
            <summary>
            从ID中提取提供者键值
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.GetFromIdById(System.String)">
            <summary>
            从ID中提取自定义动态FormId键值
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory._mapProvider">
            <summary>
            提供者接口-实现类 映射关系
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.#ctor">
            <summary>
            内构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.RegisterProvider">
            <summary>
            初始化加载
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.GetMetadataProviders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取所有服务的配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.Dispose">
            <summary>
            释放接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.AddOrUpdateProvider(System.String,System.String)">
            <summary>
            添加或更新现有提供者，这样有助于第三方注册或覆盖提供者
            </summary>
            <param name="serviceType"></param>
            <param name="serviceClrTypeString"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.CloseProvider(System.Object)">
            <summary>
            销毁提供者类实例
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.GetProvider(System.String)">
            <summary>
            获取元数据提供者类实例
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetadataProvider.MetadataProviderFactory.GetProviderById(System.String)">
            <summary>
            通过FromId获取元数据提供者类实例
            </summary>
            <param name="frmId"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.BaseMetaServicePlugIn">
            <summary>
            基础资料的元数据读写插件服务单独抽出来；
            如果对基础资料有特殊的处理，请下如此类；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BaseMetaServicePlugIn.RemoveSpecialBar">
            <summary>
            在单组织下对下发/取消下发/分配/取消分配进行隐藏
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BaseMetaServicePlugIn.UpdateLookUpClass">
            <summary>
            更新基础资料查找元数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.BaseMetaServicePlugIn.UpdateBaseDataType">
            <summary>
            更新基础资料类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackService.Track(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean,System.Boolean)">
            <summary>
            单据上下查（根据状态迁移图）
            </summary>
            <param name="ctx"></param>
            <param name="expandNode">需要展开的单据节点</param>
            <param name="info">扩展单据元数据信息</param>        
            <param name="isCrossSameState">是否根据状态名称找跨状态迁移图</param>
            <returns></returns>      
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackService.TrackLinkCopy(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            指定目标单进行关联上下查
            </summary>
            <param name="ctx"></param>
            <param name="trackNode"></param>
            <param name="targetNode"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TrackService.TrackLinkCopy(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Boolean)">
            <summary>
            关联复制单据上下查(根据关联表）
            </summary>
            <param name="ctx"></param>
            <param name="expandNode">>需要展开的单据节点</param>
            <param name="info">扩展单据元数据信息</param>
            <param name="directTrack">仅查询直接关联上下查</param>
            <returns></returns> 
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.Delete(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            删除布局方案
            </summary>
            <param name="ctx"></param>
            <param name="Id">布局方案Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.DeleteLayouts(Kingdee.BOS.Context,System.String[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            删除多个布局方案
            </summary>
            <param name="ctx"></param>
            <param name="Ids"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.Update(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            更新布局方案
            </summary>
            <param name="ctx"></param>
            <param name="obj">布局方案</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存布局方案（新增或修改）
            </summary>
            <param name="ctx"></param>
            <param name="obj">布局方案</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.LoadDefaultLayout(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.String)">
            <summary>
            加载默认的布局方案
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="formId">单据Id</param>
            <param name="billTypeId">单据类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.SetDefaultLayout(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            设置默认方案
            </summary>
            <param name="ctx"></param>
            <param name="Id">布局方案Id</param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.CancelDefaultLayout(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            取消默认方案
            </summary>
            <param name="ctx"></param>
            <param name="Id">布局方案Id</param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.GetUserDefaultCustomLayouts(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户默认的布局方案（可能有多个）
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.GetCustomLayoutIdCacheKey(Kingdee.BOS.Context,System.String)">
            <summary>
            用户参数默认布局方案的缓存键
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.UpdateCustomLayoutParam(Kingdee.BOS.Context,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            更新默认布局方案到用户参数
            </summary>
            <param name="ctx"></param>
            <param name="Id"></param>
            <param name="formId"></param>
            <param name="billTypeId"></param>
            <param name="isCancel">是否取消默认</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.GetCustomLayoutParam(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户该单据的用户参数中的默认布局方案
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.GetBillFormParamCacheKey(System.String)">
            <summary>
            某个单据包含的布局方案的缓存键
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.ClearBillFormParamCache(Kingdee.BOS.Context,System.String)">
            <summary>
            清除某个单据的布局方案缓存
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.CustomLayoutService.GetBillFormParamCache(Kingdee.BOS.Context,System.String)">
            <summary>
            获取某个单据的所有布局方案（优先从缓存中取）
            </summary>
            <param name="ctx"></param>
            <param name="formId">单据</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache">
            <summary>
            基础资料缓存管理
            </summary>
            <remarks>
            缓存过滤条件与内码之间的关系，避免服务端读取内码的过程
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache._maxCacheCount">
            <summary>
            每基础资料，最多缓存数量，避免缓存过渡膨胀
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache._removeCacheCount">
            <summary>
            缓存个数达到后，一次移出的数量；腾出空间以存储新读取的基础资料
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache._dctBDDataCache">
            <summary>
            缓存的基础资料数据包; 非静态,生命周期短
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache.Clear">
            <summary>
            清除全部缓存；适合在新打开一张单据时调用，避免缓存不断膨胀
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.BaseDataCache.Load(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            按条件读取基础资料；优选从缓存中检索符合条件的数据包，其次从应用服务器读取
            </summary>
            <param name="context">上下文环境</param>
            <param name="field">基础资料字段</param>
            <param name="loadParam">读取参数</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter">
            <summary>
            按过滤条件过滤出的基础资料数据包集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.#ctor(Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            构造函数
            </summary>
            <param name="queryParam"></param>
            <param name="dynamicObjs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.EqualsQueryParam(Kingdee.BOS.Context,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            判断本组件存储的数据过滤条件是否与目标参数包吻合；
            如果吻合，则可以认为本组件存储的数据包符合参数查询的预期，可以被直接使用
            </summary>
            <param name="queryParam"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.EqualsIsolationOrg(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            判断两个隔离组织列表包含的组织是否一样；
            因为顺序可能不同，进行循环判断
            </summary>
            <param name="list1"></param>
            <param name="list2"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.Filter">
            <summary>
            过滤条件, 数据集合要符合条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.IsolationOrgList">
            <summary>
            隔离组织
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.IsShowApproved">
            <summary>
            仅显示已审核
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.IsShowUsed">
            <summary>
            仅显示未禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.PlugInProxy.BDObjectsWithFilter.Ids">
            <summary>
            符合条件的基础资料内码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelHelper">
            <summary>
            静态类：协助管理App端Model
            </summary>
            <remarks>
            提供统一的方法创建Model，避免缺少初始化必要的属性
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelHelper.CreateModelProxy(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.DynamicForm.IDefaultValueCalculator)">
            <summary>
            App服务端，创建Model类
            </summary>
            <param name="info"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelHelper.GetHeadDataObject(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据单据体行，获取其所在的单据完整数据包
            </summary>
            <param name="entityRowData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.OperationServicePlugInProxy.FireBeforeDoSaveExecute(Kingdee.BOS.Core.DynamicForm.PlugIn.BeforeDoSaveExecuteEventArgs)">
            <summary>
            在执行保存操作前触发，此时数据包没有填充主键数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy">
            <summary>
            单据状态跟踪、反写插件 代理对象；
            主要用途：持有插件、触发插件事件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy">
            <summary>
            插件事件代理接口；
            用于兼容StateTrackerPlugInProxy与ServicePlugInProxy;
            在ServicePlugIn代码完成向StateTrackerPlugIn的迁移以后，删除此接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireBeforeStateTrackerApply(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeStateTrackerApplyEventArgs)">
            <summary>
            钩稽申请前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireBeforeCreateArticulationRow(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCreateArticulationRowEventArgs)">
            <summary>
            添加创建钩稽申请行前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireBeforeWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.WriteBackEventArgs)">
            <summary>
            执行反写前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterCustomReadFields(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterCustomReadFieldsEventArgs)">
            <summary>
            添加自定义读取需要反写的源单字段后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterConvertLinkWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterConvertLinkWritebackEventArgs)">
            <summary>
            钩稽的数据反写完成，钩稽数量（基本单位数量）填写完成
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireBeforeCheckHighLimit(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            超额检查前调用，IsCancelCheck==true，则不再做超额检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireBeforeCheckAutoClose(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            关闭下限检查前调用，IsCancelCheck==true，则不再做关闭下限检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterHighLimitEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            超额处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterUnitTransEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            单位换算处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterAutoCloseEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            自动关闭处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.IStateTrackerPlugInProxy.FireAfterSaveWritebackData(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterSaveWritebackDataEventArgs)">
            <summary>
            所有反写操作完成并保存实体到数据库后调用
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy._plugIns">
            <summary>
            持有的反写插件列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.#ctor(System.Collections.Generic.List{Kingdee.BOS.Core.Bill.PlugIn.AbstractStateTrackerPlugIn})">
            <summary>
            构造函数
            </summary>
            <param name="plugIns"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireBeforeStateTrackerApply(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeStateTrackerApplyEventArgs)">
            <summary>
            钩稽申请前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireBeforeCreateArticulationRow(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCreateArticulationRowEventArgs)">
            <summary>
            添加创建钩稽申请行前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireBeforeWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.WriteBackEventArgs)">
            <summary>
            执行反写前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterCustomReadFields(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterCustomReadFieldsEventArgs)">
            <summary>
            添加自定义读取需要反写的源单字段后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterConvertLinkWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterConvertLinkWritebackEventArgs)">
            <summary>
            钩稽的数据反写完成，钩稽数量（基本单位数量）填写完成
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireBeforeCheckHighLimit(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            超额检查前调用，IsCancelCheck==true，则不再做超额检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireBeforeCheckAutoClose(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            关闭下限检查前调用，IsCancelCheck==true，则不再做关闭下限检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterHighLimitEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            超额处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterUnitTransEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            单位换算处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterAutoCloseEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            自动关闭处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.StateTrackerPlugInProxy.FireAfterSaveWritebackData(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterSaveWritebackDataEventArgs)">
            <summary>
            所有反写操作完成并保存实体到数据库后调用
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PreInsertData.BaseDataTypePIDService">
            <summary>
            基础资料类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BaseDataTypePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BaseDataTypePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            执行更新
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BaseDataTypePIDService.Clear(Kingdee.BOS.Context)">
            <summary>
            最后清理
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BillCodeRulePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成当前单据相关的编码规则信息
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BillCodeRulePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新到帐套中去
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.BillMultiViewPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成当前单据相关的视图信息
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.EnumTypePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.EnumTypePIDService.Generate(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.ComboField},System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="fields"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.EnumTypePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.EnumTypePIDService.GetEnumTypeObj(Kingdee.BOS.Context,System.String)">
            <summary>
            获取枚举类型数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">枚举类型主键</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.EnumTypePIDService.Clear(Kingdee.BOS.Context)">
            <summary>
            执行预插数据清理工作
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.LookUpObjectPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成预插数据
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.LookUpObjectPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新预插数据
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PreInsertData.NeedTypeBillPIDService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NeedTypeBillPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NeedTypeBillPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService">
            <summary>
            网络控制预插数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成当前单据相关的网络控制数据
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            更新数据到数据库中
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService.GetNetCtrlInfo(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject}@,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject}@)">
            <summary>
            填充网络控制信息
            </summary>
            <param name="deployMetadata"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService.GetNetworkCtrlObjs(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlType,System.String)">
            <summary>
            根据网控类型和业务对象获取网控对象列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.NetworkCtrlPIDService.GetNetworkCtrlMutexObjects(Kingdee.BOS.Context,System.String)">
            <summary>
            获取网控对象的互斥对象
            </summary>
            <param name="netCtrlID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypePermissionPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            权限对象与业务对象映射
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypePermissionPIDService.GetFormMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="strFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypePermissionPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            执行数据插入
            </summary>
            <param name="objectTypePermission"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService">
            <summary>
            更新业务对象与基础资料的对应关系表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService._metaDataService">
            <summary>
            元数据服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            生成预插数据
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            执行更新
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsPermissionInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService.BuildObjectTypeRefTable(Kingdee.BOS.Core.Metadata.PreInsertData.ObjectTypeRefDetail,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject})">
            <summary>
            组装参数及其Sql信息
            </summary>
            <param name="detail"></param>
            <param name="formid"></param>
            <param name="lstSqlObjects"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.ObjectTypeRefTablePIDService.DeleteObjectTypeRef(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.AbstractBusinessMetadata,System.Collections.Generic.List{System.String}@)">
            <summary>
            删除基础资料引用
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">当前表单Id</param>
            <param name="metaData">当前表单元数据</param>
            <param name="listSql">后续执行的sql集合</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.GetPermissionItemData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="infos"></param>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.GetPermissionItemData(Kingdee.BOS.Context,System.String[])">
            <summary>
            获取权限项数据
            </summary>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.GetPermissionObjectData(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="pObject"></param>
            <param name="bAddNotExistsData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.LoadDynamicObjectData(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="strFormId"></param>
            <param name="selectorInfos"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.PermissionObjectPIDService.GetNumber(System.Int32)">
            <summary>
            获得Number
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn">
            <summary>
            单据转换元数据存储服务插件类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.OnGetMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.GetMetadataResourceArgs)">
            <summary>
            获取元数据多语言资源对象
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.OnLoadMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.OnLoadMetadataResourceArgs)">
            <summary>
            元数据加载多语言资源事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GetResourceData(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.Int32)">
            <summary>
            获取单据转换的多语言数据
            </summary>
            <param name="el"></param>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.LoadResource(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Resource.ResourceData,System.Int32)">
            <summary>
            加载单据转换的多语言数据
            </summary>
            <param name="tracker"></param>
            <param name="resource"></param>
            <param name="localeId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GetResKey(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="typeId"></param>
            <param name="className"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.AfterSave(System.EventArgs)">
            <summary>
            保存后事件处理
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.UpdateTrackerTable(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement)">
            <summary>
            更新状态迁移图对应数据库表，和快照表
            </summary>
            <param name="tracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GenCreateSnapshotTableSQL(System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成创建快照表的SQL
            </summary>
            <param name="tracker"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GenCreateTrackerTableSQL(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成创建追踪表SQL
            </summary>
            <param name="tracker"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GenAlertTrackerTableSQL(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.Data.DataTable,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            生成修改追踪表SQL
            </summary>
            <param name="tracker"></param>
            <param name="tableSchema"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.AddField(System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            表添加字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.DropField(System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            删除表字段
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.ExistsFieldInTableSchema(System.Data.DataTable,System.String)">
            <summary>
            在表格描述中，判断是否存在指定字段
            </summary>
            <param name="tableSchema"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.ExistsColumnInStateFields(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,System.String)">
            <summary>
            判断表格列是否存在状态字段集合中。
            </summary>
            <param name="BillKeyFields"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.GetTableSchema(System.String)">
            <summary>
            返回指定表格的字段集合
            </summary>
            <param name="tableName"></param>
            <returns></returns>
            <remarks>
            每个字段作为一行进行描述
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.TrackerMetaDataServicePlugIn.ExitsTable(System.String)">
            <summary>
            判断数据库中实体名称是否已经被使用
            </summary>
            <param name="tableName">实体名称</param>
            <returns></returns>
            <remarks>
            判断的依据是sysobjects中是否存在同名的记录
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper">
            <summary>
            构建状态追踪使用的关联关系表格
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.GenCreateLinkTableSQL(Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            构建关联关系表
            </summary>
            <param name="flow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.GetEntityPkFieldDbType(Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取主键数据库字段类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.GenAlertLinkTableSQL(System.Data.DataTable,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            更新表结构
            </summary>
            <param name="flow"></param>
            <param name="traceTable"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.ExistsFieldInTableSchema(System.Data.DataTable,System.String)">
            <summary>
            在表格描述中，判断是否存在指定字段
            </summary>
            <param name="tableSchema"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.AddField(System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            表添加字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.UpdateTrackerBillTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            更新钩稽反写表，字段信息
            </summary>
            <param name="context"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.CreateLinkTableHelper.AddBillTrackerField(System.Data.DataTable,Kingdee.BOS.Core.Metadata.EntityElement.LinkEntity,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{Kingdee.BOS.App.Data.SqlObject}@)">
            <summary>
            根据单据上配置的反写规则，添加所需的字段
            </summary>
            <param name="tableSchema"></param>
            <param name="linkentity"></param>
            <param name="info"></param>
            <param name="batchSQL"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetNetCtrlList(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.Metadata.ISqlParam})">
            <summary>
            获取网控对象列表（参数化）
            </summary>
            <param name="ctx"></param>
            <param name="filter"></param>
            <param name="sqlParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetSafeNetCtrlList(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.Metadata.ISqlParam})">
            <summary>
            获取网控对象列表（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="sqlId">脚本ID</param>
            <param name="sqlParams">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetNetCtrlList4IDE(Kingdee.BOS.Context,System.String)">
            <summary>
            根据网控类型获取网控对象列表，包含网控控制对象名称（系统名、子系统名、业务对象名称）
            </summary>
            <param name="ctx"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetSafeNetCtrlMutexList(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.Metadata.ISqlParam})">
            <summary>
            获取网控互斥列表（用于客户端调用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="sqlId">脚本Id</param>
            <param name="sqlParams">参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BeginNetCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam)">
            <summary>
            开启网控
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CheckNetCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam})">
            <summary>
            检测网控
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchCreateNetCtrlRecord(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam},System.Boolean,System.Boolean)">
            <summary>
            批量创建网控记录，并且忽略存在的互斥网控记录
            谨慎使用，可能导致创建大量的网控，
            目前只用在单据转换产生目标单据未保存之前，防止未保存前上游单据页面关闭没有网控控制
            </summary>
            <param name="ctx"></param>
            <param name="networkCtrlObj"></param>
            <param name="billParamList"></param>
            <param name="isSingleFail">有一条失败就返回</param>
            <param name="isIgnoreMutexRecord">忽略互斥网控记录</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchBeginNetCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam},System.Boolean)">
            <summary>
            批量开启网控（有一条失败就返回）
            </summary>
            <param name="ctx"></param>
            <param name="networkCtrlObj"></param>
            <param name="billParamList"></param>
            <param name="isSingleFail">有一条失败就返回</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchNetCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam},System.Boolean,System.Boolean)">
            <summary>
            忽略互斥的网控记录来创建新网控记录
            </summary>
            <param name="ctx"></param>
            <param name="networkCtrlObj"></param>
            <param name="billParamList"></param>
            <param name="isSingleFail"></param>
            <param name="isIgnoreMutexRecord"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CommitNetCtrl(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlResult)">
            <summary>
            批量释放网控
            </summary>
            <param name="ctx"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchCommitNetCtrl(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlResult})">
            <summary>
            批量释放网控
            </summary>
            <param name="ctx"></param>
            <param name="netWorkCtrlResults"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CommitNetCtrlByUser(Kingdee.BOS.Context)">
            <summary>
            释放网控
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CommitNetCtrByUserID(Kingdee.BOS.Context)">
            <summary>
            释放指定用户网控记录
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchForceCommitNetCtrlByFID(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            批量强制释放网控
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BatchCommitNetCtrlByFID(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            批量释放网控
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.AddNetworkCtrlLogsForAuto(Kingdee.BOS.Context,System.String)">
            <summary>
            对于自动清空网控加日志
            </summary>
            <param name="ctx"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.DeleteNetCtrlByIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            根据主键删除网控记录
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CommitDesignerNetCtrl(Kingdee.BOS.Context,System.String)">
            <summary>
            释放设计器网控
            </summary>
            <param name="ctx"></param>
            <param name="formId">表单ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CanUseCurFuncforMonopolize(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject)">
            <summary>
            独占类网控类型
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetMutexMonitorInfos(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject})">
            <summary>
            读取已监控的互斥类网控记录
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj">请求网控对象</param>
            <param name="para">请求网控的业务数据</param>
            <param name="mutexNetworkCtrlObjs">互斥网控对象</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.SQL_BatchReadNetCtrl">
            <summary>
            SQL, 批量读取冲突的网控记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetMutexMonitorInfosBatch(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam},System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject})">
            <summary>
            批量读取已监控的互斥类网控记录
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj">请求网控对象</param>
            <param name="para">请求网控的业务数据</param>
            <param name="mutexNetworkCtrlObjs">互斥网控对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetMutexNetCtrlObjs(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject)">
            <summary>
            获取互斥网控对象列表
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetMutexNetCtrlObjsOther(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject)">
            <summary>
            获取互斥网控对象列表(非当前单据的)
            </summary>
            <param name="ctx"></param>
            <param name="netCtrlObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.CreateNetWorkCtrlMonitorInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.NetworkCtrl.NetworkCtrlObject,Kingdee.BOS.Core.NetworkCtrl.NetWorkRunTimeParam)">
            <summary>
            新建一个网络监控记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetConflictObjName(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkCtrlMonitorInfo})">
            <summary>
            网控类型必须一致
            </summary>
            <param name="mInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetConflictOperationName(System.Collections.Generic.List{Kingdee.BOS.Core.NetworkCtrl.NetWorkCtrlMonitorInfo})">
            <summary>
            获取互斥操作的名称，去掉名称
            </summary>
            <param name="mInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.GetSubSystemNameByID(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取子系统名称
            </summary>
            <param name="ctx"></param>
            <param name="sSubsystemIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.NetworkCtrl.NetworkCtrlService.BuildNetworkCtrlObject(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            构建网控对象
            </summary>
            <param name="ctx"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.AllocateService">
            <summary>
            分配、取消分配服务组件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.Issue(Kingdee.BOS.Context,Kingdee.BOS.JSON.JSONObject,System.String)">
            <summary>
            下发
            </summary>
            <param name="ctx"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CancelIssue(Kingdee.BOS.Context,Kingdee.BOS.JSON.JSONObject,System.String)">
            <summary>
            取消下发
            </summary>
            <param name="ctx"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CancelAllocate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            取消分配
            </summary>
            <param name="ctx"></param>
            <param name="allocateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CheckDistriBDFields(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            检查分配型基础资料字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FindUnAllocateFields(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.Operation.AllocateCheckResult},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.Object}},Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            查找为分配的字段
            </summary>
            <param name="results"></param>
            <param name="fieldKeySIdDic"></param>
            <param name="ctx"></param>
            <param name="para"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FindUnAllocateFields(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.Operation.AllocateCheckResult},System.Boolean)">
            <summary>
            查找未分配的字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FillTempTable(System.Collections.Generic.List{System.String},Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            填充临时表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CreateTable(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            创建临时表；
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CheckDistriBDFieldsForAutoAllocate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            检查是否所有需要分配的字段已经分配
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FindUnAllocateFieldsForAutoAllocate(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.Operation.AllocateCheckResult},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.Object}},Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            查找未分配的字段
            </summary>
            <param name="results"></param>
            <param name="fieldKeySIdDic"></param>
            <param name="ctx"></param>
            <param name="para"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FindUnAllocateFieldsForAutoAllocate(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.Operation.AllocateCheckResult},System.Boolean)">
            <summary>
            查找未分配的字段
            </summary>
            <param name="ctx"></param>
            <param name="tempTable"></param>
            <param name="results"></param>
            <param name="isStr"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.FillTempTableForAutoAllocate(System.Collections.Generic.List{System.String},Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            填充临时表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CreateTableForAutoAllocate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            创建临时表；
            </summary>
            <param name="ctx"></param>
            <param name="para"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CollectFieldsSIds(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter,System.String[])">
            <summary>
            收集要检查的ID
            </summary>
            <returns>字段名称和源记录Id的字典</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CollectSingleFieldSIds(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            获取单个字段所有的源ID
            </summary>
            <param name="sourceDObj"></param>
            <param name="field"></param>
            <param name="sourceIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.CollectSId(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            获取源记录ID
            </summary>
            <param name="sourceDObj"></param>
            <param name="field"></param>
            <param name="sourceIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.ObtainSourceDObjs(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter,System.String[])">
            <summary>
            获取需要的数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="para"></param>
            <param name="checkFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.GetCheckFields(Kingdee.BOS.Core.Metadata.Operation.AllocateCheckParameter)">
            <summary>
            获取需要查询的字段集合
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="para">分配检查参数</param>
            <returns>需要检查字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.Allocate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.Operation.AllocateParameter)">
            <summary>
            分配
            </summary>
            <param name="ctx"></param>
            <param name="allocateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.AllocateService.GetAllocateTableName(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获取分配表
            </summary>
            <param name="bussinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DeleteService.Delete(Kingdee.BOS.Context,System.String,System.Object[],Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <param name="Ids"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DeleteService.DeleteFormGroupRecursive(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Object)">
            <summary>
            删除分组节点，及所有子孙节点
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="groupId"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DoNothingService">
            <summary>
            空操作服务端入口组件；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DoNothingService.DoNothing(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据内码执行服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="objID"></param>
            <param name="dynamicObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DoNothingService.DoNothingWithDataEntity(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            根据数据包执行服务
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ModifyService">
            <summary>
            暂时没有其他实现
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            存储业务数据
            <p>应用场景：</p>
            1. 直接存储强命名实体对象到数据库，无对应的单据模型；
            2. 不触发保存数据检查、插件
            3. 不会自动填写主键信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="dataEntities">待存储的ORM动态实体数据集合</param>
            <returns>存储成功后重新加载的ORM动态实体数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption)">
            <summary>
            存储业务数据
            <p>应用场景：</p>
            1. 直接存储强命名实体对象到数据库，无对应的单据模型；
            2. 不触发保存数据检查、插件
            3. 不会自动填写主键信息
            4. 可设置ORM相关参数和缓存参数,例如通过option参数可以控制是否需要清除缓存，改善性能
            </summary>
            <param name="ctx">上下文</param>
            <param name="dataEntities">待存储的ORM动态实体数据集合</param>
            <param name="option">参数</param>
            <returns>存储成功后重新加载的ORM动态实体数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.SetMasterID(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            同步基础资料的多组织数据主键
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            存储业务数据
            <p>应用场景：</p>
            1. 存储单据的数据包到数据库，有对应的单据模型；
            2. 会根据单据模型，加载保存操作的校验规则、插件；
            3. 会自动完成主键、单据编号等字段的赋值；
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">业务对象业务模型</param>
            <param name="dataEntities">待存储的ORM动态实体数据集合</param>
            <param name="option">参数对象,包含是否忽略警告</param>
            <param name="operationNumber">操作编码</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.SaveAndAudit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            保存并自动提交和审核
            <p>应用场景：</p>
            1、提交和审核没有操作服务插件（有插件的不建议调用，事务过长容易引发错误）
            2、保存、提交、审核任一失败，数据整体回滚
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">业务对象业务模型</param>
            <param name="dataEntities">待存储的ORM动态实体数据集合</param>
            <param name="option">参数对象,包含是否忽略警告</param>
            <param name="operationNumber">操作编码</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SaveService.MergeResult(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.DynamicForm.IOperationResult)">
            <summary>
            合并结合并判断是否退出
            </summary>
            <param name="result1"></param>
            <param name="nextResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SetStatusService.SetBillStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Object,System.Object}},System.Collections.Generic.List{System.Object},System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            设置单据状态(序时簿调用)
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="Ids"></param>
            <param name="row"></param>
            <param name="paras">
            审核/反审核时附加的参数；
            可能包括2个值：第一个，同意与否，0驳回，1通过，2反审核；第二个，审核意见
            </param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SubmitService.Submit(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[],System.String,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            序事簿提交
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="Ids"></param>
            <param name="operationNumber"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadSingleNoDirty(Kingdee.BOS.Context,System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            加载单个数据包，无数据脏标记
            <p>应用场景：</p>
            1. 单据界面加载数据；
            2. 自动填写基础数据
            3. 自动清除数据脏标记，得到一个没有任何脏标记的数据包
            </summary>
            <param name="ctx">上下文</param>
            <param name="pk">主键</param>
            <param name="type">ORM动态实体模型</param>
            <param name="option">加载选项</param>
            <returns>业务单据ORM动态实体数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadSingle(Kingdee.BOS.Context,System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="pk"></param>
            <param name="businessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadSingle(Kingdee.BOS.Context,System.Object,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="pk"></param>
            <param name="businessInfo"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadSingle(Kingdee.BOS.Context,System.Object,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            带过滤条件取实体，会从缓存加载相关基础数据
            </summary>
            <param name="ctx"></param>
            <param name="pk"></param>
            <param name="type"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.Load(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            按主键查询数据
            </summary>
            <param name="ctx"></param>
            <param name="pkArray"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.Load4Private(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            按主键查询数据，是私有数据加载，缓存不共享，用完释放
            </summary>
            <param name="ctx"></param>
            <param name="pkArray"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadFromCache(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            从缓存中读取数据（查询单据慎用）
            </summary>
            <remarks>
            查询单据慎用，因为会缓存单据数据到内存中，可能导致脏数据或内存暴涨
            查询单据建议使用Load
            </remarks>
            <param name="ctx"></param>
            <param name="pkArray"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadFromCache(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.SelectorItemInfo},Kingdee.BOS.Core.Metadata.OQLFilter)">
            <summary>
            从缓存中读取数据（查询单据慎用）
            </summary>
            <remarks>
            查询单据慎用，因为会缓存单据数据到内存中，可能导致脏数据或内存暴涨
            查询单据建议使用Load
            </remarks>
            <param name="ctx"></param>
            <param name="formid"></param>
            <param name="selector"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.Load(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            加载业务数据；专供加载基础资料引用数据使用
            </summary>
            <param name="type">业务对象动态模型:完整版/节选版均可</param>
            <param name="queryParemeter">取数参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadFromCache(Kingdee.BOS.Context,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            加载业务数据；专供加载基础资料引用数据使用
            </summary>
            <param name="ctx"></param>
            <param name="type"></param>
            <param name="queryParemeter">取数参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ViewService.LoadWithCache(Kingdee.BOS.Context,System.Object[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            读取数据，并放入缓存
            </summary>
            <param name="ctx"></param>
            <param name="pkArray"></param>
            <param name="dt"></param>
            <param name="loadReferenceData"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetInitPolicy(Kingdee.BOS.Context)">
            <summary>
            初始化密码策略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetPWDPolicy(Kingdee.BOS.Context)">
            <summary>
            获取密码测
            </summary>
            <param name="ctx">上下文</param>
            <returns>密码策略信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckPassword(Kingdee.BOS.Context,System.String)">
            <summary>
            验证密码是否符合策略规则,仅用于新增用户设置密码的检验
            </summary>
            <param name="ctx"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckAdminPassword(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            验证密码是否符合策略规则以及密码是否验证
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="password">密码</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckPassword(Kingdee.BOS.Context,System.Int64,System.String,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            验证密码是否符合策略规则,是否重复设置
            </summary>
            <param name="ctx"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckFormat(Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,System.String)">
            <summary>
            验证密码格式，包括长度与包含字符的验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckLength(Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,System.String)">
            <summary>
            验证长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckCharacter(Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,System.String)">
            <summary>
            验证包含字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckIsNotRepeat(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,System.Int64,System.String)">
            <summary>
            验证密码是否不重复
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetUserPolicyLabel(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取密码策略标签
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>密码设置标签字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetPolicyLabel(Kingdee.BOS.Context)">
            <summary>
            获取密码策略提示标签字符串，（请输入*位含**、**的密码）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.SetUserValidDate(Kingdee.BOS.Context,System.Int64,System.String,System.String,System.String)">
            <summary>
            设置用户密码的有效日期
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="isSystemGen"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.ResetPasswordValid(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            重设密码的有效属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.SetEmptyValidDate(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            清空有效日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.SetEmptyModifyValidDate(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            清空修改有效日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.SetValidDate(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            设置有效日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.SetModifyValidDate(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            设置修改有效日期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.LoginCheck(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            登录验证
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.RecordErrorCount(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            记录密码错误次数，达到锁定次数则锁定用户
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.UnlockUser(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            用户解锁
            </summary>
            <param name="ctx"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckTimeLimitRule(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            验证用户失效规则
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckUserIsLockPolicy(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,Kingdee.BOS.BusinessEntity.User,Kingdee.BOS.Authentication.LoginResult)">
            <summary>
            验证用户状态信息，是否被锁定
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.CheckPasswordPolicy(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy,Kingdee.BOS.BusinessEntity.User,Kingdee.BOS.Authentication.LoginResult)">
            <summary>
            验证用户状态信息，密码是否有效，系统登录密码
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.ResetErrorCount(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            重设密码错误次数，登入成功或解锁
            </summary>
            <param name="ctxnew"></param>
            <param name="user"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.TryUseSystemPwd(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            使用系统密码登录
            </summary>
            <param name="ctx"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetAlertInfo(Kingdee.BOS.Context)">
            <summary>
            使用系统密码登录
            </summary>
            <param name="ctx"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.LogPWDError(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.User)">
            <summary>
            密码错误时记录上机操作日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="user">用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.GetDefaultOrg(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户默认组织
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.UpdateValidDate(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.UserManager.PasswordPolicy)">
            <summary>
            设置有效日期
            </summary>
            <param name="ctx">上下文</param>
            <param name="newPolicy">密码策略</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PasswordPolicyService.ResetPwdValidDate(Kingdee.BOS.Context,System.Int64,System.String,System.String,System.String)">
            <summary>
            重置用户密码的有效日期、解锁用户（忘记密码用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户id</param>
            <param name="password">密码</param>
            <param name="isSystemGen">是否系统生成密码</param>
            <param name="salt">密码关键词</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.DBService">
            <summary>
            提供单独的数据库访问服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteBatch(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            执行批量查询语句
            </summary>
            <param name="ctx"></param>
            <param name="sqlArray"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteBatchWithTime(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            批量执行SQL，指定事务超时时间
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="sqlArray">更新SQL语句集合</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteWithTime(Kingdee.BOS.Context,System.String,System.Collections.Generic.IEnumerable{Kingdee.BOS.SqlParam},System.Int32)">
            <summary>
            执行SQL，指定事务超时时间
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="sqlArray">更新SQL语句集合</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteReader(Kingdee.BOS.Context,System.String)">
            <summary>
            执行查询语句，返回查询结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">查询SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteReader(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            执行查询语句，返回查询结果
            </summary>
            <param name="ctx"></param>
            <param name="strSQL"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteDataSet(Kingdee.BOS.Context,System.String)">
            <summary>
            执行查询语句，返回查询结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">查询SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteDataSet(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            多个查询SQL,批量填充到dataset
            </summary>
            <param name="ctx"></param>
            <param name="strSQL"></param>
            <param name="tableNames"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.Execute(Kingdee.BOS.Context,System.String)">
            <summary>
            执行更新语句，返回更新结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">更新SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.Execute(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            执行更新语句，返回更新结果
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="strSQL">更新SQL语句</param>
            <param name="paramList">SQL中包含的参数集合，顺序必须与SQL中使用顺序一致</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.ExecuteDynamicObject(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IDictionary{System.String,System.Type},System.Data.CommandType,Kingdee.BOS.SqlParam[])">
            <summary>
            执行指定的SQL并返回默认的一批使用DynamicObject集合描述的数据。
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="strSQL">要执行的SQL语句</param>
            <param name="dt">如果指定此参数，那么执行后的SQL将自动按此类型填充数据。否则将根据返回的记录集自动创建类型。</param>
            <param name="propertyTypeMaps">如果指定此参数，可以设定某个字段应该的数据类型。</param>
            <param name="cmdType">指定SQL的类型</param>
            <param name="paramList">参数类型</param>
            <returns>一组动态实体对象。</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.DBService.ExecuteDynamicObjectInQuery(Kingdee.BOS.Context,System.String,System.String,System.Array,Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IDictionary{System.String,System.Type},System.Data.CommandType,Kingdee.BOS.SqlParam[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.DBService.BulkInserts(Kingdee.BOS.Context,System.String,System.String,System.Data.DataTable)">
            <summary>
            创建临时表，并批量插入数据：大小写敏感
            </summary>
            <param name="ctx"></param>
            <param name="InsertstrSql">向临时表插入数据的SQL: INSERT INTO ?table Values (@F1,@F2,...) </param>
            <param name="CreateSql">创建临时表的SQL: Create table ?table(F1 nvarchar(100),F2...)</param>
            <param name="dt">包含了需要插入到临时表的数据，字段名与临时表字段名一致</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetSequenceInt32(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取单据及无表单模型的指定表格的可用主键
            <p>应用场景：</p>
            1. 用于单据模型或无表单模型的物理表
            2. 禁止用于基础资料获取主键(基础资料主键获取调用GetBaseDataSequenceInt32)
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="key">序列的键，一般为表的名称</param>
            <param name="count">返回主键的个数；常用为1，返回一个主键值；在批量操作时，可能需要返回多个值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetSequenceInt64(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            获取单据及无表单模型的指定表格的可用主键
            <p>应用场景：</p>
            1. 用于单据模型或无表单模型的物理表
            2. 禁止用于基础资料获取主键(基础资料主键获取调用GetBaseDataSequenceInt64)
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="key">序列的键，一般为表的名称</param>
            <param name="count">返回主键的个数；常用为1，返回一个主键值；在批量操作时，可能需要返回多个值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetBaseDataSequenceInt32(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取基础资料的可用主键
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="count">返回主键的个数；常用为1，返回一个主键值；在批量操作时，可能需要返回多个值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetBaseDataSequenceInt64(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取基础资料的可用主键
            </summary>
            <param name="ctx">应用服务器上下文环境</param>
            <param name="count">返回主键的个数；常用为1，返回一个主键值；在批量操作时，可能需要返回多个值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetSequenceString(System.Int32)">
            <summary>
            获取18位唯一主键主键
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctx"></param>
            <param name="count">返回主键的个数；常用为1，返回一个主键值；在批量操作时，可能需要返回多个值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.IsExistTable(Kingdee.BOS.Context,System.String)">
            <summary>
            检测帐套是否存在某个物理表
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="tableName">要检测的表名称</param>
            <returns>true表示存在此物理表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.IsExistView(Kingdee.BOS.Context,System.String)">
            <summary>
            判断当前账套中ViewName是否存在
            </summary>
            <param name="ctx"></param>
            <param name="ViewName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.CreateSessionTemplateTable(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            创建基于会话基本的临时表，在Oracle下直接返回表名（在创建数据库的时候已经创建，这里不考虑是否存在）
            在SQL Server下返回局部临时表#
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">表名</param>
            <param name="creatSql">如果是SQL Server的话传入Create Table T（）语句中的"（）"部分，如创建Create Table T1（fid int)，那么传入参数为(fid int)，Oracle忽略改参数</param>
            <returns>Oracle下返回传入的表名，SQL server下返回局部临时表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.DropSessionTemplateTable(Kingdee.BOS.Context,System.String)">
            <summary>
            删除临时表
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">表名，不带#的表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.CreateTemporaryTableName(Kingdee.BOS.Context)">
            <summary>
            创建临时表名称，系统将统一进行维护,如果ctx和执行语句出现异常将返回空对象名称
            </summary>
            <param name="ctx">上下文，如果为null返回空串</param>
            <returns>返回生成的表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.CreateTemporaryTableName(Kingdee.BOS.Context,System.Int32)">
            <summary>
            生成指定数目的临时表,并以数组的方式返回，如果ctx对象为空或者执行出错将返回空对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="count">需要获取临时表的个数</param>
            <returns>返回生成的临时表数组</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.CreateTemporaryTableName(Kingdee.BOS.Context,System.String[],System.Boolean)">
            <summary>
            申请指定前缀的临时表名
            注意前缀长度不得超过3位
            </summary>
            <param name="ctx"></param>
            <param name="prefixItems"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.DeleteTemporaryTableName(Kingdee.BOS.Context,System.String[])">
            <summary>
            删除指定的临时表，如果ctx为null，tablenames为空集合，返回为true，执行SQL出错时将返回false
            但实际上并不进行临时表的删除操作，只是将可以删除的临时表打上标记
            </summary>
            <param name="ctx">上下文</param>
            <param name="tablenames">需要删除的临时表集合</param>
            <returns>执行成功和ctx为null，tablenames为空集合，返回为true</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.AutoSetPrimaryKey(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            为动态实体对象自动填充主键值
            建议只在App层调用，不要在web server层调用，防止跳号
            </summary>
            <param name="ctx"></param>
            <param name="obj"></param>
            <param name="dynamicObjectType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.VerifyAndCreateSequence(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            修复某个物理表的序列信息
            通常用在某个表的数据是自行使用insert...select之类的sql拼接生成的情况下
            这样在调用此方法后可以修复此表的自增长序列，否则会出现主键重复的错误提示
            </summary>
            <param name="ctx">连接上下文</param>
            <param name="tableName">待修复的表名</param>
            <param name="bIsInt32">主键是否是整型</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.LoadReferenceObject(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean)">
            <summary>
            加载指定实体的引用数据
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.LoadReferenceObjectNoCache(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Boolean)">
            <summary>
            加载指定实体的引用数据，引用的基础数据不缓存
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="dt"></param>
            <param name="bLoadOnlyDbProperty">是否引用基础资料属性</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.IsExistTableField(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            检测帐套是否存在某个物理表的某个字段列
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetPrimaryKey(Kingdee.BOS.Context,System.String)">
            <summary>
            获取表的主键字段，只支持SQL Server和Oracle
            </summary>
            <param name="ctx"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetTableOptimizationSql(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            传入表名称，获取相应的SQL优化脚本，包括索引优化，碎片整理和统计信息更新
            </summary>
            <param name="ctx"></param>
            <param name="tabNames"></param>
            <param name="indexFlag"></param>
            <param name="statsFlag"></param>
            <param name="fragmentflag"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.CreateNewSessionScope">
            <summary>
            创建一个新的会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.Reindex(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            重建索引
            </summary>
            <param name="ctx"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetTableSchema(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取实体的表元数据信息
            </summary>
            <param name="ctx">上下文</param>       
            <param name="tables">表名集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetTableColumnSchema(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取实体的表字段元数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="tables">表名集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.TranslateKsql(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.DbSchema.DbSqlInfo})">
            <summary>
            翻译Ksql
            </summary>
            <param name="ctx"></param>
            <param name="dbSqlInfos"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DBService.GetIsKDEntity(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据实体Id，从继承链路上查找判断 实体是不是金蝶出厂预置实体
            </summary>
            <param name="entityId">单据Id</param>
            <param name="baseFormId">父表单id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainDBUtil.GetDomainModel(Kingdee.BOS.Context,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="modelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainDBUtil.GetMetaChecker(Kingdee.BOS.Context)">
            <summary>
            读取全部的元数据校验器
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.DomainDBUtil.GetWebServerImageKeyList">
            <summary>
             获得服务器端，图标键的列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.ListDataService">
            <summary>
            序时薄取数服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String)">
            <summary>
            执行SQL返回数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            执行SQL返回数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            获取序时薄数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取序时薄数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Boolean)">
            <summary>
            获取序时薄数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <param name="dt">动态实体类型</param>
            <param name="sqlParams">sql参数</param>
            <param name="isUseLocalCache">是否启用本地缓存</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取序时薄数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取序时薄数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,System.Int32,System.Int32,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String)">
            <summary>
            获取序时薄数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.String,System.Int32,System.Int32,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String,System.Boolean)">
            <summary>
            获取序时薄数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String,System.Int32,System.Int32,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String)">
            <summary>
            获取序时薄数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetData(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String,System.Int32,System.Int32,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.String,System.Boolean)">
            <summary>
            获取序时薄数据（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetRowCount(Kingdee.BOS.Context,System.String)">
            <summary>
            获取序时薄总行数
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <returns>返回行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetAllRecordsCount(Kingdee.BOS.Context,System.String)">
            <summary>
            读取原始业务表格中，符合条件的列表全部记录数
            </summary>
            <param name="ctx">上下文</param>
            <param name="fromAndWhereSQL">读取原始表格的From + Where子句</param>
            <returns></returns>
            <remarks>避免传入完整的SQL，防止SQL攻击</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetAllRecordsCount(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            读取原始业务表格中，符合条件的列表全部记录数（参数化）
            </summary>
            <param name="ctx">上下文</param>
            <param name="fromAndWhereSQL">读取原始表格的From + Where子句</param>
            <returns></returns>
            <remarks>避免传入完整的SQL，防止SQL攻击</remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetRowCount(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            返回序时薄总行数和单据记录数
            </summary>
            <param name="ctx">上下文件</param>
            <param name="tableName">表名</param>
            <param name="pk">主键字段：ex：FID</param>
            <returns>totalrowcount：总行数；billrowcount：单据行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupInfo(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            返回序时薄分组后的信息
            </summary>
            <param name="ctx">上下文件</param>
            <param name="tableName">表名</param>
            <param name="pk">主键字段：ex：FID</param>
            <param name="groupRows">分组字段：ex：时间</param>
            <returns>分组结构,包括每组包括的纪录数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.DropTable(Kingdee.BOS.Context,System.String)">
            <summary>
            删除序时薄创建的临时表
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">表名</param>
            <returns>删除的过程没有异常返回True</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.TryDropTable(Kingdee.BOS.Context,System.String)">
            <summary>
            删除序时薄创建的临时表
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">表名</param>
            <returns>删除的过程没有异常返回True</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.TryDropAllTable(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            删除所有的临时表:不抛出错误信息
            </summary>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.DropAllTable(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            删除所有的临时表
            </summary>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.ExecuteBatch(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            批量执行SQL语句
            </summary>
            <param name="ctx">上下文件</param>
            <param name="sqlArray">SQL列表</param>        
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupNodes(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.Core.Metadata.FieldElement.GroupField)">
            <summary>
            
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupId">分组纬度</param>
            <param name="filter">过滤条件；一般会根据父节点信息进行过滤</param>
            <param name="groupField">分组字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupTreeNodes(Kingdee.BOS.Context,System.String,System.String,System.String,Kingdee.BOS.Core.Metadata.FieldElement.GroupField.GroupFieldSortType,Kingdee.BOS.Core.Metadata.FieldElement.GroupField.GroupFieldDisplayType)">
            <summary>
            到分组表格中根据过滤条件读取分组信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupId">分组纬度</param>
            <param name="tableName">分组表格</param>
            <param name="filter">过滤条件；一般会根据父节点信息进行过滤</param>
            <param name="sortType">排序方式</param>
            <param name="displayType">显示类型</param>
            <returns>分组树节点列表（可能包含嵌套的子节点）</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupNodes(Kingdee.BOS.Context,System.String,System.String,System.String,Kingdee.BOS.Core.Metadata.FieldElement.GroupField.GroupFieldSortType)">
            <summary>
            到分组表格中根据过滤条件读取分组信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupId">分组纬度</param>
            <param name="tableName">分组表格</param>
            <param name="filter">过滤条件；一般会根据父节点信息进行过滤</param>
            <param name="sortType">排序方式</param>
            <returns>分组树节点列表（可能包含嵌套的子节点）</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupNodes(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            到分组表格中根据过滤条件读取分组信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="groupId">分组纬度</param>
            <param name="tableName">分组表格</param>
            <param name="filter">过滤条件；一般会根据父节点信息进行过滤</param>
            <returns>分组树节点列表（可能包含嵌套的子节点）</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetTreeViewChildNodes(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取树形结构的下级节点信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="businessInfo">树形结构业务对象元数据信息</param>
            <param name="currentId">当前节点id</param>
            <returns>当前节点的下级节点列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetBaseDataNodes(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.BaseData.BaseDataQueryObject)">
            <summary>
            查询基础资料的节点
            </summary>
            <param name="ctx"></param>
            <param name="queryPara"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetBaseDataNodes(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.Int32,System.Int32,System.String)">
            <summary>
            查询基础资料的节点
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="baseField"></param>
            <param name="startIndex"></param>
            <param name="limit"></param>
            <param name="queryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.SearchBaseDataNodes(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.String)">
            <summary>
            查询基础资料的树列表
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="baseField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.SearchTreeViewChildNodes(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.String,System.String)">
            <summary>
            查询树形结构的下级节点信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="businessInfo">树形结构业务对象元数据信息</param>
            <param name="baseField">基础资料字段</param>
            <param name="currentId">当前节点id</param>
            <param name="value"></param>
            <returns>当前节点的下级节点列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.FastLocate(Kingdee.BOS.Context,System.String,System.String,System.Object)">
            <summary>
            根据指定的字段KEY值进行快速定位，返回对应的行号集合
            </summary>
            <param name="ctx"></param>
            <param name="tablename"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetFormateInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            返回格式化信息
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetIds(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取序事簿的所有内码Id
            </summary>
            <param name="ctx">上下问</param>
            <param name="tableName">临时表名</param>
            <param name="primaryKey">主键名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetObjData(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取序事簿对应的完整业务对象数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">临时表名</param>
            <param name="businessInfo">业务对象元数据</param>
            <param name="primaryKey">主键名称</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.DeleteTableRows(Kingdee.BOS.Context,System.String,System.String,System.String[])">
            <summary>
            删除单据的行记录
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">单据体表名</param>
            <param name="primaryKey">单据体主键</param>
            <param name="primaryKeyValue">主键值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetGroupNodeInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormElement.FormGroup,System.Object[])">
            <summary>
            获得分组阶段数据信息
            </summary>
            <param name="ctx"></param>
            <param name="group"></param>
            <param name="nodeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ListDataService.GetListRowCount(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取目标列表的数据量
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">表单标识</param>
            <param name="schemeId">过滤方案Id</param>  
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn">
            <summary>
            该类作废
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.#ctor(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.ElementMetadata.DomainModel)">
            <summary>
            该类作废
            </summary>
            <param name="ctx"></param>
            <param name="domainModel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.OnGetMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.GetMetadataResourceArgs)">
            <summary>
            获取元数据多语言资源对象
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.OnLoadMetadataResource(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.OnLoadMetadataResourceArgs)">
            <summary>
            元数据加载多语言资源事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.GetResourceData(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertFlowElement,System.Int32)">
            <summary>
            获取单据转换的多语言数据
            </summary>
            <param name="el"></param>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.LoadResource(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertFlowElement,Kingdee.BOS.Resource.ResourceData,System.Int32)">
            <summary>
            加载单据转换的多语言数据
            </summary>
            <param name="flow"></param>
            <param name="resource"></param>
            <param name="localeId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.AfterSave(System.EventArgs)">
            <summary>
            保存后事件处理
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.Validate(Kingdee.BOS.Core.Metadata.ServicePlugIn.Args.BeforeSaveMetadataArgs)">
            <summary>
            保存前校验
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.CheckNoExists(System.Collections.Generic.List{System.String})">
            <summary>
            判断元数据对象是否存在
            </summary>
            <param name="formIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.MetaServicePlugIn.ConvertMetaDataServicePlugIn.UpdateConvertLookup(Kingdee.BOS.Core.Metadata.ConvertElement.ConvertMetaData)">
            <summary>
            更新单据转换查询接口表(t_meta_convertlookup)
            </summary>
            <param name="flow"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBDPolicyCreateOrg(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料的定义组织列表
            </summary>
            <param name="ctx"></param>
            <param name="formId">单据ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsBaseDataControlForbidden(Kingdee.BOS.Context,System.String,System.Int64,System.Int64)">
            <summary>
            基础资料控制策略是否是同步禁用
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="createOrgId"></param>
            <param name="userOrgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsCreateBaseData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            判断是否由创建组织创建的基础资料
            </summary>
            <param name="formId"></param>
            <param name="pkIdStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsIssueData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            判断在某个组织下该资料是否下发的资料  
            </summary>
            <param name="info"></param>
            <param name="pkIdStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBaseDataType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料的策略类型
            </summary>
            <param name="ctx"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsAllocatedRecord(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            判断在某条记录是否已经分配过
            </summary>
            <param name="info"></param>
            <param name="pkId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ChangeStringContentAddQuotes(System.String)">
            <summary>
            处理string拼接，添加单引号''
            </summary>
            <param name="pkIds">基础资料ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgFuncsInfo(Kingdee.BOS.Context)">
            <summary>
            获取组织职能所有信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回组织职能所有信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAssistDataType(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料的策略类型
            </summary>
            <param name="ctx"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsMulAssistData(Kingdee.BOS.Context,System.String)">
            <summary>
            判断是否存在多种辅助资料类型
            </summary>
            <param name="ctx"></param>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetSubOrgIds(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取下级组织Id（包含自身）
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetTimeZoneKey(System.Int64)">
            <summary>
            
            </summary>
            <param name="createOrgId"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgTimeZone(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取组织时区
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBaseDataControlPolicyDObj(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            获取该组织下该基础资料的分配控制策略
            </summary>
            <param name="ctx"></param>
            <param name="createOrgId"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBaseDataControlPolicyOrgs(Kingdee.BOS.Context,System.String)">
            <summary>
            获取基础资料控制策略的组织；
            一个创建组织下的多个使用组织；
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocateOrg(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            获取基础资料分配的下级组织。
            </summary>
            <param name="ctx"></param>
            <param name="formId">基础资料类型</param>
            <param name="orgId">创建组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocateOrgList(Kingdee.BOS.Context,System.String,System.Int64,System.Boolean,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取分配组织列表（动态表单ORG_AllocateOrg使用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">分配的基础资料ID</param>
            <param name="orgId">基础资料的创建组织</param>
            <param name="needBasicDataAddPermission">是否勾选【只能分配到有该基础资料新增权限的组织】</param>
            <param name="lstOrgnizationIds">限定组织范围</param>        
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBaseDataControlPolicy(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            获取该组织下该基础资料的分配控制策略
            </summary>
            <param name="ctx"></param>
            <param name="createOrgId"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetKey(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="createOrgId"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ClearBDControlPolicyCache(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="createOrgId"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBaseDataControlEntry(System.Collections.Generic.Dictionary{System.Int64,Kingdee.BOS.BusinessEntity.Organizations.BaseDataControlPolicyTargetOrgEntry},System.Int64)">
            <summary>
            获取目的组织下的基础资料控制属性
            </summary>
            <param name="basedataControl"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBDCtrlLockFieldList(Kingdee.BOS.Context,System.String,System.Int64,System.Int64)">
            <summary>
            获取基础资料控制策略下的锁定字段列表
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="createOrgId"></param>
            <param name="useOrgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBDCtrlLockFieldLists(Kingdee.BOS.Context,System.String,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}})">
            <summary>
            获取基础资料控制策略下的锁定字段列表
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="useOrgDic"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDatas(System.Data.DataTable,System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{System.Int64}})">
            <summary>
            获取数据
            </summary>
            <param name="ctx"></param>
            <param name="counterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.PrepareDataTable(Kingdee.BOS.Context,System.String)">
            <summary>
            准备数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetBDCtrlUnLockFieldList(Kingdee.BOS.Context,System.String,System.Int64,System.Int64)">
            <summary>
            获取基础资料控制策略下的锁定字段列表
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="createOrgId"></param>
            <param name="useOrgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDefCurrencyIDByBizOrgID(Kingdee.BOS.Context,System.Int64)">
            <summary>
            根据业务组织ID找到所属核算体系的会计主体的主账簿的默认本位币
            </summary>
            <param name="ctx"></param>
            <param name="bizOrgID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDefCurrencyAndExchangeTypeByBizOrgID(Kingdee.BOS.Context,System.Int64)">
            <summary>
            根据业务组织ID找到所属核算体系的会计主体的主账簿的默认本位币和汇率类型
            </summary>
            <param name="ctx"></param>
            <param name="bizOrgID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsExistAssets(Kingdee.BOS.Context,System.Int64)">
            <summary>
            组织下是否存在资产卡片(为完全清理)
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetFinStartInfoByBizOrgID(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获得指定业务组织的财务启用期间数据
            </summary>
            <param name="ctx"></param>
            <param name="bizOrgID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgByBizRelationship(Kingdee.BOS.Context,System.String,System.String,System.Boolean)">
            <summary>
            获取与源组织有业务委托关系的组织Id
            </summary>
            <param name="sourceOrgId">源组织</param>
            <param name="bizRelationshipTypeId">业务关系类型编码</param>
            <param name="isDefault">是否默认</param>
            <returns>组织Id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgByBizRelationship(Kingdee.BOS.Context,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            获取与源组织有业务委托关系的组织Id
            </summary>
            <param name="ctx">上下文</param>
            <param name="sourceOrgId">源组织</param>
            <param name="bizRelationshipTypeId">业务关系类型编码</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.OrganizationService._selectKeys">
            <summary>
            查询组织字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgColumn">
            <summary>
            获取查询组织字段
            </summary>
            <returns>需要查询的组织字段</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ReadOrgInfoByOrgId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            根据组织id获取组织的信息
            </summary>
            <param name="orgId">组织Id</param>
            <returns>组织</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocatedRecord(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[])">
            <summary>
            返回已经分配的记录内码集合
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="pkIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.HasBeenCreateOrgRecord(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[])">
            <summary>
            是否曾经为创建组织数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="pkIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.PrepareDataTable(System.String)">
            <summary>
            准备DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocatedDestInfo(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.Organizations.AllocateSourceInfo},System.Boolean)">
            <summary>
            根据基础资料的MasterId（即SourceId）+目标组织Id，返回目标组织下已经分配的记录内码集合
            </summary>
            <param name="ctx"></param>
            <param name="sourceInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.HasOrgBussiness(Kingdee.BOS.Context,System.String)">
            <summary>
            判断业务关系是否有定义
            </summary>
            <param name="ctx"></param>
            <param name="brTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgs(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Int64,System.String)">
            <summary>
            获取到符合条件的组织
            </summary>
            <param name="ctx">上下文</param>
            <param name="orgField">当前的组织字段</param>
            <param name="business"></param>
            <param name="refOrg">当前的组织字段相关的Org</param>
            <param name="strPermissionItemId"></param>
            <returns>符合条件的组织</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetCreateOrg(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            检查当前组织是否能新增
            </summary>
            <param name="ctx"></param>
            <param name="fromId"></param>
            <returns>如果没有单据没有配置创建组织,则为返回空数组</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetCreateOrgFilter(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.String)">
            <summary>
            获取基础资料创建组织的过滤条件
            </summary>
            <param name="business"></param>
            <param name="ctx"></param>
            <param name="orgField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetRegion">
            <summary>
            
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ClearOrgFilterCache(Kingdee.BOS.Context)">
            <summary>
            清除某个用户的所有组织过滤条件缓存
            </summary>
            <param name="ctx"></param>
            <param name="userid"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Int64,System.String)">
            <summary>
            获取到符合条件组织的过滤条件
            </summary>
            <param name="ctx">上下文</param>
            <param name="orgField">当前的组织字段</param>
            <param name="business"></param>
            <param name="refOrg">当前的组织字段相关的Org</param>
            <returns>符合条件过滤条件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgBussinessFilter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FieldElement.OrgField,System.Int64)">
            <summary>
            组织业务关系过滤
            </summary>
            <param name="business"></param>
            <param name="orgField"></param>
            <param name="mainOrg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgIdsByFuncId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据组织职能获取组织Id列表
            </summary>
            <param name="ctx"></param>
            <param name="funcId">组织职能Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ClearUserOrgRole(Kingdee.BOS.Context)">
            <summary>
            清除用户的组织角色关系；
            当角色分配的组织改变之后需要调用此函数；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SetContextMultiOrgProperty(Kingdee.BOS.Context)">
            <summary>
            设置上下文的多组织属性
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteAutoAllocateSolution(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            手动执行分配方案
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.StartAutoAllocatePlan(Kingdee.BOS.Context,System.Int64)">
            <summary>
            发起自动分配计划
            </summary>
            <param name="ctx"></param>
            <param name="planDObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.StopAutoAllocatePlan(Kingdee.BOS.Context,System.Int64)">
            <summary>
            停止自动分配计划
            </summary>
            <param name="ctx"></param>
            <param name="planPKID"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.AllocateAfterCopyOrg(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Boolean)">
            <summary>
            复制组织后分配；
            </summary>
            <param name="ctx"></param>
            <param name="OrgEntry">需要分配的内容</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateInfo(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String)">
            <summary>
            同步分配信息
            </summary>
            <param name="ctx"></param>
            <param name="sourceObj"></param>
            <param name="name"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateInfos(Kingdee.BOS.Context,System.Object[],System.String,System.String)">
            <summary>
            同步多条数据的分配信息
            </summary>
            <param name="ctx"></param>
            <param name="sourceObjs"></param>
            <param name="name"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateInfosPart(Kingdee.BOS.Context,System.Object[],System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            同步用户选定的基础资料的分配信息
            </summary>
            <param name="ctx"></param>
            <param name="ids">源ID集合</param>
            <param name="formId"></param>
            <param name="destIds">选定要同步的目标基础资料集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateStatus(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String,System.String)">
            <summary>
            同步分配状态
            </summary>
            <param name="ctx"></param>
            <param name="sourceObj"></param>
            <param name="name"></param>
            <param name="opType"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.HasNeedSyncAllocateData(Kingdee.BOS.Context,System.String[],System.String,System.Boolean)">
            <summary>
            判断是否有分配
            </summary>
            <param name="ctx"></param>
            <param name="dataEntitys"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetSyncAllocateData(Kingdee.BOS.Context,System.String[],System.String)">
            <summary>
            获取需要做同步操作的基础资料ID（BaseDataSavePlugIn.cs中保存后操作判断是否需要同步专用）
            替换原有检查方法 public bool HasNeedSyncAllocateData(Context ctx, string[] ids, string formId, bool isSave)
            增加传递分配关系检查，排除A->B->C->D关系中的B->C->D,避免保存B，同步B的死循环
            </summary>
            <param name="ctx"></param>
            <param name="ids">保存的基础资料ID集合</param>
            <param name="formId">基础资料类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetSourceId(Kingdee.BOS.Context,System.String[],System.String)">
            <summary>
            获取所有在分配关系表中的FSourceId集合
            </summary>
            <param name="ctx">上下文</param>
            <param name="ids">同步基础资料的主键ID</param>
            <param name="formId">基础资料类型</param>
            <returns>FSourceId的集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDestId(Kingdee.BOS.Context,System.String[],System.String)">
            <summary>
            获取所有在分配关系表中的FDestId集合
            </summary>
            <param name="ctx">上下文</param>
            <param name="ids">同步基础资料的主键ID</param>
            <param name="formId">基础资料类型</param>
            <returns>FDestId的集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetSyncAllocateDestIds(Kingdee.BOS.Context,System.String[],System.String)">
            <summary>
            获取所有需要同步的目标ID（用于清除缓存，以便获取计算站点更新的缓存）
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateStatuses(Kingdee.BOS.Context,System.Object[],System.String,System.String,System.String)">
            <summary>
            同步多条数据的分配状态
            </summary>
            <param name="ctx"></param>
            <param name="sourceObj"></param>
            <param name="name"></param>
            <param name="opType"></param>
            <param name="formId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDataInCreateOrg(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Int32[])">
            <summary>
            获取创建组织下的数据
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDataInCreateOrg(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String[])">
            <summary>
            获取创建组织下的数据
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="masterIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteAutoAllocatePlan(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            手动执行自动分配计划
            </summary>
            <param name="ctx"></param>
            <param name="planDObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.Execute(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            w3wp,我的后台任务
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteSyncAllocateInfo(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步分配信息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncAllocateInfosPart(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步分配信息（只同步客户选择的）
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteSyncAllocateStatus(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步分配状态
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteSyncAllocateInfos(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步多条数据分配信息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteSyncAllocateStatuses(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            同步多条数据分配状态
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteAllocateAfterCopyOrg(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            拷贝后执行分配
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ExcuteAllocateAfterCopyOrg(Kingdee.BOS.Context,System.Boolean,System.Object)">
            <summary>
            拷贝后执行分配
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.AllocateBaseDatas(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Int64},System.Int64,System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            分配基础资料
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.CreateFilterField(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Metadata.FieldElement.FieldAppearance,Kingdee.BOS.Core.Metadata.FieldElement.FieldAppearance)">
            <summary>
            创建字段，根据一些信息
            </summary>
            <param name="selectField"></param>
            <param name="fieldAppearance"></param>
            <param name="refFieldAppearance"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.ConvertListToString(System.Collections.Generic.List{System.Object})">
            <summary>
            列表转字符串
            </summary>
            <param name="lstPKIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GenLogDetail(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.String,System.Int64,System.Int64)">
            <summary>
            产生Log细节
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.VerifyOrgRefInfo(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.HashSet{System.Int64}},Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,System.Int64,System.Int64,Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            校验组织相关信息
            </summary>
            <param name="bdControlPolicyOrgDic"></param>
            <param name="autoALLOCATINFO"></param>
            <param name="bosCtx"></param>
            <param name="createOrgId"></param>
            <param name="allocateOrgID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.AllocateSolution(Kingdee.BOS.Computing.ComputeContext,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,Kingdee.BOS.Context,System.Boolean)">
            <summary>
            分配方案
            </summary>
            <param name="ctx"></param>
            <param name="solutionDObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SendMessage(Kingdee.BOS.Context,System.Boolean,System.String,System.String,System.String)">
            <summary>
            消息平台发消息通知用户
            </summary>
            <param name="ctx"></param>
            <param name="success">是否执行成功</param>
            <param name="formName">基础资料名称</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.FilterOutAllocatedDatas(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.EntityElement.Entity,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.FormElement.Form,System.String,System.Int64,System.Int64,System.Collections.Generic.List{System.Object})">
            <summary>
            把已分配的数据过滤掉；
            </summary>
            <param name="bosCtx"></param>
            <param name="rootEntity"></param>
            <param name="businessInfo"></param>
            <param name="baseDataForm"></param>
            <param name="useOrgFieldName"></param>
            <param name="createOrgId"></param>
            <param name="allocateOrgID"></param>
            <param name="pks"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.AllocatePlan(Kingdee.BOS.Computing.ComputeContext,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Context,System.Boolean)">
            <summary>
            分配计划
            </summary>
            <param name="ctx"></param>
            <param name="solutionDObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            后台自动运行,计划,K/3 Cloud Job Process
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncFailDatas(Kingdee.BOS.Context)">
            <summary>
            同步失败的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncSingleFailData(Kingdee.BOS.Context,System.Int64)">
            <summary>
            同步当个失败的数据
            </summary>
            <param name="ctx"></param>
            <param name="logId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncFailDatas(Kingdee.BOS.Context,System.String)">
            <summary>
            执行失败的数据
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.SyncFailData(Kingdee.BOS.Context,System.Object)">
            <summary>
            同步失败的数据
            </summary>
            <param name="syncObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.IsExistUnreadLog(Kingdee.BOS.Context)">
            <summary>
            是否存在未读的日志
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetUsedOrganizations(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户拥有的非禁用、已审核组织
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>组织列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrganizations(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户拥有的组织
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>组织列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgIdByNumber(Kingdee.BOS.Context,System.String)">
            <summary>
            通过组织编码获取Id
            </summary>
            <param name="ctx"></param>
            <param name="orgNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgNumberById(Kingdee.BOS.Context,System.Int64)">
            <summary>
            通过组织ID获取编码
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetOrgNameById(Kingdee.BOS.Context,System.Int64)">
            <summary>
            通过组织ID获取编码
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetDefaultOrganizations(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取默认组织 如果有上次登录组织，取上次登录组织 如果没有取组织第一个 没有组织取空
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <returns>组织信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetFilterSourceOrgIds(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            根据基础资料控制策略获取源组织Id筛选范围
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">基础资料ID</param>
            <param name="destOrgId">目标组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetFilterHasAllocatedSourceIds(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            获取已经分配到目标组织的基础资料ID
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">基础资料ID</param>
            <param name="destOrgId">目标组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetNotExistMaterialNumbers(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取系统中不存在的物料编码
            </summary>
            <param name="lstExistMaterialNumbers">系统中存在的物料编码（块粘贴传入的编码范围内）</param>
            <param name="lstMaterialNumbers">块粘贴传入的物料编码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetNoPolicyMaterialNumbers(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Int64)">
            <summary>
            获取不存在基础资料控制策略的物料编码
            </summary>
            <param name="ctx">上下文</param>
            <param name="lstMaterialNumbers">物料编码集合</param>
            <param name="mainOrgId">主业务组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetMaterialInfos(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.Int64)">
            <summary>
            获取物料信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="lstMaterialNumbers">物料编码集合</param>
            <param name="mainOrgId">主业务组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetMaterialNumbersCheckInfo(Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.Int64)">
            <summary>
            对物料编码进行单据状态和禁用状态检查
            </summary>
            <param name="objs">物料信息集合</param>
            <param name="mainOrgId">主业务组织ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetNeedAllocateMaterialIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            获取需要申请分配的物料信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="lstMaterialNumbers">未分配到当前主业务组织的物料编码集合</param>
            <param name="objs">物料信息集合</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.OrganizationService.NeedAllocateMaterial(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetForbidOrgIds(Kingdee.BOS.Context)">
            <summary>
            获取当前已禁用组织ID列表
            </summary>
            <param name="ctx">上下文</param>
            <returns>组织ID列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.InsertAllocateLog(Kingdee.BOS.Context,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            插入分配日志记录（仅限基础资料分配使用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="baseId">基础资料ID</param>
            <param name="seq">分配日志表，插入记录的主键ID</param>
            <param name="langSeq">分配日志多语言表，插入记录的主键日志</param>
            <param name="runWay">执行方式：A自动；M手动；P分配申请</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocatedRecordFSourceId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[])">
            <summary>
            获取分配记录（源组织下基础资料ID）
            </summary>
            <param name="ctx">上下文</param>
            <param name="info"></param>
            <param name="pkIds">基础资料内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.OrganizationService.GetAllocatedRecordFDesteId(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object[])">
            <summary>
            获取分配记录（分配目标组织下基础资料ID）
            </summary>
            <param name="ctx">上下文</param>
            <param name="info"></param>
            <param name="pkIds">基础资料内码集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PathService.PathService.GetAppServerAssemblyPath">
            <summary>
            目前没有考虑分开部署，获取方式直接IS取虚拟路径的
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PathService.PathService.GetAppServerHostName">
            <summary>
            获取App层主机名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy">
            <summary>
            服务端动态实体操作模型 
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy._baseDataCache">
            <summary>
            基础资料读取、缓存工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.LoadFieldDataWithCoreFilter(Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.Object,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            根据基础资料的内码，内置过滤条件，读取数据包
            </summary>
            <param name="field"></param>
            <param name="pkValue"></param>
            <param name="activeRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.LoadReferenceData(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Object)">
            <summary>
            加载引用的相关对象数据包
            </summary>
            <param name="dt"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.LoadReferenceDataBatch(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,System.Object[])">
            <summary>
            加载引用的相关对象数据包
            </summary>
            <param name="dt"></param>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.LoadReferenceDataBatch(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.SqlBuilder.QueryBuilderParemeter)">
            <summary>
            传入动态实体类型及查询内码的SQL构建参数，获取动态实体对象集合。
            </summary>
            <param name="dt">动态实体类型。</param>
            <param name="queryParemeter">查询内码的SQL构建参数。</param>
            <returns>获取动态实体对象集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.SetItemValueByField(System.String,System.String,System.String,System.Int32)">
            <summary>
            根据参数设置的检索字段，设置基础资料完整信息
            </summary>
            <param name="key"></param>
            <param name="fieldKey"></param>
            <param name="fieldValue"></param>
            <param name="row"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.SetItemValueByNumber(System.String,System.String,System.Int32)">
            <summary>
            请求根据基础资料的代码，设置基础资料完整信息
            </summary>
            <param name="key">基础资料字段Key</param>
            <param name="number">代码</param>
            <param name="row">所在分录行，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.DynamicFormModelProxy.SetItemValueGetField(System.String,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField@,System.Int32@)">
            <summary>
            获取对应的基础资料字段：SetItemValueByNumber的专用子函数
            </summary>
            <param name="key"></param>
            <param name="baseDataField"></param>
            <param name="row"></param>
            <returns>基础资料字段获取不成功，或者基础资料字段配置不正确，则返回false</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.plugIn">
            <summary>
            平台默认插件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.dicAllMetaPlugin">
            <summary>
            按账套Id隔离保存的不同单据元数据插件列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.GetMetaPluginList(Kingdee.BOS.Context)">
            <summary>
            获取全部元数据插件列表
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.FireMetaPluginAfterRead">
            <summary>
            执行数据库预置的元数据插件AfterRead事件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.FireOnLoadEmbedRefObject">
            <summary>
            元数据加载完毕之后，加载嵌套引用的基础资料
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.MetadtaServicePlugInProxy.FireAfterDelete">
            <summary>
            触发元数据删除事件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireBeforeStateTrackerApply(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeStateTrackerApplyEventArgs)">
            <summary>
            钩稽申请前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireBeforeCreateArticulationRow(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCreateArticulationRowEventArgs)">
            <summary>
            添加创建钩稽申请行前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireBeforeWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.WriteBackEventArgs)">
            <summary>
            执行反写前调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireAfterCustomReadFields(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterCustomReadFieldsEventArgs)">
            <summary>
            添加自定义读取需要反写的源单字段后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireAfterConvertLinkWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterConvertLinkWritebackEventArgs)">
            <summary>
            钩稽的数据反写完成，钩稽数量（基本单位数量）填写完成
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireBeforeCheckHighLimit(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            超额检查前调用，IsCancelCheck==true，则不再做超额检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireBeforeCheckAutoClose(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.BeforeCanWritebackCheckEventArgs)">
            <summary>
            关闭下限检查前调用，IsCancelCheck==true，则不再做关闭下限检查
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireAfterHighLimitEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            超额处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireAfterUnitTransEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            单位换算处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PlugInProxy.ServicePlugInProxy.FireAfterAutoCloseEntityWriteback(Kingdee.BOS.Core.Bill.PlugIn.WriteBackArgs.AfterEntityWritebackEventArgs)">
            <summary>
            自动关闭处理操作的实体数据回填后调用
            </summary>
            <param name="bsArgs"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.SingleOrgVisiblePIDService.Generate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="metaData"></param>
            <param name="iLocaleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.SingleOrgVisiblePIDService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.PreInsertData.SyncPermissionItemService">
            <summary>
            权限项同步跟踪表：（1）在基类权限项变动时，记录到此表；（2）在授权的时候，检查此表，并同步；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.SyncPermissionItemService.ExecuteUpdate(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.PreInsertData.IPreInsertData,System.Boolean)">
            <summary>
            执行更改
            </summary>
            <param name="ctx"></param>
            <param name="data"></param>
            <param name="bAddNotExistsData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.PreInsertData.SyncPermissionItemService.Clear(Kingdee.BOS.Context)">
            <summary>
            清理功能权限授权数据，功能权限默认就是无权的
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Query.ConvertQueryService">
            <summary>
            单据转换数据查询服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.LoadRefBusinessInfo(System.String)">
            <summary>
            实现加载基础资料完整数据包的功能；
            </summary>
            <param name="refFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLWhere">
            <summary>
            构建sql where
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLWhereIsolationOrg(System.Text.StringBuilder@,System.String@)">
            <summary>
            拼接过滤条件：使用组织隔离
            </summary>
            <param name="sqlbuilder"></param>
            <param name="ANDKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLWhereIsShowApproved(System.Text.StringBuilder@,System.String@)">
            <summary>
            拼接过滤条件：基础资料，已审核
            </summary>
            <param name="sqlbuilder"></param>
            <param name="ANDKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLWhereIsShowUsed(System.Text.StringBuilder@,System.String@)">
            <summary>
            拼接过滤条件：基础资料，未禁用
            </summary>
            <param name="sqlbuilder"></param>
            <param name="ANDKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLIsShowUsedForLook(System.String)">
            <summary>
            返回基础资料未禁用的条件（供模糊查询）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.BuildSQLSelect">
            <summary>
            构造Select子句；不返回数据，结果直接修改this.SQLSelect, this.SQLFields属性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.RegisterRefProperty(Kingdee.BOS.Orm.Metadata.DataEntity.DynamicObjectType,Kingdee.BOS.Core.Metadata.FieldElement.BaseDataField,System.String)">
            <summary>
            注册基础资料的查询字段
            </summary>
            <param name="refdt"></param>
            <param name="field"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.GetSelectorItemInfo(System.String)">
            <summary>
            根据SelectField.Key，寻找其对应的SelectorItemInfo，后者包含了Orm模型的PropertyName信息
            </summary>
            <param name="selectFieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.GetSelectTables">
            <summary>
            GetSelectTables
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.GetUsedFieldKeys">
            <summary>
            GetUsedFieldKeys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Query.QueryBuilder.GetDicTableAlias">
            <summary>
            GetDicTableAlias
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Query.QueryBuilder.SQLWhere">
            <summary>
            条件子句
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Query.QueryBuilder.SQLOrderBy">
            <summary>
            排序子句
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Query.QueryBuilder.SQLGroupBy">
            <summary>
            分组子句
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Query.QueryBuilder.SelectFields">
            <summary>
            查询语句选中列集合(元素1:真实列名;元素2:别名)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Query.QueryBuilder.OrderByFields">
            <summary>
            查询语句排序列集合(元素1:真实列名;元素2:别名;元素3:排序方向(ASC/DESC))
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Query.WNReportQueryBuilder">
            <summary>
            万能报表使用
            处理下拉列表等的关联取数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Report.DevReportService">
            <summary>
            悲剧类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetReportDetail(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="reportID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetReports(Kingdee.BOS.Context,System.String[],Kingdee.BOS.Core.Enums.BOSEnums.Enu_DevReportType)">
            <summary>
            获取万能报表记录
            </summary>
            <param name="ctx"></param>
            <param name="SubSystemIDs">子系统</param>
            <param name="ReporType">报表类型</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.SaveReport(Kingdee.BOS.Context,System.Data.DataSet)">
            <summary>
            新建万能报表
            </summary>
            <param name="ctx"></param>
            <param name="ds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.DeleteReport(Kingdee.BOS.Context,System.String)">
            <summary>
            删除万能报表
            </summary>
            <param name="ctx"></param>
            <param name="reportId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetBillReportTemplate(Kingdee.BOS.Context,System.String)">
            <summary>
            获得单据标准打印模板
            </summary>
            <param name="ctx"></param>
            <param name="bilFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetBusinessObjectData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Object)">
            <summary>
            单据类报表获取数据
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="billId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetReportIdByBillFormId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取 单据类标准报表Id（依源单据FormId)
            TODO: 怎么返回一个？一个formid可以对应多个报表模版的吧
                  如果返回一个,可以改成ExecuteScalar, by yuchenggang
            </summary>
            <param name="ctx"></param>
            <param name="BillFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetSchemaData(Kingdee.BOS.Context,System.String)">
            <summary>
            设计时信息-表结构、字典
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">源单内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetBillData(Kingdee.BOS.Context,System.String,System.String,System.Object[])">
            <summary>
            单据类取数
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">源单内码</param>
            <param name="reportId">报表内码</param>
            <param name="pkArray">单据内码列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.TranslateKSQL(Kingdee.BOS.Context,System.String,System.Int32[])">
            <summary>
            将KSQL语句转换成其他类型数据库SQL语句
            </summary>
            <param name="ctx"></param>
            <param name="kSQL">待转换的KSQL语句</param>
            <param name="targetDbTypes">目标数据库类型数组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.ToSqlQueryString(Kingdee.BOS.Core.SqlBuilder.QueryObject,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            直接根据查询对象生成查询sql
            </summary>
            <param name="oQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetSelectItems(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.ToSqlQueryStringListReport(Kingdee.BOS.Core.SqlBuilder.QueryObject,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            直接根据查询对象生成查询sql
            </summary>
            <param name="oQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.UpdateTextBlock(Kingdee.BOS.Context,System.Data.DataTable,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.LargeTextField})">
            <summary>
            更新大文本详细内容
            </summary>
            <param name="ctx"></param>
            <param name="argDataTable"></param>
            <param name="textBlockFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.UpdateDataTable(Kingdee.BOS.Context,System.Data.DataTable,System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field})">
            <summary>
            对分拣服务器图片字段进行处理，值处理为字节流
            </summary>
            <param name="ctx"></param>
            <param name="argDataTable"></param>
            <param name="imgfileFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetImageByte(Kingdee.BOS.Context,System.Object,System.String)">
            <summary>
            获取图片字节流数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.GetBillDataCommon(Kingdee.BOS.Context,System.String,System.String,System.Object[],System.String,System.Object)">
            <summary>
            获取单据数据的公共方法
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="reportId"></param>
            <param name="pkArray"></param>
            <param name="entryEntityKey"></param>
            <param name="SelectedEtyIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Report.DevReportService.IsSelectedEtyIds(System.String,System.Object,System.String)">
            <summary>
            是否选择分录
            </summary>
            <param name="entryEntityKey"></param>
            <param name="selectedEtyIds"></param>
            <param name="entityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetData(Kingdee.BOS.Context,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取自定义报表数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="tableName">数据表名</param>
            <param name="startRow">开始行</param>
            <param name="endRow">结束行</param>
            <param name="orderInfo">排序</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetData(Kingdee.BOS.Context,System.String)">
            <summary>
            执行SQL返回数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="sql">sql语句</param>
            <returns>返回数据集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.IsLongDate(Kingdee.BOS.Core.CommonFilter.SQLFilterRow)">
            <summary>
            判断过滤行是否为长日期字段
            </summary>
            <param name="filterRow"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.AddQuoteSymbol(System.String,System.String,System.String)">
            <summary>
            where (not) in的关键字替换成有单引号的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CreateDirectSqlData(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.SQLFilterParameter,Kingdee.BOS.Core.Report.SQLDataSource)">
            <summary>
            构建直接SQL数据集
            </summary>
            <param name="ctx">上下文</param>
            <param name="filter">当前查询过滤器</param>
            <param name="sqlDataSource">数据源</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CreateRptGridField(Kingdee.BOS.Core.CommonFilter.SQLFilterParameter,Kingdee.BOS.Core.Report.SQLDataSource)">
            <summary>
            获取表格显示列
            </summary>
            <param name="filter"></param>
            <param name="sqlDataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CreateDataByProc(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.SQLFilterParameter,Kingdee.BOS.Core.Report.SQLDataSource,System.String)">
            <summary>
            执行存储过程获取数据
            </summary>
            <param name="ctx"></param>
            <param name="filter"></param>
            <param name="sqlDataSource"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CreateGroupSummaryTempData(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.SQLFilterParameter,Kingdee.BOS.Core.Report.SQLDataSource,System.String)">
            <summary>
            构建分组汇总数据
            </summary>
            <param name="ctx">当前查询过滤器</param>
            <param name="filter">当前查询过滤器</param>
            <param name="sqlDataSource">数据源</param>
            <param name="sql">查询脚本</param>
            <returns>返回经分组汇总处理后重新构建的格式良好的数据集对应的临时表名</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetGroupSummarySQL(Kingdee.BOS.Context,Kingdee.BOS.Core.CommonFilter.FilterParameter,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            创建生成分组汇总数据集的SQL脚本
            </summary>
            <param name="ctx"></param>
            <param name="filter"></param>
            <param name="tablename">原始数据表</param>
            <param name="tmpTableDetailAndSummaryData">分组汇总临时表</param>
            <param name="tmpSummaryTable">分组汇总后的最终数据表</param>
            <param name="tempSummaryCloumnsSQL">汇总字段列SQL，例如：SUM(FORDERAMOUNT) FORDERAMOUNT, SUM(FRECEIVEAMOUNT) FRECEIVEAMOUNT......</param>
            <param name="summaryColumnsA">汇总字段，例如：A.FORDERAMOUNT,A.FORDERQTY</param>
            <param name="noSummaryAndGroupColumns">不参与分组汇总的字段</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CreateDetailAndSummaryTempTable(Kingdee.BOS.Context,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            将报表明细数据和汇总数据合并到临时表
            </summary>
            <param name="ctx"></param>
            <param name="goupColumnsA">分组字段，例如：A.FPURCHASEORGID,A.FSUPPLIERNAME,A.FMATERIALID</param>
            <param name="summaryColumnsA">汇总字段，例如：A.FORDERAMOUNT,A.FORDERQTY</param>
            <param name="summarySql">分组汇总子查询SQL</param>
            <param name="fromSql">数据源表，例如：FROM TMPF31D33916DC511E6A5DC0050569</param>
            <param name="tmpTableDetailAndSummaryData">存储分组汇总数据的临时表名</param>
            <param name="noSummaryAndGroupColumns">不参与分组汇总的字段</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetSummaryColumsSQL(System.Collections.Generic.List{Kingdee.BOS.Core.Report.SummaryField})">
            <summary>
            获取汇总列SQL，例如： Count(FCount) as FCount,SUM(FQTY) as FQTY,AVG(FAMOUNT) AS FAMOUNT
            </summary>
            <param name="summaryFields"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetFormatGroupString(System.String)">
            <summary>
            获得分组级别SQL
            </summary>
            <param name="groupString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetGroupTableCloumns(System.String,System.String@,System.String@)">
            <summary>
            拼接分组信息查询列和条件
            </summary>
            <param name="groupString"></param>
            <param name="goupColumnsA">拼接分组字段，例如：A.FPURCHASERID,A.FSUPPLIERID,A.FMATERIALID</param>
            <param name="orderBy">拼接排序字段，例如：CASE WHEN FPURCHASEORGID IS NULL THEN 1 ELSE 0 END,FPURCHASEORGID,CASE WHEN FMATERIALID IS NULL THEN 1 ELSE 0 END,FMATERIALID,FGROUPLEVEL,FIDENTITYID2</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetSourceTableCloumns(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            拼接源表信息字段
            </summary>
            <param name="listNoSummaryAndGroupColumns"></param>
            <param name="type">0表示直接使用，拼接，1表示使用NULL,拼接</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.AddIdentityFieldName(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            获取标识列
            </summary>
            <param name="sb"></param>
            <param name="st"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetIdentityFieldIndexSQL(System.String)">
            <summary>
            获得索引语句
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.CheckIsAllowGroupSummary(Kingdee.BOS.Core.CommonFilter.FilterParameter)">
            <summary>
            检查分组汇总字段是否可见
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.ParseFromKeyWordValueType(Kingdee.BOS.Context,System.Int64,System.Object@)">
            <summary>
            转换关键字参数对应的数据类型，并处理默认值
            </summary>
            <param name="ctx"></param>
            <param name="keyWordValueType"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetSpecialWordValue(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定关键字的替代值
            </summary>
            <param name="ctx"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLReportService.GetSysValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Report.RptKeyWordField)">
            <summary>
            获取系统参数的值
            </summary>
            <param name="ctx"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Report.IRptParams,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="reportId"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetDataTableName(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Report.IRptParams)">
            <summary>
            获取报表数据，返回临时表名。
            切记用完删除临时表。
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetDataTableNameByParameter(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            获取轻分析报表数据，返回临时表名
            切记用完删除临时表
            <p>应用场景：</p>
            1. 轻分析取数；
            2. 分页账表传入MoveReportServiceParameter
            3. 简单账表传入ReportServiceParameter
            </summary>
            <param name="parameter">报表参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetReportData(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetListAndReportData(Kingdee.BOS.Core.Report.MoveReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.DropTempTable(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.CloseReportInstance(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.GetCrossReportData(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SysReportService.ClearAllTempTable(Kingdee.BOS.Core.Report.ReportServiceParameter)">
            <summary>
            清理临时表，不触发插件事件
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.IAsyncService.GetDataInfo(System.Object)">
            <summary>
            消息对象的序列化信息（日志）
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.MessageQueueAsyncService.Send(Kingdee.BOS.Core.Schedules.AsyncMessage)">
            <summary>
            发送时：不使用事务，避免影响外围主流程事务
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.MessageQueueAsyncService.Receive">
            <summary>
            接收时：不加事务，否则异常时该队列将永远无法取出，是否使用事务由外围控制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.MessageQueueAsyncService.Send_Exception(Kingdee.BOS.Core.Schedules.AsyncMessage,System.String)">
            <summary>
            发送执行时发生异常消息到指定异常队列
            </summary>
            <param name="dbId">数据中心内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.MessageQueueAsyncService.Receive_Exception(System.String)">
            <summary>
            接收异常队列的消息
            </summary>
            <param name="dbId">数据中心内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetAllScheduleList(Kingdee.BOS.Context)">
            <summary>
            只读取正在准备的服务
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetSchedule(Kingdee.BOS.Context,System.String)">
            <summary>
            获取Schedule，传ScheduleId，子单据头主键
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetScheduleByTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取Schedule，传入主键
            </summary>
            <param name="ctx"></param>
            <param name="scheduleTypeId">Schedule的主键Id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetSchedulProgress(Kingdee.BOS.Context,System.String)">
            <summary>
            得到服务进度
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetAutoRecoverSchedules(Kingdee.BOS.Context)">
            <summary>
            得到需要自动恢复的执行计划
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetSchedulePreInfo(Kingdee.BOS.Context,System.String[])">
            <summary>
            得到执行计划预制信息
            </summary>
            <param name="ctx"></param>
            <param name="scheduleIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleReader.GetScheduleStatus(Kingdee.BOS.Context,System.String)">
             <summary>
            得到执行计划状态,没有则返回准备状态
             </summary>
             <param name="ctx"></param>
             <param name="scheduleId"></param>
             <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetAllScheduleList(Kingdee.BOS.Context)">
            <summary>
            获取后台任务列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetSchedule(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetScheduleByTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取执行计划信息
            </summary>
            <param name="ctx"></param>
            <param name="scheduleTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.RunSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            执行后台任务
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetSchedulProgress(Kingdee.BOS.Context,System.String)">
            <summary>
            得到服务进度
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateProgress(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
             更新服务进度
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划执行状态
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.CheckScheduleIsReadyAndUpdateStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            检查服务是否准备状态,如果是，就更新为运行状态
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateExecuteTime(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划下一次执行的时间到数据库
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateScheduleNotes(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,System.Text.StringBuilder)">
            <summary>
            更新计划任务最近一次的执行情况到数据库
            strB有值，则优先使用来更新计划最近执行情况
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <param name="strB"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateScheduleNotesOnly(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,System.Text.StringBuilder)">
            <summary>
            更新计划任务最近一次的执行情况到数据库（只更新Notes）
            strB有值，则优先使用来更新计划最近执行情况
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <param name="strB"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateScheduleNextExecuteTime(Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划下一次执行的时间
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新后台任务
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateScheduleStatus(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.ScheduleStatus)">
            <summary>
            更新执行计划状态
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <param name="status"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.InsertSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            新建后台任务
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.DeleteSchedule(Kingdee.BOS.Context,System.String)">
            <summary>
            删除后台任务
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.AppendScheduleInfoLog(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,Kingdee.BOS.Core.ScheduleExecuteStatus)">
            <summary>
            增加执行情况日志
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <param name="status"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetScheduleService(System.String,System.String@)">
            <summary>
            get schedule service
            </summary>
            <param name="scheduleClass"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.AddScheduelMsg(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,Kingdee.BOS.Core.ScheduelMsgType,System.String)">
            <summary>
            增加执行计划消息
            </summary>
            <param name="ctx"></param>
            <param name="schudel"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetOnlyTypeId(Kingdee.BOS.Context,System.String)">
            <summary>
            得到唯一的执行计划类型Id
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.UpdateAutoRecoverSchedules(Kingdee.BOS.Context)">
            <summary>
            更新自动恢复的执行计划
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetNextExecuteTime(Kingdee.BOS.Core.Schedule)">
            <summary>
            得到下一次执行时间
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetSchedulePreInfo(Kingdee.BOS.Context,System.String[])">
            <summary>
            得到执行计划预制信息
            </summary>
            <param name="ctx"></param>
            <param name="scheduleIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleService.GetSiteInfo">
            <summary>
            得到站点信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateNotes(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
             更新最近一次的执行结果
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateNotesOnly(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
             更新最近一次的执行结果(只更新Notes)
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.CheckScheduleIsReadyAndUpdateStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新服务的状态， 并返回是否处于准备状态
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.GetSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            实时获得方案信息
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateScheduleStatus(Kingdee.BOS.Context,System.String,Kingdee.BOS.Core.ScheduleStatus)">
            <summary>
            更新服务的状态
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
            <param name="status"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.InsertSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.DeleteSchedule(Kingdee.BOS.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="scheduleId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.InitScheduleStatus(Kingdee.BOS.Context)">
            <summary>
            重置运行状态
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateProgress(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
             更新服务进度
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.UpdateAutoRecoverSchedules(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            更新自动恢复的执行计划
            </summary>
            <param name="ctx"></param>
            <param name="scheduleIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.ScheduleService.ScheduleWriter.AppendScheduleInfoLog(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,Kingdee.BOS.Core.ScheduleExecuteStatus)">
            <summary>
            增加执行情况日志
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
            <param name="infoStatus"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SequenceReader._dctSequenceNoRepairTables">
            <summary>
            按账套Id隔离保存的不需要修复种子表的单据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SequenceReader._oracleSeqUseCacheCnt">
            <summary>
            oracle数据库序列使用缓存大小
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.AutoSetPrimaryKey(System.Collections.Generic.IEnumerable{System.Object},Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            为实体自动填充主键编号
            </summary>
            <param name="obj">要填充的实体列表</param>
            <param name="entityType">实体的类型信息</param>
            <remarks>
            请尽量不要在应用服务器调用此方法，因为这可能造成编号的不连续，但这样不会造成错误。
            例如应用服务器先填充了编号（调用此方法），然后进行单据的校验，但是校验可能失败并抛出异常
            ，如果部署环境是物理分割的三层结构，这时Web服务器上的编号并没有变化，当再次保存时将重新填充新的编号。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.AutoCreateSequenceTable(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            提供自动创建序列表接口
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.GetSequence(System.String,System.Int32)">
            <summary>
            返回整数的序列
            </summary>
            <param name="key">序列的键，一般为表的名称</param>
            <param name="count">需要申请的数量</param>
            <returns>指定数量的序列</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.VerifyAndCreateSequence(System.String,System.Boolean)">
            <summary>
            验证并创建序列
            </summary>
            <param name="key"></param>
            <param name="isInt32"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.HasSequenceByKey(System.String)">
            <summary>
            验证序列是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.GetSequenceNameByKey(System.String)">
            <summary>
            获取序列表名称
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.GetMySQLSequenceTableByKey(System.String)">
            <summary>
            获取指定表格对应的序列表名称
            </summary>
            <param name="tableName">原始表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.GetSqlServerSequenceTableByKey(System.String)">
            <summary>
            获取指定表格对应的序列表名称
            </summary>
            <param name="tableName">原始表名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.GetSequenceNoRepairTables(Kingdee.BOS.Context)">
            <summary>
            获取不需要修复种子表的数据表
            </summary>
            <param name="ctx">当前上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SequenceReader.IsNoRepairTable(System.String)">
            <summary>
            当前表是否不需要修复种子表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo)">
            <summary>
            通过云平台发送短信信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">消息内容</param>
            <returns>返回消息发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.BatchProcessingSmsSend(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo,System.Int32)">
            <summary>
            短信分批次发送
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">短信信息</param>
            <param name="batchCnt">批次发送的量</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.BatchSendMsg(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.ResultInfo{Kingdee.BOS.BusinessEntity.CloudPlatform.CloudApiInfo},Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo)">
            <summary>
            发送一批短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="batchResult">发送结果</param>
            <param name="smsInfo">短信信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.PackagingSMSResult(Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo)">
            <summary>
            发送结果初始化
            </summary>
            <param name="smsInfo"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.App.Core.SMSService.PackagingErrorMsgAndSave(Kingdee.BOS.Context,Kingdee.BOS.App.Core.SMSResult,Kingdee.BOS.BusinessEntity.ResultInfo{Kingdee.BOS.BusinessEntity.CloudPlatform.CloudApiInfo})”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.App.Core.SMSService.PhonesSplitBySemicolon(Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo)">
            <summary>
            处理带有分号的手机号
            </summary>
            <param name="smsInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CalCurSendSmsCnt(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo)">
            <summary>
            获取本次发送短信条数
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">短信消息</param>
            <returns>返回本次发送短信条数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InnerSendSMSbyKingdee(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo,Kingdee.BOS.App.Core.SMSResult,System.Boolean)">
            <summary>
            判断使用什么方式发送云短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">消息内容</param>
            <param name="smsResult">发送结果</param>
            <param name="ischarge">是否修改个数</param>
            <returns>返回消息发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InitCloudInfo(Kingdee.BOS.Context,System.Int32)">
            <summary>
            初始化中转服务器短信信息
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetModelName(Kingdee.BOS.Context,System.String)">
            <summary>
            获取模板名称
            </summary>
            <param name="ctx"></param>
            <param name="signName">签名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetProductIDs(Kingdee.BOS.Context)">
            <summary>
            获取产品唯一标识
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetProSerialNo(Kingdee.BOS.Context)">
            <summary>
            获取序列号
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetRequestUrl(Kingdee.BOS.Context)">
             <summary>
            获取请求的url
             </summary>
             <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InnerSendSMSByMidServer(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo,Kingdee.BOS.App.Core.SMSResult,System.Boolean)">
            <summary>
            使用中间服务器接口发送短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">消息内容</param>
            <param name="smsResult">发送结果</param>
            <param name="ischarge">是否修改个数</param>
            <returns>返回消息发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InnerSendSMSbyCloudPlat(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo,Kingdee.BOS.App.Core.SMSResult,System.Boolean)">
            <summary>
            使用云平台接口发送短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">消息内容</param>
            <param name="smsResult">发送结果</param>
            <param name="ischarge">是否修改个数</param>
            <returns>返回消息发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InnerSendSMSbyWEINADUO(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.CloudSMSInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.App.Core.SMSResult)">
            <summary>
            新接口发送维那多短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsInfo">消息内容</param>
            <param name="configInfo">配置信息</param>
            <param name="smsResult">发送结果</param>
            <returns>返回消息发送结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetModuleID(Kingdee.BOS.Context,System.String)">
            <summary>
            获取短信模版ID
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CheckKingdeeSMSServer(Kingdee.BOS.Context)">
            <summary>
            检查金蝶云短信接口相关服务
            </summary>
            <param name="ctx">上下文</param>
            <returns>金蝶短信配置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InintMcSmsInfo(Kingdee.BOS.Context)">
            <summary>
            初始化短信数据到MC
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.IsSpecialCustomer(Kingdee.BOS.Context)">
            <summary>
            是否特殊客户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CouldSendMsgBySmsCnt(Kingdee.BOS.Context,System.String,System.Int32,System.Int64,Kingdee.BOS.BusinessEntity.ResultInfo{Kingdee.BOS.BusinessEntity.CloudPlatform.CloudApiInfo})">
            <summary>
            验证短信条数是否够发
            </summary>
            <param name="tenantId"></param>
            <param name="preSendCnt"></param>
            <param name="purchaseCnt"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetPrepareSmsCount(System.String,System.Int32)">
            <summary>
            获取预发短信信息
            </summary>
            <param name="ctx"></param>
            <param name="tenantId"></param>
            <param name="preSendCnt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSCount(Kingdee.BOS.Context)">
            <summary>
            获取云短信个数
            </summary>
            <param name="ctx">管理中心上下文</param>
            <returns>返回云短信个数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMScount(Kingdee.BOS.Context,System.String)">
            <summary>
            截取短信内容，判断短信条数
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsMessage">短信内容</param>
            <returns>短信条数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SetSMSCountPrivate(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置云短信个数
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsAddCount">发送短信个数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SetSMSCount(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置云短信个数
            </summary>
            <param name="ctx">管理中心上下文</param>
            <param name="smsaddcount">设置个数</param>
            <returns>返回是否设置成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CreateSMSSign(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSCreateRequest)">
            <summary>
            创建云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">签名信息</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CreateSMSSignature(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSSignRequest)">
            <summary>
            创建云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">签名信息</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.UpdateSMSSignature(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSSignRequest)">
            <summary>
            修改云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">签名信息</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.DeleteSMSSign(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest,System.String)">
            <summary>
            删除短信签名
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">短信信息</param>
            <param name="signID">短信签名ID</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSSignatureList(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest)">
            <summary>
            获取签名列表信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSSignature(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSSigleSignRequest)">
            <summary>
            通过模版ID获取云短信模版信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSSignApproveList(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest)">
            <summary>
            获取模版审核信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.CreateSMSModel(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSModelRequest)">
            <summary>
            创建云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">签名信息</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.UpdateSMSModel(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSModelRequest)">
            <summary>
            修改云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">签名信息</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.DeleteSMSModel(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest,System.String)">
            <summary>
            删除云短信模版
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">短信配置信息</param>
            <param name="modelID">模版信息</param>
            <returns>删除状态</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSModel(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSSigleModelRequest)">
            <summary>
            通过模版ID获取云短信模版信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSModelList(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest)">
            <summary>
            获取云短信模版列表信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSModelApproveList(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.SMS.CloudSMSRequest)">
            <summary>
            获取模版审核信息
            </summary>
            <param name="ctx">数据中心上下文</param>
            <param name="smsInfo">用户信息</param>
            <returns>模版列表信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.DeleteSmsExceptionLog(Kingdee.BOS.Context,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            删除短信异常日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="fids">异常日志主键</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SyncInitValueToMidServer(Kingdee.BOS.Context,System.Int32)">
            <summary>
            同步初始值到云平台
            </summary>
            <param name="ctx"></param>
            <param name="initValue">初始值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.IsStartSms(Kingdee.BOS.Context)">
            <summary>
            是否开启短信
            </summary>
            <param name="ctx">山下文</param>
            <returns>true 开启 false 关闭</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMS(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            当前用户发给自己。例如手机验证码
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">手机号</param>
            <param name="SMSMessage">发送短信内容</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMS(Kingdee.BOS.Context,Kingdee.BOS.Msg.SMSMessageInfo)">
            <summary>
            发送给其他员工，比如工作流
            </summary>
            <param name="ctx">上下文</param>
            <param name="message">发送短信对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.InnerSendSMS(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Msg.SMSMessageInfo,Kingdee.BOS.App.Core.SMSResult)">
            <summary>
            发送短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="configInfo">短信配置信息</param>
            <param name="messInfo">发送短信对象</param>
            <param name="smsResult">发送结果</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.DealSMSAnswer(System.Collections.Generic.Dictionary{System.String,System.String},Kingdee.BOS.App.Core.SMSResult,System.Collections.Generic.List{Kingdee.BOS.Msg.PhoneInfo})">
            <summary>
            获取发送短信结果
            </summary>
            <param name="results">发送短信后接口返回信息</param>
            <param name="smsResult">短信记录信息</param>
            <param name="allSendPoneInfo">收信人信息</param>
            <returns>返回发送是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMSByGroup(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            批量发送短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="MsgToPhoneGroup">发送duanxin</param>
            <returns>返回发送是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMSByGroup(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Msg.SMSMessageInfo})">
            <summary>
            批量发送短信
            </summary>
            <param name="ctx">上下文</param>
            <param name="MsgToPhoneGroup">发送duanxin</param>
            <returns>返回发送是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMS(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            当前用户发给自己。例如手机验证码
            </summary>
            <param name="ctx">上下文</param>
            <param name="SMSConfigInfo">消息配置信息</param>
            <param name="phone">接收人信息</param>
            <param name="SMSMessage">消息内容</param>
            <returns>发送返回结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendSMS(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Msg.SMSMessageInfo)">
            <summary>
            发送给其他用户，如工作流
            </summary>
            <param name="ctx">上下文</param>
            <param name="SMSConfigInfo">消息配置信息</param>
            <param name="message">发送消息信息</param>
            <returns>返回是否发送成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SaveSendSMSResult(Kingdee.BOS.Context,Kingdee.BOS.App.Core.SMSResult)">
            <summary>
            保存发送日志记录信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsResult">发送消息结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSignName(Kingdee.BOS.Context)">
            <summary>
            获取签名
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SaveSendErrorSMSResult(Kingdee.BOS.Context,Kingdee.BOS.App.Core.SMSResult)">
            <summary>
            保存短信发送异常记录
            </summary>
            <param name="ctx">上下文</param>
            <param name="smsResult">短信发送结果</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.IMessageSendInfo{Kingdee.BOS.Msg.IMsgUser},System.Boolean)">
            <summary>
            发送消息
            -供预警平台、工作流平台调用
            </summary>
            <param name="ctx">上下文本</param>
            <param name="msgSendInfo">发件信息</param>
            <param name="outboxToo">是在在发件箱中存档</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendMessage(Kingdee.BOS.Context,Kingdee.BOS.Msg.IMessageSendWithBillInfo{Kingdee.BOS.Msg.IMsgUser},System.Boolean)">
            <summary>
            发送消息
            -供预警平台、工作流平台调用
            </summary>
            <param name="ctx">上下文本</param>
            <param name="msgSendInfo">发件信息</param>
            <param name="outboxToo">是在在发件箱中存档</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendInfo2Message(Kingdee.BOS.Context,Kingdee.BOS.Msg.IMessageSendInfo{Kingdee.BOS.Msg.IMsgUser},System.String)">
            <summary>
            发送信息到收件消息的转换
            </summary>
            <param name="msgSendInfo">转换消息信息</param>
            <param name="sendMsgId">消息id</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.SendInfo2MessageSend(Kingdee.BOS.Context,Kingdee.BOS.Msg.IMessageSendInfo{Kingdee.BOS.Msg.IMsgUser})">
            <summary>
            发送信息到发件箱消息的转换
            </summary>
            <param name="msgSendInfo">转换消息信息</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSSignConfig(Kingdee.BOS.Context)">
            <summary>
            获取短信模版签名配置信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回模版服务配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetSMSInterfaceConfig(Kingdee.BOS.Context)">
            <summary>
            获取短信服务配置信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回短信服务配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SMSService.GetUserMemberReceiverCollection(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Msg.PhoneInfo})">
            <summary>
             通过参与人员信息获取用户手机号
            </summary>
            <param name="ctx">上下文</param>
            <param name="operatorInfoList">参与人员信息</param>
            <returns>用户手机号</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.Ispay">
            <summary>
            Gets or sets 是否收费
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.Facilitator">
             <summary>
            Gets or sets 短信服务商 0 金蝶云短信 1 维纳多短信 2 其它
             </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.Errorcode">
             <summary>
            Gets or sets 错误id
             </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.ErrorMsg">
            <summary>
            Gets or sets 错误信息说明
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.MsgContent">
             <summary>
            Gets or sets  短信内容
             </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.MessgeDetail">
            <summary>
            Gets or sets  业务详情
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.SMSResult.smsType">
            <summary>
            短信类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScriptService.CreateMenuScriptByBO(Kingdee.BOS.Context,System.String[])">
            <summary>
            CreateMenu By BO
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScriptService.GetDataFromStoredProc(Kingdee.BOS.Context,Kingdee.BOS.DatabaseType,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            获取存储过程返回的数据集
            </summary>
            <param name="ctx"></param>
            <param name="dbType"></param>
            <param name="storedProcStr"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.CreateMenuScriptByBO(Kingdee.BOS.Context,System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.InternalCreateMenuScriptByBO(Kingdee.BOS.Context,System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <param name="srcTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.CreateFilter(System.String[],System.String,System.String,System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <param name="pre"></param>
            <param name="filter"></param>
            <param name="paramList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetIdArrary(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="paramList"></param>
            <param name="strSQL"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetSubTableFilter(System.String[],System.String,System.String,System.String,System.Text.StringBuilder@,System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            
            </summary>
            <param name="objIds"></param>
            <param name="kfield"></param>
            <param name="pre"></param>
            <param name="filter"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetConsleFuncDetailIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetConsleFuncIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetSubSystemIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.InsertSQLScriptBuilder.GetTopClassIds(Kingdee.BOS.Context,System.String[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="objIds"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.SQLScript.MetaDataManager.ZERO">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.MetaDataManager.GetBusinessObjectMetaData(System.String,System.Int32[])">
            <summary>
            获取业务对象元数据及依赖项数据
            </summary>
            <param name="strFormId"></param>
            <param name="localeIDs">语言Id，如果为空，默认返回2052的多语言数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.MetaDataManager.GetPreInsertDataTypes">
            <summary>
            获得当前程序集中，实现接口IPreInsertDataService的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SQLScript.MetaDataManager.HandleXmlSpecialChar(System.String)">
            <summary>
            描述：判断值中是否有包含xml特殊字符,如果有，则进行替换
            创建人:郭超
            创建时间:2018.09.20
            </summary>
            <param name="xmlValue"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SQLScript.MetaDataManager.Column">
            <summary>
            列结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.SQLScript.UpdateSQLScriptBuilder">
            <summary>
            Update脚本生成器 add by kuitar_tian @2011-09-21
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.TrackerDataService">
            <summary>
            状态追踪表数据服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.TrackerDataService.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.TrackerDataService.GetStateLinkAmount(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,System.String)">
            <summary>
            获取指定状态的勾稽数量
            </summary>
            <param name="entityData">数据包</param>
            <param name="businessInfo">业务元数据</param>
            <param name="billTracker">反写规则</param>
            <param name="targetStateKey">目标状态</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.TrackerDataService.GetStateLinkAmount(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.Int64[])">
            <summary>
            获取指定状态的勾稽数量
            </summary>
            <param name="sourceState">源单状态</param>
            <param name="targetState">目标状态</param>
            <param name="sourceIds">源单分录内码</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker">
            <summary>
            单据转换状态追踪
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.DoUpdateIsAudit(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0},System.Boolean)">
            <summary>
            更新是否审核标志
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.DoWriteBack(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            回写源单
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.ApplyNotArticulation(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            凡是新增，且没有勾稽其他单据的，可以直接新增记录
            </summary>
            <remarks>
            当某个单据第一次保存，且没有勾稽任何其他单据时，这些请求会是这种情况。
            当然，如果是后期新增的行且也没有勾稽任何其他行，也是这种情况。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.ApplyWithArticulation(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            新增或者數量增加時，且有勾稽行為的。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.ApplyWithArticulationReverse(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            反向操作。即紅字沖銷
            </summary>
            <remarks>
            紅字沖銷做兩件事情： 回退一筆，正常遷移一筆，但是正常遷移的行除目標狀態外均需要標誌為無效狀態，以便保持賬務的平衡。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.ApplyOver(Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection,Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo,System.Decimal,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow)">
            <summary>
            超額（一定有勾稽）的正向操作。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.UnApplyWithArticulation(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            撤銷勾稽，他發生在刪除或數量減少。撤銷后沒有歷史痕跡。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.UnApplyNotArticulation(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            撤銷非勾稽申請。撤銷操作沒有留下痕跡。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.SyncSheet(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0})">
            <summary>
            通过此函数做第一遍的比较，原理是：
            cuurentSheets上的单据如果在快照中未找到，说明此单是新增记录；
            currentSheets在快照上找到，说明是修改记录；
            由于快照根据currentSheets的ID读取，所有不存在快照中有而current中没有的情况。
            </summary>
            <param name="currentSheets">当前打算入账的最新请求单据集</param>
            <param name="snapshot">原始快照。</param>
            <returns>新增和更新的结果集。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.SyncRow(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRowCollection{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRowCollection{`0},Kingdee.BOS.App.Core.StateTracker.AED{Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0}})">
            <summary>
            此函数做第二遍比较，原理是和单据相同，但需要注意的是相等判断的细节：
            由于存在多个行公用一个ID（同一个行会有很多的勾稽记录），相等比较时还额外比较勾稽的情况。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.GetMigrationInfo(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement)">
            <summary>
            通过勾稽申请，计算出其迁移信息，包括迁移的连线，所有同组的状态。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.GetWithoutArticulationInfo(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement)">
            <summary>
            沒有勾稽時的信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.CanUse(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            检测提供的勾稽记录是否能够被当前的申请所使用。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.CanUseForUnApply(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            检测某个勾稽记录是否能够被当前申请撤銷操作。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.CanOver(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            检测某个勾稽记录是否能够被当前申请進行超額處理。。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.CanUseForUnApplyReverse(System.Collections.Generic.KeyValuePair{Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.String}[],Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            檢查一個賬務行，看是否允許用於紅字沖銷的撤銷操作。
            </summary>
            <param name="stateAndIds">狀態以及對應CID的數組，要求檢查的行必須滿足這些條件。</param>
            <param name="row">要檢查的行</param>
            <param name="migrationInfo">遷移路徑信息</param>
            <returns>如果此行指定的狀態(stateAndIds)符合條件，並且原狀態和目標狀態均為空，返回true，否則返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.GetSourceInfo(Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement)">
            <summary>
            在處理紅字沖銷的撤銷操作時，需要找到源 之前的所有狀態的有效值。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.TargetBusinessInfo">
            <summary>
            目标单业务元数据，反写插件事件需要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.CurrWriteBackOpType">
            <summary>
            反写操作类型，
            用来区分当前反写的操作是保存/删除/审核/反审核中的那种
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo">
            <summary>
            数据结构，用来存储某个勾稽申请其发生的迁移情况的描述
            </summary>
            <remarks>
            假设 A -> B -> C，当前发生的是 A -> B
            而且  A -> D，A->E，其中A->B和A->D是同组。
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo.Link">
            <summary>
            迁移路径，即从哪里迁移到哪里的路径。此例中是 A -> B
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo.SourceNextStatesGroup">
            <summary>
            源狀態所有直接下級，且與此次遷移(Link)具有相同的路線組，此例中是 B,D
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo.SourceStates">
            <summary>
            申请的状态数组，注意不是迁移的源状态，而是申请勾稽的状态集合。此例是A.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo.TargetNextStates">
            <summary>
            目标状态的直接下游，此例是 C
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTracker`1.MigrationInfo.GetTargetAllNextStates">
            <summary>
            返回目標狀態的所有下級狀態(不包括目標狀態)。在超額處理中要用到，用於清除這些數據。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker._billTracker">
            <summary>
            反写规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker.#ctor(Kingdee.BOS.App.Core.StateTracker.IStateTrackerDbService{Kingdee.BOS.App.Core.StateTracker.DataEntities.DefaultDbIdentifier},Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement)">
            <summary>
            构造函数
            </summary>
            <param name="dbService"></param>
            <param name="schema"></param>
            <param name="billTracker">反写规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker.DoWriteBack(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            回写源单
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker.GetTableIds(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            获取上游表Id
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker.ExecWriteBackEngine(Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection,Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            执行反写引擎
            </summary>
            <param name="rows"></param>
            <param name="engineContext"></param>
            <param name="item"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.ConvertStateTracker.DoUpdateIsAudit(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{Kingdee.BOS.App.Core.StateTracker.DataEntities.DefaultDbIdentifier},System.Boolean)">
            <summary>
            更新审批标志位
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
            <param name="isAudit"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackOpType">
            <summary>
            反写操作类型，
            用来区分当前反写的操作是保存/删除/审核/反审核中的那种
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackOpType.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackOpType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackOpType.Audit">
            <summary>
            审核
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackOpType.UnAudit">
            <summary>
            反审核
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1">
            <summary>
            单据转换状态追踪
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1._billTracker">
            <summary>
            反写规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.#ctor(Kingdee.BOS.App.Core.StateTracker.IStateTrackerDbService{`0},Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement)">
            <summary>
            构造函数
            </summary>
            <param name="dbService"></param>
            <param name="schema"></param>
            <param name="billTracker">反写规则</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.DoWriteBack(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            回写源单
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.GetTableIds(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection)">
            <summary>
            获取上游表Id
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.ExecWriteBackEngine(Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRowCollection,Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            执行反写引擎
            </summary>
            <param name="rows"></param>
            <param name="engineContext"></param>
            <param name="item"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.DoUpdateIsAudit(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0},System.Boolean)">
            <summary>u
            更新审批标志位
            </summary>
            <param name="state"></param>
            <param name="rows"></param>
            <param name="isAudit"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.NewConvertStateTracker`1.CanUseForUnApply(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{`0},Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.StateTracker{`0}.MigrationInfo)">
            <summary>
            检测某个勾稽记录是否能够被当前申请撤銷操作。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot">
            <summary>
            动态实体"ArticulationSheetSnapshot"的强类型访问类。用来保存申请快照。
            在数据库中一个快照是一段XML数据。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.ArticulationSheetSnapshotType">
            <summary>ArticulationSheetSnapshot的动态类型</summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.#ctor(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>创建 ArticulationSheetSnapshot 实例</summary>
            <param name="obj">视图访问类实际操作的动态实体，不能为null</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.op_Implicit(Kingdee.BOS.Orm.DataEntity.DynamicObject)~Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot">
            <summary>支持从DynamicObject隐式转化到ArticulationSheetSnapshot类型</summary>
            <param name="obj">要隐式转换的动态实体</param>
            <returns>新构建的ArticulationSheetSnapshot对象</returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.CIdProperty">
            <summary>CId的属性描述符</summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.XmlBodyProperty">
            <summary>XmlBody的属性描述符</summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.CId">
            <summary>
            返回/设置 主键，对应到单据的CID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetSnapshot.XmlBody">
            <summary>
            返回/设置 Xml正文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier">
            <summary>
            动态实体"DbIdentifier"的强类型访问类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier.TableId">
            <summary>
            返回/设置 表的唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier.Id">
            <summary>
            返回/设置 唯一编号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier.CId">
            <summary>
            返回/设置 TableId和Id的组成值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier.IsAudit">
            <summary>
            返回/设置 审核标志位，描述此单元格是否经过审核。false表示是暂扣未审核，true表示已审核。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.DbIdentifier.IsInvalid">
            <summary>
            返回此状态是否是无效的数据。当发生超额处理时，其上游的状态视为无效（没有真实发生）。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet`1">
            <summary>
            表示为一批勾稽请求记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet`1.EqualsWithId``1(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet{``0},Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet{``0})">
            <summary>
            判断两个勾稽行是否是描述同一个勾稽内容。
            </summary>
            <returns>如果x和y的Id相同，且所有要勾稽的状态及ID也相同，返回true</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet`1.Rows">
            <summary>
            所有勾稽请求行。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheet`1.Id">
            <summary>
            单据的唯一识别编号
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow`1">
            <summary>
            勾稽请求行.
            当一个单据体行没有勾稽其他单据时，那么一个单据体行形成一个勾稽请求行，其ID为单据体ID，状态集合为空，数量为单据体的数量；
            当单据体行勾稽了其他单据时，那么每个勾稽明细形成一个勾稽请求行，其ID为单据体ID，状态集合和数量来自勾稽明细的数据。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow`1.EqualsWithoutAmount``1(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{``0},Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow{``0})">
            <summary>
            判断两个勾稽行是否是描述同一个勾稽内容。
            </summary>
            <returns>如果x和y的Id相同，且所有要勾稽的状态及ID也相同，返回true</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow`1.Id">
            <summary>
            谁想请求勾稽，为单据体的编号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow`1.States">
            <summary>
            已哪些状态关联勾稽。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationRow`1.Amount">
            <summary>
            试图勾稽的数量。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.IDbIdentifier`1">
            <summary>
            记录某个数据库记录的指针。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateIdentifier`1.State">
            <summary>
            返回此状态标识
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow">
            <summary>
            状态追踪表的一行记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.CloneWithoutIdAmount">
            <summary>
            克隆当前记录，但不处理主键和数量。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.MarkIsInvalid">
            <summary>
            将所有CID不为空的状态赋值为无效状态。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.ClearStateValue(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement})">
            <summary>
            清除指定狀態的數據。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.EqualsStates(Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow,Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow)">
            <summary>
            判断两个行的状态是否是相等的。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.ToString">
            <summary>
            用于调试的输出。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.CanDeleteRow">
            <summary>
            判断此行是否一个可以删除的行。当余额为0，或所有的状态为空（超额项也算空）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow.CurrStateDbIdentifier">
            <summary>
            为了提升撤銷非勾稽申請的性能，增加这个属性。
            循环判断时不需要多次类型转换
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.IStateTrackerDbService`1.ReadSnapshot(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据单据的识别符读取快照数据。
            </summary>
            <param name="ids">快照识别字符串集合。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.IStateTrackerDbService`1.SaveSnapshot(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0})">
            <summary>
            更新快照内容。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService">
            <summary>
            状态追踪服务的提供者
            1、貌似容易产生死锁，所以避免使用并行计算
            </summary>
            <author>linus_wang</author>
            <createdate>2011-05-02</createdate>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.Delete(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            删除时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="lstPkIds"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.Save(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            保存时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.SaveWithBatchWriteBack(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            保存时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.Audit(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            审核时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.UnAudit(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            反审核时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.Cancel(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            作废时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApplyService.UnCancel(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            反作废时更新入账信息
            </summary>
            <param name="ctx"></param>
            <param name="dataEntities"></param>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerHelper.GetTrackerData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,System.String)">
            <summary>
            获取可钩稽数量
            </summary>
            <param name="ctx"></param>
            <param name="linkObjs"></param>
            <param name="billTracker"></param>
            <param name="targetId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerHelper.GetAttachState(Kingdee.BOS.Context,System.String,System.String,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement[],System.String,System.Int64[])">
            <summary>
            获取附加状态的勾稽数据
            </summary>
            <param name="trackerTable">状态追踪表</param>
            <param name="sKey">源单状态Key</param>
            <param name="nextStatesInGroup">同组下游状态集合</param>
            <param name="aKey">附加状态Key</param>
            <param name="ids">源单Id列表</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerHelper.GetTrackerFormula(System.String)">
            <summary>
            获取表达是对象
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerHelper.GetAttachStateSql(System.String,System.String,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement[],System.String)">
            <summary>
            获取附加状态的勾稽数据
            </summary>
            <param name="trackerTable">状态追踪表</param>
            <param name="sKey">源单状态Key</param>
            <param name="nextStatesInGroup">同组下游状态集合</param>
            <param name="aKey">附加状态Key</param>
            <param name="ids">源单Id列表</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.TrackerFormula">
            <summary>
            状态迁移图状态可用量表达式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.TrackerFormula.Operator">
            <summary>
            运算符
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.TrackerFormula.StateKey">
            <summary>
            状态标识
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine">
            <summary>
            单据转换流程的逻辑反写引擎
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.lstWriteBackLogicUnit">
            <summary>
            回写逻辑单元
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.#ctor(Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext)">
            <summary>
            创建反写引擎实例
            </summary>
            <param name="engineContext"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.RegisterLogicUnit(Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit)">
            <summary>
            向引擎中注册一个逻辑单元实例
            </summary>
            <param name="logicUnit"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.RegisterLogicUnit(Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit,System.Int32)">
            <summary>
            向引擎中插入一个逻辑单元实例
            </summary>
            <param name="logicUnit"></param>
            <param name="index"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.Do">
            <summary>
            执行反写逻辑单元处理过程
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.LoadWriteBackData(Kingdee.BOS.Core.Metadata.FieldElement.Field[])">
            <summary>
            根据请求的字段读取源单数据
            </summary>
            <param name="dataFields">请求的字段集合</param>
            <returns>返回源单数据实体对象集合</returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.SourceViewState">
            <summary>
            源单上关注目标状态的“反写状态”
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.SubSrcBusinessInfo">
            <summary>
            源单精简版的元数据对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngine.WriteBackEngineContext">
            <summary>
            反写引擎的上下文信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext">
            <summary>
            回写引擎上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.Context">
            <summary>
            数据库连接上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.TargetBusinessInfo">
            <summary>
            当前保存单据元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.TargetBillTracker">
            <summary>
            当前保存单据状态追踪元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.TargetState">
            <summary>
            此次发生状态迁移时的目标状态。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.SourceBusinessInfo">
            <summary>
            源单元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.SourceState">
            <summary>
            此次发生状态迁移的源状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.SourceBillTracker">
            <summary>
            上游单据状态追踪元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.TargetData">
            <summary>
            目标单入账数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.StateTrackerSchema">
            <summary>
            状态迁移图的元数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.SourceTableId">
            <summary>
            反写的源单表信息内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext.CurrWriteBackOpType">
            <summary>
            反写操作类型，
            用来区分当前反写的操作是保存/删除/审核/反审核中的那种
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit">
            <summary>
            单据流转后反写逻辑单元
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.ViewState_PropertyKey">
            <summary>
            暂扣字段的属性名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CanUseQty_PropertyKey">
            <summary>
            暂扣字段的属性名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.Writeback_PropertyKey">
            <summary>
            扣减字段的属性名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.IsAvailableData_PropertyKey">
            <summary>
            表示此扩展实体是否经过入账处理过？
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.InitializeContext(Kingdee.BOS.App.Core.StateTracker.WriteBackEngineContext)">
            <summary>
            初始化逻辑单元上下文信息
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CustomReadFields">
            <summary>
            提供时机点，允许自定义读取需要反写的源单字段。例如关闭插件可以期望读取关闭相关的字段
            </summary>
            <returns>返回你需要读取的字段列表(不要返回null)。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.WriteBack(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Collections.Generic.IEnumerable{Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow})">
            <summary>
            当源单数据已经读取完毕，调用此方法，以便写入数据。
            </summary>
            <param name="sourceEntities">读取后的源单数据。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.AddFieldElement(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.String)">
            <summary>
            
            </summary>
            <param name="lstFields"></param>
            <param name="fieldKey"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.Context">
            <summary>
            服务上下文。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.EngineContext">
            <summary>
            回写引擎上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.StateTrackerSchema">
            <summary>
            当前发生反写行为的状态迁移图的元数据。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceBusinessInfo">
            <summary>
            源单的元数据定义。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceBillTrackerInfo">
            <summary>
            源单中关于回写的定义。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.TargetState">
            <summary>
            此次发生状态迁移时的目标状态。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceTableId">
            <summary>
            源单发生事务的表编号。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.SourceEntitySet">
            <summary>
            源单扩展数据实体集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.ControlField">
            <summary>
            控制字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.UnitField">
            <summary>
            基本单位字段(根据控制字段来获取)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CloseLowerLimitField">
            <summary>
            关闭下限字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.PushHighLimitField">
            <summary>
            超额上限字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.ActualDeductField">
            <summary>
            实际扣减字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.DeductField">
            <summary>
            暂扣字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.EntryCloseField">
            <summary>
            分录关闭字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CloseField">
            <summary>
            整单关闭字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractWriteBackLogicUnit.CurrSourceViewState">
            <summary>
            源单上正在处理的下游状态项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.SqlInCommand`1">
            <summary>
            一种辅助使用in子句的查询类。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.AED`1">
            <summary>
            Add Edit Delete列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply">
            <summary>
            写状态追踪表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply._Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply._BusinessInfo">
            <summary>
            业务对象元数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply._EventsProxy">
            <summary>
            插件代理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply._headTableId">
            <summary>
            主表Id
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            保存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Delete(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            删除入账申请
            </summary>
            <param name="Id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Audit(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.UnAudit(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            反审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Cancel(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.UnCancel(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Save(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            保存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.NewSave(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            保存入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Delete(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            删除入账申请
            </summary>
            <param name="Id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Audit(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.UnAudit(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            反审核入账申请
            </summary>
            <param name="dataObject">数据包</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.Cancel(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.UnCancel(Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            作废入账申请
            </summary>
            <param name="id">单据Id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.CreateEmptyArticulationSheet(Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,System.Int64)">
            <summary>
            创建一批空勾稽请求记录，审核、反审核时，只需要空的勾稽请求记录
            </summary>
            <param name="target"></param>
            <param name="flag">入账标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.GetLinkObjs(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            获取关联关系集合
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.CreateStateTracker(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            
            </summary>
            <param name="schema"></param>
            <param name="billTracker">反写规则</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.CreateArticulationSheet(Kingdee.BOS.Core.Metadata.StateTracker.StateTrackerElement,Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            创建一批勾稽请求记录
            </summary>
            <param name="target"></param>
            <param name="flag">入账标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.GetDynamicObjectCollection(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.EntityElement.Entity)">
            <summary>
            获取分录集合，
            </summary>
            <param name="dataObject"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.IsNoLink(Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection,System.String)">
            <summary>
            是否存在钩稽上游单据
            </summary>
            <param name="colLinkEntryObjs"></param>
            <param name="stateFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.GetStateTrackerSchema(Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement)">
            <summary>
            获取状态迁移图
            </summary>
            <param name="billTracker"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.GetEntityTableId(System.String)">
            <summary>
            获取TableId
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.CreatePlugInProxy(Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            创建插件代理对象
            </summary>
            <param name="billTracker"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerApply.IsCancelStateTrackerApply(Kingdee.BOS.Core.Metadata.StateTracker.BillTrackerElement,Kingdee.BOS.Orm.DataEntity.DynamicObject[])">
            <summary>
            是否取消勾稽申请，提供插件干预取消勾稽申请
            </summary>
            <param name="dataObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerDbService`1.ReadSnapshot(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0})">
            <summary>
            获取要处理请求的上次快照。
            </summary>
            <param name="sheets">当前的单据列表</param>
            <returns>之前的快照</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerDbService`1.ReadSnapshot(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据单据的识别符读取快照数据。
            </summary>
            <param name="ids">快照识别字符串集合。</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.StateTrackerDbService`1.SaveSnapshot(Kingdee.BOS.App.Core.StateTracker.DataEntities.ArticulationSheetCollection{`0})">
            <summary>
            删除指定的快照。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AutoClose">
            <summary>
            自动关闭的反写逻辑处理单元
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractBillWritebackLogic">
            <summary>
            正常对单据的反写逻辑单元抽象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AbstractBillWritebackLogic.CanWriteback">
            <summary>
            是否可以执行反写,用于检查全局条件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AutoClose.dctCloseLowerLimitConst">
            <summary>
            记录状态关联的关闭下限常量值：通常是字段动态取的
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AutoClose.CustomReadFields">
            <summary>
            自动关闭过程中所需要用到的数据字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AutoClose.AddCloseUserDateField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.String)">
            <summary>
            添加关闭人，关闭日期字段
            </summary>
            <param name="lstFields"></param>
            <param name="fieldKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.AutoClose.SetCloseUserDateValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Boolean)">
            <summary>
            设置关闭人，关闭日期
            </summary>
            <param name="dataEntiry"></param>
            <param name="fieldKey"></param>
            <param name="isColsed"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink">
            <summary>
            钩稽的反写逻辑处理单元
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.CustomReadFields">
            <summary>
            钩稽过程中所需要用到的数据字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.WriteBack(Kingdee.BOS.Core.ExtendedDataEntitySet,System.Collections.Generic.IEnumerable{Kingdee.BOS.App.Core.StateTracker.DataEntities.StateTrackerRow})">
            <summary>
            执行回写
            </summary>
            <param name="sourceEntitySet"></param>
            <param name="filterRowsBySource"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.GetTrackerData(Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.String[],System.Boolean)">
            <summary>
            获取状态追踪表里的数据
            </summary>
            <param name="soucestate"></param>
            <param name="ids"></param>
            <param name="includeAttachStates">是否包含附件状态</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.GetAttachStatesSQL(System.String,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement,System.String,System.String,System.String,Kingdee.BOS.Core.Metadata.StateTracker.BusinessStateElement)">
            <summary>
            获取附加状态SQL，可用量可以是默认可用量 + 一个状态的值（如已退货）
            </summary>
            <param name="trackerTableName"></param>
            <param name="sourceState"></param>
            <param name="nextStatesIdNotNull"></param>
            <param name="lstSourceId"></param>
            <param name="currSQL"></param>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.FillSourceData(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Orm.DataEntity.DynamicObject[],System.String[])">
            <summary>
            填写源单数据
            </summary>
            <param name="entityobj"></param>
            <param name="trackerObjs"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.GetFieldKey(Kingdee.BOS.Core.Metadata.StateTracker.ViewStateElement)">
            <summary>
            获取回写字段
            </summary>
            <param name="viewState"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.SetExtentedData(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.ExtendedDataEntity,System.String[])">
            <summary>
            设置扩展对象数量
            </summary>
            <param name="trackerObjs"></param>
            <param name="entityobj"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.SetAmount(Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            设置数量
            </summary>
            <param name="trackerObjs"></param>
            <param name="field"></param>
            <param name="entityobj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.ConvertLink.LongEquals(System.Object,System.Object)">
            <summary>
            数量相等
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.PushHighLimitCheck">
            <summary>
            超额上限检查
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.PushHighLimitCheck.dctPushHighLimitConst">
            <summary>
            记录状态关联的超额上限常量值：通常是字段动态取的
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.PushHighLimitCheck.DoTaskBefore(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.PushHighLimitCheck.DoTask(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.PushHighLimitCheck.DoTaskLast(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.WriteBackFields">
            <summary>
             根据基本单位数量找到所有需要反写的字段集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.CustomReadFields">
            <summary>
            自动单位换算过程中所需要用到的数据字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.AddQtyRefField(System.Collections.Generic.List{Kingdee.BOS.Core.Metadata.FieldElement.Field},System.String)">
            <summary>
            添加数量及其关联字段
            </summary>
            <param name="fields"></param>
            <param name="key"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.HandleUnitTransferLogic(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.DoTaskBefore(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.DoTask(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.DoTaskLast(Kingdee.BOS.Core.ExtendedDataEntity[])">
            <summary>
            
            </summary>
            <param name="dataEntity"></param>
        </member>
        <member name="P:Kingdee.BOS.App.Core.StateTracker.WriteBackLogicUnit.UnitTransLogic.ControlField">
            <summary>
            控制字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Boolean)">
            <summary>
            保存系统参数对象
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="ignoreWarning"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.SynFieldValue(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            同步字段的值到其他组织中去
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="parameterObjId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.CopyTo(Kingdee.BOS.Context,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            把当前组织的拷贝到选定的组织下
            </summary>
            <param name="ctx"></param>
            <param name="sourceOrgId"></param>
            <param name="targetOrgIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.DeserializeFromString(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            DeserializeFromString
            </summary>
            <param name="info"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.Load(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64,System.Boolean)">
            <summary>
            加载系统参数对象
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="acctpolicyID"></param>
            <param name="bIsRunTime">运行时加载才加入缓存，设计时直接从数据库中获取</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.LoadWithNoCache(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64)">
            <summary>
            不带缓存读取数据
            （参数数据日志使用，防止读取被污染数据，load会加载到缓存里，其他模块慎用）
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="acctpolicyID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamter(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64,System.Boolean)">
            <summary>
            加载系统参数对象
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="acctpolicyID"></param>
            <param name="bIsRunTime">运行时加载才加入缓存，设计时直接从数据库中获取</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.ReloadBaseFieldData(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            重新加载基础资料的数据包
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="dataObj"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamter(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64},System.Int64,System.String,System.String)">
            <summary>
            获得多个组织系统指定属性值参数
            </summary>
            <param name="ctx"></param>
            <param name="orgIds"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamter(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.String,System.Int64)">
            <summary>
            加载系统指定属性值参数
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="parameterObjId"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamterWithConfig(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64)">
            <summary>
            获取系统参数，判断未保存过的话则取Common.Config系统配置返回。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="orgId">组织内码。</param>
            <param name="acctBookId">账簿内码。</param>
            <param name="parameterObjId">参数对象编码。</param>
            <param name="paramNameConfigKeyMapList"> 参数名称及系统配置项名称的映射字典。</param>
            <param name="acctpolicyID">会计政策内码。</param>
            <returns>获取系统参数，判断未保存过的话则取Common.Config系统配置返回。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParameterObjBusinessInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获得系统参数对象的元数据
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamterXML(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64)">
            <summary>
            传入参数对象编码，返回参数对象的XML参数。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="orgId">组织内码。</param>
            <param name="acctBookId">账簿内码。</param>
            <param name="parameterObjId">参数对象编码。</param>
            <param name="acctpolicyID">会计政策内码。</param>
            <returns>返回参数对象的XML参数。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.TryGetParamterXML(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64)">
            <summary>
            传入参数对象编码，返回参数对象的XML参数，如果没拿到则试着生成一个。
            </summary>
            <param name="ctx">登录上下文环境。</param>
            <param name="orgId">组织内码。</param>
            <param name="acctBookId">账簿内码。</param>
            <param name="parameterObjId">参数对象编码。</param>
            <param name="acctpolicyID">会计政策内码。</param>
            <returns>返回参数对象的XML参数。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.IsParamterXMLExist(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.Int64)">
            <summary>
            判断系统参数对象是否存在
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <param name="parameterObjId"></param>
            <param name="acctpolicyID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.CreateNewSystemParameter(Kingdee.BOS.Context,System.String)">
            <summary>
            如果没拿到，试着生成一个，保存到数据中心级次的系统参数中去
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetAllowUseOrgList(Kingdee.BOS.Context,System.String,System.Boolean,System.String)">
            <summary>
            获得某个系统参数可用的组织列表
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <param name="IsAcctBook"></param>
            <param name="strOrgFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetSubAdminUserOrganizations(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获得系统管理员组织列表
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetNormalUserOrganizations(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获得普通用户的组织列表
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetOrganizations(Kingdee.BOS.Context,System.String)">
            <summary>
            取得组织信息
            </summary>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetEnterpriseMBPara(Kingdee.BOS.Context)">
            <summary>
            获取企业微博信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>企业微博信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.DeleteParametersByOrg(Kingdee.BOS.Context,System.Int64)">
            <summary>
            删除组织时，删除系统参数
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.DeleteParametersByAcctBook(Kingdee.BOS.Context,System.Int64)">
            <summary>
            删除账簿时，删除系统参数
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.InitParametersByAcctBook(Kingdee.BOS.Context,System.Int64,System.Int64)">
            <summary>
            创建账簿时，创建系统参数(取调整)
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="acctBookId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.LoadBillGlobalParameterWithCache(Kingdee.BOS.Context,System.String[])">
            <summary>
            加载 单据参数配置 信息 (app端做了缓存)
            </summary>
            <param name="ctx"></param>
            <param name="formIds">FormID(基础资料或单据)</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.ClearCacheOfBillGlobalParameter(Kingdee.BOS.Context,System.String[])">
            <summary>
            清除缓存 -- 单据参数配置 信息(单据参数配置维护时调用)
            </summary>
            <param name="ctx"></param>
            <param name="formIds">FormID(基础资料或单据)</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetCloudContactsBaseField(Kingdee.BOS.Context,System.String)">
            <summary>
             云之家讯通集成，判断联系对象配置
            </summary>
            <param name="ctx"></param>
            <param name="MetaDataId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetBillParameter(Kingdee.BOS.Context,System.String)">
            <summary>
            得到单据参数对象，没有值则返回null。
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetFlexDimFormatType(Kingdee.BOS.Context)">
             <summary>
            得到弹性域维度显示格式
             </summary>
             <param name="ctx"></param>
             <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetParamterValue(Kingdee.BOS.Context,System.Int64,System.Int64,System.String,System.String,System.Int64)">
            <summary>
            加载系统指定属性值参数
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <param name="parameterObjId"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.GetExistOrgIds(Kingdee.BOS.Context,System.String)">
            <summary>
            获取参数设置表中的已存在的组织ID
            用于参数批量同步时，设置组织筛选条件
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId">参数单据ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.SystemParameterService.Save(Kingdee.BOS.Context,System.String,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int64,System.Int64,System.Int64)">
            <summary>
            用于批量同步参数的保存
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId">参数表单ID</param>
            <param name="obj">参数表单数据包</param>
            <param name="orgId">目标组织</param>
            <param name="acctBookId">目标账簿</param>
            <param name="acctpolicyId">会计政策</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.TemporaryTableService">
            <summary>
            删除临时表服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.DeleteTemporaryTableName(Kingdee.BOS.Context)">
            <summary>
            删除Contxtx中对应usertoken的临时表
            但实际上并不进行临时表的删除操作，只是将可以删除的临时表打上标记
            </summary>
            <param name="ctx">上下文</param>
            <returns>执行出错返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.DropAllTemporaryTable(Kingdee.BOS.Context)">
            <summary>
            删除当前日期之前24小时建立的所有临时表和已经标记为可以删除的临时表，即当临时表在一天前创建的，并且对应的状态为不可删除时，也是会被进行清理的
            此操作将实际删除物理表，并且清楚临时表中相应的记录
            改方法只供服务调用，业务代码中不应该进行调用
            </summary>
            <param name="ctx">上下文</param>
            <returns>成功返回true</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            删除临时表的后台服务，定期清理临时表
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.DropTable(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String})">
             <summary>
            删除实际的物理表，请谨慎调用。不提供事务保护，调用者如果需要必须执行封装
             </summary>
             <param name="ctx">上下文</param>
             <param name="tableName">要删除的表名</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.CountNeedDeleteTemporaryTable(Kingdee.BOS.Context)">
            <summary>
            统计需要删除的临时表数量
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.GetNeedDeleteTemporaryTableCount(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            获取当前需要删除临时数量
            默认不刷新的情况下获取20分钟内缓存值，刷新获取最新数量值
            </summary>
            <param name="ctx">上下文</param>
            <param name="isRefresh">是否强制刷新数量；默认为false</param>
            <returns>返回临时表数量值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableService.GetRefreshTimeSpan">
            <summary>
            获取刷新周期
            默认20分钟
            </summary>
            <returns>返回周期timeSpan</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.TemporaryTableUtil">
            <summary>
            临时表服务,临时表名的产生和临时表的维护
            临时表名保存和返回的值为大写，不能调整，否则会由于ORACLE（表名默认为大写）的大小写敏感导致没有被删除的问题
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.CreateTemporaryTableName(Kingdee.BOS.Context)">
            <summary>
            创建临时表名称，系统将统一进行维护,如果ctx和执行语句出现异常将返回空对象名称
            </summary>
            <param name="ctx">上下文，如果为null返回空串</param>
            <returns>返回生成的表名,大写</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.GetUserTransactionId(Kingdee.BOS.Context)">
            <summary>
            获得用户UserTransactionId
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.CreateTemporaryTableName(Kingdee.BOS.Context,System.String[],System.Boolean)">
            <summary>
            根据指定前缀请求临时表名,表名的后缀的27位GUID值是相同的
            注意前缀必须是3位字符
            </summary>
            <param name="ctx"></param>
            <param name="prefixItems"></param>
            <param name="prefixAsTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.CreateTemporaryTableName(Kingdee.BOS.Context,System.Int32)">
            <summary>
            生成指定数目的临时表,并以数组的方式返回，如果ctx对象为空或者执行出错将返回空对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="count">需要获取临时表的个数</param>
            <returns>返回生成的临时表数组</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.DeleteTemporaryTableName(Kingdee.BOS.Context,System.String[])">
            <summary>
            删除指定的临时表，如果ctx为null，tablenames为空集合，返回为true，执行SQL出错时将返回false
            但实际上并不进行临时表的删除操作，只是将可以删除的临时表打上标记
            </summary>
            <param name="ctx">上下文</param>
            <param name="tablenames">需要删除的临时表集合</param>
            <returns>执行成功和ctx为null，tablenames为空集合，返回为true</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.DeleteTemporaryTableName(Kingdee.BOS.Context)">
            <summary>
            删除Contxtx中对应usertoken的临时表
            但实际上并不进行临时表的删除操作，只是将可以删除的临时表打上标记
            </summary>
            <param name="ctx">上下文</param>
            <returns>执行出错返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.GetNeedDeleteTableSql(Kingdee.BOS.Context)">
            <summary>
            获取可以清理表的SQL语句
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.CountNeedDeleteTemporaryTable(Kingdee.BOS.Context)">
            <summary>
            统计需要删除的临时表数量
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.GetNeedDeleteViewSql(Kingdee.BOS.Context)">
            <summary>
            删除序时薄生成的视图，默认当天-1
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.ClearConflictInfo(Kingdee.BOS.Context)">
            <summary>
            清除数据库中已经不存在，但在T_BAS_TEMPORARYTABLENAME存在的表,并且忽略异常 
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.DropAllTemporaryTable(Kingdee.BOS.Context)">
            <summary>
            删除当前日期之前24小时建立的所有临时表和已经标记为可以删除的临时表，即当临时表在一天前创建的，并且对应的状态为不可删除时，也是会被进行清理的
            此操作将实际删除物理表，并且清除临时表中相应的记录
            该方法只供服务调用，业务代码中不应该进行调用
            </summary>
            <param name="ctx">上下文</param>
            <returns>成功返回true</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TemporaryTableUtil.DropTable(Kingdee.BOS.Context,System.Collections.Generic.HashSet{System.String})">
             <summary>
            删除实际的物理表，请谨慎调用。不提供事务保护，如有需要，调用者如果需要必须执行封装
             </summary>
             <param name="ctx">上下文</param>
             <param name="tableName">要删除的表名</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.TimeService">
            <summary>
            时区和时间服务
            可以扩展：
            1. 增加时间触发事件
            2. 时钟定时同步功能，而不是每次从服务器取时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetTimeZones(Kingdee.BOS.Context)">
            <summary>
            获取已经定义的所有时区
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetDateTime(Kingdee.BOS.Context,Kingdee.BOS.KDTimeZone)">
            <summary>
            获取指定时区时间
            </summary>
            <param name="ctx"></param>
            <param name="timezone"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetUserDateTime(Kingdee.BOS.Context)">
            <summary>
            获取当前用户时区时间
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetSystemDateTime(Kingdee.BOS.Context)">
            <summary>
            获得系统时区时间
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetOrgDateTime(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取组织时区时间
            </summary>
            <param name="ctx"></param>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetDataCenterSysTimeZone(Kingdee.BOS.Context)">
            <summary>
            获取账套系统时区
            建账的时候进行设置，并且不可修改
            </summary>
            <param name="ctx">上下文</param>
            <returns>返回当前系统设置时区</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.GetTimeZoneByUTCTimeoffset(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取已经指定utc时间偏差的时区对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="timeoffset">utc时间偏差，分钟数</param>
            <returns>时区对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.TimeService.SetDataCenterSysTimeZone(Kingdee.BOS.Context,Kingdee.BOS.KDTimeZone)">
            <summary>
            设置当前账套时区
            建账的时候进行设置，并且不可修改
            默认230,东八区区时
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetCurrentUserOftenFuncList(Kingdee.BOS.Context)">
            <summary>
            返回当前用户常用功能列表
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetCurrentUserOftenFuncListForStdConsole(Kingdee.BOS.Context,System.String)">
            <summary>
            获取对应子系统下的常用功能列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="subsystemId">领域id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.InitCurUserOftenFuncListFromRole(Kingdee.BOS.Context)">
            <summary>
            根据角色初始化当前用户的常用功能
            </summary>
            <param name="ctx">当前上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetimportantFunList(System.Collections.Generic.List{Kingdee.BOS.Core.Permission.Role},Kingdee.BOS.Orm.DataEntity.DynamicObjectCollection)">
            <summary>
            获取最重要的功能（对于某个角色来说，即排在前面功能最重要）
            </summary>
            <param name="roles">角色列表</param>
            <param name="funcDetails">功能列表</param>
            <returns>最重要的功能</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.CreateOftenFuncDynamicObjectData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32)">
            <summary>
            创建常用功能实体
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="funcDetailObj">常用功能明细信息</param>
            <returns>常用功能实体</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.CreateSubOftenFuncDynamicObjectData(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.Int32)">
            <summary>
            创建工作台常用功能实体
            </summary>
            <param name="ctx">当前上下文</param>
            <param name="funcDetailObj">常用功能明细信息</param>
            <returns>常用功能实体</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetOftenFuntionMetaData(Kingdee.BOS.Context)">
            <summary>
            获得常用功能元数据
            </summary>
            <param name="ctx">当前上下文</param>
            <returns>常用功能元数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.DeleteOftenFunc(Kingdee.BOS.Context,System.Object[])">
            <summary>
            删除常用功能
            </summary>
            <param name="ctx"></param>
            <param name="Ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.DeleteOftenFuncGroup(Kingdee.BOS.Context,System.Object[])">
            <summary>
            删除常用功能所在分组
            </summary>
            <param name="ctx"></param>
            <param name="Ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.DeleteOftenFuncGroupByDetailFucId(Kingdee.BOS.Context,System.String)">
            <summary>
            删除当前用户常用功能所在分组，根据主控菜单ID
            </summary>
            <param name="ctx"></param>
            <param name="detailfunids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.DeleteCurUserOftenByDetailFucId(Kingdee.BOS.Context,System.String)">
            <summary>
            删除当前用户常用功能，根据主控菜单ID
            </summary>
            <param name="ctx"></param>
            <param name="detailfunids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetMaxUnUsedSeq(Kingdee.BOS.Context)">
            <summary>
            获取当前用户新增常用功能的序号，默认取最大值
            </summary>
            <param name="ctx">上下文</param>
            <returns>序号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.NewOftenFunc(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            新增一个常用功能
            </summary>
            <param name="ctx"></param>
            <param name="detailFuncId"></param>
            <param name="seq"></param>
            <returns>还是返回一个OftenFuncDetail比较适用一些</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.GetCurrentCloudAppList(Kingdee.BOS.Context,System.String)">
            <summary>
            返回当前用户常用功能列表
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="ofilter"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserOftenFuncService.DeleteCloudApp(Kingdee.BOS.Context,System.Object[])">
            <summary>
            删除常用功能
            </summary>
            <param name="ctx"></param>
            <param name="Ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.SaveFormParameter(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            保存用户界面参数
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="parameterObjId"></param>
            <param name="sContent"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.IsFormParameterExists(Kingdee.BOS.Context,System.String)">
            <summary>
            判断表单参数是否存在
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId">业务对象</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.IsSettingChanged(Kingdee.BOS.Core.Objects.BillUserParameter.FormParaSetting,Kingdee.BOS.Core.Objects.BillUserParameter.FormParaSetting)">
            <summary>
            窗体设置是否发生变化
            </summary>
            <param name="orginal"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.SaveFormParaSetting(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.BillUserParameter.FormParaSetting)">
            <summary>
            保存单据参数
            </summary>
            <param name="ctx"></param>
            <param name="setting"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.UserParameterService.DenySaveFormSizeList">
            <summary>
            不保存大小的formid集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.LoadFormParaSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取单据设置数据
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.SaveFormParameter(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            按视图保存用户界面参数
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
            <param name="layoutId"></param>
            <param name="sContent"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.LoadFormParameter(Kingdee.BOS.Context,System.String)">
            <summary>
            加载用户界面参数
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="parameterObjId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.LoadFormParameter(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            按视图加载用户界面参数
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
            <param name="layoutId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Int64,System.String)">
            <summary>
            保存用户参数对象
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="parameterObjId"></param>
            <param name="userId"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Int64,Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            保存用户参数对象，支持传操作参数
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="parameterObjId"></param>
            <param name="userId"></param>
            <param name="option"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String,System.Int64)">
            <summary>
            保存用户参数对象--扩展
            </summary>
            <param name="ctx">上下文</param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="parameterObjId"></param>
            <param name="userId"></param>
            <param name="sId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Save(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String,System.Int64,Kingdee.BOS.Orm.OperateOption)">
            <summary>
            保存用户参数对象--扩展，支持传操作参数
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="obj"></param>
            <param name="parameterObjId"></param>
            <param name="sId"></param>
            <param name="userId"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Save(Kingdee.BOS.Context,System.String,System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            保存用户参数对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId"></param>
            <param name="userId">用户ID</param>
            <param name="xml"></param>
            <param name="sKey"></param>
            <param name="bFormatXml">是否要对xml添加Root</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.UpdateUserParameter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            加载某个标志的所有用户参数
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="parameterObjId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Load(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Int64,System.String,System.String)">
            <summary>
            加载用户参数对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">用户参数窗体的bussinessinfo</param>
            <param name="userId">用户ID</param>
            <param name="parameterObjId">这里应该叫做表单ID?正解！</param>
            <param name="sKey">建议传此参数，防止出现默认值不准确的情况</param>
            <returns>参数对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.GetParamerXML(Kingdee.BOS.Context,System.Int64,System.String,System.String)">
            <summary>
            从数据库获取用户参数的Xml
            </summary>
            <param name="ctx"></param>
            <param name="userId"></param>
            <param name="parameterObjId"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Load(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            加载用户参数对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId">这里应该叫做表单ID?</param>
            <param name="userId">用户ID</param>
            <returns>xml文件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.LoadXml(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            加载用户参数对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId">这里应该叫做表单ID?</param>
            <param name="userId">用户ID</param>
            <returns>xml文件</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.GetParamter(Kingdee.BOS.Context,System.Int64,System.String,System.String)">
            <summary>
            加载用户参数对象（似乎有错误，暂时新建个方法）
            </summary>
            <param name="ctx">上下文</param>
            <param name="userId">用户ID</param>
            <param name="parameterObjId">这里应该叫做表单ID?</param>
            <param name="parameterName">用户参数名称</param>
            <returns>指定的用户参数值对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Load(Kingdee.BOS.Context,System.String)">
            <summary>
            加载系统参数对象--扩展
            </summary>
            <param name="ctx">上下文</param>
            <param name="sId">FID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Delete(Kingdee.BOS.Context,System.String)">
            <summary>
            删除系统参数对象--扩展
            </summary>
            <param name="ctx">上下文</param>
            <param name="sId">FID</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Delete(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            删除用户参数对象 --扩展（根据parameterObjId，userId，sKey）
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId">这里应该叫做表单ID?</param>
            <param name="userId">用户ID</param>
            <param name="sKey">键值</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.Delete(Kingdee.BOS.Context,System.String,System.String,System.Int64[])">
            <summary>
            删除用户参数
            </summary>
            <param name="ctx">上下文</param>
            <param name="parameterObjId">参数对象内码</param>
            <param name="sKey">键值</param>
            <param name="withoutUserIds">排除的UserId数组，可以传空，设置后，不会删除数组内的用户参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.BatchGetNextEntryScheme(Kingdee.BOS.Context,System.String)">
            <summary>
            批量获取业务对象所有的下次自动进入方案信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">业务对象标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.BatchClearNextEntryScheme(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{Kingdee.BOS.Orm.DataEntity.DynamicObject})">
            <summary>
            批量清除下次以此方案自动进入的用户设置
            </summary>
            <param name="ctx">上下文</param>
            <param name="formId">业务对象标识</param>
            <param name="objs">设置信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.InsertNewUserParammter(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,System.Int64,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            后台直接保存用户参数，不用通过界面
            </summary>
            <param name="ctx"></param>
            <param name="businessInfo"></param>
            <param name="parameterObjId"></param>
            <param name="userId"></param>
            <param name="myParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.ClearThrowable(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            清除参数方法，会抛异常
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.ClearCache(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo,System.Int64,System.String,System.String)">
            <summary>
            清除用户参数缓存
            </summary>
            <param name="ctx"></param>
            <param name="info"></param>
            <param name="userId"></param>
            <param name="parameterObjId"></param>
            <param name="sKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.ClearCache(Kingdee.BOS.Context,System.String,System.Int64,System.String)">
            <summary>
            清除用户参数缓存
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjId"></param>
            <param name="userId"></param>
            <param name="sKey"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.GetCacheKeyList(System.String,System.Int64,System.String)">
            <summary>
            获取用户设置的缓存key
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.ClearAllUserCache(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.App.Core.UserParameterService.ParameterObj},System.Action{System.Collections.Generic.List{System.Int64}})">
            <summary>
            清除所有对应用户选项和参数的缓存key
            (仅处理用户，针对特殊用户ID特殊处理部分自行调用，如-1全局设置)
            </summary>
            <param name="ctx"></param>
            <param name="parameterObjList"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserParameterService.QueryParametersByKey(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            根据键值获取所有用户的用户参数
            </summary>
            <param name="ctx"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.GetDynamicObjectItemValue``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,``0)">
            <summary>
            获取实体对象的具体属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dynamicObject"></param>
            <param name="propertyName"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.GetDynamicObjectItemValue``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Metadata.FieldElement.Field,``0)">
            <summary>
            根据字段元数据获取实体属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dynamicObject"></param>
            <param name="field"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.SetDynamicObjectItemValue(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Object)">
            <summary>
            设置实体属性值
            </summary>
            <param name="dynamicObject"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.DeserializeFromString(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            反序列化成DynamicObject
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.GetBusinessInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取BusinessInfo
            </summary>
            <param name="ctx"></param>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.DeserializeFromString(Kingdee.BOS.Core.Metadata.BusinessInfo,System.String)">
            <summary>
            获取BusinessInfo
            </summary>
            <param name="info"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.OrmUtil.GetDynObjs(Kingdee.BOS.Context,System.String,System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            得到查询数据包集合
            </summary>
            <param name="ctx"></param>
            <param name="formId"></param>
            <param name="pkName"></param>
            <param name="lstPkId"></param>
            <param name="lstFieldKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.UserParameterUtils.ReturnUserParameterCacheKey(System.Int64,System.String,System.String)">
            <summary>
            返回用户参数缓存项的CacheKey键值，对应缓存项为返回类型为string类型的UserParameterService.Load重载。
            </summary>
            <param name="userId">用户内码。</param>
            <param name="parameterObjId">参数对象内码。</param>
            <param name="key">键值。</param>
            <returns>返回用户参数缓存项的CacheKey键值。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.UserParameterUtils.ReturnUserParameterCacheKey(System.Int64,System.String,System.String,System.String)">
            <summary>
            返回用户参数缓存项的CacheKey键值，对应缓存项为返回类型为DynamicObject类型的UserParameterService.Load重载。
            </summary>
            <param name="userId">用户内码。</param>
            <param name="parameterFormId">业务对象唯一标志（无效，可传递空串）</param>
            <param name="parameterObjId">参数对象内码。</param>
            <param name="key">键值。</param>
            <returns>返回用户参数缓存项的CacheKey键值。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.UserParameterUtils.ReturnUserParameterXmlCacheKey(System.Int64,System.String,System.String)">
            <summary>
            返回用户参数缓存项的CacheKey键值，对应缓存项为返回类型为xml类型的UserParameterService.LoadXml。
            </summary>
            <param name="userId">用户内码。</param>
            <param name="parameterObjId">参数对象内码。</param>
            <param name="key">键值。</param>
            <returns>返回用户参数缓存项的CacheKey键值。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Utils.UserParameterUtils.RuturnUserParameterRegion">
            <summary>
            返回用户参数公共缓存的Region标识，供创建用户参数IKCacheManager使用。
            </summary>
            <returns>返回用户参数公共缓存的Region标识。</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BaseDataNumberValidator.HasRepeatData(Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Core.ExtendedDataEntity,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            是否重复
            </summary>
            <param name="dataEntity"></param>
            <param name="curDataEntity"></param>
            <param name="pkProperty"></param>
            <param name="numberProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BaseDataNumberValidator.VerifyInMemory(Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            在内存中检验；
            </summary>
            <param name="form"></param>
            <param name="numberField"></param>
            <param name="property"></param>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BaseDataNumberValidator.VerifyInDB(Kingdee.BOS.Core.Metadata.FormElement.Form,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Orm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            在数据库中检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BaseDataNumberValidator.PrepareDataTable(Kingdee.BOS.Core.Metadata.FormElement.Form)">
            <summary>
            准备DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BaseDataRefValidator.GetDisplayValue(Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Core.Metadata.FieldElement.Field,Kingdee.BOS.Context,Kingdee.BOS.Core.ExtendedDataEntity,System.String@,System.String@)">
            <summary>
            获取待展示的字段名及字段值。
            </summary>
            <param name="numberField">基础资料编码字段。</param>
            <param name="nameField">基础资料名称字段。</param>
            <param name="ctx">登录上下文。</param>
            <param name="row">扩展实体。</param>
            <param name="content">字段值。</param>
            <param name="caption">字段名。</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.BillExistValidator">
            <summary>
            单据存在校验：在单据保存前，判断单据是否被删除
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BillExistValidator.Initialize(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            在校验前，校验系统调用此方法，以便能够统一收集任务，并批量执行 （可选重载）
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BillExistValidator.InitializeConfiguration(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            在校验前，校验系统调用此方法，以便初始化校验器的配置信息 （可选重载）
            </summary>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BillExistValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            执行校验（必须重载）
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.BillExistValidator.GetOperationName(Kingdee.BOS.Core.Validation.ValidateContext)">
            <summary>
            取操作名称
            </summary>
            <param name="validateContext"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.CMICFormatValidator">
            <summary>
            中国大陆居民身份证验证
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.RegexValidator">
            <summary>
            正则表达式验证
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.RegexValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            校验函数
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.RegexValidator.CheckRegex(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Object)">
            <summary>
            检查是否符合制定的正则表达式
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.RegexValidator.RegexPattern">
            <summary>
            正则表达式规则
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.CMICFormatValidator.CheckDateIsLegal(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.String)">
            <summary>
            判断日期是否小于当前日期
            </summary>
            <param name="field"></param>
            <param name="icNum"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.BillLinkValidator">
            <summary>
            单据关联生成校验
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.BillLinkValidator.CtrlType.Not">
            <summary>
            没有关联生成控制
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.BillLinkValidator.CtrlType.All">
            <summary>
            所有分录关联生成
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.BillLinkValidator.CtrlType.One">
            <summary>
            关联后允许手工添加分录
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.DataRuleValidator">
            <summary>
            数据规则校验器（校验规则），保存时校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.DataRuleValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.DataRuleValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.DataRuleValidator.GetVerifyReValue(System.Collections.Generic.List{System.Object})">
            <summary>
            获得合并后的结果
            </summary>
            <param name="reValues"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.DataRuleValidator.GetRuleXML(System.Int64,System.String,Kingdee.BOS.Context)">
            <summary>
            获得校验规则的xml
            </summary>
            <param name="roleID"></param>
            <param name="objectTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.DataRuleValidator.GetORMKey(System.String)">
            <summary>
            获得ORM标识
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.DataRuleValidator.ConditionValidation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.ScopeValidator">
            <summary>
            字段大小范围校验
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ScopeValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            校验函数
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ScopeValidator.CheckScope(Kingdee.BOS.Core.Metadata.FieldElement.Field,System.Object)">
            <summary>
            验证值是否在范围内
            </summary>
            <param name="field">待验证的字段</param>
            <param name="value">待验证的值</param>
            <returns>
            true:不通过
            false:通过
            </returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.ConditionValidator">
            <summary>
            条件校验器；
            校验是否符合删除限制条件，如果符合，则不允许删除；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ConditionValidator.GetAlertMessage(Kingdee.BOS.Orm.DataEntity.DynamicObject,Kingdee.BOS.Core.Validation.ValidateContext,System.String)">
            <summary>
            获取提示信息，支持变量（与操作成功后提示保持一致）
            </summary>
            <param name="dataEntity"></param>
            <param name="validateContext"></param>
            <param name="alertInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ConditionValidator.Verify(Kingdee.BOS.Core.Metadata.Util.VerifyExpressionParameter)">
            <summary>
            校验表达式是否成立
            </summary>
            <param name="obj"></param>
            <param name="businessInfo"></param>
            <param name="sFormula">表达式</param>
            <param name="formulaIsOK">表达式是否已经验证，无须重复校验</param>
            <param name="funcLib"></param>
            <param name="ctx"></param>
            <param name="formulaOK">输出已经校验过的表达式</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ConditionValidator.GetBillPKId(Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获取单据内码
            </summary>
            <param name="row">单据体数据包</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.ConditionValidator.Filter">
            <summary>
            删除条件
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator">
            <summary>
            分录多行合计检查
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.GetEntityTempTableSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem@)">
            <summary>
            生成创建临时表的SQL脚本。
            </summary>
            <param name="ctx"></param>
            <param name="validateContext"></param>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.GetEntityInsertSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem)">
            <summary>
            生成往临时表插入实体数据的SQL脚本。
            </summary>
            <param name="ctx"></param>
            <param name="validateContext"></param>
            <param name="dataEntities"></param>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.GetEntitySelectSql(Kingdee.BOS.Context,Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem)">
            <summary>
            生成查询临时表汇总数据的SQL脚本。
            </summary>
            <param name="ctx"></param>
            <param name="validateContext"></param>
            <param name="dataEntities"></param>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.HasLocaleField">
            <summary>
            是否存在多语言字段。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.TempEntityTableName">
            <summary>
            临时表格名称。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.TempEntityLocaleTableName">
            <summary>
            待比较实体的多语言表格名称。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.TempRowNoColumnName">
            <summary>
            临时表序号列。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.InsertFieldList">
            <summary>
            临时表查询插入时待插入字段集合。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.LocaleFieldJoinCondition">
            <summary>
            存在多语言字段时，表联查子句。
            但是目前看代码有点问题，如果校验器加在保存操作上，实体多语言表可能还没数据，会过滤不出来数据。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.FieldWhereCondition">
            <summary>
            存在多语言字段时，WHERE后对语言类型的拼接条件。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.LocaleFields">
            <summary>
            多语言字段集合，一般只会是分组列。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.EntryEntity.MulRowSumValidator.DataItem.OtherFields">
            <summary>
            非多语言字段集合，可能是分组列跟合计列。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.FieldRepeatValidator">
            <summary>
            字段不能重复的校验器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.TextLegalityValidator">
            <summary>
            表单文本合法性验证
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.TextLegalityValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            输入文本验证
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.TextLegalityValidator.IsEnable(Kingdee.BOS.Context)">
            <summary>
            是否启用了关键字检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.IsPushValidator">
            <summary>
            下推校验执行类 ： 保存、删除前，校验被删除的分录行，是否下推过；
            本校验器是强制加载的，可以在保存操作上附加插件 Kingdee.BOS.App.ServicePlugIn.BusinessFlow.RemovePushValidatorPlugIn 强制去掉此检查
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator._formOperation">
            <summary>
            当前操作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator._opType">
            <summary>
            当前操作类型枚举值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator._businessInfo">
            <summary>
            当前单据完整的元数据包
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.IsPushValidator.Initialize(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            在校验前，校验系统调用此方法，初始化校验器
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.IsPushValidator.InitializeConfiguration(Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            在校验前，校验系统调用此方法，以便初始化校验器的配置信息 （可选重载）
            </summary>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.IsPushValidator.Validate(Kingdee.BOS.Core.ExtendedDataEntity[],Kingdee.BOS.Core.Validation.ValidateContext,Kingdee.BOS.Context)">
            <summary>
            执行校验（必须重载）
            </summary>
            <param name="dataEntities"></param>
            <param name="validateContext"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.IsPushValidator.EntityRowsIsPush(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.Dictionary{System.Int64,Kingdee.BOS.Core.ExtendedDataEntity})">
            <summary>
            校验指定实体中，被删除的数据行，是否下推过
            </summary>
            <returns>下推过的单据内码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.IsPushValidator.LoadEntityIds(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.EntityElement.Entity,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            到数据库中加载单据的分录内码，以及对应的单据内码
            </summary>
            <param name="info"></param>
            <param name="entity"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.IsPushValidator.OpType">
            <summary>
            当前操作类型，枚举需要执行校验的操作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator.OpType.Other">
            <summary>
            其他操作，无需校验行是否下推
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator.OpType.Save">
            <summary>
            保存操作，需要校验被删除的行是否下推
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Validation.IsPushValidator.OpType.Delete">
            <summary>
            删除操作，直接判断全部行是否下推过
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.MailFormatValidator">
            <summary>
            邮件格式合法性效验
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.OrgValidator">
            <summary>
            组织校验器
            只能选择有权限的组织才能保存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.OrgValidator.GetOrgFieldKey(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            获得组织字段的key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.OrgValidator.GetOrgInfo(System.String,Kingdee.BOS.Core.ExtendedDataEntity)">
            <summary>
            获得组织ID
            </summary>
            <param name="orgFieldKey"></param>
            <param name="dataEntitie"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.OrgValidator.GetPermissionOrg(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            返回当前用户拥有某个权限的所有组织信息
            </summary>
            <param name="ctx"></param>
            <param name="BusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.RunningTimeConfigValidator">
            <summary>
            这里主要是做一些运行时配置校验
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.SaveRuleValidator">
            <summary>
            单据保存规则校验器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Validation.SaveRuleValidator.Level">
            <summary>
            返回/设置 如果验证未通过，设置错误的级别是多少
            </summary>
            <remarks>
            此属性并不是总是和实际的结果一致，例如某个校验器校验出多个错误，而某些错误会根据
            具体的商业规则强制使用不同的错误级别。
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.RequiredValidator">
            <summary>
            字段是必填项校验器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Validation.StringFormatValidator">
            <summary>
            通过指定正则表达式校验字符串格式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Validation.ValidatorsHelper.GetBudgetCtrlValidator(Kingdee.BOS.App.Core.AbstractOprerationService)">
            <summary>
            获取预算控制器实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.AnalyzeCommonFilter">
            <summary>
            解析CommonFilter控件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.AnalyzeCommonFilter.GetFilterString(Kingdee.BOS.Context,Kingdee.BOS.App.Core.Warn.WarnHelper,System.String,Kingdee.BOS.Core.Warn.WarnCondition,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            创建ListFilterModel add by leo 20130931
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.AnalyzeCommonFilter.CreateFilterField(Kingdee.BOS.Core.Metadata.QueryElement.SelectField,Kingdee.BOS.Core.Metadata.FieldElement.FieldAppearance,Kingdee.BOS.Context)">
            <summary>
            add by leo 20130930
            </summary>
            <param name="selectField"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.AnalyzeCommonFilter.GetFormFilterString(Kingdee.BOS.Context,Kingdee.BOS.Core.Metadata.FormMetadata,Kingdee.BOS.Core.Warn.WarnCondition,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            创建ListFilterModel add by ljq
            </summary>
            <param name="ctx"></param>
            <param name="formMetadata"></param>
            <param name="condition"></param>
            <param name="queryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ArithmeticGoalString.TranslateExpression(Kingdee.BOS.Core.Warn.Message.WarnMessage,System.String)">
            <summary>
            将表达式从变量值转换为变量名显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ArithmeticGoalString.GetArithExpresstion(System.String)">
            <summary>
            从左开始匹配括号对，支持匹配 ( xx ), ( xx ) ( ( xx ) ( xx ) ), ( xx )) ,但不检查括号是否成对出现
            </summary>
            <param name="strGoalString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ArithmeticGoalString.Evaluate(System.String,System.String)">
            <summary>
            字符串支持四则运算 add by leo 20130923
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.ExceptionProcessor">
            <summary>
            集中处理方案解析、条件构造、消息生成已经消息存档过程中所发生的异常。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.ParseKDExceptionOld(Kingdee.BOS.KDException,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            
            </summary>
            <param name="err"></param>
            <param name="warnMessage"></param>
            <param name="executeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.ParseKDException(Kingdee.BOS.KDException,Kingdee.BOS.Core.Warn.Message.WarnMessage,System.String@)">
            <summary>
            
            </summary>
            <param name="err"></param>
            <param name="warnMessage"></param>
            <param name="executeMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.TryParseException(System.Exception,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            try parse exception
            </summary>
            <param name="ex"></param>
            <param name="runResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.ParseKDException(Kingdee.BOS.KDException,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            
            </summary>
            <param name="kdErr"></param>
            <param name="warnMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.ParseKDExceptionMutil(Kingdee.BOS.Context,Kingdee.BOS.KDException,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            解析业务预警业务异常
            </summary>
            <param name="kdErr">kd异常</param>
            <param name="warnMessage">预警消息</param>
            <param name="runResult">预警结果</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.ExceptionProcessor.SetRealMessage(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            设置真实提示信息，接收人为空
            </summary>
            <param name="ctx"></param>
            <param name="warnMessage">warnMessage</param>
            <param name="runResult">结果</param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.GroupByMergeTitle.m_groupByItems">
            <summary>
            依此栏位进行分组 - add by leo 20130913
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.GroupByMergeTitle.UniqueTheIndexColumnNameForBill(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            为了使得增加的栏位标示符唯一
            </summary>
            <param name="messageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.GroupByMergeTitle.UniqueTheIndexColumnNameForRpt(Kingdee.BOS.Core.Warn.Message.WarnMessageItem)">
            <summary>
            为了使得增加的栏位标示符唯一
            </summary>
            <param name="messageItem"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.GroupByMergeTitle.GetAllKeyWords(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem})">
            <summary>
            找出所有的分组关键字
            </summary>
            <param name="mergeMsgList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.GroupByMergeTitle.GetKeyWordsList(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.String)">
            <summary>
            根据栏位，找出分组关键字
            </summary>
            <param name="mergeMsgList"></param>
            <param name="strGroupField"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct">
            <summary>
            使用权限隔离,对消息实体进行重新构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.CreateMessageEntityList(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Object)">
            <summary>
            创建消息实体
            </summary>
            <param name="e"></param>
            <param name="WarnDataSourceBusinessInfo"></param>
            <param name="queryInfo"></param>
            <param name="we"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GetBusinessForm(System.String)">
            <summary>
            获得业务对象表格 add by leo 20130828
            </summary>
            <param name="strFormId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GoReportFlow(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,Kingdee.BOS.Core.Metadata.BusinessInfo,System.String,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Object)">
            <summary>
            执行报表流程
            </summary>
            <param name="e"></param>
            <param name="WarnDataSourceBusinessInfo"></param>
            <param name="rulePar"></param>
            <param name="queryInfo"></param>
            <param name="we"></param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GoBillFlow(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,System.String,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,System.Object)">
            <summary>
            执行业务对象创建预警消息实体之流程 add by leo
            </summary>
            <param name="e"></param>
            <param name="rulePar"></param>
            <param name="queryInfo"></param>
            <param name="we"></param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.CheckPermission(System.String,System.String,System.String@)">
            <summary>
            通过传入用户id 与 业务对象id，获取该用户的数据规则，并转换为sql条件返回 add by leo 20130828
            </summary>
            <param name="we"></param>
            <param name="strDataSourceId"></param>
            <param name="strUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.BeforeCreateMessageEntity(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs)">
            <summary>
             add by leo
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.DoCreateReportMessageEntitys(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,System.Data.DataTable,Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建报表消息实体 add by leo 20130826
            </summary>
            <param name="e"></param>
            <param name="dt"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.DoCreateBilMessageEntitys(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,Kingdee.BOS.Orm.DataEntity.DynamicObject[],Kingdee.BOS.WorkflowMember.UserMember)">
            <summary>
            创建表单的消息实体 add by leo 20130826
            </summary>
            <param name="e"></param>
            <param name="WarnObjectDynamicObjects"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GetFilterString(System.String,System.String)">
            <summary>
            拼接过滤条件 add by leo 20130828
            </summary>
            <param name="strOldCluse"></param>
            <param name="strNewCdt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GetMatchValue(System.String,System.String)">
            <summary>
            匹配 add by leo 20130828
            </summary>
            <param name="strGoal"></param>
            <param name="strRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GetBillMessageReceivers(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs)">
            <summary>
            (for bill)获得初始用户接收列表，此时未实施数据规则过滤 add by leo
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.MessageEntityConstruct.GetReportMessageReceivers(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs)">
            <summary>
            (for report)获得初始用户接收列表，此时未实施数据规则过滤 add by leo
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.SUMMergeTitle">
            <summary>
            汇总
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.SUMMergeTitle.DoIt(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.Collections.Generic.List{System.String})">
            <summary>
            汇总求和
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.SUMMergeTitle.DoIt(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnRowData},System.Collections.Generic.List{System.String})">
            <summary>
            汇总求和
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnHelper">
            <summary>
            WarnHelper.LightApp
            监控轻应用逻辑 20140306 beihua_lei
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnHelper.warnDataSourceMetadata">
            <summary>
            预警数据源
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnHelper.warnDataKeyValueFieldNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.LoadDynamicObjectData(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            加载满足预警条件的预警数据
            </summary>
            <param name="info"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.SetSelectEntityTables(Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            
            </summary>
            <param name="queryInfo"></param>
            <param name="sqlBuilderParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.GetSelectFieldKeys(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.Warn.Message.WarnMessageVeriable})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="messageVariablies"></param>
            <param name="isWarnObjectForm"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.LoadReportData(Kingdee.BOS.Core.Metadata.BusinessInfo,Kingdee.BOS.Core.Report.RptParams)">
            <summary>
            加载报表数据
            </summary>
            <param name="info"></param>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.CreateRptParams(System.Int32)">
            <summary>
            创建RptParams
            </summary>
            <param name="modeTypeSubId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.CreateVariableValues``1(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,``0)">
            <summary>
            创建变量键值对
            </summary>
            <param name="e"></param>
            <param name="warnObj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.AddWarnSolutionVariableValues(Kingdee.BOS.Core.Warn.PlugIn.Args.AfterParseWarnMessageEventArgs,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加预警方案变量键值对
            </summary>
            <param name="e"></param>
            <param name="variables"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.GetFormMetadata(System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.#ctor(Kingdee.BOS.Context,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
            <param name="warnObjcetid">预警对象内码</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.GetMobileVariableSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取移动预警变量设置
            </summary>
            <param name="ctx"></param>
            <param name="fmessageid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.GetXunTongPublicNum">
            <summary>
            获得讯通公共号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.CheckPermission(System.String)">
            <summary>
            判断当前用户的权限
            </summary>
            <param name="ctx"></param>
            <param name="strDataSourceId"></param>
            <param name="strPermissionItemIs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.CheckProcessPermission(System.String@)">
            <summary>
            检查是否有权处理消息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.CheckMessageProcessStatus(System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage},System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage},System.String@)">
            <summary>
            检查消息是否已经被处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.DoPlugInPrecess(Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Warn.PlugIn.Args.ProcessWarnMessageEventArgs,System.String@)">
            <summary>
            启用插件对消息进行处理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.UpdateProcessStatus(System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage},System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage},Kingdee.BOS.Core.DynamicForm.IOperationResult,Kingdee.BOS.Core.Warn.PlugIn.Args.ProcessWarnMessageEventArgs,System.String@)">
            <summary>
            更新处理状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.ShowProcessStatusMessage(Kingdee.BOS.Core.Warn.PlugIn.Args.ProcessWarnMessageEventArgs,System.String@)">
            <summary>
            显示消息的处理状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnHelper.GetMessageEventArgs(System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage},System.Collections.Generic.List{Kingdee.BOS.App.Core.Warn.WarnInsideMessage}@,Kingdee.BOS.Core.DynamicForm.IOperationResult@)">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnHelper.WarnObjectBusinessInfo">
            <summary>
            预警的业务对象业务模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnHelper.WarnSolutionBusinessInfo">
            <summary>
            预警方案业务模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnHelper.WarnDataSourceMetadata">
            <summary>
            预警数据源业务模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnHelper.WarnDataKeyValueFieldNames">
            <summary>
            数据源关键值字段名称集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.Warn.WarnHelper.IsDataSourceReport">
            <summary>
            数据源是否是报表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.Warn.WarnParser">
            <summary>
            预警解析器，处理周期解析，条件解析，信息发送等
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParser.m_authorizationControl">
            <summary>
            数据权限隔离 - add by leo 20130910
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParser.m_groupByItems">
            <summary>
            依此栏位进行分组 - add by leo 20130913
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParser.m_sumItems">
            <summary>
            依此栏位进行汇总 - add by leo 20130913
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.Warn.WarnParser.testUserids">
            <summary>
            单元测试用户id集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.RegisterPlugInProxy">
            <summary>
            注册插件代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.GetFormMetadata(System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.TestExcuteWarnParse(System.Collections.Generic.List{System.Int64})">
            <summary>
            单元测试
            </summary>
            <param name="testUserids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.ExcuteWarnParse">
            <summary>
            执行预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.ExcuteParse">
            <summary>
            执行预警解析
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.AddFSeqToQyryInofo(Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo)">
            <summary>
            拼接FSEQ的查询条件，查询出序号栏位 add by leo 20130926 
            </summary>
            <param name="warnMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.FormartFilterString(System.String,Kingdee.BOS.Core.Metadata.QueryElement.QueryInfo,Kingdee.BOS.Core.SqlBuilder.SqlBuilderParameter)">
            <summary>
            格式化传入，转换{实体名.标识}，为了预防单据中有两个相同字段 add by leo 20130925 
            </summary>
            <param name="strFilterString"></param>
            <param name="queryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.CreateWarnCondition">
            <summary>
            创建预警条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.CreateWarnMessage">
            <summary>
            获取消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.AddCalculateItems(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            添加分组项与汇总项 add by leo 20130913
            </summary>
            <param name="liGroupItems"></param>
            <param name="liSumItems"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.ReplaceString(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            替换字符串 add by leo 20130913
            </summary>
            <param name="strMergeMessageTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.DistilCalculatedItems(System.String,System.String)">
            <summary>
            提前出需要需要的栏位 add by leo 20130913
            </summary>
            <param name="strMergeMessageTitle"></param>
            <param name="strMatchRule"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.CreateWarnServicePlugIns(Kingdee.BOS.Core.Metadata.BusinessInfo)">
            <summary>
            CreateWarnServicePlugIns
            </summary>
            <param name="billBusinessInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.SetMessageSendUserIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            设置发送消息用户
            当发送消息用户默认没有时，使用此用户id列表
            </summary>
            <param name="userids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.SetWarnExecuteType(Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            设置执行类型
            </summary>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnParser.ParseExecute(Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            解析监控方案计划任务
            </summary>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnReader.GetWarnScheduleList(System.Nullable{System.Boolean},System.Nullable{Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType},System.String[])">
            <summary>
            获得预警执行计划列表
            </summary>
            <param name="isRun">是否启动</param>
            <param name="warnIds"></param>
            <param name="executeType">执行方式</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnReader.UpdateExecuteTime(System.Collections.Generic.List{Kingdee.BOS.Core.Schedule})">
            <summary>
            更新将要执行的方案的下次执行时间
            </summary>
            <param name="lstSchedules"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnReader.PackageWarnScheduleInfo(System.Data.IDataReader,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            打包预警相关的信息
            </summary>
            <param name="reader"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnReader.CreateWarnSchedule(Kingdee.BOS.Context)">
            <summary>
            创建预警方案执行计划
            </summary>
            <remarks>
            编号：WP0018121 修改人：李建强 发放补丁：周期综合补丁(PT134511) 
            发布时间：2019年05月09日 名称：功能改进：业务监控优化不依赖执行计划（业务预警服务提供者）
            </remarks>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnScheduleHelper.UpdateScheduleNextExecuteTime(Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划执行的时间
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnScheduleService.GetAllScheduleList(Kingdee.BOS.Context)">
            <summary>
            获得所有预警计划列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnScheduleService.UpdateStatus(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划执行状态
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnScheduleService.UpdateScheduleNextExecuteTime(Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划下一次执行的时间
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnScheduleService.UpdateExecuteTime(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            更新执行时间，需调用WarnWriter中更新执行时间函数完成；
            即更新预警周期中的执行时间；
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.WarnService">
            <summary>
            预警服务，执行方案列表中启动了的预警信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType,System.String[])">
            <summary>
            执行预警计划
            </summary>
            <param name="ctx"></param>
            <param name="exeCuteType">执行方式</param>
            <param name="warnIds">待执行的预警方案，为空则执行全部</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            IScheduleService
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            执行执行计划
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划</param>
            <param name="exeCuteType">执行方式</param>
            <param name="parameters">执行参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.RunSchedule(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            执行执行计划
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行计划</param>
            <param name="exeCuteType">执行方式</param>
            <param name="parameters">执行参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.TestRun(Kingdee.BOS.Context,System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            测试
            </summary>
            <param name="ctx"></param>
            <param name="warnId"></param>
            <param name="userids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnMessageSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取消息设置
            </summary>
            <param name="ctx"></param>
            <param name="msgSetId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetFormMetadata(Kingdee.BOS.Context,System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.DeleteWarnExecuteResult(Kingdee.BOS.Context,System.String)">
            <summary>
            删除预警执行结果
            </summary>
            <param name="ctx"></param>
            <param name="warnExecuteResultid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnScheduleById(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警任务
            </summary>
            <param name="ctx"></param>
            <param name="warnId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.DeleteWarnSet(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            删除预警方案设置
            注：预警方案列表中删除预警方案时调用
            </summary>
            <param name="ctx"></param>
            <param name="warnIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateProcessStatus(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            更新处理状态
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.ProcessWarnMessage(Kingdee.BOS.Context,System.String,System.String,System.String@)">
            <summary>
            处理预警消息
            </summary>
            <param name="ctx"></param>
            <param name="detailids">预警详细消息ID，多个用,号隔开</param>
            <param name="warnObjcetid">预警对象内码</param>
            <param name="msg">提示消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnMessageDetails(Kingdee.BOS.Context,System.String)">
            <summary>
            获取预警消息明细数据
            </summary>
            <param name="ctx"></param>
            <param name="fmessageid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetMobileVariableSetting(Kingdee.BOS.Context,System.String)">
            <summary>
            获取移动预警变量设置
            </summary>
            <param name="ctx"></param>
            <param name="fmessageid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.ExecuteDataClearTask(Kingdee.BOS.Context)">
            <summary>
            清除预警历史数据任务执行
            </summary>
            <param name="ctx">上下文</param>
            <returns>清除成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDetailShowSetFid(Kingdee.BOS.Context,System.String)">
            <summary>
            获取监控明细显示设置FID
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <returns>FID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnObjectByWarnid(Kingdee.BOS.Context,System.String)">
            <summary>
            根据监控方案id获取监控对象ID（设计器配置的对象）
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <returns>监控对象ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDetailSetIDByWarnID(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案id获取明细显示设置FID
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <returns>FID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDisplayFieldByWarnID(Kingdee.BOS.Context,System.String)">
            <summary>
            根据warnid获取设置的字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <returns>字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDisplayFieldValueList(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案id获取设置的字段值
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDisplayFieldValueListByMsgID(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            根据方案id、消息ID（FMESSAGEID）获取设置的字段值--（旧版监控消息打开监控消息列表时用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <param name="messageid">messageid</param>
            <returns>方案设置的字段、值List</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDisplayFieldOrderList(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案id获取设置的字段排序方式
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetMsgCountByUserAndGroup(Kingdee.BOS.Context,System.String,System.String,System.Int64)">
            <summary>
            查询某个方案某个用户，消息分组下的消息数
            </summary>
            <param name="ctx">ctx</param>
            <param name="warnid">方案ID</param>
            <param name="userMsgGroupID">用户分组ID</param>
            <param name="userid">用户id</param>
            <returns>消息数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnCardShowSetIDByWarnID(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案id获取卡片显示设置FID
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <returns>FID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnCardSetFieldByWarnID(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案ID获取监控卡片设置显示字段
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <returns>监控卡片设置显示字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.DeleteWarnCardMsg(Kingdee.BOS.Context,System.String,System.Int64)">
            <summary>
            删除监控卡片消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <param name="userid">用户id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserWarnCardMsgWarnList(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取用户的监控卡片消息方案ID列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userid">用户id</param>
            <returns>有配置卡片方案id列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateWarnUserCard(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnCardOption)">
            <summary>
            更新用户监控卡片表
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardOption">可选方案卡片</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.IsShowWarnUserCard(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnCardOption)">
            <summary>
            是否勾选了添加监控卡片显示
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardOption">可选方案卡片</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserWardCardDataCollection(Kingdee.BOS.Context)">
            <summary>
            获取用户监控卡片消息
            </summary>
            <param name="ctx">上下文</param>
            <returns>监控卡片消息集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserWarnCard(Kingdee.BOS.Context,System.String)">
            <summary>
            获取某个方案用户监控卡片T_BAS_WARNUSERCARD
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案ID</param>
            <returns>用户监控卡片-卡片ID、卡片是否展示</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserWarnCardByCardId(Kingdee.BOS.Context,System.Int64)">
            <summary>
            获取某个方案用户监控卡片T_BAS_WARNUSERCARD
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardid">卡片ID</param>
            <returns>用户监控卡片-卡片ID、卡片是否展示</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnCardDetailModel(Kingdee.BOS.Context,System.String)">
            <summary>
            获取监控卡片明细消息模型-轻应用接口用
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageId">消息ID</param>
            <returns>监控卡片明细消息模型集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserWarnCardList(Kingdee.BOS.Context)">
            <summary>
            获取某个用户监控卡片T_BAS_WARNUSERCARD-轻应用接口用
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户监控卡片-卡片ID、卡片是否展示</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateWarnCardStatus(Kingdee.BOS.Context,System.Int64,System.String)">
            <summary>
            更新设置指定卡片启用状态-轻应用接口用
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardid">卡片id</param>
            <param name="status">启用状态</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWardCardDataCollection(Kingdee.BOS.Context,System.String)">
            <summary>
            获取用户监控卡片消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="processStatus">处理状态 '0'-未处理，'1'-已处理，'2'-全部</param>
            <returns>监控卡片消息集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDynamicModel(Kingdee.BOS.Context,System.String)">
            <summary>
            获取单个监控动态数据模型
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案ID</param>
            <returns>单个监控动态数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.InsertWarnUserCard(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnCardOption)">
            <summary>
            插入用户监控卡片表-卡片消息发送时调用
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardOption">可选方案卡片</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetTopWarnMsgAmtModel(Kingdee.BOS.Context,System.DateTime)">
            <summary>
            获取前4张卡片方案近5天的消息数量模型
            </summary>
            <param name="ctx">上下文</param>
            <returns>方案接收消息数模型集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnCardModelByWarnid(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案id获取用户监控卡片T_BAS_WARNUSERCARD模型-轻应用接口用
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">方案id</param>
            <returns>用户监控卡片模型</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateMonitorCardDetail(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.MonitorCardDetailModel})">
            <summary>
            更新用户我的监控卡片，先清空后插入
            </summary>
            <param name="ctx">上下文</param>
            <param name="monitorCardList">监控卡片列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetMsgCountAndUrl(Kingdee.BOS.Context,System.String)">
            <summary>
            获取消息数量和跳转Url
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnId">方案ID</param>
            <returns>返回消息数量和跳转界面所需参数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetUserUnReadWardCardDataCollection(Kingdee.BOS.Context)">
            <summary>
            获取用户监控卡片未读消息-轻应用接口用
            </summary>
            <param name="ctx">上下文</param>
            <returns>监控卡片消息集合</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnParamConfigInfo(Kingdee.BOS.Context)">
            <summary>
            获取业务监控参数设置
            </summary>
            <param name="ctx">上下文</param>
            <returns>业务监控参数设置消息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.SaveWarnParamConfig(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.WarnParamConfigInfo)">
            <summary>
            保存业务监控参数设置（保存到系统参数）
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">业务监控配置信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.InsertH5LayoutCardInfo(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnH5LayoutCardInfo,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            插入H5主页卡片表-卡片消息发送时调用
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardInfo">可选方案卡片</param>
            <param name="useridList">用户id列表</param>
            <param name="roleidList">角色id列表</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateCardInfoUserRole(Kingdee.BOS.Context,Kingdee.BOS.Core.Warn.Message.WarnH5LayoutCardInfo,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            更新卡片分配用户、卡片分配角色表
            </summary>
            <param name="ctx">上下文</param>
            <param name="cardInfo">监控方案卡片布局</param>
            <param name="useridList">用户id列表</param>
            <param name="roleidList">角色id列表</param>
            <param name="id">H5卡片ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateReadedWarnExecRemind(Kingdee.BOS.Context,System.String)">
            <summary>
            更新已读不合理方案提醒
            </summary>
            <param name="ctx">上下文对象</param>
            <param name="filter">过滤条件</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateSqlRptWarnCondition(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.Warn.WarnSqlRptCondition)">
            <summary>
            更新SQL报表监控条件
            </summary>
            <param name="ctx">上下文</param>
            <param name="sqlRptCondition">监控条件模型</param>
            <returns>返回值 0-失败 1-成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.QuerysqlRptCondition(Kingdee.BOS.Context,System.String)">
            <summary>
            根据id获取SQL报表监控条件
            </summary>
            <param name="ctx">上下文</param>
            <param name="id">ID</param>
            <returns>SQL报表监控条件对象</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.ExecuteWarnObjectSyncTask(Kingdee.BOS.Context)">
            <summary>
            监控对象同步任务执行
            </summary>
            <param name="ctx">上下文</param>
            <returns>同步成功返回true；否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnDisFieldValueListByUserID(Kingdee.BOS.Context,System.String,System.String,System.Int64)">
            <summary>
            根据方案id、消息ID（FMESSAGEID）获取设置的字段值--（新监控消息列表邮件用）
            </summary>
            <param name="ctx">上下文</param>
            <param name="warnid">warnid</param>
            <param name="messageid">messageid</param>
            <param name="userID">userID</param>
            <returns>方案设置的字段、值List</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnSolutionInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            根据方案ID获取业务监控相关信息
            </summary>
            <param name="ctx">ctx</param>
            <param name="warnId">方案ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetDataSourceID(Kingdee.BOS.Context,System.String)">
            <summary>
            获取业务监控对象元数据ID
            </summary>
            <param name="strFormId">方案监控对象ID</param>
            <returns>元数据ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateProcessStatusByDetailGroupId(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            根据明细消息分组ID，更新处理状态
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetDetailMsgGroupIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取明细消息分组ID列表
            </summary>
            <param name="ctx"></param>
            <param name="ids">明细消息内码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateProcessStatusByMessageId(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            根据MessageId更新消息处理状态
            </summary>
            <param name="ctx"></param>
            <param name="messageId">messageId</param>
            <param name="isUpdateUserGroupMsg">是否同时更新相同用户分组ID的消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateStatusByMessageId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据MessageId更新消息已读状态
            </summary>
            <param name="ctx">ctx</param>
            <param name="messageId">messageId</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateMessageSetCanProcessStatus(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            更新消息设置支持处理状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="messageSetIds">消息设置ID</param>
            <param name="status">0-不支持处理 1-支持处理</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetHomeWarnMsgDataModels(Kingdee.BOS.Context,System.Int32)">
            <summary>
            获取主页监控消息卡片消息数据
            </summary>
            <param name="ctx">ctx</param>
            <param name="count">前几条</param>
            <returns>主页监控消息卡片数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetWarnMergeMessageCount(Kingdee.BOS.Context)">
            <summary>
            获取用户待处理合并消息数量
            </summary>
            <param name="ctx">ctx</param>
            <returns>数量</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.GetHomeWarnMsgDataModelByMessageId(Kingdee.BOS.Context,System.String)">
            <summary>
            获取主页监控消息卡片消息数据
            </summary>
            <param name="ctx">ctx</param>
            <param name="messageId">消息Id</param>
            <returns>主页监控消息卡片数据</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WarnService.UpdateProcessStatusByFid(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            根据明细消息内码更新消息处理状态
            </summary>
            <param name="ctx">ctx</param>
            <param name="messageFids">明细消息内码</param>
            <returns>result</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.UpdateExecuteTime(Kingdee.BOS.Core.Schedule)">
            <summary>
            更新方案的执行时间
            </summary>
            <param name="ctx"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.SaveWarnMessageSet(System.String,System.String)">
            <summary>
            保存预警消息设置
            </summary>
            <param name="fid"></param>
            <param name="messageSetXml"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.UpdateAfterResendMessage(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            修改预警执行情况详情
            </summary>
            <param name="fdetailids"></param>
            <param name="fsendstatus"></param>
            <param name="fremark"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.SendInsideMessage(Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.App.Core.Warn.WarnHelper,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            发送并存储消息，产生不同纬度汇总标题 - add by leo 20130916
            </summary>
            <param name="warnMessage"></param>
            <param name="warnSchedule"></param>
            <param name="mroupByItems"></param>
            <param name="_sumItems"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.SendInsideMessage(Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.App.Core.Warn.WarnHelper,System.Collections.Generic.List{System.String})">
            <summary>
            发送并存储消息，产生唯一汇总标题
            </summary>
            <param name="warnMessage"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.RecordExecuteResult(Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnScheduleExecuteTimeSpan,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus,System.String,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            记录执行结果
            </summary>
            <param name="warnMessage"></param>
            <param name="timeSpan"></param>
            <param name="sendMsgCount"></param>
            <param name="exeCute"></param> 
            <param name="executeMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.DeleteWarnSet(System.Collections.Generic.List{System.String})">
            <summary>
            删除预警方案设置
            注：预警方案列表中删除预警方案时调用
            </summary> 
            <param name="warnIds"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.GetFormMetadata(System.String)">
            <summary>
            获得某个窗体的元数据
            </summary>
            <param name="formid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.UpdateStatus(Kingdee.BOS.Core.Schedule)">
            <summary>
            更新计划执行状态
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.BackupExecuteResult(Kingdee.BOS.Context)">
             <summary>
            预警执行情况处理
             </summary>
             <param name="ctx"></param>
             <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.UpdateProcessStatus(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            更新处理状态
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.RecordWarnMessageWhenOutOff(System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.UserMember},Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            监控记录数超出上限（10000）记录
            </summary>
            <param name="list"></param>
            <param name="warnMessage"></param>
            <param name="warnSchedule"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.RecordWarnMessageWhenOutOffTotal(System.Collections.Generic.List{Kingdee.BOS.WorkflowMember.UserMember},Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.Core.Warn.WarnSchedule)">
            <summary>
            监控消息总条数超出了上限
            </summary>
            <param name="list">用户列表</param>
            <param name="warnMessage">监控消息</param>
            <param name="warnSchedule">监控周期</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.RecordWarnExecuteResult(Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnScheduleExecuteTimeSpan,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteStatus,System.String,Kingdee.BOS.Core.Warn.Enums.WarnEnums.ExecuteType)">
            <summary>
            记录执行结果
            </summary>
            <param name="schedule"></param>
            <param name="warnMessage"></param>
            <param name="timeSpan"></param>
            <param name="exeCute"></param>
            <param name="executeMsg"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.AddExecuteResult(Kingdee.BOS.Core.Warn.WarnSchedule,Kingdee.BOS.Core.Warn.Message.WarnMessage,Kingdee.BOS.App.Core.Warn.WarnParseRunResult)">
            <summary>
            记录执行结果
            </summary>
            <param name="schedule"></param>
            <param name="warnMessage"></param>
            <param name="timeSpan"></param>
            <param name="exeCute"></param>
            <param name="executeMsg"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.Warn.WarnWriter.AddDetialResult(System.Collections.Generic.List{Kingdee.BOS.Core.Warn.Message.WarnMessageItem},System.String)">
            <summary>
            
            </summary>
            <param name="messageItemList"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.UserXunTongService">
            <summary>
            讯通服务类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.CreateDataTable">
            <summary>
            创建批量插入表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetDataTable(System.Data.DataTable,System.Collections.Generic.List{System.Int32})">
            <summary>
            填充插入表的数据
            </summary>
            <param name="dt"></param>
            <param name="userIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.AddImportHistory(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            添加导入讯通的历史记录
            </summary>
            <param name="userIds">已导入讯通的Cloud用户</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetXunTongUser(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取已导入讯通的Cloud用户
            </summary>
            <param name="userIdList">cloud用户ID</param>
            <returns>已导入讯通的Cloud用户</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetK3CloudUser(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过openid 获取用户映射信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="openIds"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetXunTongUser(Kingdee.BOS.Context,System.String)">
            <summary>
            根据OpenID获取已导入讯通的Cloud用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="openId">云之家用户ID</param>
            <returns>用户ID(如果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetOpenId(Kingdee.BOS.Context,System.String)">
            <summary>
            根据手机号码获取openId
            </summary>
            <param name="ctx">上下文</param>
            <param name="phone">手机号码</param>
            <returns>openId</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetXunTongOpenID(Kingdee.BOS.Context,System.Int32)">
            <summary>
            根据UserID获取已导入讯通的OpenID
            </summary>
            <param name="userId"></param>
            <returns>已导入讯通的OpenID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetXunTongOpenIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            根据UserID获取已导入讯通的OpenID
            </summary>
            <param name="userId"></param>
            <returns>已导入讯通的OpenID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.DeleteXunTongUserMap(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo})">
            <summary>
            通过openid删除不正确的映射信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="UserMapInfoList">选择的用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.UpdateXunTongUserMap(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo})">
             <summary>
            重新修改云之家用户映射信息
             </summary>
             <param name="ctx">上下文</param>
             <param name="UserMapInfoList">选择的用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.UpdateXunTongUserPhone(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo})">
            <summary>
            更新用户映射手机号 通过userid添加用户手机号
            </summary>
            <param name="ctx">上下文</param>
            <param name="UserMapInfoList">用户映射信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.UpdateXunTongUserMap(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据OPenID和手机号码更新或新增讯通用户映射
            </summary>
            <param name="ctx"></param>
            <param name="openIDAndPhoneList">讯通OpenID和手机号码数值(1.openID,2手机号码）</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.DeleteXunTongUserMap(Kingdee.BOS.Context)">
            <summary>
            清空所有讯通关联数据
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetUserMapByUserId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            通过用户Id获取用户云之家映射列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userids">用户id</param>
            <returns>云之家映射列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetUserMapByLongUserId(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            通过用户Id获取用户云之家映射列表
            </summary>
            <param name="ctx">上下文</param>
            <param name="userids">用户id</param>
            <returns>云之家映射列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.IsSyncUserAmount(Kingdee.BOS.Context)">
            <summary>
            是否把用户账号传给金蝶云企业平台注册用户
            </summary>
            <param name="ctx">上下文</param>
            <returns>true:上传用户账号；false:不上传用户账号</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.IsAddNewRegUser(Kingdee.BOS.Context)">
            <summary>
            是否控制同步许可时自动新增用户
            </summary>
            <param name="ctx">上下文</param>
            <returns>true:新增用户；false:不新增用户</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetUserOperationConfig(Kingdee.BOS.Context)">
            <summary>
            获取用户选项信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>用户选项信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetXunTongUserConfig(Kingdee.BOS.Context)">
            <summary>
            获取同步云之家用户配置
            </summary>
            <param name="ctx">上下文</param>
            <returns>同步云之家用户配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.SaveYunzhijiaLogReceiver(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.YunZhiJiaMsgReceiver})">
            <summary>
            保存云之家消息接收人
            </summary>
            <param name="ctx">上下文</param>
            <param name="fid">云之家消息id</param>
            <param name="userid">用户id</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetYunZhiJiaMsgReceiversByUserIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取云之家消息接受者信息通过用户id
            </summary>
            <param name="ctx">上下文</param>
            <param name="userids">用户id集合</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetYunZhiJiaMsgReceiversByOpenIds(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            获取云之家消息接受者信息通过云之家OpenID
            </summary>
            <param name="ctx">上下文</param>
            <param name="openIds">云之家openid集合</param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.UserXunTongService._operationName">
            <summary>
            同步云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.UserXunTongService._initYunzhijiaInfo">
            <summary>
            配置云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.UserXunTongService._errorFlag">
            <summary>
            失败操作结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.UserXunTongService._successFlag">
            <summary>
            成功操作结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.ImportUsers(Kingdee.BOS.Context,System.Int64[],System.Boolean)">
            <summary>
            导入用户
            处理逻辑:
            1.若为新创建云之家团队，删除以前团队遗留的脏数据(DeleteXunTongUserMap)
            2.判断及加载参数设置查看企业IDFID以及企业私钥是否存在
            3.获取需同步的用户的基本信息
            4.查询当前团队中云之家的所有用户
            6.查找出不存在的用户(personList1)进行添加同步到云之家
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">需更新的用户列表信息</param>
            <param name="IsNew">是否新创建的团队,如果是新创建的直接删除全部的云之家映射</param>
            <returns>讯通同步结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.Exchangestatus(System.String)">
            <summary>
            修改用户状态 切换金蝶云用户状态和接口参数状态值
            </summary>
            <param name="state">用户在金蝶云状态1 正常 2 禁用</param>
            <returns>1 离职 2 恢复 3 禁用 4 启用</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetUsers(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            获取用户信息(讯通格式)
            </summary>
            <param name="ctx">上下文</param>
            /// <param name="userIds">查询的用户ID列表</param>
            <param name="groups">组织信息</param>
            <param name="NeedDep">判断是否需要组织信息</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.ForeinPhoeAddPlus(System.Collections.Generic.List{Kingdee.XT.Open.Model.PersonInfo})">
            <summary>
            国外手机号前拼接‘+’
            </summary>
            <param name="personListSelect"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.GetYunZhiJiaHelperClass(Kingdee.BOS.Context,Kingdee.XT.Open.OpenAccessHelper@,System.Boolean)">
            <summary>
            获取云之家帮助类
            </summary>
            <param name="ctx">上下文</param>
            <param name="xuntongResult">获取结果信息</param>
            <param name="isAddUserToYZJ">是否添加用户</param>
            <returns>云之家帮助类</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.SaveRegUserLog(Kingdee.BOS.Context,System.String,System.String,System.String,System.String)">
            <summary>
            保存注册用户同步日志
            </summary>
            <param name="ctx">上下文</param>
            <param name="operateName">操作名称</param>
            <param name="regUserName">注册用户名称</param>
            <param name="operateResult">操作结果</param>
            <param name="description">详细信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.UserXunTongService.CheckUser(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.XT.Open.Model.PersonInfo},Kingdee.BOS.BusinessEntity.UserManager.XunTongUserResult@)">
            <summary>zhanjian
            检查是否填写手机号码、部门分组
            </summary>
            <param name="personList">用户信息列表</param>
             <param name="xuntongResult">讯通结果</param>
            <returns>是否检查通过</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.WeiXin.MpService">
            <summary>
            公众号服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.MpService.CreateMenu(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount,System.Boolean)">
            <summary>
            创建菜单
            </summary>
            <param name="ctx"></param>
            <param name="account"></param>
            <param name="RetainExist">保留已经存在的菜单</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.MpService.DeleteAllMenus(Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount)">
            <summary>
            删除菜单
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.MpService.LoadButtonGroup(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount)">
            <summary>
            转换为微信菜单
            </summary>
            <param name="ctx"></param>
            <param name="woa"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.WeiXin.QyService">
            <summary>
            企业号服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.QyService.DeleteAllMenus(Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount,System.Int32)">
            <summary>
            删除所有菜单
            </summary>
            <param name="account"></param>
            <param name="agentId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.QyService.GetCropSecret(Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount,System.Int32,System.String@)">
            <summary>
            转换为微信菜单
            </summary>
            <param name="account"></param>
            <param name="agentId"></param>
            <param name="cropSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetWXOfficialAccountSingle(Kingdee.BOS.Context,System.String)">
            <summary>
            获取指定的微信公众号信息
            </summary>
            <param name="ctx"></param>
            <param name="AccID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetWXOfficialAccounts(Kingdee.BOS.Context)">
            <summary>
            获取所有微信公众号列表
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetAgentSingle(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            根据公众号ID和应用ID，获取应用
            </summary>
            <param name="ctx"></param>
            <param name="AcctId"></param>
            <param name="AgentId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetAgents(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            根据公众号ID和应用ID，获取应用组
            </summary>
            <param name="ctx"></param>
            <param name="AcctId"></param>
            <param name="AgentId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetCrops(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            根据公众号ID和应用ID，获取应用的管理组
            </summary>
            <param name="ctx"></param>
            <param name="AcctId"></param>
            <param name="AgentId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetWXUserMapByOpenId(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinUserMapping)">
            <summary>
            根据公众号编码和openid找到用户名，从而判断是否已经绑定了用户
            </summary>
            <param name="ctx"></param>
            <param name="appId"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.GetWXUserMapByUserId(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinUserMapping)">
            <summary>
            根据公众号编码和userid找到用户名，从而判断是否已经绑定了用户
            </summary>
            <param name="ctx"></param>
            <param name="appId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.SaveWXUserMapping(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinUserMapping)">
            <summary>
            保存公众号用户映射信息
            </summary>
            <param name="ctx"></param>
            <param name="weiXinUserMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.ResetWXContex(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinUserMapping)">
            <summary>
            重设微信上下文
            </summary>
            <param name="ctx">上下文</param>
            <param name="weiXinUserMapping">微信信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.DeleteWXUserMapping(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinUserMapping)">
            <summary>
            删除微信用户映射数据
            </summary>
            <param name="ctx"></param>
            <param name="weiXinUserMapping"></param>
            <returns>返回结果有可能是null</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.CreateMenu(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount,System.Int32)">
            <summary>
            创建微信菜单
            </summary>
            <param name="ctx"></param>
            <param name="menu"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.WeiXin.UserWeiXinService.DeleteAllMenus(Kingdee.BOS.Context,Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccount,System.Int32)">
            <summary>
            清除所有的微信菜单
            </summary>
            <param name="ctx"></param>
            <param name="account"></param>
            <param name="agentId"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.IMSdkInfoService.GetIMSdkTicket(Kingdee.BOS.Context,System.String,System.String,System.String,System.Int64)">
            <summary>
            获取云之家IMticket
            </summary>
            <param name="ctx">上下文</param>
            <param name="privatevalue">标识信息 必填项 openid</param>
            <param name="flag"> privatevalue的类型 必填项 0表示openid</param>
            <param name="bizNo"> 业务类型 必填项 由云之家进行分配编号 K3CLOUD</param>
            <param name="time">timestamp 单位秒 非必填项 有则会进行有效期判断，24消息，无则长期有效</param>
            <returns>云之家ticket</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.IMSdkInfoService.GetTeamName(Kingdee.BOS.Context,System.String)">
            <summary>
            通过ticket获取云之家IM上的团队名称
            </summary>
            <param name="ctx">上下文</param>
            <param name="ticket"></param>
            <returns>云之家团队名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.GetQRCode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.QRCodeInfo)">
            <summary>
            获取二维码
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">二维码信息</param>
            <returns>获取值</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.QRCodeCallback(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            扫描二维码后存储ticket
            </summary>
            <param name="ctx">上下文</param>
            <param name="ticket">ticket</param>
            <param name="token">token信息</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.GetQRCodeTicket(Kingdee.BOS.Context,System.String)">
            <summary>
            获取QRCodeTicket
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.SelectQRCode(Kingdee.BOS.Context,System.String)">
            <summary>
            根据token获取二维码信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="token">token</param>
            <returns>二维码信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.InsertQRCode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.QRCoderResult)">
            <summary>
            保存二维码信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="qrcode">二维码信息</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.UpdateQRCode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.QRCoderResult)">
            <summary>
            修改二维码数据信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="qrcode">二维码信息</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.QRCodeService.DeleteQRCode(Kingdee.BOS.Context)">
            <summary>
            删除已经过期的数据
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.SupplierInfoService">
            <summary>
            从云之家获取供应商信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.SupplierInfoService.GetAllSupplier(Kingdee.BOS.Context,System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            查询供应商信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="eid">企业云之家id</param>
            <param name="begin">查询开始数，可选,默认0</param>
            <param name="time">从某一时间开始后的供应商信息，默认0</param>
            <param name="count">查询时点精确到毫秒;传空或者不传表示全部查询，否者只查当前时间后更新数据</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.SupplierInfoService.GetSupplierCharge(Kingdee.BOS.Context,System.String,System.String,System.Int64)">
            <summary>
            查询供应商的负责人信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="eid">企业云之家</param>
            <param name="suppliersCode">//供应商编号</param>
            <param name="time">从某一时间开始后的供应商信息，默认0</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.SupplierInfoService.GetSupplierContact(Kingdee.BOS.Context,System.String,System.String,System.Int64)">
            <summary>
            查询供应商的联系人信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="eid">企业云之家</param>
            <param name="suppliersCode">//供应商编号</param>
            <param name="time">从某一时间开始后的供应商信息，默认0</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.IUnifiedProcessExecute`2">
            <summary>
            云之家统一流程
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.IUnifiedProcessExecute`2.Execute(Kingdee.BOS.Context)">
            <summary>
            执行接口调用
            </summary>
            <param name="inParType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.IUnifiedProcessExecute`2.GetLogData(Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcesssLog)">
            <summary>
            获取入参
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.DEFAULT_APPID">
            <summary>
            云之家统一流程中心使用默认的appid
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.ACCESS_TOKEN_ON_URL_KEY">
            <summary>
            accesstoken在url上关键字
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2._inputData">
            <summary>
            入参
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2._bosOriginalData">
            <summary>
            记录bos参数原始数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2._isContorlByUnifiedStart">
            <summary>
            接口是否受统一流程开关影响。true 受影响，false 不受影响. 
            场景，开关打开后又关闭，需要持续的发更新消息出去。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.CheckData">
            <summary>
            校检入参数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.GetAccessToken(Kingdee.BOS.Context)">
            <summary>
            获取accessToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.GeYZJtDomainURl">
            <summary>
            云之家域名地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.SetEid(Kingdee.BOS.Context)">
            <summary>
            设置eid
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.SetAppId">
            <summary>
            设置统一的默认appid 10681
            </summary>
        </member>
        <member name="P:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.AbstractUnifiedProcessExecute`2.GetApiPath">
            <summary>
            获取接口路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeCopyDataToReadedProcess`1">
            <summary>
            标记抄送为已读
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeCopyDataToReadedProcess`1.CHANGE_COPY_READED_URL">
            <summary>
            抄送url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessDeletedProcess`1">
            <summary>
            删除流程处理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessDeletedProcess`1.CHANGE_DELETE_PROCESS_URL">
            <summary>
            删除流程url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessToCompletedProcess`1">
            <summary>
            标记流程为已完成
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessToCompletedProcess`1.CHANGE_PROCESS_COMPLETED_URL">
            <summary>
            流程为已完成url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessToResetProcess`1">
            <summary>
            标记流程为待发起
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeProcessToResetProcess`1.CHANGE_PROCESS_RESET_URL">
            <summary>
            标记流程为待发起url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeToDoToDeletedProcess`1">
            <summary>
            删除待办
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeToDoToDeletedProcess`1.DEL_TODO_URL">
            <summary>
            删除待办url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeToDoToHandledProcess`1">
            <summary>
            标记待办为已办
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPChangeToDoToHandledProcess`1.CHANGE_TODO_HANDLED_URL">
            <summary>
            标记待办为已办url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPCheckPurchaseProcess`1">
            <summary>
            检测是否购买同一流程中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPCopyDataSendProcess`1">
            <summary>
            发送抄送
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPCopyDataSendProcess`1.COPY_DATA_URL">
            <summary>
            发送抄送url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPDealToDoByActivityIdProcess`1">
            <summary>
            根据流程节点标记待办为已办
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPDealToDoByActivityIdProcess`1.DEAL_TO_DO_ACTIVITY_PART_URL">
            <summary>
            根据流程节点标记待办为已办rl的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPDraftSaveProcess`1">
            <summary>
            存为草稿
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPDraftSaveProcess`1.DRAFT_SAVE_URL">
            <summary>
            注册待阅已读通知url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPInitModelProcess`1">
            <summary>
            云之家统一流程-初始化模板信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPInitModelProcess`1.INIT_PART_URL">
            <summary>
            初始化url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPRegisterCallBackProcess`1">
            <summary>
            注册待阅已读通知
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPRegisterCallBackProcess`1.REGISTER_CALL_BAKC_URL">
            <summary>
            注册待阅已读通知url的部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPToDoMsgSendProcess`1">
            <summary>
            云之家统一流程中心-发送待办信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.UPToDoMsgSendProcess`1.TO_DO_PART_URL">
            <summary>
            待办url部分
            </summary>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.XunTongService">
            <summary>
            云之家服务信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.Run(Kingdee.BOS.Context,Kingdee.BOS.Core.Schedule)">
            <summary>
            云之家服务
            </summary>
            <param name="ctx">上下文</param>
            <param name="schedule">执行参数</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.UpdateYunZhiJiaUserMap(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo})">
            <summary>
            修改云之家用户映射
            </summary>
            <param name="ctx">上下文</param>
            <param name="persons">用户信息</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.GetLicenseType(Kingdee.BOS.Context)">
            <summary>
            获取许可类型
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.GetAllPersonByNewKey(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaInfo,System.String[])">
            <summary>
            新接口获取全部用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="yunzhijiaInfo">参数类</param>
            <param name="phoneArray">用户手机信息</param>
            <returns>云之家用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.GetAllPersonByOldKey(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaInfo,System.String[])">
            <summary>
            旧接口获取全部用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="yunzhijiaInfo">参数类</param>
            <param name="phoneArray">用户手机信息</param>
            <returns>云之家用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.GetYunZhiJiaPerson(Kingdee.XT.Open.OpenAccessHelper,System.String[])">
            <summary>
            获取云之家所有用户
            </summary>
            <param name="accessHelper">参数类</param>
            <param name="phoneArray">用户手机信息</param>
            <returns>云之家用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.UpdatXunTongMap(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo},System.Collections.Generic.List{Kingdee.XT.Open.Model.PersonInfo})">
            <summary>
            修改用户映射关系
            </summary>
            <param name="ctx">上下文</param>
            <param name="personList">需修改的用户信息</param>
            <param name="yunzhijiaPerson">查询到的用户云之家信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.UpdateRegUserInfo(Kingdee.BOS.Context)">
            <summary>
            更新注册用户信息
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.UpdateDbUserPassportId(Kingdee.BOS.Context,Kingdee.BOS.ProductModel.ReadOnlyCollection{Kingdee.BOS.ProductModel.LoggedOnUserInfo},System.String)">
            <summary>
            更新数据中心用户云通行证ID
            </summary>
            <param name="ctx">上下文</param>
             <param name="licRegUsers">许可用户列表</param>
            <param name="K3CloudProductInstanceID">标准产品LIC的产品实例ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.XunTongService.UpdateDBUserInfo(Kingdee.BOS.Context)">
            <summary>
            更新数据中心许可信息
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.YUN_ZHI_JIA_CACHE_TOKEN_REGION">
            <summary>
            云之家缓存token的key，region值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetPerson(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int64})">
            <summary>
            获取云之家用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户Id</param>
            <returns>云之家用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetPerson(Kingdee.BOS.Context,System.Collections.Generic.List{System.Int32})">
            <summary>
            获取云之家用户信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">用户Id</param>
            <returns>云之家用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetGroupAccessToken(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType)">
            <summary>
            获取团队token信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="sectype">密钥类型：读写、时间助手</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetAccessToken(Kingdee.BOS.Context,System.String,Kingdee.BOS.BusinessEntity.YunZhiJia.ScopeType)">
            <summary>
            获取app类型和team类型token
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用id</param>
            <param name="scope">授权级别 app team group</param>
            <returns>返回token信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetAccessToken(Kingdee.BOS.Context,System.String,Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType,Kingdee.BOS.BusinessEntity.YunZhiJia.ScopeType)">
            <summary>
            获取token信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用id</param>
            <param name="sectype">密钥类型：读写、时间助手</param>
            <param name="scopeIn">授权级别 app team group</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetTokenByCache(Kingdee.BOS.Context,System.String)">
            <summary>
            从缓存中获取token
            </summary>
            <param name="accTokenKey">缓存Key</param>
            <returns>获取Token</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.SetTokenToCache(Kingdee.BOS.Context,System.String,Kingdee.BOS.BusinessEntity.YunZhiJia.Token)">
            <summary>
            设置缓存信息
            </summary>
            <param name="accTokenKey">缓存Key</param>
            <param name="token">token信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetAppAndTeamSecrect(Kingdee.BOS.Context,System.String)">
            <summary>
            获取云之家轻应用AppSecret
            </summary>
            <param name="appId">轻应用id</param>
            <returns>轻应用密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetGroupSecrect(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType)">
            <summary>
            获取云之家团队密钥
            </summary>
            <param name="sectype"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.InitXunTongConfig(Kingdee.BOS.Context)">
            <summary>
            获取讯通配置参数
            </summary>
            <param name="ctx">上下文</param>
            <returns>讯通配置参数</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetYZJSystemNewKey(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            获取新的密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">用户名称</param>
            <param name="password">用户密码</param>
            <returns>用户密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetNewKey(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            获取新的密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">用户名称</param>
            <param name="password">用户密码</param>
            <param name="eid">团队id</param>
            <returns>用户密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetInterfaceGetSecretByUserErrroDesc(System.String,System.String)">
            <summary>
            接口GetSecretByUser根据code翻译的提示中文
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xtResult"></param>
            <returns>接口错误的提示语，多语言化</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetNewkeyBySN(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            通过云平台获取云之家密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="productSN">产品序列号</param>
            <param name="alias">资源别名</param>
            <returns>密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetNewkey(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过产品模型获取对应云之家团队密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="alias">资源别名</param>
            <returns>密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetOldKey(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            获取旧的密钥
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">用户名称</param>
            <param name="password">用户密码</param>
            <param name="eid">团队id</param>
            <returns>用户密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetOpenAccess(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType)">
            <summary>
            获取云之家帮助类
            </summary>
            <param name="ctx">上下文</param>
            <param name="keyInfo">密钥类型</param>
            <returns>云之家帮助类</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetYZJSecret(Kingdee.BOS.BusinessEntity.YunZhiJia.YZJKeyInfo,Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType)">
            <summary>
            通过密钥类型获取密钥
            </summary>
            <param name="keyInfo">云之家密钥信息</param>
            <param name="keyType">密钥类型</param>
            <returns>密钥信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetSecretName(Kingdee.BOS.BusinessEntity.YunZhiJia.SecretType)">
            <summary>
            获取密钥中文名称
            </summary>
            <param name="keyType">密钥类型</param>
            <returns>密钥名称</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetAdminCompany(Kingdee.BOS.Context,System.String,System.String)">
             <summary>
            通过账号密码获取云之家管理的团队列表
             </summary>
             <param name="ctx">列表</param>
             <param name="userName">用户名称</param>
             <param name="password">用户密码</param>
             <returns>云之家团队列表</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.EncryptPWD(System.String,System.String)">
            <summary>
            加密密钥
            </summary>
            <param name="password">需加密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>加密后密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.DecryptPWD(System.String,System.String)">
            <summary>
            解密密钥
            </summary>
            <param name="password">需解密密钥</param>
            <param name="salt">密钥因子</param>
            <returns>解密后密钥</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetLightAppInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            通过appid获取轻应用信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用id</param>
            <returns>轻应用信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.GetLightAppOfBuildBySelf(Kingdee.BOS.Context,System.String)">
            <summary>
            获取自建轻应用信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="appId">轻应用id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaAccessService.EncryptAppSecret(Kingdee.BOS.Context)">
            <summary>
            加密轻应用秘钥
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService">
            <summary>
            云之家服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetYunZhiJiaInfo(Kingdee.BOS.Context)">
            <summary>
            获取云之家配置信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>云之家配置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetTeamInfo(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从数据库中获取云之家密钥
            </summary>
            <param name="ctx"></param>
            <param name="xuntonConfig"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.TeamParameterEncrypt(System.String,System.Boolean,System.String)">
            <summary>
            协同参数解密
            </summary>
            <param name="dbvalue">数据库里的参数值</param>
            <param name="encryptFlg">是否加密</param>
            <param name="dbid">账套id</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetNewKeys(Kingdee.BOS.Context,Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            从数据库获取云之家新密钥
            </summary>
            <param name="xunTongConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.Initialize(Kingdee.BOS.Context)">
            <summary>
            初始化云之家
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否成功，并返回云之家配置信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.CheckUserExist(Kingdee.BOS.Context,System.String,System.Int32)">
            <summary>
            判断云平台中此用户是否存在
            </summary>
            <param name="phone">用户手机号或邮箱</param>
            <param name="type">1 邮箱 2 手机号 3 第三方账号</param>
            <returns>是否存在且被激活</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveConfig(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaInfo)">
            <summary>
            保存云之家配置（保存到系统参数）
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">云之家信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveYZJConfig(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaInfo)">
            <summary>
            保存云之家配置（保存到系统参数）
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">云之家信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveConfigToLightMC(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaConfig)">
            <summary>
            保存配置到轻应用管理中心
            </summary>
            <param name="ctx">上下文</param>
            <param name="info">云之家信息</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetLightAppLicInfo(Kingdee.BOS.Context,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            获取轻应用许可信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="appIds">轻应用id</param>
            <param name="eid">团队id</param>
            <param name="token">云之家token</param>
            <returns>获取轻应用许可信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetLightAppLicOccupyInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.LicOccupyParm)">
            <summary>
            获取轻应用占用许可
            </summary>
            <param name="ctx">上下文</param>
            <param name="param">许可占用参数</param>
            <returns>许可占用情况</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.Authentication(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            验证云之家账号
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">金蝶云ID、邮箱、手机，云之家帐号、云平台帐号</param>
            <param name="password">密码</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetKey(Kingdee.BOS.Context,System.String)">
            <summary>
            获取金蝶云之家的集成KEY
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">LIC产品实例Id</param>
            <returns>云之家的集成KEY</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetOpenIds(Kingdee.BOS.Context,System.String,System.String[])">
            <summary>
            获取金蝶云之家用户的openID
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">产品实例ID</param>
            <param name="uids">金蝶云通行证用户ID</param>
            <returns>云之家用户的openID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetProductInstanceInfo(Kingdee.BOS.Context,System.String)">
            <summary>
            获取产品信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">许可文件产品实例Id</param>
            <returns>产品信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetProductInstanceInfo(Kingdee.BOS.Context)">
            <summary>
            获取产品信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>产品信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.IsAutoConfigure(Kingdee.BOS.Context)">
            <summary>
            是否程序自动配置的云之家
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否自动配置</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.IsDefaultYunZhiJia(Kingdee.BOS.Context)">
            <summary>
            判断是否为默认云平台创建云之家团队
            </summary>
            <param name="ctx">上下文</param>
            <returns>是否默认团队</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.UpdateYunZhiJiaUserMap(Kingdee.BOS.Context)">
            <summary>
            更新云之家用户映射
            </summary>
            <param name="ctx">上下文</param>
            <returns>映射结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.UpdateYunZhiJiaUserMap(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo})">
            <summary>
            修改用户云之家映射信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="persons">用户信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.ShowTeam(Kingdee.BOS.Context,System.String)">
            <summary>
            设置团队为显示状态
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">产品实例ID</param>
            <returns>设置结果</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetKeyFilePath(System.String)">
            <summary>
            获取云之家集成KEY文件路径
            </summary>
            <param name="eid">云之家企业ID</param>
            <returns>云之家集成KEY文件路径</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetUserIdByPhone(Kingdee.BOS.Context,System.Collections.Generic.List{System.String})">
            <summary>
            通过用户手机号获取用户Id
            </summary>
            <param name="ctx">上下文</param>
            <param name="UserPhoneList">用户手机号列表</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetPhoneSHA(System.Collections.Generic.List{System.String})">
            <summary>
            通过手机号获取到手机号加密信息
            </summary>
            <param name="phones">手机号信息列表</param>
            <returns>手机号加密信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SetSendMsgScheduleService(Kingdee.BOS.Context,System.Boolean)">
            <summary>
            设置云之家发送消息后台执行计划是否启用
            </summary>
            <param name="ctx">上下文</param>
            <param name="isSendMsg">是否发送云之家消息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.InsertInitializerHisitory(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            新增云之家初始化历史记录
            </summary>
            <param name="ctx">上下文</param>
            <param name="eid">云之家企业ID</param>
            <param name="productInstanceID">LIC产品实例ID</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveUserMap(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo)">
            <summary>
            保存云之家用户与k3cloud用户的对应关系
            </summary>
            <param name="ctx">上下文</param>
            <param name="userInfo">用户对应关系</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.BindXTContext(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo)">
            <summary>
            绑定微信信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userInfo">用户信息</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetK3CloudUser(Kingdee.BOS.Context,System.String)">
            <summary>
            获取云之家对应的k3cloud用户
            </summary>
            <param name="ctx">上下文</param>
            <param name="openId">云之家用户openid</param>
            <returns>k3cloud用户id</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetK3CloudUserByUserId(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo)">
            <summary>
            通过用户id获取用户映射信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userMapInfo">用户信息</param>
            <returns>用户映射信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetK3CloudUserByUserIdAndOpenId(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.UserMapInfo)">
            <summary>
            通过用户id和openid获取用户映射信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="userMapInfo">用户信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetAuthCode(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            通过用户金蝶账号、密码获取授权码
            </summary>
            <param name="ctx">上下文</param>
            <param name="userName">用户账号</param>
            <param name="password">用户密码</param>
            <param name="target_id">指定要访问的应用的client_id。当需要限制访问的来源时，可以判断当前的auth_code目标是否是自己(非必填项).</param>
            <returns>返回金蝶授权码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetAuthCode(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            通过token获取授权码
            </summary>
            <param name="ctx">上下文</param>
            <param name="access_token">用户token</param>
            <param name="target_id">指定要访问的应用的client_id。当需要限制访问的来源时，可以判断当前的auth_code目标是否是自己(非必填项).</param>
            <returns>返回金蝶授权码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetAuthCode(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.AuthCodeRequest)">
            <summary>
             通过token获取授权码
            </summary>
            <param name="ctx">上下文</param>
            <param name="msg">参数信息</param>
            <returns>返回金蝶授权码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetAuthCodeByUid(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            通过用户金蝶账号和产品实例id获取用户一次性校验码
            </summary>
            <param name="ctx">上下文</param>
            <param name="prod_inst_code">产品实例ID</param>
            <param name="uid">用户云通行证id</param>
            <param name="target_id">指定要访问的应用的client_id。当需要限制访问的来源时，可以判断当前的auth_code目标是否是自己(非必填项).</param>
            <returns>返回金蝶授权码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetAuthCodeByUid(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.CloudPlatform.AuthCodeMsg)">
             <summary>
            通过用户金蝶账号和产品实例id获取用户一次性校验码
             </summary>
             <param name="ctx">上下文</param>
             <param name="msg">参数信息</param>
             <returns>返回金蝶授权码</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.ValidationAuthCode(Kingdee.BOS.Context,System.String,System.String,System.String)">
            <summary>
            验证授权码
            </summary>
            <param name="ctx">上下文</param>
            <param name="client_id">应用ID</param>
            <param name="client_secret">应用secret</param>
            <param name="auth_code">金蝶授权码</param>
            <returns>返回验证码验证信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetKDCloudOrgs(Kingdee.BOS.Context,System.String)">
            <summary>
             获取用户加入的所有组织的信息 返回结果
            </summary>
            <param name="ctx">上下文</param>
            <param name="access_token">用户token信息</param>
            <returns>用户组织信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SetMobileDataCenter(Kingdee.BOS.Context,System.String,System.String)">
            <summary>
            设置移动帐套
            </summary>
            <param name="ctx">上下文</param>
            <param name="dbid">数据中心ID</param>
            <param name="tenantId">租户id(可选）用于云ERP</param>
            <returns>成功、失败</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetToken(Kingdee.BOS.Context,Kingdee.BOS.Core.YunZhiJia.YunZhiJiaReportConnInfo)">
            <summary>
            云之家报表秀秀获取token
            </summary>
            <param name="ctx">上下文</param>
            <param name="conninfo">连接信息</param>
            <returns>返回云之家token</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveERPEnvironmentInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.ERPEnvironmentInfo,System.String,System.String)">
            <summary>
            云之家报表秀秀获取ERP环境信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="erpinfo">企业信息</param>
            <param name="token">云之家报表秀秀token</param>
            <returns>ERP环境信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.SaveAcctInfo(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.ERPAcctInfoEntity,System.String,System.String)">
            <summary>
            保存Acct信息
            </summary>
            <param name="ctx">上下文</param>
            <param name="acctinfo">企业帐套信息</param>
            <returns>返回服务器生成对应记录的ID</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.UpLoadBusinessData(Kingdee.BOS.Context)">
            <summary>
            报表秀秀上传数据
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetPublicProductCloudUrl(Kingdee.BOS.Context,System.String)">
            <summary>
            如果是公有云，获取公网地址
            </summary>
            <param name="ctx">上下文</param>
            <param name="tid">tid</param>
            <returns>公网地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.IsSendMsg(System.String,System.String,System.Boolean)">
            <summary>
            是否允许发送云之家消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="dbid">数据库存储dbid</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.UpdatePubblicHostUrl(System.String)">
            <summary>
            修改公有云公网地址
            </summary>
            <param name="url">获取的公有云域名</param>
            <returns>公有云公网地址</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetUsers(Kingdee.BOS.Context,System.Int64[])">
            <summary>
            获取用户信息(讯通格式)
            </summary>
            <param name="ctx">上下文</param>
            <param name="userIds">查询的用户ID列表</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetSSOToken(Kingdee.BOS.Context)">
            <summary>
            获取云之家SSOToken信息
            </summary>
            <param name="ctx">上下文</param>
            <returns>SSOToken</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetACQCode(Kingdee.BOS.Context)">
            <summary>
            获取开发平台在线Code
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetVersion(Kingdee.BOS.Context)">
            <summary>
            获取云之家版本号
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.IsStartUnifiedProcess(Kingdee.BOS.Context)">
            <summary>
            是否开启统一流程中心
            </summary>
            <param name="ctx"></param>
            <returns>开启返回true，否则false</returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.InitBillConfigMsgList(Kingdee.BOS.Context)">
            <summary>
            初始化单据配置信息(批量)
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.InitBillConfigMsg(Kingdee.BOS.Context,Kingdee.BOS.BusinessEntity.YunZhiJia.YunZhiJiaUnitProBillInfo)">
            <summary>
            初始化单据配置信息(单个)
            </summary>
            <param name="ctx"></param>
            <param name="unitProBillInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.GetFieldTypeAfferentYZJ(System.Int32)">
            <summary>
            获取传入云之家字段类型
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YunZhiJiaService.InitCollaborativeCloudConfig(Kingdee.BOS.Context)">
            <summary>
            初始化协同云配置信息
            </summary>
            <param name="ctx">上下文</param>
        </member>
        <member name="T:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService">
            <summary>
            云之家统一流程中心实现类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.InitModelData``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.InitData)">
            <summary>
            初始化模板数据
            </summary>
            <param name="ctx">上下文</param>
            <param name="initData">初始化数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.SendToDoMsg``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData)">
            <summary>
            发送待办消息
            </summary>
            <param name="ctx">上下文</param>
            <param name="toDoData">待办消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.CopyMsg``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.CopyData)">
            <summary>
            发送抄送
            </summary>
            <param name="ctx">上下文</param>
            <param name="copyData">抄送数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.DelTodoMsg``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoDataStatusData)">
            <summary>
            删除待办
            </summary>
            <param name="ctx">上下文</param>
            <param name="delToDoData">删除待办数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.ChangeTodoStatusToHandled``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoDataStatusData)">
            <summary>
            待办转已办
            </summary>
            <param name="ctx">上下文</param>
            <param name="changeToDoToHandledData">待办转已办数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.ChangeCopyDataToReaded``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeCopyDataStatusData)">
            <summary>
            标记抄送为已读
            </summary>
            <param name="ctx">上下文</param>
            <param name="copyData">抄送数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.ChangeProssToDeleted``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeProcessDataStatusData)">
            <summary>
            删除流程
            </summary>
            <param name="ctx">上下文</param>
            <param name="processData">流程数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.ChangeProssToCompleted``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeProcessDataStatusData)">
            <summary>
            标记流程为已完成
            </summary>
            <param name="ctx">上下文</param>
            <param name="processData">流程数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.ChangeProcessToReset``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.ChangeProcessDataStatusData)">
            <summary>
            标记流程为待发起
            </summary>
            <param name="ctx">上下文</param>
            <param name="processData">流程数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.RegistCallBack``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.RegisterCallBackData)">
            <summary>
            注册待阅已读通知
            </summary>
            <param name="ctx">上下文</param>
            <param name="changeToDoToHandledData">待通知数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.SaveDraft``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData)">
            <summary>
            存为草稿
            </summary>
            <param name="ctx">上下文</param>
            <param name="draftData">草稿数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.DealToDoByActivityId``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.DealToDoByActivityIdData)">
            <summary>
            根据流程节点标记待办为已办
            </summary>
            <param name="ctx"></param>
            <param name="dealToDoByActivityIdData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.CheckPurchase``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData)">
            <summary>
            检测是否购买同一流程中心
            </summary>
            <param name="ctx"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.Handle``2(Kingdee.BOS.Context,Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.IUnifiedProcessExecute{``0,``1},Kingdee.BOS.Msg.XTMsgType,System.Boolean)">
            <summary>
            统一处理入口
            </summary>
            <typeparam name="inP"></typeparam>
            <typeparam name="outP"></typeparam>
            <param name="ctx"></param>
            <param name="processExecute"></param>
            <param name="mstType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.WriteLog``1(Kingdee.BOS.Context,Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult{``0},Kingdee.BOS.Msg.ErrorLogMessage)">
            <summary>
            写日志
            </summary>
            <typeparam name="outP"></typeparam>
            <param name="ctx"></param>
            <param name="ret"></param>
            <param name="rltMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.App.Core.YunZhiJia.YZJUnifiedProcessService.AssembleMsg``2(Kingdee.BOS.App.Core.YunZhiJia.UnifiedProcess.IUnifiedProcessExecute{``0,``1},Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult{``1},Kingdee.BOS.Msg.XTMsgType)">
            <summary>
            组装消息，以便记录日志
            </summary>
            <typeparam name="inP"></typeparam>
            <typeparam name="outP"></typeparam>
            <param name="processExecute"></param>
            <param name="rlt"></param>
            <param name="mstType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
