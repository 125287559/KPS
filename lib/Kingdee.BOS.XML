<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingdee.BOS</name>
    </assembly>
    <members>
        <member name="T:Kingdee.BOS.AppServer.AppServerObject">
            <summary>
            应用服务对象基类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.AppServer.AppServerObject.Context">
            <summary>
            登录上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.AssemblyContainer">
            <summary>
            assembly constainer
            </summary>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.IAssemblyContainer">
            <summary>
            assembly contianer interface
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.IAssemblyContainer.AddOrUpdate(System.Reflection.Assembly)">
            <summary>
            添加或更新
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.IAssemblyContainer.Exists(System.Reflection.Assembly)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="assembly">assembly</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.IAssemblyContainer.Exists(System.String)">
            <summary>
            判断指定程序集是否存在
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.IAssemblyContainer.GetAssembly(System.String)">
            <summary>
            获取指定程序集
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回指定名称程序；否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.IAssemblyContainer.GetAssemblys">
            <summary>
            获取所有程序集
            </summary>
            <returns>程序集数组</returns>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.AssemblyContainer._assemblys">
            <summary>
            _types cahce
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.AddOrUpdate(System.Reflection.Assembly)">
            <summary>
            添加或更新
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.Exists(System.Reflection.Assembly)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="assembly">assembly</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.Exists(System.String)">
            <summary>
            判断指定程序集是否存在
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.GetAssembly(System.String)">
            <summary>
            获取指定程序集
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回指定名称程序；否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyContainer.GetAssemblys">
            <summary>
            获取所有程序集
            </summary>
            <returns>程序集数组</returns>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer">
            <summary>
            assembly constainer
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer._assemblys">
            <summary>
            _types cahce
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.AddOrUpdate(System.Reflection.Assembly)">
            <summary>
            添加或更新
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.Exists(System.Reflection.Assembly)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="assembly">assembly</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.Exists(System.String)">
            <summary>
            判断指定程序集是否存在
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.GetAssembly(System.String)">
            <summary>
            获取指定程序集
            </summary>
            <param name="assemblyName">程序集名称，程序集文件名</param>
            <returns>存在返回指定名称程序；否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.GetAssemblys">
            <summary>
            获取所有程序集
            </summary>
            <returns>程序集数组</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.GetAssemblyName(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.AssemblyExtend.AssemblyFileContainer.GeAssemblyNameByFileNameHandler">
            <summary>
            get 
            </summary>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.ITypeContainer">
            <summary>
            type contianer interface
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.AddOrUpdate(System.Type)">
            <summary>
            添加或更新
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.Exists(System.Type)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="type">type</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.Exists(System.String)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="typeName">type名称</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.GetType(System.String)">
            <summary>
            获取指定类名type
            </summary>
            <param name="typeName">type名称</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.GetAllTypes">
            <summary>
            获取所有type
            </summary>
            <returns>type数组</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.ITypeContainer.GetTypes(System.Type)">
            <summary>
            获取指定实现接口类型数组
            </summary>
            <param name="intefaceType">接口类型</param>
            <returns>类型数组</returns>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader">
            <summary>
            assembly timer loader
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._dllPath">
            <summary>
            基础类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._loadPath">
            <summary>
            重新加载
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._periodTimeSpan">
            <summary>
            定时时间
            默认 3分钟
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._fileSystemWatcher">
            <summary>
            文件监视
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._dllLastWriteTimes">
            <summary>
            dll 最后写入时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader._isLoading">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.#ctor(Kingdee.BOS.AssemblyExtend.IAssemblyContainer,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="assemblyContainer">类型容器</param>
            <param name="dllPath">dll path</param>
            <param name="loadPath">load path</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.#ctor(Kingdee.BOS.AssemblyExtend.IAssemblyContainer,System.String)">
            <summary>
            constructor
            </summary>
            <param name="assemblyContainer">类型容器</param>
            <param name="dllPath">dll path</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.Reload">
            <summary>
            强制重新加载
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.TimerLoad(System.Object)">
            <summary>
            timer load
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.ReloadCall">
            <summary>
            reload call
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.LoadDll(System.String)">
            <summary>
            加载dll
            </summary>
            <param name="file">文件</param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.ClearLoadPathDll">
            <summary>
            清空原有文件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.Log(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="msgFormat"></param>
            <param name="args"></param>
        </member>
        <member name="P:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.AssemblyContainer">
            <summary>
            程序集容器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.AssemblyExtend.TimerAssemblyLoader.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.AssemblyExtend.TypeContainer">
            <summary>
            type container
            </summary>
        </member>
        <member name="F:Kingdee.BOS.AssemblyExtend.TypeContainer._types">
            <summary>
            _types cahce
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.AddOrUpdate(System.Type)">
            <summary>
            添加或更新
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.Exists(System.Type)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="type">type</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.Exists(System.String)">
            <summary>
            判断指定type是否存在
            </summary>
            <param name="typeName">type名称</param>
            <returns>存在返回true；否则返回fasle</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.GetType(System.String)">
            <summary>
            获取指定类名type
            </summary>
            <param name="typeName">type名称</param>
            <returns>存在返回type；否则返回null</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.GetAllTypes">
            <summary>
            获取所有type
            </summary>
            <returns>type数组</returns>
        </member>
        <member name="M:Kingdee.BOS.AssemblyExtend.TypeContainer.GetTypes(System.Type)">
            <summary>
            获取指定实现接口类型数组
            </summary>
            <param name="interfaceType">接口类型</param>
            <returns>类型数组</returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthenticationMethod">
            <summary>
            登陆方式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.AuthenticationMethod.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.AuthenticationMethodType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.MultiLangName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthenticationType">
            <summary>
            登录方式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.XuntongAuthentication">
            <summary>
            讯通轻应用认证方式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.WeixinPublicAuthentication">
            <summary>
            微信订阅号/服务号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.WeixinEntAuthentication">
            <summary>
            微信企业号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.CloudEntryAuthentication">
            <summary>
            cloud云通行证认证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.IDECloudEntryAuthentication">
            <summary>
            boside云通行证验证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.SimplePassportAuthentication">
            <summary>
            第三方系统简单通行证登录（非密码公钥加密方式）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.YunZhiJiaAuthentication">
            <summary>
            云之家身份认证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.YunZhiJiaDynamicPwdAuthentication">
            <summary>
            云之家动态密码验证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.YunZhiJiaQRCodeAuthentication">
            <summary>
            云之家二维码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.FaceAuthentication">
            <summary>
            刷脸认证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.YunZhiJiaPubAuthentication">
            <summary>
            云之家公共号身份认证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.UserTokenAuthentication">
            <summary>
            userToken登陆
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.SAMLAuthentication">
            <summary>
            SAML登陆
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.OAuth2Authentication">
            <summary>
            OAuth2.0身份验证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.EncryptSignAuthentication">
            <summary>
            加密签名身份验证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.DingDingAuthentication">
            <summary>
            钉钉身份认证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.KDPassPortAuthentication">
            <summary>
            金蝶云.通行证身份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.RSASignAuthentication">
            <summary>
            第三方通行证RSA验权身份登录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.KingdeeHubAuthentication">
            <summary>
            KingdeeHub 云平台通过AuthCode获取用户信息身份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.WeiXin3rdAuthentication">
            <summary>
            微信第三方登录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.ThirdAuthentication">
            <summary>
            第三方系统登录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.TwoFactorAuthentication">
            <summary>
            双因子登录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.AuthenticationType.CasAuthentication">
            <summary>
            IMC华为工业云CAS登录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CasAuth.KDCasState.FormArgs">
            <summary>
            打开指定表单预设参数（JSON格式）,例如：人人报销首页 ERX_HomePage 的打开参数 {"KD_Html5_FormTheme_Name":"Galaxy"}
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CasAuth.KDTicketStateManager.UpdateSignedData(System.Web.HttpRequest)">
            <summary>
            获取签名对象数据包
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.ICAServerAuth">
            <summary>
            CA服务端验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.VerifySignature(Kingdee.BOS.Authentication.CA.CASignDataInfo)">
            <summary>
            验证签名
            </summary>
            <param name="signDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.VerifyCertificate(Kingdee.BOS.Authentication.CA.CertificateInfo)">
            <summary>
            验证证书
            </summary>
            <param name="certInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.GetCNName(System.String)">
            <summary>
            获取证书拥有者的名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.GetCompanyName(System.String)">
            <summary>
            获取CA证书的公司名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo">
            <summary>
            动态密码卡详细信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.SecretKey">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.ForbidStatus">
            <summary>
            禁用状态 A：正常 B:禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.SerialNumber">
            <summary>
            卡号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.Id">
            <summary>
            内部唯一标识号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.BindingStatus">
            <summary>
            绑定密码卡状态 A:未绑定 B:已绑定
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo">
            <summary>
            动态密码卡校验信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo.SecretKey">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth">
            <summary>
            动态密码卡验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth.VerifyDynamicPassword(Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo)">
            <summary>
            验证动态密码卡
            </summary>
            <param name="passwordInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth.SynchronizeTime(Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo)">
            <summary>
            动态密码卡时间同步
            </summary>
            <param name="passwordInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthResult">
            <summary>
            认证结果类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.HexCode">
            <summary>
            消息代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.Success">
            <summary>
            是否认证成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.ICAClientAuth">
            <summary>
            CA的客户端验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.GetCerts">
            <summary>
            获取有效的证书
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.SignMessage(System.String,System.String)">
            <summary>
            数据签名
            </summary>
            <param name="subject">证书使用者</param>
            <param name="rawMessage">签名原文</param>
            <returns>签名结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.GetCNName(System.String)">
            <summary>
            获取证书拥有者的名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CertificateInfo">
            <summary>
            CA证书
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CASignDataInfo">
            <summary>
            CA签名信息类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataInfo.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataInfo.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.INoticeMcToUpdateCache.NoticeMcToUpdateCacheNoValidate(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            通知管理中心更新其他APP站点缓存,没有校验，强制通知更新
            </summary>
            <param name="cacheItem"></param>
        </member>
        <member name="T:Kingdee.BOS.Cache.RelatedFlexMetaKeyInfo">
            <summary>
            标准产品中弹性域字段关联元数据标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Cache.RelatedFlexMetaKeyInfo.FormIds">
            <summary>
            弹性域字段关联元数据标识集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.CasClientConfiguration.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.CasClientConfiguration.#ctor">
            <summary>
            构造初始化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.CasClientConfiguration.IsEnableAuthority(System.String)">
            <summary>
            启用集成的域名
            </summary>
            <param name="authority"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.DynaCasParamKey">
            <summary>
            _imc_auth：kiNplcjWGPP6PX+ATI6AA2PYSNdlKZCA+H5UPeM0Z0kSsiVNP1NV8rEBfuHuXyR6Wgk47FRHwiPY5Hi8bC2sQSR4YGzwKgjIQMGGv5KYk8AyNGnTbvD8N6lXYo4JkcuzMDa3MQR2E8OxmXT5hqomYwIneN6cRhd1POnXodTAywXLAlAfDMJQtehxxP9zBt9oCOlOGnUhpa1uGLm2TnsrPyDVmE1nACdmO+GwVQqS4DhEW/MDK0OjfxJcFf7MNLSYtpo/UVomaM/XfjEHZNzSZf4qIotjeGJpC+A901JvuaPVaIWbJOqoINUAx/lTmg+r5YNewFRTt+tKtav8uDnvHg==
            明文：https://smart-imc.com/cas
            </summary>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.DynaCasParamDecryptKey">
            <summary>
            例如： MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnMcrl4+DsZKrD/DwDfDnNxmUTmMp4Q2OWmxd3HuL8quJhdxV9cHBhJkpUoeUoGqbpzG9C/bB1+DB0P0YPxqZSA6pAf0CQp1ybiwM8dARVohOhjHscOjlDaBpzr6hSyxSE2S4vxnI5nU6jsY+kYoot59O0LdpdfEmZChWdxBf11pjKbYqarXWqzjMWfPkBrt0+tAlJ5kc55L8Hb9oAq2Is+SZqZy/xn23tzItapRpAylRjCR1VlxN+uPPEr5SatfdTEvMRvUpUnAlMnTxpzT8VSbVfQ3p+JFT1aV868pIo1eAJUQeYO83nhDwL3JFauNhNDPlWOS+rbaaiWX5nbyNMwIDAQAB
            </summary>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.DynaCasParamDefaultSingleSignOut">
            <summary>
            仅用于初始化SingleSignOut
            </summary>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.EnableAuthoritys">
            <summary>
            启用的域名（localhost:1203;licv75.opstest.ik3cloud.com）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.AllowCustomUseDefLoginUI">
            <summary>
            当定制化登录界面构建失败时，允许使用默认的登录界面代替
            </summary>
        </member>
        <member name="P:Kingdee.BOS.CasClientConfiguration.CustomLoginUI">
            <summary>
            IMC Cas 的定制化登录界面，并且不允许用默认登陆界面替代
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Limit.LimitPolicyConfiguration.PassWhiteList">
            <summary>
            限流放行名单
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Limit.LimitPolicyPassWhiteListConfigurationElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Limit.LimitPolicyPassWhiteListConfigurationElement.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Limit.LimitPolicyPassWhiteListConfigurationElement.LimitPolicyType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1">
            <summary>
            数据中心容器管理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1._instacnes">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1.#ctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1.Get(Kingdee.BOS.Context)">
            <summary>
            获取实例对象
            </summary>
            <param name="ctx">上下文</param>
            <returns>实例对象</returns>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1.Get(System.String)">
            <summary>
            获取实例对象
            </summary>
            <param name="dbId">数据中心ID</param>
            <returns>实例对象</returns>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1.AddOrUpdate(Kingdee.BOS.Context,`0)">
            <summary>
            添加或更新intance
            </summary>
            <param name="ctx">上下文</param>
            <param name="instance">实例对象</param>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterContainer`1.AddOrUpdate(System.String,`0)">
            <summary>
            添加或更新intance
            </summary>
            <param name="dbId">数据中心ID</param>
            <param name="instance">实例对象</param>
        </member>
        <member name="T:Kingdee.BOS.DataCenterContainer.DataCenterDictionaryContainer`1">
            <summary>
            数据中心字典实对象容器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterDictionaryContainer`1.AddOrUpdateEntity(System.String,System.String,`0)">
            <summary>
            添加或更新intance
            </summary>
            <param name="dbId">数据中心dbId</param>
            <param name="key">key值</param>
            <param name="entity">实例对象</param>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterDictionaryContainer`1.AddOrUpdateEntity(Kingdee.BOS.Context,System.String,`0)">
            <summary>
            添加或更新intance
            </summary>
            <param name="ctx">上下文</param>
            <param name="key">key值</param>
            <param name="entity">实例对象</param>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterDictionaryContainer`1.GetEntity(System.String,System.String)">
            <summary>
            获取实例对象
            </summary>
            <param name="dbId">数据中心dbId</param>
            <param name="key">key值</param>
            <returns>实例对象</returns>
        </member>
        <member name="M:Kingdee.BOS.DataCenterContainer.DataCenterDictionaryContainer`1.GetEntity(Kingdee.BOS.Context,System.String)">
            <summary>
            获取实例对象
            </summary>
            <param name="ctx">上下文</param>
            <param name="key">key值</param>
            <returns>实例对象</returns>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.SoultionID">
            <summary>
            对应布局方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.WorkName">
            <summary>
            名称，取自方案名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.WorkNames">
            <summary>
            名称，取自方案名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.IsDefaultLayout">
            <summary>
            是否是默认主页
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.CreateTime">
            <summary>
            方案创建时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.ModifyTime">
            <summary>
            最后一次修改时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.BillStatus">
            <summary>
            单据状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.ForbidStatus">
            <summary>
            是否禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.DynamicObjct">
            <summary>
            数据实例，类型DynamicObject
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.IsFirstDefalut">
            <summary>
            是否第一次获取默认分配的方案（作为第一次是否需要提示的标志）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.IsFromCopy">
            <summary>
            复制保存生成的方案
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.IsStdConsole">
            <summary>
            是否业务领域主页
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.StdConsoleFormId">
            <summary>
            领域主控表单ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.PermissionId">
            <summary>
            权限项ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutSolution.IsShowedGuideStdConsole">
            <summary>
            是否已显示工作台切换提示
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail">
            <summary>
            H5主页布局卡片明细实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.SoultionID">
            <summary>
            对应布局方案ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.DetailEntryID">
            <summary>
            对应布局方案里的卡片明细表ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.CardId">
            <summary>
            对应卡片基础资料的ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.LayoutColumns">
            <summary>
            对应所在列布局，如：3列布局或者4列布局中
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.ColumnIndex">
            <summary>
            显示所在列
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.ColumnOrder">
            <summary>
            显示位置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.CardTypeID">
            <summary>
            卡片类型基础资料ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.CardTypeDynamicObjct">
            <summary>
            卡片类型的数据实例，类型DynamicObject
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.DetailDynamicObjct">
            <summary>
            对应布局方案里的卡片明细表的数据实例，类型DynamicObject
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.IsDeleteCard">
            <summary>
            是否操作了删除卡片
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.IsAddCard">
            <summary>
            是否是新加卡片操作
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.IsAllowRepeat">
            <summary>
            是否允许重复
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDH5Card.H5LayoutCadDetail.VisibleToConsle">
            <summary>
            是否显示在主控台（特殊卡片，客户端不支持)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1">
            <summary>
            abstact service fatctory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1.#cctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1.GetServiceFacotry">
            <summary>
            get service factory
            </summary>
            <returns>service factory</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1.GetService``1(Kingdee.BOS.Context)">
            <summary>
            get service
            </summary>
            <typeparam name="TService">service</typeparam>
            <param name="ctx">上下文</param>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1.GetService``1">
            <summary>
            get service
            </summary>
            <typeparam name="TService">service</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="P:Kingdee.BOS.DependencyInjection.AbstactServiceFatctory`1.Current">
            <summary>
            service factory
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.AbstactServiceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.AbstactServiceProvider.TryGetService``1(``0@)">
            <summary>
            try get service
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <param name="service">out service instance</param>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.InstanceContainer">
            <summary>
            instance container
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.InstanceContainer._instancesDict">
            <summary>
            instance container
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.Regsiter``1(System.Object)">
            <summary>
            regsiter instance
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <param name="obj">instance obj</param>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.Regsiter(System.Type,System.Object)">
            <summary>
            regsiter instance
            </summary>
            <param name="instanceType">interface type</param>
            <param name="obj">instance obj</param>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.Contains``1">
            <summary>
            is contains the service type instance obj
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.Contains(System.Type)">
            <summary>
            is contains the service type instance obj
            </summary>
            <param name="instanceType">the service type</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.InstanceContainer.GetInstance``1">
            <summary>
            get the service type instance obj
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <returns>instance obj</returns>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.IServiceFactory">
            <summary>
            service factory
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.IServiceFactory.GetServiceInstance``1(Kingdee.BOS.Context)">
            <summary>
            get service intance
            </summary>
            <typeparam name="TService">类型</typeparam>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.IServiceFactory.GetServiceInstance``1(Kingdee.BOS.Context,System.String)">
            <summary>
            get service intance
            </summary>
            <typeparam name="TService">类型</typeparam>
            <param name="ctx">上下文</param>
            <param name="url">url地址</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.IServiceFactory.GetServiceInstance``1(System.String)">
            <summary>
            get service intance
            </summary>
            <typeparam name="TService">类型</typeparam>
            <param name="url">url地址</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceFatctoryProvider">
            <summary>
            service fatctory provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceFatctoryProvider.Get``1">
            <summary>
            get the service factory
            </summary>
            <typeparam name="TServiceFactory">service factory</typeparam>
            <returns>service factory instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceFatctoryProvider.Regsiter``2">
            <summary>
            regesiter factory trype
            </summary>
            <typeparam name="TServiceFactory">service factory</typeparam>
            <typeparam name="TServiceFactoryInstance">service factory intance</typeparam>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider">
            <summary>
            service instance provider
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider._instanceContainer">
            <summary>
            instance contianer
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.Contains``1">
            <summary>
             is contains the service type instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service type instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.GetService``1">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.GetService``2">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <typeparam name="TServiceInstance">service instance type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.GetService``1(``0)">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <param name="serviceInstance">service instance</param>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceInstanceProvider.Regsiter``1(``0)">
            <summary>
            regesiter instance
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceInstance">service instance</param>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceProvider">
            <summary>
            service provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.ServiceProvider._serviceTypeContainer">
            <summary>
            service type container
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.Contains``1">
            <summary>
             is contains the service type instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service type instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.GetService``1">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.GetService``2">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <typeparam name="TServiceInstance">service instance type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.GetService``1(``0)">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <param name="serviceInstance">service instance</param>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceProvider.Regsiter``2">
            <summary>
            regesiter instance
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TServiceInance"></typeparam>
        </member>
        <member name="P:Kingdee.BOS.DependencyInjection.ServiceProvider.Current">
            <summary>
            service provider current instance
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceScope`1">
            <summary>
            service scope
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.ServiceScope`1._current">
            <summary>
            当前service provider scope
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceScope`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceScope`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="service">service</param>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceScope`1.Dispose">
            <summary>
            回收
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DependencyInjection.ServiceScope`1.Current">
            <summary>
            当前http context
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DependencyInjection.ServiceScope`1.Service">
            <summary>
            service fatctory provider
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceSingleProvider">
            <summary>
            service provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.ServiceSingleProvider._instanceContainer">
            <summary>
            instance contianer
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.Contains``1">
            <summary>
             is contains the service type instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service type instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.GetService``1">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.GetService``2">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <typeparam name="TServiceInstance">service instance type</typeparam>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.GetService``1(``0)">
            <summary>
            get service instance
            </summary>
            <typeparam name="TService">service type</typeparam>
            <param name="serviceInstance">service instance</param>
            <returns>service instance</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.Regsiter``1(``0)">
            <summary>
            regesiter instance
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="serviceInstance">service instance</param>
        </member>
        <member name="P:Kingdee.BOS.DependencyInjection.ServiceSingleProvider.Current">
            <summary>
            service provider current instance
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DependencyInjection.ServiceTypeContainer">
            <summary>
            instance container
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DependencyInjection.ServiceTypeContainer._instancesDict">
            <summary>
            instance container
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.Regsiter``1(System.Type)">
            <summary>
            regsiter instance
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <param name="objType">instance obj type</param>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.Regsiter(System.Type,System.Type)">
            <summary>
            regsiter instance
            </summary>
            <param name="instanceType">interface type</param>
            <param name="objType">instance obj type</param>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.Contains``1">
            <summary>
            is contains the service type instance obj
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.Contains(System.Type)">
            <summary>
            is contains the service type instance obj
            </summary>
            <param name="instanceType">the service type</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.CreateInstance``1">
            <summary>
            create the service type instance obj
            </summary>
            <typeparam name="TService">the service type</typeparam>
            <returns>instance obj</returns>
        </member>
        <member name="M:Kingdee.BOS.DependencyInjection.ServiceTypeContainer.CreateInstance``1(System.Object[])">
            <summary>
            create the service type instance obj
            </summary>
            <param name="args">创建实例参数</param>
            <typeparam name="TService">the service type</typeparam>
            <returns>instance obj</returns>
        </member>
        <member name="F:Kingdee.BOS.EncryptFieldInfo.FieldName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="F:Kingdee.BOS.EncryptFieldInfo.EncryptType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ExCodeConst">
            <summary>
            异常编码列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ExCodeConst.CODE_NetCtrlConflict">
            <summary>
            网控错误编码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ExCodeConst.CODE_ValidateFailed">
            <summary>
            统一校验错误编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDNetCtrlConflictException">
            <summary>
            网控冲突异常
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDBusinessException">
            <summary>
            业务异常,使用此类异常,则不抛出明细信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDException">
            <summary>
            K/3异常信息基类。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDException.#ctor(System.String,System.String)">
            <summary>
            K/3异常信息基类。
            </summary>
            <param name="Code">错误代码</param>
            <param name="Message">错误信息</param>
        </member>
        <member name="M:Kingdee.BOS.KDException.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Code"></param>
            <param name="Message"></param>
            <param name="isWriteLog"></param>
        </member>
        <member name="M:Kingdee.BOS.KDException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="Code"></param>
            <param name="Message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Kingdee.BOS.KDException.#ctor(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Code"></param>
            <param name="Message"></param>
            <param name="innerException"></param>
            <param name="isWriteLog"></param>
        </member>
        <member name="M:Kingdee.BOS.KDException.GetErrorInfo">
            <summary>
            输出到前段的JSON的Action参数errorInfo
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDException.IsNormalException">
            <summary>
            原生异常是否为系统异常，非KD类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDException.IsWriteLog">
            <summary>
            是否记录日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDException.Code">
            <summary>
            错误编号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDException.Date">
            <summary>
            错误发生时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNetCtrlConflictException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sMessage"></param>
        </member>
        <member name="T:Kingdee.BOS.Http.GenericHttpResult`1">
            <summary>
            泛型Http返回结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.Http.GenericHttpResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Http.GenericHttpResult`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:Kingdee.BOS.Http.GenericHttpResult`1.Code">
            <summary>
            结果代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Http.GenericHttpResult`1.Message">
            <summary>
            结果信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Http.GenericHttpResult`1.Data">
            <summary>
            结果数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Http.HttpResult">
            <summary>
            Http返回结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpResult.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="T:Kingdee.BOS.Http.HttpResultCode">
            <summary>
            结果代码枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.RequestException">
            <summary>
            请求异常
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.TokenFailed">
            <summary>
            鉴权失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.TokenException">
            <summary>
            鉴权异常
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.MethodFailed">
            <summary>
            方法失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.MethodException">
            <summary>
            方法异常
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.ResourceNotFound">
            <summary>
            找不到资源
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.SuccessShell">
            <summary>
            启动Shell成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpResultCode.FailShell">
            <summary>
            启动Shell失败
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Http.HttpUtil">
            <summary>
            Http请求辅助类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpUtil.TimeOut">
            <summary>
            全局请求超时设置（以毫秒为单位），默认为60秒。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.HttpUtil._contentType">
            <summary>
            请求体类型，默认为表单
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.Get(System.String)">
            <summary>
            发送Get请求
            </summary>
            <param name="url">url地址</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.Get(System.String,System.Nullable{System.Int32})">
            <summary>
            发送Get请求
            </summary>
            <param name="url">url地址</param>
            <param name="timeOut">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.PostJson(System.String,System.String)">
            <summary>
            发送内容为Json格式的Post请求
            </summary>
            <param name="url">url地址</param>
            <param name="content">请求体内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.PostJson(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            发送内容为Json格式的Post请求
            </summary>
            <param name="url">url地址</param>
            <param name="timeOut">超时时间</param>
            <param name="content">请求体内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.PostJson(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Int32},System.String)">
            <summary>
            发送内容为Json格式的Post请求
            </summary>
            <param name="url">url地址</param>
            <param name="header">请求头</param>
            <param name="timeOut">超时时间</param>
            <param name="content">请求体内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.Execute(System.String,Kingdee.BOS.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            执行http请求
            </summary>
            <param name="url">url地址</param>
            <param name="httpMethod">请求方法</param>
            <param name="header">请求头</param>
            <param name="contentType">请求体类型</param>
            <param name="timeOut">超时时间</param>
            <param name="content">请求体内容</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.SetClientCertificates(System.Net.HttpWebRequest)">
            <summary>
            设置证书
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.GetCerFile">
            <summary>
            交互环境:取当前目录或父组目录
            非交互环境:当前目录或App_Data目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.TryToGetCerFile(System.String)">
            <summary>
            优先： 机器名相同的证书
            其次： 通用证书 K3CloudCert.cer
            </summary>
            <param name="dirName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Http.HttpUtil.GetClientUserAgent">
            <summary>
            提取模拟的UserAgent，给到所有端统一调用，实现UserAgent的一致性
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Http.SecurityProtocolTypeEnum">
            <summary>
            Custom SecurityProtocolType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.SecurityProtocolTypeEnum.Ssl3">
            <summary>
            SSL3
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.SecurityProtocolTypeEnum.Tls">
            <summary>
            TLS 1.0
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.SecurityProtocolTypeEnum.Tls11">
            <summary>
            TLS 1.1
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Http.SecurityProtocolTypeEnum.Tls12">
            <summary>
            TLS 1.2
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder">
            <summary>
            api kingdee应用市场请求
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appId">应用秘钥</param>
            <param name="appSecret">应用ID</param>
            <param name="method">请求方式 GET/POST等
            </param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appId">应用秘钥</param>
            <param name="appSecret">应用ID</param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildHttpRequesHeaders(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取http请求的签名头部
            </summary>
            <param name="path">相对地址</param>
            <param name="parameters">参数</param>
            <returns>签名头部信息</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildHttpRequesHeaders(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64,System.Int32)">
            <summary>
            获取http请求的签名头部
            </summary>
            <param name="path">相对地址</param>
            <param name="parameters">参数</param>
            <param name="timestamp">时间戳</param>
            <param name="x_api_nonce">随机数</param>
            <returns>签名头部信息</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildUrlQueryParas(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构建查询参数
            </summary>
            <param name="queryParas">参数</param>
            <param name="isUrlEncode">是否url编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildRequestUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据 请求url地址和请求参数构建完整请求Url地址
            </summary>
            <param name="url">url参数</param>
            <param name="parameters">承诺书</param>
            <returns>url请求完整参数</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildUrlQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构建url query string参数
            </summary>
            <param name="queryParas">请求参数</param>
            <returns>query string</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.CreateXApiSignature(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64,System.Int32)">
            <summary>
            云平台网关签名字符串
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <param name="timestamp"></param>
            <param name="x_api_nonce"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.BuildUrlQueryString(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            构造查询字符串
            根据云平台固定
            </summary>
            <param name="queryParas">参数</param>
            <param name="isUrlEncode">是否url编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.UrlEncodeToUpper(System.String)">
            <summary>
            指定字符串 url encode
            自动转换为大写
            </summary>
            <param name="str">字符串</param>
            <returns>编码后url字符串</returns>
        </member>
        <member name="P:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.AppId">
            <summary>
            应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.AppSecret">
            <summary>
            应用秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequestBuilder.Method">
            <summary>
            请求方式
            GET/POST等
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequstUtil">
            <summary>
            api kingdee应用市场请求util
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequstUtil.HMACSHA256Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            hmacsha256 签名
            </summary>
            <param name="content"></param>
            <param name="secret"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequstUtil.ReplaceSpecialCharacter(System.String)">
            <summary>
            字符串内字符转义
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDHttpUtility.ApiKindeeComRequstUtil.SpecialCharacter">
            <summary>
            云平台网关特殊字符串
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.ProxyManager">
            <summary>
            创建代理的管理类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.PROXY_URL_KEY">
            <summary>
            代理地址在Common.config文件key值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.PROXY_USER_NAME_KEY">
            <summary>
            访问代理地址的用户名在Common.config文件key值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.PROXY_PWD_KEY">
            <summary>
            访问代理地址的密码在Common.config文件key值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.PRXOY_BY_PASS_IPS_KEY">
            <summary>
            跳过代理的ip集合以分号隔开在Common.config文件key值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.s_webProxy">
            <summary>
            记录代理信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.ProxyManager.s_settedPrxoy">
            <summary>
            是否配置了代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.ChangeProxy">
            <summary>
            更改代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.SetRequestProxy(System.Net.WebRequest)">
            <summary>
            为请求设置代理- 暂时不用
            </summary>
            <param name="httpWebRequest">请求</param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.HasSettedProxy">
            <summary>
            是否配置了代理
            </summary>
            <returns>配置了代理返回true。否则false</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.ProxyLog">
            <summary>
            设置了代理，代理服务器不可用时，记录日志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.InitWebProxy">
            <summary>
            初始化代理
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.GetSettedProxyFlg">
            <summary>
            是否配置了代理
            </summary>
            <returns>配置了代理返回true。否则false</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.GetByPassIdArray">
            <summary>
            要跳过代理ip集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.ProxyManager.GetSettingValue(System.String)">
            <summary>
            获取设置的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.KDNetwork.CloudPlatformClient">
            <summary>
            云平台网关客户端
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.HttpGet(System.String,System.String,Kingdee.BOS.JSON.JSONObject,System.Text.Encoding,System.Int32)">
            <summary>
            发送 Http/Https GET 请求 - 云平台网关
            </summary>
            <param name="hostname"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.HttpPost(System.String,System.String,Kingdee.BOS.JSON.JSONObject,Kingdee.BOS.JSON.JSONObject,System.Text.Encoding,System.Int32)">
            <summary>
            发送 Http/Https POST 请求 - 云平台网关
            </summary>
            <param name="hostname"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <param name="body"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.GetGWInHeaders">
            <summary>
            获取用户中心网关签名请求头参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.GetSignatureHeaders(System.String,System.String,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            获取请求的签名头部
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.GetXApiSignature(System.String,System.String,Kingdee.BOS.JSON.JSONObject,System.Int64,System.Int32)">
            <summary>
            云平台网关签名字符串
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <param name="timestamp"></param>
            <param name="x_api_nonce"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.JointCloudPlatformUrlParameters(System.String,System.String,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            将 url 参数拼接到 url - 云平台签名版
            </summary>
            <param name="hostname"></param>
            <param name="path"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.BuildCloudPlatformURLQueryString(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            构造查询字符串 - 云平台签名版
            - 替换云平台特殊字符
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.BuildCloudPlatformURLQueryStringEncoded(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            构造查询字符串 - 云平台签名版
            - 替换云平台特殊字符
            - 对键值对分别URL编码
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.ReplaceSpecialCharacter(System.String)">
            <summary>
            替换特殊字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.CloudPlatformClient.WriteCloudPlatformDebugLog(System.String)">
            <summary>
            debug 日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Kingdee.BOS.KDNetwork.CloudPlatformClient.SpecialCharacter">
            <summary>
            云平台网关特殊字符串
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDNetwork.HttpClient">
            <summary>
            Http 客户端
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDNetwork.HttpClient.TIME_OUT">
            <summary>
            请求超时设置（以毫秒为单位），默认为 6 秒。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.HttpGet(System.String,Kingdee.BOS.JSON.JSONObject,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            http/https Get 请求
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.HttpGet(System.String,Kingdee.BOS.JSON.JSONObject,Kingdee.BOS.JSON.JSONObject,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            http/https Get 请求
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.HttpPost(System.String,Kingdee.BOS.JSON.JSONObject,Kingdee.BOS.JSON.JSONObject,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            http/https Post 请求
            </summary>
            <param name="url"></param>
            <param name="body"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.GetImageBytes(System.String,System.Int32)">
            <summary>
            获取图片资源的字节码
            </summary>
            <param name="url"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.GetImageBase64(System.String)">
            <summary>
            获取图片资源，并转化为 字节码的base64字符串
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.JointUrlParameters(System.String,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            将 url 参数拼接到 url
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.HttpClient.BuildURLQueryString(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            构造查询字符串
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Licence.LicenseType">
            <summary>
            许可类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Licence.LicenseType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Licence.LicenseType.DemoLicense">
            <summary>
            演示许可
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Licence.LicenseType.LimitedTimLicensee">
            <summary>
            限时许可
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Licence.LicenseType.GenuineLicense">
            <summary>
            正式许可
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.RecentSearchData">
            <summary>
            最近模糊查询选择的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.MsterId">
            <summary>
            主记录Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.FID">
            <summary>
            当前选择的主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.BaseFormId">
            <summary>
            基础资料唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.FormId">
            <summary>
            当前单据的唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.UserId">
            <summary>
            当前用户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.RecentSearchData.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeCopyDataStatusData">
            <summary>
            修改抄送数据状态，状态值：已办，
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData">
            <summary>
            统一流程数据模型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.AppId">
            <summary>
            业务系统对应的云之家轻应用id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.Eid">
            <summary>
            工作圈eid,星空对接必填 此属性为了支持企业级轻应用appid：10681所加。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.MsgSource">
            <summary>
            消息来源 - 非云之家接口字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.MsgSummary">
            <summary>
            消息摘要 - 非云之家接口字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.OriginalData">
            <summary>
            bos原始流程数据 - 非云之家接口数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessBaseData.kDMsgId">
            <summary>
            星空消息id - 非云之家接口数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeCopyDataStatusData.BizIds">
            <summary>
            业务系统待办id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeProcessDataStatusData">
            <summary>
            修改流程数据状态，状态为：删除，已完成，待发起
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeProcessDataStatusData.FlowId">
            <summary>
            业务系统流程id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoDataStatusData">
            <summary>
            待办数据状态为变更，状态值：待办转已办,删除待办
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoDataStatusData.BizIds">
            <summary>
            业务系统待办id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoToHandledData">
            <summary>
            标记待办为已办
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ChangeToDoToHandledData.BizIds">
            <summary>
            业务系统待办id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData">
            <summary>
            抄送数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.WebLink">
            <summary>
            点击该条待办后的跳转地址（web端） 必填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.MobileLink">
            <summary>
            点击该条待办后的跳转地址（移动端）,不传的话则移动端待阅列表该条数据将被置灰不能点击
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.WebFlowLink">
            <summary>
            我发起的列表和流程监控页面点击流程后的跳转地址(web端)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.MobileFlowLink">
            <summary>
            我发起的列表点击流程后的跳转地址（移动端），不传的话则移动端我发起的列表该条数据将被置灰不能点击
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Copy">
            <summary>
            抄送信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.TypeId">
            <summary>
            业务系统模板id，对于同一个流程，每次发送抄送都应该使用相同的typeId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Urgency">
            <summary>
            紧急程度，从1到5
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.FlowId">
            <summary>
            业务系统流程实例id，能唯一标识一条流程
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Title">
            <summary>
            流程标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.SerialNo">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Fields">
            <summary>
            字段值。针对针对同一个流程，首次发送待办时可以通过field字段指定表单字段的值，后续发待办不应该传field参数，即使传了也会被系统忽略
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Creator">
            <summary>
            流程发起人openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.CreatorOrgId">
            <summary>
            流程发起人所属部门id，不填则默认为发起人主职部门
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.TtlType">
            <summary>
            流程节点处理超时类型。传standard表示使用系统标准超时设置（排除非工作时间），传natural表示使用自然时间超时设，默认为空，即不启用超。具体解释请参考智能审批节点超时设置。流程效率信息分析，依赖[统一流程中心]及[大数据流程效率门户]，购买后本选项方可生效。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.Ttl">
            <summary>
            流程节点处理超时时间，单位为分钟。当ttlType为standard时：-1：使用系统默认时间段作为超时时间段，>0：使用指定的时间作为超时时间。当ttlType为natural时：参数必须大于0，传0会进行业务报错。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.ActivityId">
            <summary>
            业务系统流程节点id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyData.ActivityName">
            <summary>
            业务系统流程节点名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.CopyToInfo">
            <summary>
            抄送人信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyToInfo.CopyTo">
            <summary>
            抄送人openid 必填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.CopyToInfo.BizId">
            <summary>
            业务系统的抄送id，用于唯一标识一条抄送。针对一个特定的业务系统（appId），调用方应确保bizId的唯一性 必填
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.DealToDoByActivityIdData">
            <summary>
            根据流程节点标记待办为已办
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DealToDoByActivityIdData.FlowId">
            <summary>
            业务系统流程实例id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DealToDoByActivityIdData.ActivityId">
            <summary>
            流程节点id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData">
            <summary>
            存为草稿
            说明：将流程存为草稿，存为草稿之后数据会出现在草稿箱。针对同一个流程(appId、flowId)可以多次调用存为草稿接口，多次调用存为草稿接口会更新单据字段，一旦某条草稿流程被发起之后则不允许再对该条流程调用存为草稿接口。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.WebFlowLink">
            <summary>
            草稿列表中将使用该地址做跳转（web端）id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.MobileFlowLink">
            <summary>
            草稿列表中将使用该地址做跳转（移动端）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.TypeId">
            <summary>
            业务系统模板id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.Urgency">
            <summary>
            紧急程度，从1到5
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.FlowId">
            <summary>
            业务系统流程id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.Title">
            <summary>
            流程标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.SerialNo">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.Field">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.Creator">
            <summary>
            草稿发起人openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.DraftSaveData.CreatorOrgId">
            <summary>
            草稿发起人部门id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.InitData">
            <summary>
            初始化模板数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.Buid">
            <summary>
            业务系统模板所属业务单元，如有启用权限中心则该字段可用来对模板做业务单元隔离。这里应填云之家部门id（orgId），填其他无效值将导致在模板管理界面看不见该模板。不填则默认属于根组织
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.TypeId">
            <summary>
            业务系统模板标识，可以是任意值，用于表示一个特定的流程模板，后续发待办时将根据该id确定流程的类型。在同一个业务系统内不同模板应当使用不同的typeId。比如付款申请流程的typeId可以是FQSK，请假申请的typeId可以是QJSQ
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.TypeName">
            <summary>
            业务系统模板名称，可以是任意值，用于标识一个特定的流程模板名称。在同一个业务系统内不同模板应当使用不同的typeName。比如付款申请的typeName可以是付款申请流程，请假申请的typeName可以是请假申请流程
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.AppName">
            <summary>
            流程中心对应模板所属分类的名称，一般可以填业务系统对应的云之家轻应用名称。对应分类创建后可以手动调整模板所属分类或分类名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.MobileUrl">
            <summary>
            业务系统的发起页面链接地址（移动端），不填则表示该模板不支持从移动端发起且该模板在移动端不可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.WebUrl">
            <summary>
            业务系统的发起页面链接地址（网页端），不填则表示该模板不支持从web端发起且该模板在网页端不可见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.Field">
            <summary>
            自定义表单字段。将取前3个字段作为重要字段，最多支持50个自定义字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.Creator">
            <summary>
            模板创建人id，这里应填云之家openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitData.Description">
            <summary>
            模板描述信息，最多200个字
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.InitField">
            <summary>
            初始化字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitField.Title">
            <summary>
            字段标题，同一个typeId下面的字段title不应重复
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.InitField.Type">
            <summary>
            字段类型，目前支持：textWidget=单行文本字段，numberWidget=数字字段，moneyWidget=金额字段，默认为textWidget
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.InitFileTypeEnum">
            <summary>
            初始化字段的字段类型枚举, 应用类InitField字段Type
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.UnifiedProcessModel.InitFileTypeEnum.textWidget">
            <summary>
            单行文本字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.UnifiedProcessModel.InitFileTypeEnum.numberWidget">
            <summary>
            数字字段
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.UnifiedProcessModel.InitFileTypeEnum.moneyWidget">
            <summary>
            金额字段
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.RegisterCallBackData">
            <summary>
            注册待阅已读通知
            说明：注册待阅已读通知接口，当标记全部为已读时将触发通知接口通知业务系统。待阅已读通知接口用于实现状态同步，将已读状态同步至业务系统。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.RegisterCallBackData.Callback">
            <summary>
            业务系统待办id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData">
            <summary>
            待办数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.WebLink">
            <summary>
            点击该条待办后的跳转地址（web端）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.MobileLink">
            <summary>
            点击该条待办后的跳转地址（移动端），不传的话则移动端待办列表该条数据将被置灰不能点击
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.WebFlowLink">
            <summary>
            我发起的列表和流程监控页面点击流程后的跳转地址(web端)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.MobileFlowLink">
            <summary>
            我发起的列表点击流程后的跳转地址（移动端），不传的话则移动端我发起的列表该条数据将被置灰不能点击
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Todo">
            <summary>
            审批信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.TypeId">
            <summary>
            紧急程度，从1到5
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Urgency">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.ProcessUrl">
            <summary>
            快捷同意url，设置了该url后将出现快捷同意按钮，如果不设置则表示该条待办不支持快捷同意
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.FlowId">
            <summary>
            业务系统流程实例id，能唯一标识一条流程
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Title">
            <summary>
            流程标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.SerialNo">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Field">
            <summary>
            字段值。针对针对同一个流程，首次发送待办时可以通过field字段指定表单字段的值，后续发待办不应该传field参数，即使传了也会被系统忽略
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Creator">
            <summary>
            流程发起人openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.CreatorOrgId">
            <summary>
            流程发起人所属部门id，不填则默认为发起人主职部门
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.TtlType">
            <summary>
            流程节点处理超时类型。传standard表示使用系统标准超时设置（排除非工作时间），传natural表示使用自然时间超时设，默认为空，即不启用超时。更多解释请参考智能审批节点超时设置。流程效率信息分析，依赖[统一流程中心]及[大数据流程效率门户]，购买后本选项方可生效。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.Ttl">
            <summary>
            流程节点处理超时时间，单位为分钟。传值说明：-1：使用系统默认时间段作为超时时间段；>0：使用指定的时间作为超时时间；0：不启用超时
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.ActivityId">
            <summary>
            业务系统流程节点id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.ActivityName">
            <summary>
            业务系统流程节点名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.ToDoData.YzjMsgId">
            <summary>
            云之家MsgId
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.TodoFieldAndValue">
            <summary>
            待办数据字段和值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoFieldAndValue.Name">
            <summary>
            字段名，即/gateway/flowcenter/native/init接口中的field参数的title字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoFieldAndValue.Value">
            <summary>
            字段值，数字、金格控件也传字符串格式的数字，比如"1000"
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.TodoInfo">
            <summary>
            审批信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoInfo.Approver">
            <summary>
            审批人openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoInfo.BizId">
            <summary>
            业务系统的待办id，用于唯一标识一条待办。针对一个特定的业务系统（appId），调用方应确保bizId的唯一性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoInfo.MessageMode">
            <summary>
            任务消息模型[MODE_TITLE(仅标题)、MODE_MESSAGE(仅消息)、MODE_TITLE_MESSAGE(标题+消息)]
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.TodoInfo.MessageContent">
            <summary>
            审批任务消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult`1">
            <summary>
            统一流程返回值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult`1.Success">
            <summary>
            成功标识 成功为 true 失败为false
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult`1.ErrorCode">
            <summary>
            具体错误编码 0 表示成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult`1.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcessResult`1.Data">
            <summary>
            接口出参
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcesssLog">
            <summary>
            统一流程日志数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcesssLog.IsSccess">
            <summary>
            请求接口是否成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcesssLog.ErroInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UnifiedProcessModel.UnifiedProcesssLog.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.UserContactInfo">
            <summary>
            用户联系方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UserContactInfo.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UserContactInfo.Email">
            <summary>
            接收邮箱
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.UserContactInfo.Phone">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.SendType">
            <summary>
            发送邮件方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.SmtpHost">
            <summary>
            Smtp服务器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.SmtpPort">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.EnableSSL">
            <summary>
            是否支持SSL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.UserName">
            <summary>
            邮箱账号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Password">
            <summary>
            邮箱密码，默认为加密字符串
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.PwdDecode">
            <summary>
            邮箱密码是否已解密，默认值为false=加密
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.From">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.FromName">
            <summary>
            发送邮件显示名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.To">
            <summary>
            接收邮件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Cc">
            <summary>
            抄送邮件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.BCC">
            <summary>
            密送邮件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Subject">
            <summary>
            邮件标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Body">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.IsBodyHtml">
            <summary>
            内容是否HTML编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Attachments">
            <summary>
            附件，表示附件文件的绝对物理路径。推荐使用
            实际附件包括Attachments和AttachmentStream
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.AttachmentStream">
            <summary>
            附件，表示附件文件名和Stream。兼容旧版本
            实际附件包括Attachments和AttachmentStream
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.EmailMessageInfo.IsMailBCC">
            <summary>
            所有邮件密送发送
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.EmailSendType.Exchange">
            <summary>
            不支持EmailMessageInfo.AttachmentStream属性
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.WFMessageType">
            <summary>
            流程消息类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.DefaultMessage">
            <summary>
            默认消息（未归类流程消息）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.NodeMessage">
            <summary>
            节点消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.PassRoundMessage">
            <summary>
            传阅消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.RemindMessage">
            <summary>
            催办消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.FailedMessage">
            <summary>
            流程挂起消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.WFMessageType.DiscussMessage">
            <summary>
            反馈消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTReceiverInfo">
            <summary>
            云之家消息接受者信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTReceiverInfo.UserId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTReceiverInfo.OpenId">
            <summary>
            云之家id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.PythonDetection.RuleExpressionWalker">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.PythonDetection.RuleExpressionWalker.RealExpression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.PythonDetection.RuleExpressionWalker.CallableNodes">
            <summary>
            检测到在表达式中使用的函数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.PythonDetection.PythonSyntaxAdaptUtil">
            <summary>
            Python 语法分析工具
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.PythonDetection.PythonSyntaxAdaptUtil.AnalyseSyntax(System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            表达式分析语法
            </summary>
            <param name="expression"></param>
            <param name="codeType"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Scripting.PythonDetection.PythonSyntaxAdaptUtil.forbidCallableFunctions">
            <summary>
            屏蔽高危的内建函数，调用他们可能会导致越权操作服务器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.PythonDetection.PythonSyntaxAdaptUtil.DealCompatibleSyntax(System.String)">
            <summary>
            处理语法兼容
            </summary>
            <param name="expr"></param>
        </member>
        <member name="T:Kingdee.BOS.TCP.TCPMessage">
            <summary>
            TCP报文实体类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.TCP.TCPMessage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.HostName">
            <summary>
            客户端主机名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.ClientType">
            <summary>
            终端类型
            </summary>
            <remarks>
            暂时只有服务器端接入，后续可扩展
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.Time">
            <summary>
            调用时间节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.Token">
            <summary>
            用户Token
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.Sign">
            <summary>
            签名，用于参数验证
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPMessage.Data">
            <summary>
            包体数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.TCP.TCPResult">
            <summary>
            TCP
            </summary>
        </member>
        <member name="M:Kingdee.BOS.TCP.TCPResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.TCP.TCPResult.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">结果编码</param>
            <param name="message">结果信息</param>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPResult.Code">
            <summary>
            结果编码，1为成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPResult.Message">
            <summary>
            结果信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.TCP.TCPResult.Data">
            <summary>
            结果数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.TCP.TCPResultCode">
            <summary>
            返回结果枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.TCP.TCPResultCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.TCP.TCPResultCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.KDImcRsaHelper">
            <summary>
            华为IMC服务器动态参数解密帮助类
            yaojunsong 2020-08-18
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDImcRsaHelper.RSADecryptByPublicKey(System.String,System.String,System.Text.Encoding)">
             <summary>
             公钥解密
            var ret = Kingdee.BOS.Util.RSAKeyHelper.RSADecryptByPublicKey(xmlKey, _imc_auth);
             </summary>
             <param name="sbPublicKey">C#格式公钥</param>
             <param name="strEncryptString">密文</param>
             <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.KDNotBuyLicenseException">
            <summary>
            没有购买许可异常
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionLicense">
            <summary>
            许可加密的错误类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNotBuyLicenseException.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">模块编码</param>
            <param name="modulName">模块名称</param>
            <param name="message">提示语</param>
        </member>
        <member name="M:Kingdee.BOS.KDNotBuyLicenseException.#ctor(Kingdee.BOS.Licence.VerifyResultInfo)">
            <summary>
            构造函数
            </summary>
            <param name="result">许可校验结果</param>
        </member>
        <member name="P:Kingdee.BOS.KDNotBuyLicenseException.ModulName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.Gsid">
            <summary>
            全局会话标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.TRLevel">
            <summary>
            跟踪等级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.SiteRecordNop">
            <summary>
            如：粤公网安备 44030502004999号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.SiteRecordNoe">
            <summary>
            如：粤ICP备05041751号-26
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.SiteRecordNopUrl">
            <summary>
            全国互联网安全管理服务平台网址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGlobalSession.SiteRecordNoeUrl">
            <summary>
            工信部ICP/IP地址/域名信息备案管理系统网址
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDGSRequest">
            <summary>
            请求获取KDGlobalSession的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDGSRequest.ServerUrl">
            <summary>
            k/3cloud地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.AcctID">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.Username">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.Password">
             <summary>
            密码
             </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.AuthSign">
            <summary>
            用户名和密码在客户端简单加密后的串，在登录校验时重新解码为用户名和密码（主要用于HTML5密码加密）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.Lcid">
            <summary>
            多语言ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.AuthenticateType">
            <summary>
            认证方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.ValidationCode">
            <summary>
            校验码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.LoginType">
            <summary>
            登录入口类型：1：正常ERP登录 2:客户门户外部登录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.PasswordIsEncrypted">
            <summary>
            密码是否已经加密；
            true:加密；false:非加密；
            默认值为true；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.IpAddress">
            <summary>
            登录的客户端IP
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.ComputerName">
            <summary>
            登录的客户端机器名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.RawSignData">
            <summary>
            原始数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.SignedData">
            <summary>
            签名数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.OpenToken">
            <summary>
            讯通token
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.EntryRole">
            <summary>
            入口应用路由标识，Map来自App_Data/EntryRouter.config
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.LoginMethod">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.SessionId">
            <summary>
            SessionId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.UserToken">
            <summary>
            UserToken
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.AppId">
            <summary>
            第三方应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.AppSecret">
            <summary>
            第三方应用Secret
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.Timestamp">
            <summary>
            登录时间戳(Unix时间戳,定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.RequstIP">
            <summary>
            获取远程客户端的 IP 主机地址(有可能是代理服务器地址）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.IgnoreVer">
            <summary>
            是否忽略校验版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.IsShowLoggedInMessage">
            <summary>
            是否显示用户已登录提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.IsSameUserToken">
            <summary>
            为true时，服务端使用传入的usertoken
            默认创建新Usertoken
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.KickoutFlag">
            <summary>
            登录是否踢人标记，0：系统默认 1：强制踢人 2：不踢人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.CustomizationParameter">
            <summary>
            自定义客户参数，用于自定义登录插件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.OrgNumber">
            <summary>
            组织编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.OriginalClientIP">
            <summary>
            客户端原始IP
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.SMSCode">
            <summary>
            短信验证码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.AuthSign">
            <summary>
            用户名和密码在客户端简单加密后的串，在登录校验时重新解码为用户名和密码（主要用于HTML5密码加密）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.PasswordIsEncrypted">
            <summary>
            密码是否已经加密；
            true:加密；false:非加密；
            默认值为true；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.EntryRole">
            <summary>
            入口应用路由标识，Map来自App_Data/EntryRouter.config
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.LoginMethod">
            <summary>
            登陆方法
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.SessionId">
            <summary>
            SessionId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.UserToken">
            <summary>
            UserToken
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.OpenToken">
            <summary>
            讯通token
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.IsSameUserToken">
            <summary>
            为true时，服务端使用传入的usertoken
            默认创建新Usertoken
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.KickoutFlag">
            <summary>
            登录是否踢人标记，0：系统默认 1：强制踢人 2：不踢人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.AppId">
            <summary>
            第三方应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfoBase.Timestamp">
            <summary>
            登录时间戳(Unix时间戳,定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginType">
            <summary>
            登录入口类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.PluginLoginType">
            <summary>
            插件登录入口类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.PluginLoginType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginMethod">
            <summary>
            登录方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.ClientInfo.Parse(System.String)">
            <summary>
            解析JSONObject文本为ClientInfo对象
            兼容HTML5，WPF，Silverlight各种终端
            </summary>
            <param name="clientInfoStr">JSONObject文本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.ClientInfo.Parse(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            解析JSONObject对象为ClientInfo对象
            兼容HTML5，WPF，Silverlight各种终端
            </summary>
            <param name="clientInfo">JSONObject对象</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.Version">
            <summary>
            客户端版本号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.MacAddress">
            <summary>
            客户端Mac地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.IpAddress">
            <summary>
            客户端IP地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.HostName">
            <summary>
            客户端主机名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.ClientType">
            <summary>
            终端类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.QBoardClientType">
            <summary>
            轻分析端类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.ScreenSize">
            <summary>
            屏幕分辨率大小
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.AvailableAreaSize">
            <summary>
            可用区域大小
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.EntryPageUrl">
            <summary>
            入口页面URL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.IsDefaultInfo">
            <summary>
            是否默认数据（false:为真实的客户端信息数据(默认值); true:为统一默认值，不是真实的客户端信息;）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.Gsid">
            <summary>
            用户访问标识
            </summary>       
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.TRLevel">
            <summary>
            跟踪等级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.OperationSystem">
            <summary>
            操作系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.BrowserType">
            <summary>
            浏览器类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.ClientInfo.ClientParameters">
            <summary>
            客户端传入参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginInfoUtils">
            <summary>
            关于LoginInfo对象的静态操作方法, 2017-03-07, yjs
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.CheckTransHTMLPassword(Kingdee.BOS.Authentication.LoginInfo)">
            <summary>
            检查转换HTML端传入的简单加密的用户密码为明文
            </summary>
            <param name="loginInfo">登陆信息</param>
            <returns>校验是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.CheckTransMobilePassword(Kingdee.BOS.Authentication.LoginInfo)">
            <summary>
            检查并转换移动加密账号密码，默认是密码加密的
            </summary>
            <param name="loginInfo">登录对象</param>
            <returns>是否转换移动加密账号密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.CheckTransMobilePassword(Kingdee.BOS.Authentication.LoginInfo,System.Boolean)">
            <summary>
            检查并转换移动加密账号密码
            </summary>
            <param name="loginInfo">登录对象</param>
            <param name="isEncrypt">是否对密码进行加密</param>
            <returns>是否转换移动加密账号密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.GetUnsigned(System.String)">
            <summary>
            解密authSign, 用于HTML5中登陆用户名密码信息的解密
            </summary>
            <param name="strSigned">签名的登陆信息，base64编码数据</param>
            <returns>明文字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.GetSigned(System.String)">
            <summary>
            加密authSign, 用于HTML5中登陆用户名密码信息的加密
            </summary>
            <param name="strSigned">签名的登陆信息,基于base64编码的加密数据</param>
            <returns>加密字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.EncryptH5UrlParams(System.String,System.String)">
            <summary>
            加密html5的url加密连接参数
            </summary>
            <param name="encStr"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.DecryptH5UrlParams(System.String,System.String)">
            <summary>
            解密html5的url加密连接参数
            </summary>
            <param name="encStr"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginInfoUtils.GetSignedV2(System.String,System.String)">
            <summary>
            加密authSign, 用于HTML5中登陆用户名密码信息的加密
            </summary>
            <param name="strSigned">签名的登陆信息,基于base64编码的加密数据</param>
            <returns>加密字符串</returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CASignDataResult">
            <summary>
            CA数据签名结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataResult.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataResult.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CertificateDetailInfo">
            <summary>
            证书详细信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResultInfo">
            <summary>
            登录结果(移除了上下文，用于反序列化）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginResultInfo.ToLoginResult">
            <summary>
            转化成登录结果
            </summary>
            <returns>登录结果</returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.MessageCode">
            <summary>
            提示信息代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.LoginResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.KDSVCSessionId">
            <summary>
            KDService-SessionID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.FormId">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.RedirectFormParam">
            <summary>
            登录后跳转表单参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.FormInputObject">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.ErrorStackTrace">
            <summary>
            增加一个服务端报错的堆栈信息，以便前端堆栈格式提示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.Lcid">
            <summary>
            语言id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.AccessToken">
            <summary>
            用户特征码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.KdAccessResult">
            <summary>
            云通行证验证结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResultInfo.IsSuccessByAPI">
            <summary>
            使用API调用登录接口时，判断是否登录成功
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.SimplePassport">
            <summary>
            第三方集成证书
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.Version">
            <summary>
            版本Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.AppId">
            <summary>
            应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.AppName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.AppSecret">
            <summary>
            应用密钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.DbId">
            <summary>
            数据中心Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.CreatTime">
            <summary>
            生成时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.Ciphertext">
            <summary>
            加密数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.RequireWhiteList">
            <summary>
            是否启用白名单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.SimplePassport.WhiteList">
            <summary>
            白名称（以,号分隔的数组）
            如：127.0.0.1,202.103.103.3
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppParameterProtocol">
            <summary>
            启动校验参数协议基类
            兼容多端输入和多协议格式以及多来源，统一定义输入参数为小写
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppParameterProtocol.C_ORIGINTYPE_YZJ">
            <summary>
            来自云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppParameterProtocol.customArgsMapUser">
            <summary>
            客制化参数映射到用户信息，或域签名串映射到用户信息存储池，也可以是数据库
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.Load(System.String)">
            <param name="data">when the data start with "test", the protocol parameter from map file is "username|passowrd|dbname|formid|pkid|formtype|usertoken"</param>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.IsUrlEncode(System.String)">
            <summary>
            自定义ud参数使用了UrlEncode编码
            </summary>
            <param name="custArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.DecodeUrlCustArgs(System.String)">
            <summary>
            url解码用户ud参数
            </summary>
            <param name="custArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.DecodeUDArgs(System.String,System.String)">
            <summary>
            解码参数串，包括base64和url
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.DecodingUDArgs(System.String)">
            <summary>
            解码参数串，包括base64和url
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocol.InitUDEncoding(System.String)">
            <summary>
            依据entryPageUrl初始化udencoding
            </summary>
            <param name="entryUrl"></param>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.formargs">
            <summary>
            打开指定表单预设参数（JSON格式）,例如：人人报销首页 ERX_HomePage 的打开参数 {"KD_Html5_FormTheme_Name":"Galaxy"}
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.udencoding">
            <summary>
            ud参数编码格式（默认为空，按服务器配置一次解码
            不为空时，按传入udencoding进行二次重新解码
            编号：WP0023697 一般云端系统需要接入各个其他系统
            在服务端统一设置编码格式并不方便，要协调统一所有二开供应商比较麻烦。
            如果由二开供应商自己定义编码并在免登入口ud参数中传入，就可以兼容各个二开供应商了。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.opentoken">
            <summary>
            外部令牌
            --目前暂时只有云之家入口使用2018-03-27
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.entryrole">
            <summary>
            入口角色
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.origintype">
            <summary>
            来源类型
            空:第三方插件校验；
            XT:来自云之家
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.fromclienttype">
            <summary>
            来自自动登录端
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppParameterProtocol.formheight">
            <summary>
            流式布局中，表单高度，0忽略
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterUtils.GetUDEncoding(System.String)">
            <summary>
            获取指定编码
            </summary>
            <param name="udencoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterUtils.GetUDArgsEncode">
            <summary>
            获取用户参数编码，默认是操作系统编码（中文为GB2312）
            允许用户在Common.config中指定StartAppPluginUDConfig用户参数编码 {encoding:'utf-8'}
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterUtils.DecodeUDArgs(System.String,System.String)">
            <summary>
            解码参数串，包括base64和url
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterUtils.GetParameter(System.String)">
            <summary>
            返回纯参数
            </summary>
            <param name="custArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterUtils.GetParameter(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            返回V2参数
            </summary>
            <param name="custArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppParameterProtocolV1">
            <summary>
            启动校验参数协议 版本1，字符串|分割的格式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocolV1.LoadCore(System.String)">
            <summary>
            协议一代，用|分割
            </summary>
            <param name="data">the protocol parameter is "|dbid|username|appid|signeddata|timestamp|lcid|formid|pkid|formtype|usertoken" with clear text or base64 text</param>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppParameterProtocolV2">
            <summary>
            启动校验参数协议 版本2，JSON对象字符串格式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocolV2.DecodingUDArgs(System.String)">
            <summary>
            解码参数串，包括base64和url
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocolV2.GetUDEncoding(System.String)">
            <summary>
            获取ud传入的udencoding编码对象
            </summary>
            <param name="jsonStr">json格式的明文数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppParameterProtocolV2.LoadCore(System.String)">
            <summary>
            协议二代，用json格式
            </summary>
            <param name="data">the protocol parameter is 
            "{dbid:'xx',username:'xx',appid:'xx',signeddata:'xx',timestamp:'xx',lcid:'xx',usertoken:'xx',formid:'xx',pkid:'xx',formtype:'xx'}"
            with clear text or base64 text</param>
        </member>
        <member name="T:Kingdee.BOS.BTree`2">
            <summary>
            A Generic BTree
            </summary>
            <typeparam name="TKey">The type of the key used by this BTree</typeparam>
            <typeparam name="TValue">The type of the values to be stored in this BTree</typeparam>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Contains(`0,`1)">
            <summary>
            Test if the subtree contains the key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>true if the key/value node exists</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.ContainsKey(`0)">
            <summary>
            Test if the subtres contains the key
            </summary>
            <param name="key">The key to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Find(`0,System.Boolean)">
            <summary>
            Find a node in the subtree that matches the specified key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">If true, the last matching node will be returned, if false, the first matching node will be returned</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Find(`0,`1)">
            <summary>
            Find a node in the subtree that matches the specified key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Count">
            <summary>
            The number of nodes in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.MaxDepth">
            <summary>
            The maximum depth of this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Largest">
            <summary>
            Returns the node with the largest key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Smallest">
            <summary>
            Returns the node with the smallest key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._root">
            <summary>
            The root node of this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._keyComparer">
            <summary>
            The key comparer delegate used to order keys in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._valueEqualityComparer">
            <summary>
            The value equality comparer used to locate values in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._count">
            <summary>
            The number of nodes in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._initializationCount">
            <summary>
            The count of the number of times BeginInit is called
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Construct a BTree
            </summary>
            <param name="allowDuplicates">if true, duplication keys are allowed</param>
            <param name="keyComparer">The delegate used to order keys</param>
            <param name="valueEqualityComparer">The delegate used to test value equality</param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Add(`0,`1)">
            <summary>
            Add a new node to the tree
            </summary>
            <param name="key">The key of the node</param>
            <param name="value">The value of the node</param>
            <returns>true if the node was added, false if the node was a duplicate and not added</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(`0,System.Boolean)">
            <summary>
            Remove a node from the tree
            </summary>
            <param name="key">The key of the node to be removed</param>
            <param name="lastNode">if true the last matching key will be removed, otherwise the first matching key will be removed</param>
            <returns>true if the node was removed, false if the node was not removed</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(`0,`1)">
            <summary>
            Remove a specific key/value from the tree
            </summary>
            <param name="key">The key to be removed</param>
            <param name="value">The value to be remvoed</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node
            </summary>
            <param name="currentNode">The node to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.removeNodeRight(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node using the right subtree
            </summary>
            <param name="parentNode"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.removeNodeLeft(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node using the left subtree
            </summary>
            <param name="parentNode"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ContainsKey(`0)">
            <summary>
            return true if the key exists in the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Contains(`0,`1)">
            <summary>
            return true if the key/value pair exist in the tree
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Contains(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            return true if the key exists in the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Find(`0,System.Boolean)">
            <summary>
            Return the tree node containing the matching key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">If true the last matching node will be returned, else the first matching node</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Find(`0,`1)">
            <summary>
            Return the tree node containing the matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToString">
            <summary>
            Convert the tree to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.GetEnumerator">
            <summary>
            Return a Node enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTree{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a subtree enumerator
            </summary>
            <returns>The subtree enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,System.Boolean)">
            <summary>
            Find a node containing a matchin key.
            
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">if true, the node with the last match key will be returned.  If false, the first matching node will be returned</param>
            <returns>the matching node, or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,`1)">
            <summary>
            Find a node that contains a matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToCString(System.String)">
            <summary>
            Convert a string to an escaped c-string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToString(System.Object)">
            <summary>
            Convert a value to a string representation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Clear">
            <summary>
            Clear the btree of all nodes
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.BeginInit">
            <summary>
            Indicate that the btree is initializing
            (Can be called more then once)
            While initializing CollectionChanged events are suppressed.
            <see cref="M:Kingdee.BOS.BTree`2.EndInit"/>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.EndInit">
            <summary>
            Indicate that the btree has finished initializing.
            Must be balance with BeginInit
            
            If the collection changed while initializing a CollectionChanged event with NotifyCollectionChangedAction.Reset will be emitted.
            <see cref="M:Kingdee.BOS.BTree`2.BeginInit"/>
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.AllowDuplicates">
            <summary>
            If true duplicates keys are allowed
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Root">
            <summary>
            The root node of this BTree.
            Null if the btree is empty
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Item(`0)">
            <summary>
            Gets or Sets the value of the first matching node for the supplied key.
            
            throws ArgumentOutOfRangeException if the node is not found on get
            
            On set if the node is found the value will be replaced, if not found a new node will be added to the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns>The value of the matching node</returns>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Count">
            <summary>
            The number of node in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Largest">
            <summary>
            The last node (ordered by key in the tree)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Smallest">
            <summary>
            The first node (ordered by key in the tree)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.MaxDepth">
            <summary>
            The maximum depth of this btree (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Largest">
            <summary>
            The node with the largest key in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Smallest">
            <summary>
            The node with the smallest key in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.IsInitializing">
            <summary>
            true if the Btree is initializing
            <see cref="M:Kingdee.BOS.BTree`2.BeginInit"/>
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BTree`2.Enumerator">
            <summary>
            The node enumerator used to walk the BTree
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BTree`2.Node">
            <summary>
            A node of the BTree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Depth">
            <summary>
            The zero-based depth of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Key">
            <summary>
            The node key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Value">
            <summary>
            The ndoe value
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Next">
            <summary>
            The next node, in key order
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Previous">
            <summary>
            The previous node, in key order
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.calculateMaxDepth(System.Int32)">
            <summary>
            calcuates the maximum depth of this subtree 
            </summary>
            <param name="parentDepth"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.#ctor(Kingdee.BOS.BTree{`0,`1},Kingdee.BOS.BTree{`0,`1}.Node,`0,`1)">
            <summary>
            Constructs a node with parent, key/value and no children
            </summary>
            <param name="tree">THe tree this node belongs to</param>
            <param name="parent">The parent of this node, null if this is the root node</param>
            <param name="key">The node key</param>
            <param name="value">The node value</param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.#ctor">
            <summary>
            Construct an empty node
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Remove">
            <summary>
            Remove this node from the tree
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Find(`0,System.Boolean)">
            <summary>
            Find a node by key in the subtree
            </summary>
            <param name="key"></param>
            <param name="lastNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Find(`0,`1)">
            <summary>
            Find a node containing the matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Contains(`0,`1)">
            <summary>
            returns true if the key/value exists in this subtree
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>true if the key/value exists</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.ContainsKey(`0)">
            <summary>
            returns true if the key exists in this subtree
            </summary>
            <param name="key">The key to look for</param>
            <returns>true if the key exists</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.ToString">
            <summary>
            Return a string representation of the subtree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.GetEnumerator">
            <summary>
            Creates an node enumerator for this BTree
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an node enumerator for this BTree
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,System.Boolean)">
            <summary>
            Finds a node matching the specified key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">if true the last matching node will be returned.  If false, the first matching node will be returned</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,`1)">
            <summary>
            Finds a node matching the specified key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTree{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a node enumerator 
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTreeNode{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a node enumerator 
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Depth">
            <summary>
            The zero-based depth of the current node (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.MaxDepth">
            <summary>
            The maximum depth of this subtree (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Count">
            <summary>
            The number of nodes in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Parent">
            <summary>
            The parent node.
            Parent will be null if this is the root node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Tree">
            <summary>
            The owning tree of this node.
            null if the node was deleted
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Left">
            <summary>
            The left node, or the smaller subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.HasLeft">
            <summary>
            True if there is a left node available
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Right">
            <summary>
            The right node, or the larger subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.HasRight">
            <summary>
            True if there is a right node available
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Key">
            <summary>
            The key of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Value">
            <summary>
            The value of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Next">
            <summary>
            The next node, in key order, in the subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Previous">
            <summary>
            The previous node, in key order, in the subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Largest">
            <summary>
            The node with the largest key in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Smallest">
            <summary>
            The node with the smallest key in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Largest">
            <summary>
            The largest node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Smallest">
            <summary>
            The smallest node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTreeNode{TKey@TValue}#Next">
            <summary>
            The next logical node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTreeNode{TKey@TValue}#Previous">
            <summary>
            The previous logical node in this subtree
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.IndexedArray`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.IndexedArray`1.AddIndex(System.String,System.Boolean)">
            <summary>
            增加索引
            </summary>
            <param name="prop">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.RebuildIndex(System.String)">
            <summary>
            建立/重建属性索引
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.Add(`0)">
            <summary>
            新增元素
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.Find(System.String,System.String)">
            <summary>
            查找元素
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.IndexedArray`1.Item(System.Int32)">
            <summary>
            获取指定索引元素
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.IndexedArray`1.Count">
            <summary>
            元素总数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.ExceptionInfo">
            <summary>
            异常信息,不做数据库保存，仅作为日志协助信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.ExceptionInfo.IsEmpty">
            <summary>
            空对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.ExceptionInfo.FillIn(Kingdee.BOS.LocaleValue)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.ExceptionInfo.FillIn(System.String)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.ExceptionInfo.IsWriteLog">
            <summary>
            需要写入日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.ExceptionInfo.GetInnerException">
            <summary>
            获取内部异常对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.ExceptionInfo.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.ExceptionInfo.Message">
            <summary>
            消息简要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.ExceptionInfo.StackTrace">
            <summary>
            跟踪堆栈
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.ExceptionInfo.SqlSource">
            <summary>
            sql错误脚本（不能发生前端，避免sql泄露）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.IBizTipsInfo">
            <summary>
            业务提示某一级别的业务提示数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.IWithException">
            <summary>
            携带Exception的接口
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IWithException.ExceptionInfo">
            <summary>
            对应异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Clone``1">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.LoadMsgArg(Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            载入上下文的环境内置参数
            </summary>
            <param name="arg"></param>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.MasterId">
            <summary>
            主表唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Id">
            <summary>
            数据库唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Number">
            <summary>
            业务提示信息编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.TipsLevel">
            <summary>
            消息级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Message">
            <summary>
            消息概要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.Description">
            <summary>
            消息明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.ErrorType">
            <summary>
            错误类型标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.MsgButtons">
            <summary>
            消息按钮组合类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.IsShowDetail">
            <summary>
            显示明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.IsUnhit">
            <summary>
            新发掘的键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.CallBackActionId">
            <summary>
            回调服务端事件Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.MsgInnerInfos">
            <summary>
            消息内部控件列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfo.CommunitySolutionCode">
            <summary>
            社区错误对接码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.IBizTipsInfos">
            <summary>
            合并所有级别的业务信息到一个对象中
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.FillIn(Kingdee.BOS.Orm.DataEntity.DynamicObject@)">
            <summary>
            填写动态对象
            </summary>
            <param name="dyType"></param>
            <param name="dataRow"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.Load(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            由App层的BusinessDataService获取BizTips列表返回的DynamicObjectCollection填充对象
            </summary>
            <param name="dataRows"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsValid">
            <summary>
            有效提示语
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsExtend">
            <summary>
            是否扩展提示语条目
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsForceUpdate">
            <summary>
            强制更新（当远程中心更新到本地管理中心时，要强制更新，否则已经审核的条目是不能更新的）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.Id">
            <summary>
            数据库唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ObjectTypeId">
            <summary>
            业务对象类型Id（FormId）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.Number">
            <summary>
            数据库唯一编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ISV">
            <summary>
            开发商代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.CustomName">
            <summary>
            软件使用客户名称（用于自动捕获时的首个捕获客户名称记录，长度255，数据库510）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.SubSystemId">
            <summary>
            子系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.TopClassId">
            <summary>
            领域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.Name">
            <summary>
            提示名称（非正式提示语，用于对该提示词条进行简单说明）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsUnhit">
            <summary>
            新发现条目
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsUnhitUpload">
            <summary>
            新发现条目已上传
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsSysPreset">
            <summary>
            系统预置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.IsShowDetail">
            <summary>
            显示明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.MsgButtons">
            <summary>
            消息按钮组合类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.DocumentStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ForbidStatus">
            <summary>
            禁用状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.AsmVer">
            <summary>
            组件版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ModifyDate">
            <summary>
            修改日期时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ModifierId">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.CreateDate">
            <summary>
            创建日期时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.CreatorId">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ROUType">
            <summary>
            应用范围
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.ExtendType">
            <summary>
            扩展类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.Levels">
            <summary>
            跟踪层级的消息
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.LanguageNumbers”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:Kingdee.BOS.BizTipsInfo.IBizTipsInfos.StackInfos”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter">
            <summary>
            批量修改执行参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.DataSrcType">
            <summary>
            数据类型（For Debug）, MC_XX 管理中心, Remote_xx 远程信息中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.Keys">
            <summary>
            键值集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.PropertyName">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.DBType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.Value">
            <summary>
            批改值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBatchUpdateParameter.KeyFieldName">
            <summary>
            键值字段名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDMesType">
            <summary>
            消息框类型枚举（服务端）
            保持与 Kingdee.BOS.Client.Core\Message\KDMessageType.cs一致
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesType.Normal">
            <summary>
            一般提示
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesType.Ok">
            <summary>
            提问确定或取消
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesType.Question">
            <summary>
            提问是否
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDMesButtons">
            <summary>
            消息框的按钮类型枚举（服务端）
            保持与 Kingdee.BOS.Client.Core\Message\KDMessageBoxOptions.cs一致
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.Ok">
            <summary>
            OK/确认 按钮 
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.OkCancel">
            <summary>
            OK + Cancel按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.AbortRetryIgnore">
            <summary>
            Abort + Retry + Ignore
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.YesNoCancel">
            <summary>
            Yes + No + Cancel按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.YesNo">
            <summary>
            Yes + No按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.RetryCancel">
            <summary>
            Retry + Cancel按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDMesButtons.None">
            <summary>
            无按钮
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType">
            <summary>
            扩展类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType.Default">
            <summary>
            默认，出厂提示语条目，没有下级扩展；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType.Parent">
            <summary>
            出厂提示语条目，存在下级扩展数据；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType.ExtParent">
            <summary>
             扩展（二开）提示语条目，并存在下级扩展数据；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType.Child">
            <summary>
            扩展（二开）提示语条目，没有下级扩展；
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase">
            <summary>
            消息基类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_Split_Chars">
            <summary>
            分割符
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_Num_ABS">
            <summary>
            绝对编号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_NUM_B_LEN">
            <summary>
            编码长度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_MSG_LEN">
            <summary>
            消息长度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_DES_LEN">
            <summary>
            详细消息长度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_BR">
            <summary>
            换行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.C_REG_AFTER_SPLITER">
            <summary>
            5000 spliter 之后的都放置到参数KDBizTipsMsgArgs后面提取
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.#ctor(Kingdee.BOS.LocaleValue,Kingdee.BOS.LocaleValue)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.#ctor(System.Exception,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase._msgVars_Order_Machs">
            <summary>
            替换消息中动态数据匹配规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase._msgVars_AutoHolder">
            <summary>
            判断是自动参数占位符
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.RegularNumber(System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfo,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.String@)">
            <summary>
            规范Number字段;
            </summary>
            <param name="srcNumber">前缀</param>
            <param name="bti">
            bti.Number="xxxx::CHN_MSG" 相对编码 xxxx，实际编码自动生成 KD_[SVC?|BOS?]_xxxx
            bti.Number="ABS_xxxx::CHN_MSG" 绝对编码 xxxx, 实际编码为 xxxx
            </param>
            <param name="args">消息参数</param>
            <param name="message">返回去掉编码前缀的原始消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.RegularNumber(System.String,System.Exception,System.String@)">
            <summary>
            规范Number字段;
            </summary>
            <param name="srcNumber">前缀</param>
            <param name="ex">
            ex.Message="xxxx::CHN_MSG" 相对编码 xxxx，实际编码自动生成 KD_[SVC?|BOS?]_xxxx
            ex.Message="ABS_xxxx::CHN_MSG" 绝对编码 xxxx, 实际编码为 xxxx
            </param>
            <param name="message">返回去掉编码前缀的原始消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.RegularNumber(System.String,System.Exception,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.String@)">
            <summary>
            规范Number字段;
            </summary>
            <param name="srcNumber">前缀</param>
            <param name="ex">
            ex.Message="xxxx::CHN_MSG" 相对编码 xxxx，实际编码自动生成 KD_[SVC?|BOS?]_xxxx
            ex.Message="ABS_xxxx::CHN_MSG" 绝对编码 xxxx, 实际编码为 xxxx
            </param>
            <param name="args">参数包</param>
            <param name="message">返回去掉编码前缀的原始消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.RegularNumber(System.String,System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.String@)">
            <summary>
            规范Number字段;
            </summary>
            <param name="srcNumber">前缀</param>
            <param name="srcMessage">
            subffix="xxxx::CHN_MSG" 相对编码 xxxx，实际编码自动生成 KD_[SVC?|BOS?]_xxxx
            subffix="ABS_xxxx::CHN_MSG" 绝对编码 xxxx, 实际编码为 xxxx
            </param>
            <param name="srcMessage">源消息</param>
            <param name="args">消息参数</param>
            <param name="message">返回去掉编码前缀的原始消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.IsSplitCharNumber(System.String)">
            <summary>
            是通过分隔符指定编码的消息
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.RegularMessage(System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            获取消息模版并提取消息参数
            </summary>
            <param name="srcMsg">源消息</param>
            <param name="arg">消息参数</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.GetAbsSuffix(System.String)">
            <summary>
            获取消息的绝对标签 Kingdee.BOS\BizTipsInfo\KDBizTipsInfoBase.cs
            </summary>
            <param name="substr">标签编码，例如："ABC"</param>
            <returns>消息标签，例如："ABS_ABC::"</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.GetRexSuffix(System.String)">
            <summary>
            获取消息的相对标签 Kingdee.BOS\BizTipsInfo\KDBizTipsInfoBase.cs
            </summary>
            <param name="substr">标签编码，例如："ABC"</param>
            <returns>消息标签，例如："ABC::"</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.GetParaPlaceHolder(System.String)">
            <summary>
            获取参数占位符号
            </summary>
            <param name="paraName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Clone``1">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.LoadMsgArg(Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            载入上下文的环境内置参数
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.FillIn(Kingdee.BOS.LocaleValue)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.FillIn(System.String)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.GetMD5String(System.String)">
            <summary>
            将字符串用MD5进行HASH,只取32位
            </summary>
            <param name="strtmp"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.ExceptionInfo">
            <summary>
            对应异常
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.MasterId">
            <summary>
            主表唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Id">
            <summary>
            数据库唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Number">
            <summary>
            业务提示信息编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.TipsLevel">
            <summary>
            消息级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Message">
            <summary>
            消息概要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.Description">
            <summary>
            消息明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.MsgButtons">
            <summary>
            消息按钮组合类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.IsShowDetail">
            <summary>
            显示明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.IsUnhit">
            <summary>
            新发现条目
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.IsUnhitUpload">
            <summary>
            新发现条目已上传
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.ErrorType">
            <summary>
            错误类型标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.CallBackActionId">
            <summary>
            回调服务端事件Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.MsgInnerInfos">
            <summary>
            消息内部控件列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfoBase.CommunitySolutionCode">
            <summary>
            社区错误对接码成员
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfo.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos">
            <summary>
            合并所有级别的业务信息到一个对象中
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.C_UPDATE_FLAG_KEY">
            <summary>
            所有信息更新状态查询主键
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.C_Cache_Tag">
            <summary>
            所有业务提示信息的标签
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsValid">
            <summary>
            有效提示语
            </summary>
            <returns>
            T=有效，加入前端显示缓存；
            F=无效，移除前端显示缓存
            </returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsExtend">
            <summary>
            是否扩展提示语条目
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.GetTipsInfo(Kingdee.BOS.BizTipsInfo.KDStackTraceLevel,Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            获取某个级别的TipsInfo
            </summary>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Load(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            由App层的BusinessDataService获取BizTips列表返回的DynamicObjectCollection填充对象
            </summary>
            <param name="dataRows"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsTrueValue(System.Object)">
            <summary>
            真值判断
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.GetDyObjInt``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String)">
            <summary>
            获取动态对象的int或long等值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.FillIn(Kingdee.BOS.Orm.DataEntity.DynamicObject@)">
            <summary>
            填写动态对象
            </summary>
            <param name="dyType"></param>
            <param name="dataRow"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.CreateUnhit(System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            创建未命中的对象
            </summary>
            <param name="code">消息编码</param>
            <param name="arg">消息参数</param>
            <param name="def">默认消息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.GetLimitStr(System.String,System.Int32)">
            <summary>
            获取限定长度字符串
            </summary>
            <param name="ret"></param>
            <param name="strMsg"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.FillinStackInfo(Kingdee.BOS.BizTipsInfo.KDBizTipsInfos,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.Boolean,Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            填入堆栈信息
            </summary>
            <param name="ret"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsForceUpdate">
            <summary>
            强制更新（当远程中心更新到本地管理中心时，要强制更新，否则已经审核的条目是不能更新的）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Id">
            <summary>
            数据库唯一键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ObjectTypeId">
            <summary>
            业务对象类型Id（FormId）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Number">
            <summary>
            数据库唯一编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ISV">
            <summary>
            开发商代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.CustomName">
            <summary>
            软件使用客户名称（用于自动捕获时的首个捕获客户名称记录，长度255，数据库510）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.SubSystemId">
            <summary>
            子系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.TopClassId">
            <summary>
            领域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Name">
            <summary>
            提示名称（非正式提示语，用于对该提示词条进行简单说明）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Description">
            <summary>
            提示描述（非正式提示语，用于对该提示词条进行详细说明）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsUnhit">
            <summary>
            新发现条目
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsSysPreset">
            <summary>
            系统预置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsShowDetail">
            <summary>
            显示明细
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.DocumentStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ForbidStatus">
            <summary>
            禁用状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ModifyDate">
            <summary>
            修改日期时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ModifierId">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.CreateDate">
            <summary>
            创建日期时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.CreatorId">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.IsUnhitUpload">
            <summary>
            已上传新发现条目
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.MsgButtons">
            <summary>
            消息按钮组合类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ROUType">
            <summary>
            应用范围
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.ExtendType">
            <summary>
            扩展类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.Levels">
            <summary>
            信息级别内容
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.LanguageNumbers”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.StackInfos”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInfos.AsmVer">
            <summary>
            组件版本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate">
            <summary>
            业务提示语调查（BOS_BIZTIPS_INVESTIGATE）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.FillIn(Kingdee.BOS.Orm.DataEntity.DynamicObject@)">
            <summary>
            填写动态对象
            </summary>
            <param name="dyType"></param>
            <param name="dataRow"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.Load(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            由App层的BusinessDataService获取KDBizTipsInvestigate列表返回的DynamicObjectCollection填充对象
            </summary>
            <param name="dataRows"></param>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.Id">
            <summary>
            流水码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.BizTipsNumber">
            <summary>
            业务提示语编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.ExtendType">
            <summary>
            扩展类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.Helpful">
            <summary>
            有帮助的
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.InvestigateValue">
            <summary>
            调查值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.CustomName">
            <summary>
            用户名称（金蝶云星空的用户名，Context.CustomName）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.ModifyDate">
            <summary>
            提交时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.CreateDate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.IpAddress">
            <summary>
            提交的客户端IP信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.NameRetain">
            <summary>
            调查表答案对应的名称保留值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.AsmVer">
            <summary>
            组件版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsInvestigate.LocaleId">
            <summary>
            语言LocaleId
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsManager">
            <summary>
            业务提示管理器
            初始化代码和获取提示数据示例
            Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetInstance().SetBizTipsInfosCache(AcctServiceHelper.GetBizTipsInfos());
            Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetInstance().GetBizTipsInfo("KD_BPF_FLUIDSETTINGEXIST");
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetInstance">
            <summary>
            获取BizTIpsManager单例(全局)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetCacheTimeSpan">
            <summary>
            获取业务提示语缓存的超期时间（默认为365天）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetInstance(Kingdee.BOS.Context)">
            <summary>
            获取BizTIpsManager单例（数据中心）
            </summary>
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetAutoCodeingBizKey">
            <summary>
            获取提示语自动编码的固定前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.TryDealWith(System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfo,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.String@)">
            <summary>
            web层试图处理正常消息
            </summary>
            <param name="bizKey">消息编码（bti.Message中如果传入Number是绝对还是相对来决定用法）</param>
            <param name="bti">默认消息内容对象</param>
            <param name="arg">代入参数对象</param>
            <param name="originMessage">返回提取的原始信息</param>
            <returns>获取到消息对象（如果没有获取到就为null）</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.TryDealWithDef(System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfo,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.String@)">
            <summary>
            web层试图处理正常消息
            </summary>
            <param name="bizKey">消息编码（bti.Message中如果传入Number是绝对还是相对来决定用法）</param>
            <param name="bti">默认消息内容对象</param>
            <param name="arg">代入参数对象</param>
            <param name="originMessage">返回提取的原始信息</param>
            <returns>获取到消息对象指令Action包（如果没有获取到就为null）</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.TryDealWithException(System.String,System.Exception,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,System.Collections.IList,System.String@)">
            <summary>
            web层试图处理异常
            </summary>
            <param name="bizKey">消息编码（bti.Message中如果传入Number是绝对还是相对来决定用法）</param>
            <param name="ex">需要处理的异常对象</param>
            <param name="arg">代入参数对象</param>
            <param name="pparams">异常时需要写入日志的参数</param>
            <param name="originMessage">返回提取的原始信息</param>
            <returns>获取到消息对象指令Action包（如果没有获取到就为null）</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.TryGetBizTipsInfoWithException(System.String,System.Exception,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs,Kingdee.BOS.BizTipsInfo.IBizTipsInfo@)">
            <summary>
            根据异常Excepiton尝试获取业务提示信息
            用于业务代码插件代码主动捕获异常，相应业务提示信息显示处理
            </summary>
            <param name="bizKey">消息编码（bti.Message中如果传入Number是绝对还是相对来决定用法）</param>
            <param name="ex">需要处理的异常对象</param>
            <param name="arg">代入参数对象</param>
            <param name="bizTipsInfo">返回提取的业务提示信息</param>
            <returns>获取成返回ture；否则返回false;</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.StartInit(System.Action{Kingdee.BOS.Context},Kingdee.BOS.Context)">
            <summary>
            启动初始化任务
            KDBizTipsManager.GetInstance().StartInit(()=> 
                KDBizTipsManager.GetInstance().SetBizTipsInfosCache(AcctServiceHelper.GetBizTipsInfos()));
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.BackgroundInvoke(System.Action{Kingdee.BOS.Context},Kingdee.BOS.Context)">
            <summary>
            后台任务调用
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.ObsoleteCache">
            <summary>
            强制缓存过期
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.SetBizTipsInfosCache(System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfos)">
            <summary>
            单条写入缓存数据
            </summary>
            <param name="code"></param>
            <param name="tipsInfo"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetAllBizTipsFromCache">
            <summary>
            获取缓存所有业务提示语条目（仅用于调试目的）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.SetBizTipsInfosCache(System.Collections.Generic.IDictionary{System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfos})">
            <summary>
            批量载入缓存数据
            </summary>
            <param name="tipsInfos"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetLastModifyDate">
            <summary>
            获取缓存最后更新时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetBizTipsInfo(System.String,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            获取业务消息
            </summary>
            <param name="code">KD_[SUBSYSTEM]_[SUBMODEL]_[BIZ],eg. KD_BOS_META_ELMISS(元素丢失)</param>
            <param name="arg">当前上下文相关内置参数</param>
            <returns>KDBizTipsInfo</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetBizTipsInfo(System.String,Kingdee.BOS.BizTipsInfo.IBizTipsInfo,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            获取业务消息
            </summary>
            <param name="code">KD_[SUBSYSTEM]_[SUBMODEL]_[BIZ],eg. KD_BOS_META_ELMISS(元素丢失)</param>
            <param name="def">默认消息内容</param>
            <param name="arg">当前上下文相关内置参数</param>
            <returns>KDBizTipsInfo</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetCurrentTraceLevel">
            <summary>
            获取当前设置的跟踪级别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetBizTipsInfo(System.String,System.Exception,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            获取业务消息
            </summary>
            <param name="code">KD_[SUBSYSTEM]_[SUBMODEL]_[BIZ],eg. KD_BOS_META_ELMISS(元素丢失)</param>
            <param name="ex">Exception</param>
            <param name="arg">当前上下文相关内置参数</param>
            <returns>KDBizTipsInfo</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetBizTipsInfo(System.String,Kingdee.BOS.KDException,Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs)">
            <summary>
            获取业务消息
            </summary>
            <param name="code">KD_[SUBSYSTEM]_[SUBMODEL]_[BIZ],eg. KD_BOS_META_ELMISS(元素丢失)</param>
            <param name="ex">KDException</param>
            <param name="arg">当前上下文相关内置参数</param>
            <returns>KDBizTipsInfo</returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetUnhitBizTipsInfosList(System.Boolean)">
            <summary>
            获取未命中的信息条目代码
            </summary>
            <param name="clear">true:获取完成后清零，false:不清零</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetCacheCode(System.String)">
            <summary>
            获取缓存键值
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetCacheArea">
            <summary>
            获取缓存区码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetCacheArea(Kingdee.BOS.Context)">
            <summary>
            依据上下文获取区码
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.PutInvestigate(Kingdee.BOS.BizTipsInfo.KDClientBizTipsInvestigateArgs,Kingdee.BOS.Context)">
            <summary>
            收集调查数据
            </summary>
            <param name="e"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.GetInvestigates(System.Boolean)">
            <summary>
            提取调查数据
            </summary>
            <param name="clear"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsManager.AppContext">
            <summary>
            当前应用上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs">
            <summary>
            消息内部定制参数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.C_FormId">
            <summary>
            表单ID
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.C_MethodName">
            <summary>
            调用方法名称
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.C_BizTipsNumber">
            <summary>
            自动计算或定制的业务提示信息编码（可用于回传或参数显示）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.C_BizTipsSuffix">
            <summary>
            传入业务提示语的编码后缀（如果在消息中已经定义了编码，这个后缀就会失效）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.C_KeyRepeat_Limit">
            <summary>
            替换关键字最大重复数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs._CurKeyRepeat">
            <summary>
            替换关键字当前重复次数计数器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.GetCommunityErrorSolutionsCode(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据相关参数进行MD5加密获取对应社区错误解决方案的编码
            </summary>
            <param name="domain">领域</param>
            <param name="module">模块</param>
            <param name="bizentity">菜单ID</param>
            <param name="formid">表单对象ID</param>
            <param name="param">扩展参数</param>
            <param name="tipsnumber">提示框架产生的错误编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.RegularMessage(System.String)">
            <summary>
            根据内部参数获取消息模版
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.Put(System.String,System.String)">
            <summary>
            写入动态参数
            </summary>
            <param name="key">参数编码：系统.[功能.](定制)</param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.IsNameNull">
            <summary>
            空名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.IsNull(System.String)">
            <summary>
            空参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FillIn(Kingdee.BOS.LocaleValue)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FillIn(System.String)">
            <summary>
            填充参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FillContextIn(System.String)">
            <summary>
            填充上下文参数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FormId">
            <summary>
            对应表单ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FormName">
            <summary>
            对应表单名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.BillNo">
            <summary>
            对应单据编码,或基础资料编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.FNAME">
            <summary>
            对应基础资料名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.MethodName">
            <summary>
            对应方法名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.BizTipsNumber">
            <summary>
            自动计算或定制的业务提示信息编码（可用于回传或参数显示）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.ISV">
            <summary>
            开发商信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.CustomName">
            <summary>
            客户信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.IpAddress">
            <summary>
            客户端地址信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.UserName">
            <summary>
            登录账户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.UserId">
            <summary>
            登录账户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.OperationKey">
            <summary>
            当前操作关键字[{OperationKey:'xxx'}]
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.SubSystemId">
            <summary>
            子系统ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.ObjectTypeId">
            <summary>
            对象类型ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.ConsoleDetailId">
            <summary>
            菜单ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.TopClassId">
            <summary>
            所属模块ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.LayoutId">
            <summary>
            布局ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.CommunitySolutionCode">
            <summary>
            社区错误对接码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.AsmVer">
            <summary>
            组件版本（Kingdee.BOS.dll）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsMsgArgs.BizTipsSuffix">
            <summary>
            传入业务提示语的编码后缀（如果在消息中已经定义了编码，这个后缀就会失效）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDClientBizTipsInvestigateArgs">
            <summary>
            客户端业务消息调查参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDClientBizTipsInvestigateArgs.IsMasterIdNumber">
            <summary>
            False:MasterId 字段存储了TipBizId; True:MasterId 字段存储了TipBizNumber
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDClientBizTipsInvestigateArgs.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDClientBizTipsInvestigateArgs.AsmVer">
            <summary>
            组件版本（Kingdee.BOS.dll）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase">
            <summary>
            业务提示查询参数基类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.#ctor(System.Boolean,Kingdee.BOS.Context)">
            <summary>
            构造
            </summary>
            <param name="isAll"></param>
            <param name="ctx"></param>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.AppContext">
            <summary>
            当前应用上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.DataSrcType">
            <summary>
            数据类型（For Debug）, MC_XX 管理中心, Remote_xx 远程信息中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.FID">
            <summary>
            用主键FID查询
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.QueryLimit">
            <summary>
            查询条目限定（-1不限定）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.ModifyDate">
            <summary>
            修改日期时间， DateTime.MinValue 忽略
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.Number">
            <summary>
            编码，为空忽略
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.ExtendType">
            <summary>
            扩展类型, -1:忽略参数，其他参考Kingdee.BOS.BizTipsInfo.KDBizTipsExtendType
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.IsAll">
            <summary>
            是否全部载入, false:仅取增量不会；true:取全部
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.NoCache">
            <summary>
            不使用缓存
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.DocumentStatus">
            <summary>
            提示语条目状态（Kingdee.BOS.Core.Enums.BOSEnums.Enu_BillStatus）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.ExcludeCreatedOrTemp">
            <summary>
            排除创建和暂存状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.ForbidStatus">
            <summary>
            提示语条目禁用状态（Kingdee.BOS.Core.Enums.BOSEnums.Enu_ForbidStatus）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameterBase.IsSysPreset">
            <summary>
            查询系统预制信息， 
            -1:忽略参数；
            0=false， 非系统预设数据;
            1=true， 是系统预设数据;
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter">
            <summary>
            业务提示查询参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.#ctor(System.Boolean,Kingdee.BOS.Context)">
            <summary>
            构造
            </summary>
            <param name="isAll"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.GetFilterClauseWihtKey(System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            获取过滤条件
            </summary>
            <param name="sqlParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.GetFilterClauseWihtKeyDefault(System.Int32)">
            <summary>
            获取默认过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.UnhitUploadType">
            <summary>
            是否已上传新发现条目， 0未上传，1以上传，-1忽略选项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsQueryParameter.UnhitType">
            <summary>
            是否查询新发现条目， 0非新条目，1新条目，-1忽略选项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter">
            <summary>
            业务提示调查表查询参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter.GetFilterClauseWihtKey(System.Collections.Generic.List{Kingdee.BOS.SqlParam}@)">
            <summary>
            获取过滤条件
            </summary>
            <param name="sqlParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter.GetFilterClauseWihtKeyDefault">
            <summary>
            获取默认过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipInvestigateQueryParameter.UploadType">
            <summary>
            是否已上传新发现条目， 0未上传，1以上传，-1忽略选项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig">
            <summary>
            业务消息中心服务器配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.C_Encrypt_Flag">
            <summary>
            加密参数标记
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.ServerConnectedFailure">
            <summary>
            服务连接失败
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.SetFlagServerFailure(System.Boolean)">
            <summary>
            标记服务失败为True，直到下次启动iis才重新尝试连接
            一旦标记为True，ByClient将强制返回True
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.IsTipsCenterFailure">
            <summary>
            远程中心连接失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.GetLoginInfo">
            <summary>
            依据配置获取登录LoginInfo对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.GetServerConfig">
            <summary>
            获取配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.GetRemoteBizTipsCenterAuthSign(System.String,System.String,System.String)">
            <summary>
            获取加密远程消息提示中心登录信息
            </summary>
            <param name="dbId">数据中心ID</param>
            <param name="userName">用户名</param>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.ObsoleteDays">
            <summary>
            保留捕获的未上传提示语相关信息数据天数和未上传调查数据天数(默认30天)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.TipsCenterUrl">
            <summary>
            云消息服务中心地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.AcctNumber">
            <summary>
            指定远程消息的数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.AutoDownload">
            <summary>
            自动下载远程提示语中心数据到本地管理中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.AuthSign">
            <summary>
            签名数据, 默认为LoginInfo的json
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.SignType">
            <summary>
            签名模式， 默认为 “HTMLSimpleSign”
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.IsCenter">
            <summary>
            当前是提示信息中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.CenterEnabled">
            <summary>
            激活业务提示信息中心配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.Enabled">
            <summary>
            激活业务提示信息架构
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BizTipsInfo.KDBizTipsServerConfig.ByClient">
            <summary>
            由客户端发起
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils">
            <summary>
            业务提示语静态方法类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.GetDyObjInt``1(Kingdee.BOS.JSON.JSONObject,System.String,System.String)">
            <summary>
            获取JSONObject属性值int或long值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.GetDyObjInt``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.String)">
            <summary>
            获取动态对象的int或long等值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.IsTrueValue(System.Object)">
            <summary>
            真值判断
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.SetPropertyValue``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,System.Object)">
            <summary>
            写入动态对象属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.GetPropertyValue``1(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String,``0)">
            <summary>
            获取动态对象属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="propName"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.LimitTrimStr(System.String,System.Int32)">
            <summary>
            获取字符串限定字符
            </summary>
            <param name="str"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDBizTipsUtils.GetAsmVersion(System.String)">
            <summary>
            获取组件版本
            </summary>
            <param name="defVer"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDContext_BizTips_Ext">
            <summary>
            业务提示信息：上下文对象的扩展方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDContext_BizTips_Ext.IsBizTipsEnv(Kingdee.BOS.Context)">
            <summary>
            符合业务提示信息运行的环境
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BizTipsInfo.KDContext_BizTips_Ext.IsBizTipsPostBySvr(Kingdee.BOS.Context)">
            <summary>
            由服务端发起上传云中心数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDROUType">
            <summary>
            应用范围, Range of use=ROU,值按2的n次方递增，在二进制中只占一位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.AppServer">
            <summary>
            应用服务器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.GUI">
            <summary>
            GUI客户端，包括WPF、Silverlight
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.HTML5">
            <summary>
            HTML5端
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.IDE">
            <summary>
            BOSIde
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDROUType.Mobile">
            <summary>
            移动端
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BizTipsInfo.KDStackTraceLevel">
            <summary>
            业务提示语级别枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDStackTraceLevel.Err">
            <summary>
            错误数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDStackTraceLevel.Biz">
            <summary>
            业务级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDStackTraceLevel.DBG">
            <summary>
            调试级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BizTipsInfo.KDStackTraceLevel.Dev">
            <summary>
            程序级
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.IKCacheManager">
            <summary>
            Kingdee Cache Manager Interface
            <example>IKCacheManager KCMger = KCacheManagerFactory.Instance.GetCacheManager("Customer", "2");</example>
            <remarks></remarks>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="ts">超时设置，默认看配置信息，一般是300秒</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <param name="version">传入上一次缓存项的版本或返回缓存项的当前版本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="ts">超时设置，默认看配置信息，一般是300秒</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <param name="version">传入上一次缓存项的版本或返回缓存项的当前版本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Kingdee.BOS.Cache.KCacheItem}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}}@)">
            <summary>
            批量写入缓存
            </summary>
            <param name="keys">写入缓存信息列表，List[KeyValuePair[string,KCacheItem]]</param>
            <param name="vers">返回缓存版本列表</param>
            <returns><!-- List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="key">缓存项Key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.GetByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            批量获取缓存项
            </summary>
            <param name="tags">Put方法加入的tags，如果没有穿默认会加入Region和Key值。</param>
            <param name="by">参考GetBy枚举描述</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="key">缓存项Key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Remove(System.Collections.Generic.List{System.String})">
            <summary>
            批量移除缓存项 By Key列表
            </summary>
            <param name="keys"><!-- 缓存Key值列表，List<string> --></param>
            <returns><!-- 缓存移除结果集，List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.RemoveByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            批量移除缓存项 By Tags列表
            </summary>
            <param name="tags"><!-- Tags列表List<string> --></param>
            <param name="by"> 参见枚举类型KCacheEnum.GetBy </param>
            <returns><!-- 缓存移除结果集，List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.ClearRegion">
            <summary>
            清理缓存区域
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.ServerDescription">
            <summary>
            获取对应Cache服务器的描述信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.SetDefaultRegion(System.String,System.String)">
            <summary>
            设置Cache Manager的默认区域
            </summary>
            <param name="region">缓存项区域设置</param>
            <param name="area">缓存区域设置，全局：帐套ID，局部：Context.TokenID+帐套ID</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.GetObjectInfos">
            <summary>
            获取所有对象的信息列表，用逗号分隔,此接口仅用于缓存管理,性能成本非常高。
            </summary>
            <returns>[[Key,ValueType,Size],[...],...]</returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.IsSerial">
            <summary>
            必须序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.Switch">
            <summary>
            本区缓存是否已经开启，True开启，False不开启；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.IsLive">
            <summary>
            缓存服务可用信号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.LogSwitch">
            <summary>
            日志是否开启
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.DefTimeSpan">
            <summary>
            缺省过期时间间隔。如果实现插件返回0秒，则从系统Config文件设置中取得间隔秒数。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.DMethodProxy">
            <summary>
            方法的动态透明代理，Get的首参数必须为String字段，并作为缓存项的Key值。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.AbstractKCacheManager.GetObjectInfos">
            <summary>
            获取所有对象的信息列表，用逗号分隔,此接口仅用于缓存管理,性能成本非常高。
            </summary>
            <returns>[[Key,ValueType,Size],[...],...]</returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.AbstractKCacheManager.IsSerial">
            <summary>
            必须序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.AbstractKCacheManager.Svr">
            <summary>
            缓存服务管理对象，实现IKCacheManager接口。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.UpdateCacheObjectPool">
            <summary>
            缓存随机码池
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Cache.UpdateCacheObjectPool.m_cacheObject">
            <summary>
            随机码私有集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UpdateCacheObjectPool.Exist(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            是否存在随机码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.UpdateCacheObjectPool.AddOrUpdate(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            添加或者更新随机码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.UpdateCacheObjectPool.Add(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            添加随机码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.UpdateCacheObjectPool.Remove(Kingdee.BOS.Cache.UpdateCacheObject)">
            <summary>
            移除随机码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.UpdateCacheObjectPool.Cleanup">
            <summary>
            缓存清理
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheCallHandlerAttribute">
            <summary>KCache的AOP代理设置属性
            <example>
            <!--
            [KCacheAOP("default")]
            class Base{}
            [KCacheAOP("Product",AreaInArgsPos =2 ,KeyInArgsPos =1,IsBatch=false,OperType=OperType.Get)]
            public string GetName(string key,string area)
            {
                return "James."+key;
            }
            -->
            </example>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.#ctor">
            <summary>
            K/3使用默认为空的Cache
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="region">区域设置</param>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Region">
            <summary>
            区域设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.RelationUpdateSetting">
            <summary>
            关联更新设置，以逗号隔开。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.AreaInArgsPos">
            <summary>
            Area参数位置,从1开始。这里要求必须传入Area参数，否则默认为String.Empty,这时跨帐套或客户端会有串扰问题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Area2ArgName">
            <summary>
            Area对应参数名，这里要求必须传入Area参数，否则默认为String.Empty,这时跨帐套或客户端会有串扰问题。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.KeyInArgsPos">
            <summary>
            Key参数位置,从1开始。如果设置为0或默认，则自动生成key值。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Key2ArgName">
            <summary>
            Key对应参数名，如果设置为string.Empty或默认，则自动生成key值。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.IsBatch">
            <summary>
            <!-- 是否批量操作,IsBatch=true则KeyInArgsPos对应参数必须为List<string>，如果false则为String。-->
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.OperType">
            <summary>
            操作类型，参考OperType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Cache.GetBy.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Cache.OperType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.UpdateCacheType">
            <summary>
            更新缓存类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheMethodCallHandler">
            <summary>
            Method AOP Injection Handler
            The injected class must inherit from MarshalByRefObject . 
            And the member which will be injected must be defined with [KCacheCallHandler] attribute.
            Configuration : <see cref="!:..\..\CacheTest\app.config"/>
            
            <example><!-- 
                /// Client Invocation the customer as following example.
                Customer cus = PolicyInjection.Create<Customer>(); 
                /// Customer class member defined as following example.
                [KCacheCallHandler("Product",Area2ArgName = "acctID", Key2ArgName = "CustID",OperType=OperType.Get)]
                public string GetAddress(string key, int order)
                {
                    return key + ":address" + order.ToString();
                }
            --></example>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            拦截调用
            </summary>
            <param name="input"></param>
            <param name="getNext"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheMethodCallHandler.Order">
            <summary>
            Policy顺序号
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Cache.KCacheMethodDelegate”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Cache.KCacheMethodProxy`4">
            <summary>
            方法透明代理
            </summary>
            <typeparam name="K">Key:String</typeparam>
            <typeparam name="V">Value:Object</typeparam>
            <typeparam name="T">Tags:List[string]</typeparam>
            <typeparam name="R">Result:Object</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Get(System.Func{`0,`3},`0)">
            <summary>
            获取缓存代理
            <example>: string value = (string)KCMger.DMethodProxy.Get((k) => GetProduct("FKEY_0", "abc",110), "FKEY_0");</example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Put(System.Func{`0,`3},`0,`1,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存代理
            <example><!--: Example:KCMger = (IKCacheManager)KCacheManagerFactory.Instance.GetCacheManager("Product");
                   bool ret = (bool)KCMger.DMethodProxy.Put(
                       (k) => (bool)SaveData("MySaveData", dt),
                       "MySaveData",
                      (new List<string>() { "test1", "test" })
                       );--></example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <param name="v"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Remove(System.Func{`0,`3},`0)">
            <summary>
            移除缓存代理
            <example>: string value = (string)KCMger.DMethodProxy.Remove((k) => GetProduct("FKEY_0", "abc",110), "FKEY_0");</example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheSetting">
            <summary>
            Overall configuration settings for Caching
            </summary>    
        </member>
        <member name="T:Kingdee.BOS.Cache.AsyncRedisVersionManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.AsyncRedisVersionManager.Instance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.AsyncRedisVersionManager.AsyncVersion(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="region"></param>
            <param name="realRegion"></param>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCachePath.WatchStatus">
            <summary>
            0:未监控1:正常运行2:监控异常
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.RCacheSetting">
            <summary>
            Overall configuration settings for Caching
            </summary>    
        </member>
        <member name="T:Kingdee.BOS.Cache.IRCacheManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.IRCacheManager.AsyncCacheVersions">
            <summary>
            同步版本信息，目前主要为Redistribute
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.IRCacheManager.UpdateVersion">
            <summary>
            正式更新版本到本地
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.IRCacheManager.SetConnectionCloseFlag(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.IRCacheManager.SetUsingLocalCacheFlag(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="T:Kingdee.BOS.Cache.RCacheManager">
            <summary>
            Redis缓存管理器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.ServerDescription">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.SetDefaultRegion(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <param name="area"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ts"></param>
            <param name="tags"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.IncreamentToRedis(System.String,System.TimeSpan,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="ts"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.ClearRegion">
            <summary>
            清理缓存区域
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.GetByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Remove(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.RemoveByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.GetObjectInfos">
            <summary>
            保留方法
            </summary>
            <returns>[[Key,ValueType,Size],[...],...]</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Set``1(System.String,``0,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Set``1(System.String,``0,System.TimeSpan,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ts"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Set``1(System.String,``0,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="tags"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Set``1(System.String,``0,System.TimeSpan,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="ts"></param>
            <param name="tags"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.AsyncCacheVersions">
            <summary>
            同步缓存版本
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.UpdateVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.SetConnectionCloseFlag(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManager.SetUsingLocalCacheFlag(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCacheManager.IsSerial">
            <summary>
            保留方法
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCacheManager.DMethodProxy">
            <summary>
            保留方法
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.RCacheManagerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.Watch">
            <summary>
            监控Redis服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.GetCachePath(System.String,System.String)">
            <summary>
            客户端缓存操作对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.ClearAllCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.GetAllRegion(System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.GetCacheManager(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <param name="area"></param>       
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.RCacheManagerFactory.GetCacheManager(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            有些情况例如列表，即使客户启用了分布式缓存，也不使用，后续可以提供开关来放开
            </summary>
            <param name="region"></param>
            <param name="area"></param>
            <param name="useLocalCache"></param>
            <param name="closeClientFlag"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCacheManagerFactory.Instance">
            <summary>
            返回KCacheManagerFactory单例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCacheManagerFactory.Switch">
            <summary>
            开关
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.RCacheManagerFactory.LogSwitch">
            <summary>
            log日志开关
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RedisServiceMonitor.Watch">
            <summary>
            监控Redis服务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.RedisServiceMonitor.PingRedis(Kingdee.BOS.Cache.RCachePath)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns>是否有变化</returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheManagerFactory">
            <summary>
            KCacheManager创建者
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Cache.KCacheManagerFactory.REGION_METADATACACHE_KEY">
            <summary>
            元数据缓存Region标识
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.#ctor">
            <summary>
            一般的请使用 KCacheManagerFactory.Instance获取缓存单例对象，而不要new 工厂对象，除非有特性需求
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetAllRegionArea">
            <summary>
            获取所有区域和段名称
            </summary>
            <returns>[[段，区],[...],...]</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetMetadataCacheManager(Kingdee.BOS.Context)">
            <summary>
            获得元数据缓存管理器
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.ClearMetadataCache(Kingdee.BOS.Context)">
            <summary>
            清除元数据缓存
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.Reset">
            <summary>
            切换Cache的提供者后，必须复位KCacheManager创建者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetCacheManager(System.String,System.String)">
            <summary>
            获得一个IKCacheManager的对象
            </summary>
            <param name="region">隔离带：来自Entity的TypeKey或子系统分类关键字</param>
            <param name="area">隔离区：全局缓存采用帐套ID，局部缓存采用Context.TokenID+帐套ID</param>
            <returns>IKCacheManager对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetCacheManager(System.String,System.String,System.Boolean)">
            <summary>
            获得一个IKCacheManager的对象
            </summary>
            <param name="region">隔离带：来自Entity的TypeKey或子系统分类关键字</param>
            <param name="area">隔离区：全局缓存采用帐套ID，局部缓存采用Context.TokenID+帐套ID</param>
            <param name="bClearCache">是否用于清除缓存调用</param>
            <returns>IKCacheManager对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.ClearAllCache">
            <summary>
            清楚系统所有缓存
            注意：是所有数据中心的缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.ClearAllCache(Kingdee.BOS.Context)">
            <summary>
            清除指定账套的所有缓存
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheManagerFactory.LogSwitch">
            <summary>
            log日志开关
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheManagerFactory.Instance">
            <summary>
            返回KCacheManagerFactory单例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1">
            <summary>LRUCache is a thread safe cache that automatically removes the items that have not been accessed for a long time.
            an object will never be removed if it has been accessed within the minAge timeSpan, else it will be removed if it
            is older than maxAge or the cache is beyond it's desired size capacity.  A periodic check is made when accessing nodes that determines
            if the cache is out of date, and clears the cache (allowing new objects to be loaded upon next request). </summary>
            
            <remarks>Each Index provides dictionary key / value access to any object in cache, and has the ability to load any object that is
            not found. The Indexes use Weak References allowing objects in index to be garbage collected if no other objects are using them.
            The objects are not directly stored in indexes, rather, indexes hold Nodes which are linked list nodes. The LifespanMgr maintains
            a list of Nodes in each AgeBag which hold the objects and prevents them from being garbage collected.  Any time an object is retrieved 
            through a Index it is marked to belong to the current AgeBag.  When the cache gets too full/old the oldest age bag is emptied moving any 
            nodes that have been touched to the correct AgeBag and removing the rest of the nodes in the bag. Once a node is removed from the 
            LifespanMgr it becomes elegible for garbage collection.  The Node is not removed from the Indexes immediately.  If a Index retrieves the 
            node prior to garbage collection it is reinserted into the current AgeBag's Node list.  If it has already been garbage collected a new  
            object gets loaded.  If the Index size exceeds twice the capacity the index is cleared and rebuilt.  
            
            !!!!! THERE ARE 2 DIFFERENT LOCKS USED BY CACHE - so care is required when altering code or you may introduce deadlocks !!!!!
                   order of lock nesting is LifespanMgr (Monitor) / Index (ReaderWriterLock)
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,Kingdee.BOS.Cache.LRUCache{`0}.IsValid)">
            <summary>Constructor</summary>
            <param name="capacity">the normal item limit for cache (Count may exeed capacity due to minAge)</param>
            <param name="minAge">the minimium time after an access before an item becomes eligible for removal, during this time
            the item is protected and will not be removed from cache even if over capacity</param>
            <param name="maxAge">the max time that an object will sit in the cache without being accessed, before being removed</param>
            <param name="isValid">delegate used to determine if cache is out of date.  Called before index access not more than once per 10 seconds</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.GetIndex``1(System.String)">
            <summary>Retrieve a index by name</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.GetValue``1(System.String,``0)">
            <summary>Retrieve a object by index name / key</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.AddIndex``1(System.String,Kingdee.BOS.Cache.LRUCache{`0}.GetKeyFunc{``0},Kingdee.BOS.Cache.LRUCache{`0}.LoadItemFunc{``0})">
            <summary>Add a new index to the cache</summary>
            <typeparam name="KeyType">the type of the key value</typeparam>
            <param name="indexName">the name to be associated with this list</param>
            <param name="getKey">delegate to get key from object</param>
            <param name="loadItem">delegate to load object if it is not found in index</param>
            <returns>the newly created index</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.AddItem(`0)">
            <summary>Add an item to the cache (not needed if accessed by index)</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Add(`0)">
            <summary>Add an item to the cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Clear">
            <summary>Remove all items from cache</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.IIndex`1">
            <summary>The public wrapper for a Index</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.IIndex`1.Remove(`1)">
            <summary>Delete object that matches key from cache</summary>
            <param name="key">key to find</param>
        </member>
        <member name="P:Kingdee.BOS.Cache.LRUCache`1.IIndex`1.Item(`1)">
            <summary>Getter for index</summary>
            <param name="key">key to find (or load if needed)</param>
            <returns>the object value associated with the cache</returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.IIndex">
            <summary>Because there is no auto inheritance between generic types, this interface is used to send messages to Index objects</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.INode">
            <summary>This interface exposes the public part of a LifespanMgr.Node</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.Index`1">
            <summary>Index provides dictionary key / value access to any object in cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.#ctor(Kingdee.BOS.Cache.LRUCache{`0},Kingdee.BOS.Cache.LRUCache{`0}.GetKeyFunc{`1},Kingdee.BOS.Cache.LRUCache{`0}.LoadItemFunc{`1})">
            <summary>constructor</summary>
            <param name="owner">parent of index</param>
            <param name="getKey">delegate to get key from object</param>
            <param name="loadItem">delegate to load object if it is not found in index</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.Remove(`1)">
            <summary>Delete object that matches key from cache</summary>
            <param name="key"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.FindItem(`0)">
            <summary>try to find this item in the index and return Node</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.ClearIndex">
            <summary>Remove all items from index</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.AddItem(Kingdee.BOS.Cache.LRUCache{`0}.INode)">
            <summary>Add new item to index</summary>
            <param name="item">item to add</param>
            <returns>was item key previously contained in index</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.RebuildIndex">
            <summary>removes all items from index and reloads each item (this gets rid of dead nodes)</summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.Cache.LRUCache`1.Index`1.Item(`1)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.CheckValid">
            <summary>checks to see if cache is still valid and if LifespanMgr needs to do maintenance</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.CleanUp(System.DateTime)">
            <summary>remove old items or items beyond capacity from LifespanMgr allowing them to be garbage collected</summary>
            <remarks>since we do not physically move items when touched we must check items in bag to determine if they should be deleted 
            or moved.  Also items that were removed by setting value to null get removed now.  Rremoving an item from LifespanMgr allows 
            it to be garbage collected.  If removed item is retrieved by index prior to GC then it will be readded to LifespanMgr.</remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Clear">
            <summary>Remove all items from LifespanMgr and reset</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.OpenCurrentBag(System.DateTime,System.Int32)">
            <summary>ready a new current AgeBag for use and close the previous one</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.GetEnumerator">
            <summary>Create item enumerator</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.System#Collections#IEnumerable#GetEnumerator">
            <summary>Create item enumerator</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.AgeBag">
            <summary>container class used to hold nodes added within a descrete timeframe</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node">
            <summary>LRUNodes is a linked list of items</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.#ctor(Kingdee.BOS.Cache.LRUCache{`0}.LifespanMgr,`0)">
            <summary>constructor</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Touch">
            <summary>Updates the status of the node to prevent it from being dropped from cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Remove">
            <summary>Removes the object from node, thereby removing it from all indexes and allows it to be garbage collected</summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Value">
            <summary>returns the object</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.FindByUserID(System.Int32)">
            <summary>retrieve items by userid</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.FindByUserName(System.String)">
            <summary>retrieve items by username</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.#ctor">
            <summary>constructor creates cache and multiple indexes</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.GetDataRow``1(System.String,System.Object,Kingdee.BOS.Cache.UserCache.LoadData{``0})">
            <summary>This data access is ugly but simple, didn't want to complicate things by including in my db wrapper classes</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.IsDataValid">
            <summary>check to see if users table has changed, if so dump cache and reload.</summary>
            <remarks>If this query doesnt work on your sql2005 server, user privileges are too low</remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.LoadFromUserID(System.Int32)">
            <summary>when FindByUserID can't find a user, this method loads the data from the db</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.LoadFromUserName(System.String)">
            <summary>when FindByUserName can't find a user, this method loads the data from the db</summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UserCache.Instance">
            <summary>Singleton pattern forces everyone to share the cache</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.MetaVersionCacheParam">
            <summary>
            元数据版本参数，用于传递到mc
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.UpdateCacheObject">
            <summary>
            通知Mc更新缓存对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.ByKey">
            <summary>
            按Key更新集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.ByTags">
            <summary>
            按Tag更新集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.ActionName">
            <summary>
            Action 名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.ActionParas">
            <summary>
            Action参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.CurrentSiteId">
            <summary>
            当前站点Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.MachineName">
            <summary>
            机器HostName
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.Area">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.Region">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.UpdateType">
            <summary>
            具体按什么类型更新数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.CheckCode">
            <summary>
            更新缓存时使用的随机码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.CheckTime">
            <summary>
             随机码发起时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.CurrentVDName">
            <summary>
            当前虚拟目录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UpdateCacheObject.CurrentVersion">
            <summary>
            当前版本号
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.SimpleBackAppTask">
            <summary>
            后台任务。本类定义了后台任务的结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.SimpleComputeTask">
            <summary>
            计算任务。本类定义了计算任务的结构
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.SimpleComputeTask.#ctor">
            <summary>
            构造一个计算任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.ComputeId">
            <summary>
            计算任务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Title">
            <summary>
            任务标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Priority">
            <summary>
            任务优先级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Status">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Progress">
            <summary>
            任务进度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.OriginatorId">
            <summary>
            发起人ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.ComputeSource">
            <summary>
            计算任务由哪个后台服务机器接收（后续就由哪台机器执行）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.CompletedTime">
            <summary>
            完成时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.SimpleBackAppTask.#ctor">
            <summary>
            构造一个计算任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeTask.DeserializeProperties">
            <summary>
            将一些需要被持久化的属性进行内部序列化。此方法通常不需要手工调用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeTask.SerializeProperties(System.Boolean)">
            <summary>
            将内部被持久化的属性反序列化。此方法通常不需要手工调用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.BOSContext">
            <summary>
            BOS上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.Properties">
            <summary>
            执行属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.ExecutorType">
            <summary>
            执行器类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.Logs">
            <summary>
            执行日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.ApmConfig">
            <summary>
            APM参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeContext">
            <summary>
            计算任务的上下文，为计算执行器提供任务信息和框架操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.UpdateProgress(System.Int32)">
            <summary>
            更新进度
            </summary>
            <param name="progress">进度值（必须是一个0-100之间的哦整数）</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.UpdateProgressDescrip(System.String)">
            <summary>
            更新进度说明文本
            </summary>
            <param name="descri">文本说明</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.UpdateProgressAndDescrip(System.Int32,System.String)">
            <summary>
            更新进度
            </summary>
            <param name="progress">进度值（必须是一个0-100之间的哦整数）</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.WriteLog(System.String)">
            <summary>
            提交一个计算日志
            </summary>
            <param name="log">提交的日志（日志不能为空）</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.CancelTask">
            <summary>
            取消当前的任务
            <para>
            注意：此方法会抛出一个OperationCanceledException异常并被计算框架捕获。
            如无特殊情况请勿捕获异常
            </para>
            <exception cref="T:System.OperationCanceledException"/>
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeContext.IsCancelled">
            <summary>
            获取当前任务是否被框架标志为取消。
            如果框架将其标志为真，请调用CancelTask
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeContext.Task">
            <summary>
            待计算的任务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeEnvironment">
            <summary>
            计算框架的运行环境配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeEnvironment.WhiteList">
            <summary>
            数据中心白名单。如果白名单为空，则默认枚举所有数据中心，否则只处理白名单中的数据中心。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputePriority">
            <summary>
            计算优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Normal">
            <summary>
            中优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Immediately">
            <summary>
            立即执行。当一个优先级为Immediately的任务入列后，
            将在当前执行线程池一有空闲的情况下立刻被安排执行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.High">
            <summary>
            高优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Low">
            <summary>
            低优先级
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeStatus">
            <summary>
            计算任务的执行状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Ready">
            <summary>
            准备状态。任务排队中，还未执行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Executing">
            <summary>
            任务正在被执行。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Completed">
            <summary>
            任务已经执行完成
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Cancel">
            <summary>
            任务被取消
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Failure">
            <summary>
            任务执行失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Exception">
            <summary>
            任务执行异常中断，例如IISReset
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.SimplifySimpleComputeTask">
            <summary>
            简化的普通计算任务对象
            <remarks>用作读取简单属性用</remarks>
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.ComputeId">
            <summary>
            计算任务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.Title">
            <summary>
            任务标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.Priority">
            <summary>
            任务优先级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.Status">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.Progress">
            <summary>
            任务进度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.OriginatorId">
            <summary>
            发起人ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.ComputeSource">
            <summary>
            计算任务由哪个后台服务机器接收（后续就由哪台机器执行）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimplifySimpleComputeTask.ProgressDescri">
            <summary>
            进度描述
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeLog">
            <summary>
            计算日志。计算任务的执行器可以在执行时根据情况报告日志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeLog.#ctor(System.String)">
            <summary>
            根据给定的消息构造一条计算日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeLog.OccurTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeLog.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ContextBag">
            <summary>
            对BOSContext的封装，用以在WCF环境下传递计算框架必要的上下文信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.#ctor">
            <summary>
            构造一个空的上下文包。通常不推荐使用此默认构造器。
            请使用ContextBag(Context ctx)构造器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.#ctor(Kingdee.BOS.Context)">
            <summary>
            根据给定的BOS上下文构造一个ContextBag
            </summary>
            <param name="ctx">bOS上下文对象</param>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.GenerateContext">
            <summary>
            基于当前的上下文包生成上下文
            </summary>
            <returns>生成的BOS上下文</returns>
        </member>
        <member name="P:Kingdee.BOS.Computing.ContextBag.DBId">
            <summary>
            数据库ID（比如：10001）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ContextBag.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.DemoExecutor">
            <summary>
            这是一个虚拟任务的执行器，
            其主要目的是用来在测试和生产环境中，
            验证计算框架的执行情况。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.IComputeTaskExecutor">
            <summary>
            任务执行器接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.DemoExecutor.Execute(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Condition.CustomizeLogicParse">
            <summary>
            自定义条件逻辑解析器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Condition.LogicParseBase`1.Expression">
            <summary>
            最终解析出来的条件表达式，需要子类赋值
            </summary>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Condition.CustomizeLogicParse.InitParse(System.Collections.Generic.IEnumerable{Kingdee.BOS.Condition.CustomizeConditionRow})”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Condition.CustomizeLogicParse.ParseExpression">
            <summary>
            解析表达式字符串
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Condition.LogicParseOr">
            <summary>
            逻辑“或者”运算符解析
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Condition.CustomizeConditionRow">
            <summary>
            自定义条件行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfCustomizeCondition">
            <summary>
            流程编程模型 - 流程自定义条件定义
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.ICustomizeCondition">
            <summary>
            对外提供流程编程模型 - 流程自定义条件定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeCondition.LeftBracket">
            <summary>
            左括号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeCondition.RightBracket">
            <summary>
            右括号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeCondition.Logic">
            <summary>
            逻辑操作符，交集/并集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeCondition.ConditionKey">
            <summary>
            条件项主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeCondition.ConditionName">
            <summary>
            条件项名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfCustomizeCondition.LeftBracket">
            <summary>
            左括号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfCustomizeCondition.RightBracket">
            <summary>
            右括号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfCustomizeCondition.Logic">
            <summary>
            逻辑操作符，交集/并集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfCustomizeCondition.ConditionKey">
            <summary>
            条件项主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfCustomizeCondition.ConditionName">
            <summary>
            条件项名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Condition.CustomizeConditionRow.ConditionType">
            <summary>
            条件类型内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Condition.CustomizeConditionRow.ConditionClass">
            <summary>
            条件执行类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Condition.CustomizeConditionRow.ConditionResult">
            <summary>
            条件执行结果值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Condition.LogicParseAnd">
            <summary>
            逻辑“并且”运算符解析
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LoginExtLinkCollection">
            <summary>
            登录界面扩展连接配置集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.LoginExtLinkCollection.GetLinks">
            <summary>
            获取登录扩展连接
            </summary>
            <returns>默认LoginExtLink对象</returns>
        </member>
        <member name="T:Kingdee.BOS.LoginExtLink">
            <summary>
            登录界面扩展连接配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LoginExtLink.Id">
            <summary>
            Gets or sets 元素Id
            </summary>
            <value>The Id of the LoginExtLink.</value>
        </member>
        <member name="P:Kingdee.BOS.LoginExtLink.Enabled">
            <summary>
            Gets or sets a value indicating whether the item is enabled
            </summary>
            <value>The Enabled of the LoginExtLink.</value>
        </member>
        <member name="P:Kingdee.BOS.LoginExtLink.Url">
            <summary>
            Gets or sets  默认连接URL
            </summary>
            <value>The Url of the LoginExtLink.</value>
        </member>
        <member name="P:Kingdee.BOS.LoginExtLink.Title">
            <summary>
            Gets or sets link标题 Title="{'2052':'云之家','3037':'雲之家','1033':'Kingdee cloud home'}" 
            </summary>
            <value>The Title of the LoginExtLink.</value>
        </member>
        <member name="P:Kingdee.BOS.LoginExtLink.Description">
            <summary>
            Gets or sets link描述tooltip Description="{'2052':'云之家用户登入','3037':'雲之家用戶登入','1033':'Login by Kingdee cloud home'}" 
            </summary>
            <value>The Description of the LoginExtLink.</value>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.AddAndEnableMC(Kingdee.BOS.ManagementCenterElement)">
            <summary>
            注册并启用管理中心
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.EnableMC(System.String)">
            <summary>
            启用管理中心
            </summary>
            <param name="id">元素Id</param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.DisableMC(System.String)">
            <summary>
            禁用管理中心
            </summary>
            <param name="id">元素Id</param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.GetEnabledMC">
            <summary>
            获取已经启用的管理中心
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DataCenterID">
            <summary>
            管理中心Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DatabaseEntity">
            <summary>
            数据库实体名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.Id">
            <summary>
            元素Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.Encrypted">
            <summary>
            元素IsEncrypted
            </summary>
        </member>
        <member name="P:Kingdee.BOS.PackageConfigSection.ManagementDatacenters">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.PackageConfigSection.LoginExtLinks">
            <summary>
            登录扩展连接配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.PackageConfigSection.MultiLanguageDatacenters">
            <summary>
            多语言中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDConfiguration">
            <summary>
            系统配置，包括包的配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.urlBlockRulesConfig">
            <summary>
            URL拦截规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.textBlockRulesConfig">
            <summary>
            Text拦截规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.bizTipsServerSettingConfig">
            <summary>
            提示信息服务配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.loginExtLinksConfig">
            <summary>
            登录UI的扩展连接配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ManagementCenterConfigElement">
            <summary>
            管理中心配置元素
            元素值：mcdc
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.OpenLogModel_AppSetting">
            <summary>
            开启日志记录模式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.OpenWebApiLogModel_AppSetting">
            <summary>
            开启webApi日志记录模式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MultiLanguageCenterConfigElement">
            <summary>
            多语言中心配置元素
            元素值：mldc
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.LicManagementSiteUrl_AppSetting">
            <summary>
            许可管理中心服务器地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YSCDefaultLink_AppSetting">
            <summary>
            WiKi云手册默认地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsLogAllXTMessage_AppSetting">
            <summary>
            是否记录所有云之家消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsLogByTokenInXTWay_AppSetting">
            <summary>
            使用云之家登录是否记录缓存
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsSendXTMsgByOldWay_AppSetting">
            <summary>
            是否使用旧方法发送云之家消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ReportSplitFileByPages_AppSetting">
            <summary>
            报表按维度分文件
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MaxNotePrintPage_AppSetting">
            <summary>
            套打预览打印最大页数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MaxDataLogMonitorCount_AppSetting">
            <summary>
            监控最大单据数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MaxDataLogFieldCount_AppSetting">
            <summary>
            监控最大字段数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsNotePrintSetAlluser_AppSetting">
            <summary>
            套打设置应用到所有用户
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YunZhiJiaPubSendUrl_AppSetting">
            <summary>
            云之家消息发送接口地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YunZhiJiaCloudAppId_AppSetting">
            <summary>
            云之家星空协同APPID
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsAddNewRegUser_AppSetting">
            <summary>
            是否需要新增注册用户，默认需要
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YunZhiJiaMsgStatusUrl_AppSetting">
            <summary>
            云之家待办消息的接口地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YunZhiJiaClubUrl_AppSetting">
            <summary>
            云之家消息主页签签入界面服务器地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsShowYunZhiJiaClub_AppSetting">
            <summary>
            是否显示云之家消息主页签
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsShowAdvertisement_AppSetting">
            <summary>
            是否登录弹推广广告
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.YunZhiJiaK3ClousPushUrl_AppSetting">
            <summary>
            云之家k/3cloud消息推送服务器地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsShowYunZhiJiaButton_AppSetting">
            <summary>
            是否显示主控台的我的云之家按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsCheckContext_AppSetting">
            <summary>
            是否校验上下文可用
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.LoginEntryRole_AppSetting">
            <summary>
            登陆入口角色（定义网站只能用某种角色登陆）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsLoginManualInputDC_AppSetting">
            <summary>
            登录界面选择数据中心是否手工录入 配置1和0，是-1 否-0
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsEnableNewStyleOfTipbar_AppSetting">
            <summary>
            是否启用提示语新样式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AllowCellSection_AppSetting">
            <summary>
            单据是否支持块选择
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsGuiOldLoginUI_AppSetting">
            <summary>
            是否切换到旧版GUI登录界面
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.DefaultLoginType_AppSetting">
            <summary>
            默认登录方式:0=账号登录;10=云之家扫码登录 20=云账号登录（SL与GUI暂不支持云之家扫码登录）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsInputBlock_AppSetting">
            <summary>
            启用输入数据拦截，拦截点：1、所有服务端输入参数；2、HTML客户端文本录入；规则按Common.config下面的TextBlockRules节点的配置进行；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsDebugMode_AppSetting">
            <summary>
            服务端强制为调试模式（目前暂时只有HTML5用到，2017-04-21）；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsNoticeUpdateCache_AppSetting">
            <summary>
            是否允许通知其他站点更新缓存
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AllowDebugMode_AppSetting">
            <summary>
            允许客户端设置为调试模式（目前暂时只有HTML5用到，2017-05-09）；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsAspNetSecureCookie_AppSetting">
            <summary>
            强制启用安全Asp.Net_SessionId的Cookie链接
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsSecureCookie_AppSetting">
            <summary>
            强制启用安全Cookie链接
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.StackTraceLevel_AppSetting">
            <summary>
            异常跟踪日志层级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ImportEff_AppSetting">
            <summary>
            引入性能改造开关，默认关闭
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ImportEff_IgnoreRowFilter_AppSetting">
            <summary>
            引入性能特殊开关，忽略行过滤，默认关闭
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsF7FieldPermission_AppSetting">
            <summary>
            启用模糊查询字段权限控制
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.WFDataBackUpRowCount_AppSetting">
            <summary>
            流程归档时每次选取的实例个数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MobWFVersion">
            <summary>
            系统版本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsShowDiffLoginAddressRemind_AppSetting">
            <summary>
            是否弹不同IP地址登录提醒
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsDeleteDataCenterNeedBackup_AppSetting">
            <summary>
            删除数据中心前是否需要备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.FileUploadMaxLength_AppSetting">
            <summary>
            文件上传最大大小，单位KB。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ListDisableQueryDb_AppSetting">
            <summary>
            列表查询是否禁用查询库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BlockAsyncMinCount_AppSetting">
            <summary>
            块粘贴异步最小阀值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsVerifyDownloadUrl_AppSetting">
            <summary>
            是否校验下载链接。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.SimplePassportVersion_AppSetting">
            <summary>
            第三方系统登录加密版本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsAllowExternalUser_AppSetting">
            <summary>
            是否允许外部用户直接通过云之家方式登录验证
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsAllowMutilDCForYunZhiJia_AppSetting">
            <summary>
            是否允许多个数据中心对应云之家
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.IsShowAnnualReport_AppSetting">
            <summary>
            年度报告
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AllowedSendMsgCount_AppSetting">
            <summary>
            允许重发云之家消息次数 默认3次
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BrandResourceKey_AppSetting">
            <summary>
            品牌资源唯一标识key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BatchControlFlex_AppSetting">
            <summary>
            批量控制辅助属性（批量填充、复制粘贴）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AnnualReportDataUrl_AppSetting">
            <summary>
            年报在线数据地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AnnualReportSiteUrl_AppSetting">
            <summary>
            年报在线站点地址
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.UseResAbsolutePath_AppSetting">
            <summary>
            资源使用绝对路径，解决多层路由映射引发的资源不可用问题(例如HTML5的JS和CSS资源)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.AllowOnLineViewImgTypeListForH5_AppSetting">
            <summary>
            允许在线预览的图片后缀列表，H5端的设置。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.CheckBarItemBusyInterval_AppSetting">
            <summary>
            校验同一个用户是否重复点击频率（默认为1秒，0为不检验）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BPSiteUrl_AppSetting">
            <summary>
            引出中心站点Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BPSiteRowCount_AppSetting">
            <summary>
            行数大于之后通过引出中心引出
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.BPSitePrintItemCount_AppSetting">
            <summary>
            单据量达到配置数量后通过引出中心预览打印
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetValue(System.String)">
            <summary>
            获取KDConfiguration配置项的值
            </summary>
            <param name="key">配置项的键</param>
            <returns>配置项的值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.CommonConfigContainsKey(System.String)">
            <summary>
            判断commonfig文件appsetting里是否包含某配置项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.SaveAll">
            <summary>
            保存配置，保存后系统会自动更新
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.ClearCacheInRuntime">
            <summary>
            在运行时清除common的缓存；
            但有些属性是不适合在运行时清除的，请勿加入到该函数；
            比如压缩，修改之后必须重新启动iis；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.UploadWhiteList_AppSetting">
            <summary>
            文件上传白名单。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration._kingdeeCloudServiceUrl">
            <summary>
            金蝶云服务地址
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetDynamicPasswordConfigSection">
            <summary>
            获取认证的提供者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetCAConfigSection">
            <summary>
            获取CA认证的提供者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetLimitConfigSection">
            <summary>
            获取API限流配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetPackageConfigSection(System.Configuration.Configuration)">
            <summary>
            将普通配置节转换为包配置节类型
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetLoginExtLinks">
            <summary>
            获取登录UI的扩展连接配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetAppSettingItemValue(System.String)">
            <summary>
            获取AppSetting中的键值,Key不存在时返回Null
            <add key="MyKey" values="MyValue"></add>
            </summary>
            <param name="key">AppSetting 中的item 键  "MyKey"</param>
            <returns>
            1.返回 AppSetting 中的item 值 "MyValue"
            2.不存在时返回Null</returns>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.maxDataLogMonitorCount">
            <summary>
            公有云限制20个
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.maxDataLogFieldCount">
            <summary>
            公有云限制30个字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.Current">
            <summary>
            当前BOS运行平台配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.InvoiceCloudUrl">
            <summary>
            发票云地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.InvoiceCloudAPIUrl">
            <summary>
            发票云地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FrameOptionsWhiteList">
            <summary>
            FrameOptions白名单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.HttpSecurityProtocol">
            <summary>
            允许客户端设置为调试模式（目前暂时只有HTML5用到，2017-05-09）；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DefaultFrameOptions">
            <summary>
            设置默认FrameOpitons
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CommonConfiguration">
            <summary>
            Common.Config配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PackageConfigurations">
            <summary>
            包配置，依据包配置文件的主名称获取
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BatchControlFlex">
            <summary>
            是否允许批量控制辅助属性（批量填充、复制粘贴），默认不允许
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FileServerSiteUrl">
            <summary>
            文件服务器Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MQModel">
            <summary>
            使用CloudMQ
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OpenLogModel">
            <summary>
            开启日志记录模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OpenWebApiLogModel">
            <summary>
            开启webApi日志记录模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IgnoreOracleNLSCOMP">
            <summary>
            oracle忽略大小写敏感，目前引用在模糊查询
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsKDYFUpLoadControl">
            <summary>
            是否控制金蝶研发内部附件上传
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowBarIcon">
            <summary>
            是否显示工具栏图标，默认不显示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowInnerTitle">
            <summary>
            是否显示副标题，默认显示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDeployAsPublicCloud">
            <summary>
            是否以公有云方式部署；
            只需在管理中心配置即可；
            业务中心获取管理中心的配置；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsNewMobileApproval">
            <summary>
            是否启用新版移动审批，为0启用旧版,没有或则为1启用新版
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImportEff_IgnoreRowFilter">
            <summary>
            引入性能特殊开关，忽略行过滤，默认关闭
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImportEff">
            <summary>
            是否启用引入性能改造成果，默认关闭
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.UploadWhiteList">
            <summary>
            文件上传白名单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsManagementSite">
            <summary>
            是否为管理站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LoginEntryRole">
            <summary>
            登陆入口角色（定义网站只能用某种角色登陆）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsInputBlock">
            <summary>
            启用输入数据拦截，拦截点：1、所有服务端输入参数；2、HTML客户端文本录入；
            启用为True，才能使用GetTextBlockRules()的规则进行拦截
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDebugMode">
            <summary>
            服务端强制为调试模式（目前暂时只有HTML5用到，2017-04-21）；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsNoticeUpdateCache">
            <summary>
            是否允许通知其他站点更新缓存，默认允许
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AllowDebugMode">
            <summary>
            允许客户端设置为调试模式（目前暂时只有HTML5用到，2017-05-09）；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAspNetSecureCookie">
            <summary>
            强制启用安全Asp.Net_SessionId的Cookie链接
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsSecureCookie">
            <summary>
            强制启用安全Cookie链接
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.StackTraceLevel">
            <summary>
            异常跟踪日志层级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OracleConnectionStringPattern">
            <summary>
            Oracle连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MysqlConnectionStringPattern">
            <summary>
            Mysql连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlServerConnectionStringPattern">
            <summary>
            Sql Server 连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlServerWindowsConnectionStringPattern">
            <summary>
            Sql Server Windows连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SPVersionNum">
            <summary>
            SP的版本号，初始值为0，打上SP1后改为1，以此类推
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ManagementSiteUrl">
            <summary>
            管理站点Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LicManagementSiteUrl">
            <summary>
            许可管理中心服务器地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ReportSplitFileByPages">
            <summary>
            报表按维度分文件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CurrentSiteUrl">
            <summary>
            当前站点的Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CurrentLoginExtrenalPlugIn">
            <summary>
            当前登录系统的登录外部扩展插件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.XunTongOpenSysServiceRootUrl">
            <summary>
            讯通OpenSys服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.XunTongNewOpenSysServiceRootUrl">
            <summary>
            讯通最新OpenSys服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.XunTongMCloudServiceRootUrl">
            <summary>
            讯通mcloud服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaPathUrl">
            <summary>
            云之家服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaCosmic">
            <summary>
            是否启用云之家协同组件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PublicizeConfigFileUrl">
            <summary>
            宣传配置文件地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.KnowLedgeUrl">
            <summary>
            云社区搜索地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloudKnowLedgeUrl">
            <summary>
            协同平台知识搜索地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LinkCEOOpenAPI">
            <summary>
            徐少春个人号服务域名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LinkCEOOpenUrl">
            <summary>
            徐少春个人号服务index地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LinkCEOCloudGetwayAPI">
            <summary>
            徐少春个人号服务域名，云平台网关域名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IMServiceOpenDomain">
            <summary>
            IM客服接口域名地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.KingdeeHubRedirectUri">
            <summary>
            KingdeeHub调整页面
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableDemoSyncXunTong">
            <summary>
            演示版能不能同步讯通
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAutoSyncXunTong">
            <summary>
            是否自动同步讯通
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsK3CloudJobProcessMonitor">
            <summary>
            是否监控K3CloudJobProcess服务状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxTemporaryTables">
            <summary>
            监控临时表数量上限
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaMsgRetainLength">
            <summary>
            云之家消息保存天数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SimplePasswordRetainLength">
             <summary>
            第三方系统登录保存天数
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaMsgClearTime">
            <summary>
            云之家消息清理时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowCAAuthentication">
            <summary>
            是否允许CA登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowDomainAuthentication">
            <summary>
            是否允许域用户登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowDynamicPwdAuthentication">
            <summary>
            是否允许域动态密码卡登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowPwdAuthentication">
            <summary>
            是否允许密码登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowTwoFactorAuthentication">
            <summary>
            是否允许双因子登录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SMSSendType">
            <summary>
            云短信发送方式 0 直接使用云平台接口发送 1 使用钟锷峰接口发送
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.TwoFactorSMSCodeLimitTime">
            <summary>
            短信验证码超时时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowYunzhijiaAuthentication">
            <summary>
            是否允许云之家登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowYunZhiJiaDyPwdAuthentication">
            <summary>
            是否允许云之家动态密码登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.KingdeeCloudAPIUrl">
            <summary>
            KingdeeCloud API地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SyncRCacheSeconds">
            <summary>
            从Redis同步版本到本地的时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SyncProductModelTime">
            <summary>
            业务站点定时与管理站点同步产品模型，默认5分钟
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BillCountPerExportFile">
            <summary>
            引出时，每个文件容纳的最大单据数目
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ReportCountPerExportFile">
            <summary>
            引出时，每个文件容纳的最大报表数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MQExecuteWaitTime">
            <summary>
            Mq消息执行等待时间,最多不超过180秒
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.WorkflowMesContentLength">
            <summary>
            审批流消息节点消息内容长度最大值为1300
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxPageRow">
            <summary>
            获取每页最大显示行数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FluidSeting">
            <summary>
            启用HTML5的动态流式配置V2
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FilterQuickerGuideTips">
            <summary>
            启用HTML5的快捷过滤指引向导
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.KingdeeCloudServiceUrl">
            <summary>
            金蝶云服务地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.TenantId">
            <summary>
            公有云租户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MCloudOpenAPI">
            <summary>
            mcloudapi的地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MCloudDomain">
            <summary>
            mcloud的域名,以"/"结尾
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IK3CloudGateWays">
            <summary>
            ik3cloud门户地址
            默认http://www.ik3cloud.com/
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsPassport">
            <summary>
            是否使用云通行证
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsFileSaveAs">
            <summary>
            文件下载方式，false浏览器接口 ，true另存为方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowMobileStat">
            <summary>
            移动应用统计接口，false不统计 ，true统计
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MobileStatUrl">
            <summary>
            移动应用统计接口Url:http://k3cloudstat.kingdee.com/K3Stat/pages/cloud_stathandler.aspx
            </summary>sss
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxDataLogMonitorCount">
            <summary>
            限制数据日志最大监控数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxDataLogFieldCount">
            <summary>
            限制数据日志最大监控数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxNotePrintPage">
            <summary>
            获取套打预览打印页数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ListShowFilterRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YSCDefaultLink">
            <summary>
            WiKi云手册默认地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaPubSendUrl">
            <summary>
            云之家消息发送服务器Url:https://kingdee.yunzhijia.com/pubacc/pubsend
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaMsgStatusUrl">
            <summary>
            云之家待办消息的接口地址https://kingdee.yunzhijia.com/openapi/third/v1/newtodo/open/action.json
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowYunZhiJiaClub">
            <summary>
            是否显示云之家消息主页签
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowAnnualReport">
            <summary>
            是否显示"年度报告"按钮
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowYunZhiJiaButton">
            <summary>
            是否显示云之家消息主页签
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsCheckContext">
            <summary>
            是否校验上下文是否可用 默认需要校验
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaClubUrl">
            <summary>
            云之家消息主页签签入界面服务器地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLogAllXTMessage">
            <summary>
            是否记录所有云之家消息日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsSendXTMsgByOldWay">
            <summary>
            是否使用旧方法发送消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLogByTokenInXTWay">
            <summary>
            使用云之家登录是否记录缓存
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAddNewRegUser">
            <summary>
            是否需要从云平台拉取用户下来新增注册用户 默认需要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaK3ClousPushUrl">
            <summary>
            云之家k/3cloud消息推送服务器地址(k3cloudpush.kingdee.com)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsFileConvert">
            <summary>
            Excel文档是否生成预览文件。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsOfficeFileConvert">
            <summary>
            Office文档是否生成预览文件。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlKeys">
            <summary>
            Sql关键字
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ScriptKeys">
            <summary>
            脚本关键字
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLoginManualInputDC">
            <summary>
            登录界面选择数据中心是否手工录入 配置1和0，是-1 否-0
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableNewStyleOfTipbar">
            <summary>
            是否启用提示语新样式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AllowCellSection">
            <summary>
            单据是否支持块选择
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsGuiOldLoginUI">
            <summary>
            是否切换到旧版GUI登录界面
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DefaultLoginType">
            <summary>
            默认登录方式:0=账号登录;10=云之家扫码登录 20=云账号登录（SL与GUI暂不支持云之家扫码登录）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsPublicCloud">
            <summary>
            是否公有云环境：true=是;false=否，不跟随配置文件一起，加载启动系统时，第一次赋值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsConfigFileServer">
            <summary>
            是否文件服务可配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LoginAdminIP">
            <summary>
            管理员登录IP（用于管理员远程维护，从管理员电脑登录不踢出业务用户的登录会话）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAutoSyncYunZhiJiaByLic">
            <summary>
            是否自动从许可文件中同步云之家用户映射
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowExternalUser">
            <summary>
            判断轻轻应用是否允许直接关联到一个用户上
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AllowedSendMsgCount">
            <summary>
            允许发送重发云之家消息最大次数 默认三次
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsUpdateYZJInfo">
            <summary>
            是否更新云之家信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowMutilDCForYunZhiJia">
            <summary>
            是否允许云之家对应多个数据中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowAllXTMessage">
            <summary>
            是否允许记录所有的云之家消息信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowLoggedInMessage">
            <summary>
            重复登录时是否提示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BatchPushAsyncShiftValue">
             <summary>
            批量下推使用异步阀值，默认100，不设置也为100，100为单据数或分录数
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DbQueryParallelMaxThreads">
            <summary>
            数据库执行查询时的并行线程数量(默认0个，不设置时取默认值)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnabelBFDataUpgrade">
            <summary>
            是否启用业务流程数据升级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsUndoAdminConsole">
            <summary>
            是否不做管理员控制
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsUpdateFieldValidatePermission">
            <summary>
            更新字段是否启用字段权限验证
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FileServerDownloadTimeout">
            <summary>
            文件服务器的文件下载操作的超时时间（以秒记）。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLoadMQMessageByContextDbId">
            <summary>
            是否按当前上下文账套Id过滤加载消息队列消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.RobotCycle">
            <summary>
            机器人轮询周期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BrandResourceKey">
            <summary>
            品牌资源Key(品牌资源dat文件前缀名)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SendUserBehaviorData">
            <summary>
            是否启用用户行为数据收集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsOldMainConsole">
            <summary>
            是否切换旧的主控
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsNotLoginUserByHistory">
            <summary>
            登录不加载历史用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsNotShowCharacteristicGate">
            <summary>
            是否不弹出特性通知
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForbidBroadcast">
            <summary>
            是否禁用右下角弹窗
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDecryptSISqlParameter">
            <summary>
            是否在服务接口中对SQ类型的传入参数进行解密
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SSOModuleFilter">
            <summary>
            启动网站过滤器配置文件(用于类似SAML协议的支持)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsPushWorkReport">
            <summary>
            是否推送工作月报
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AnnualReportDataUrl">
            <summary>
            年报在线数据地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AnnualReportSiteUrl">
            <summary>
            年报在线站点地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.UseResAbsolutePath">
            <summary>
            资源使用绝对路径，解决多层路由映射引发的资源不可用问题(例如HTML5的JS和CSS资源)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AllowOnLineViewImgTypeListForH5">
            <summary>
            允许在线预览的图片后缀列表，H5端的设置。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AllowOnLineViewImgTypeListForSL">
            <summary>
            允许在线预览的图片后缀列表，SL端的设置，放这里是为了统一控制。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ReceiveAdvertisement">
            <summary>
            接收在线广告消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AdvertisementUrl">
            <summary>
            广告中心地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DataCloudOpenKingdeeDoman">
            <summary>
            data.k3cloud.open.kingdee.com
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PosManagementCenterPath">
            <summary>
            运营管理中心路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloudPlatformHostname">
            <summary>
            云平台网关域名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloudClientId">
            <summary>
            云平台应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloudClientSecret">
            <summary>
            云平台应用秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.InformationStartInterval">
            <summary>
            资讯同步启动延迟时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.InformationSynchroInterval">
            <summary>
            资讯同步间隔时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsOpenCloudRegion">
            <summary>
            是否是对 OSS 开放的云区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OSSTimerDueTime">
            <summary>
            OSS 定时器启动延迟时间（ms） - 默认 30s
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OSSTimerPeriod">
            <summary>
            OSS 定时器执行期间（ms） - 默认 30s
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EnableOSSLogger">
            <summary>
            启用 OSS 日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EndlessLoopMaxTimes">
            <summary>
            判定为死循环的最大循环调用次数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnablePlugInHotUpdate">
            <summary>
            是否启用插件热更新
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SwfFileConvertArgs">
            <summary>
            PDF2SWF转换的参数设置（目前默认先使用“-s flashversion=9 -f”进行转换，失败后尝试读取本配置，默认值为“-f -T 9 -s poly2bitmap”）
            </summary>
            <remarks>
            第一次转换失败，尝试第二次转换，如果第二次转换内存占用过高，希望禁用的话，配置文件内修改参数值为“-s flashversion=9 -f”。
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YunZhiJiaGetDeviceId">
            <summary>
            云之家记录设备Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ERPCloudDebug">
            <summary>
            暂时只用于内部调试环境，设置为ture，屏蔽内网特性的接口请求如云消息，课程，MQ等
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AppSiteOuterNetUrl">
            <summary>
            应用服务器外网访问地址，用以解决外网映射内网端口号不一致时，服务端无法读取外网端口问题。
            返回格式如：协议://IP:Port/虚拟目录/
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PythonEngineMaxNum">
            <summary>
            Python引擎实例最大数量（默认50个）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsF7FieldPermission">
            <summary>
            启用模糊查询字段权限控制
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.WFDataBackUpRowCount">
            <summary>
            流程归档时每次选取的实例个数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CheckBarItemBusyInterval">
            <summary>
            校验同一个用户是否重复点击菜单或按钮频率（秒，默认为1秒，0为不校验）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableParallelExtendMetaData">
            <summary>
            是否启用平行扩展支持
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowScheduleRecoveryTime">
            <summary>
            是否显示执行计划异常恢复自定义时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.NLPServerUrl">
            <summary>
            NLP请求地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PreviewFileConvertServiceUrl">
            <summary>
            预览文件转换服务地址，默认是：http://127.0.0.1:9400/。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsUseNewPreviewService">
            <summary>
            是否启用新的预览服务。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsApplicationInitialization">
            <summary>
            是否启动应用程序初始化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ApplicationInitializationMaxNumber">
            <summary>
            最多启用多少个数据中心初始化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsSkipH5RoleSelectionInterface">
             <summary>
            是否允许Html5端用户登入后跳过角色选择界面直接进入主控台 默认false
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableLoadPlugsDLL">
            <summary>
            是否从bin\plugs里加载二开的组件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ExportPageSize">
            <summary>
            大数据引出分页取数时每页数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImportTemplateExportPageSize">
            <summary>
            按引入模板引出分页取数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableExportCache">
            <summary>
            大数据引出是否启用基础资料引用缓存
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ExportParalleNumber">
            <summary>
            引出操作最大并行数量
            PS:设置为0代表不做并行限制
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImportParalleNumber">
            <summary>
            最大同时引入人数：设置为0代表不做并行限制
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImportMaxMemoryUsage">
             <summary>
            内存使用率超过指定值不允许引入
             PS:设置为0代表不做并行限制
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowDiffLoginAddressRemind">
            <summary>
            是否弹不同IP地址登录提醒
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsHideOtherOrgBillData">
            <summary>
            列表查询，当前组织无查看权限时，是否隐藏其它有权限组织单据数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsImportBlankSpaceEnabled">
            <summary>
            是否启用引入空格优化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EncryptKeyLocationType">
            <summary>
            加密字段密钥存储方式（0 默认数据库，1 文件）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.APMGlobalSwitch">
            <summary>
            是否全局开启APM监控（默认为false）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.APMBatchRecordSize">
            <summary>
            批量提交的最小记录数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.APMBatchInterval">
            <summary>
            批量提交的最小时间（如设置60，则60秒中至少要提交一次）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.TempTableModeExporCount">
            <summary>
            临时表引出模式的数据量，超过此数据量，使用临时表方式引出
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForceShowUnderstandCloundGalaxy">
            <summary>
            是否每次登陆都强制启用新手引导
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.Html5MainConsoleMaxRquestCount">
            <summary>
            html5主控台卡片请求最大次数，超过则不请求
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MiniDumpInterval">
            <summary>
            DUMP时间间隔，单位分钟，默认5分钟
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MiniDumpSavePath">
            <summary>
            DUMP保存路径，默认值为TempfilePath
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDeleteDataCenterNeedBackup">
            <summary>
            删除数据中心前是否需要备份
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableAsynBlockPasting">
            <summary>
            是否强制开启【块粘贴、批量填充时，使用进度条防止连接超时】，默认不开启
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlBukCopyCount">
            <summary>
            启用批量插入的阀值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OnlineUsersMaxEffectiveTime">
            <summary>
            在线用户的最大有效时长（小时），默认设置24个小时
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDisableNoThirdLogin">
            <summary>
            禁用WebAPI非第三方登陆接口
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LightAppManagerAPI">
            <summary>
            轻应用后台管理Api接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SupplyMarketAppId">
            <summary>
            供需集市APPID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLanguageSerialize">
            <summary>
            元数据语言序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SyncQuerySysReportData">
            <summary>
            是否同步取报表数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.WfLogQueueMaxCount">
            <summary>
            流程日志队列最大长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.WfLogQueueMaxIdle">
            <summary>
            流程日志最大空闲时间(分钟)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EmailSmtpClient">
            <summary>
            设置第三方邮件客户端
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FileUploadMaxLength">
            <summary>
            文件上传最大大小，单位KB。
            1、控制文件上传时最大文件大小，为所有上传接口的控制开关，小于等于0时代表不限速。
            2、附件上传受此参数及控件本身的“文件最大大小(单位KB)”属性控制，两者取最小。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ListDisableQueryDb">
            <summary>
            列表查询是否禁用查询库
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BlockAsyncMinCount">
            <summary>
            块粘贴异步阀值（默认为20）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLogLightAppAutoDraft">
            <summary>
            记录轻应用录单自动暂存日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsVerifyDownloadUrl">
            <summary>
            是否校验下载链接。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DataIntelligenceService">
            <summary>
            数据智能服务地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.VisualIdentityServiceHostUrl">
            <summary>
            视觉识别服务地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SimplePassportVersion">
            <summary>
            第三方系统登录版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EnableNLPJob">
            <summary>
            是否启用NLPJob
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.WebApiView_IsShowSuccess">
            <summary>
            webapi 查询接口;查询成功情况下是否设置ResponseStatus.IsSuccess, 默认为true
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsCheckWebApiQueryBilFilterString">
            <summary>
            是否检测webapi单据查询接口的过滤条件,防止注入,默认为True
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DisableJobProcess">
             <summary>
            是否禁用job服务
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DisableJobFileConvertService">
            <summary>
            是否禁用job文件转换服务。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDownloadFileCheckSessionId">
            <summary>
            附件下载是否校验SessionId一致性。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsCheckBillStatusWhenDraft">
            <summary>
            暂存时是否检查状态已经被更改
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.DisableWebAPIQueryBillFilterString">
            <summary>
            是否禁用WEBAPI单据查询接口的直接拼接SQL参数方法,使用数组格式，默认不禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.NetCtrlMonitorDeleteMinTime">
            <summary>
            冲突操作删除最小的时间限制（默认为5分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.HttpServerScheme">
            <summary>
            Http服务协议，默认为https
            </summary>
            <remarks>
            与附件转换配套使用
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.HttpServerHost">
            <summary>
            Http服务地址，默认为127.0.0.1
            </summary>
            <remarks>
            与附件转换配套使用
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FileConvertServiceJobPort">
            <summary>
            附件转换Job服务的监听端口，默认端口为8078。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.FileConvertServiceJobListenCount">
            <summary>
            附件转换Job服务的监听数，默认监听数为10。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ImageConvertThreadCount">
            <summary>
            图片转换限制线程数量，默认300
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsOpenBillByViewOperation">
            <summary>
            是否通过查看操作打开单据详情，默认为false不开启。
            优先级低于BOS平台系统参数的“不同单据状态下列表打开单据详情方式”属性。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsApmDataLogMqMode">
            <summary>
            APM数据日志是否启用MQ模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.EnabledApmDataLogWebApi">
            <summary>
            业务数据日志启用webapi首次保存记录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ExcpOpenStatusBills">
            <summary>
            不需要进行干预操作状态的例外单据，格式如："BD_FLEXVALUES,wf_Template"
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YzjNotifyChanelAppIds">
            <summary>
            发送到云之家通知中心的轻应用IDS
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YzjRelFormIds">
            <summary>
            包含云之家的相关表单
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.LicRegUsersEncodingType">
            <summary>
            许可文件中注册用户的编码格式（为设置为空），gb2312 utf-8
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsByOldWayGetYunZhiJiaOpenId">
            <summary>
            是否通过旧接口获取云之家的openid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnabledIPSecurity">
            <summary>
            是否启用IP安全认证
            默认开启
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsFilterClientIP">
            <summary>
            是否过滤客户端IP信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.AutomationTest">
            <summary>
            是否自动化测试
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.NetCtrlClearOffLineHour">
            <summary>
            清理网控执行计划离线清除默认为3小时，不能设置低于2小时
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.NetCtrlClearOnLineHour">
            <summary>
            清理网控执行计划在线清除默认为12，不能设置低于6小时
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsCheckMobFileUploadToken">
            <summary>
            是否检查 MOBFileUpload.ashx 文件上传接口 token 用户登录令牌，true为检查，默认检查。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForceFileUploadFolder">
            <summary>
            是否强制设置文件上传接口上传目录参数，true为强制设置，默认强制设置。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ReportGroupLevelOptimize">
            <summary>
            报表分组级次计算优化（默认不启用）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsWpfDownloadFileUseSaveAs">
            <summary>
            WPF端下载附件使用另存方式，true为使用另存弹出文件存储路径选择框，false为浏览器方式，默认为true。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableStubServiceExecuteSqlScript">
            <summary>
            是否允许Stub服务桩执行Sql脚本，true为允许，false为不允许，默认为true允许。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableWebAPIByAdmin">
            <summary>
            WebAPI是否允许使用administrator登录, 默认为true,允许登录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.YungYingMsgAPIUrl">
            <summary>
            运营消息接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForbidPythonCheck">
            <summary>
            是否禁用Python安全检查
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableCvpMk">
            <summary>
            是否启用数据脱敏功能，默认启用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDisabledExport2052Xml">
            <summary>
            是否禁止导出2052元数据节点，默认为false,允许导出
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForbidMoveRptClean">
            <summary>
            是否禁用分页报表引出及时清理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BPSiteUrl">
            <summary>
            引出中心站点Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BPSiteRowCount">
            <summary>
            行数大于之后通过引出中心引出
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BPSitePrintItemCount">
            <summary>
            单据量达到配置数量后通过引出中心预览打印
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsStartDepartmentOrgIsolation">
            <summary>
            是否启用部门组织隔离
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsFlexColListDefaultDsp">
            <summary>
            维度明细列表默认显示，false：列表默认不显示弹性域维度明细字段，过滤方案显示隐藏列也不会默认勾选维度明细字段，true：不影响原来逻辑（默认为true）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OfficeWeb365PrintInfoParam">
            <summary>
            OfficeWeb365在线打印参数，默认为4。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDisablePreInsertExport">
            <summary>
            是否禁用预插数据引出到元数据中
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PrivacyPolicyVersion">
            <summary>
            隐私政策版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableWebAPIOpWhiteList">
             <summary>
            是否启用webapi业务对象操作接口白名单，默认启用
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsEnableWebAPIOpBlackList">
             <summary>
            是否启用webapi业务对象操作接口黑名单，默认不启用
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.GuarddPrivacyPolicyVersion">
            <summary>
            星空卫士隐私政策版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.GuardLoadBOSVersion">
            <summary>
            星空卫士获取产品版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxNotePrintBillCount">
            <summary>
            预览打印最大单据量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OfficeWorkingSetMaxSize">
            <summary>
            获取Office进程最大允许分配的内存大小，单位MB，默认500MB。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForbidNewPythonPlugIn">
            <summary>
            是否禁止新建Python插件，true为禁止，false为不禁止，默认false不禁止。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsForbidEditPythonPlugIn">
            <summary>
            是否禁止编辑Python插件，true为禁止，false为不禁止，默认false不禁止。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsAllowCloudIDE">
             <summary>
            是否启用云IDE
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloudIDEUrl">
            <summary>
            云IDE地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsLookupSearchUseWith">
            <summary>
            模糊查询仅显示创建组织SqlServer是否用With查询（默认不用With）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BuildQueryBDSqlFromLimit">
             <summary>
            查询列表，生成基础资料关联表数量限制，默认0为不限制
             </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CompressRateLimit">
            <summary>
            压缩文件压缩比率限制，默认20
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CqMarketQueryApiApp">
            <summary>
            API应用市场：获取API应用ID API地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CqMarketGenerApiOrder">
            <summary>
            API应用市场：创建API订单 API地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CqMarketServerAddress">
            <summary>
            应用市场地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.UseOldCompositePkValidator">
            <summary>
            使用旧版组合字段唯一性校验器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsCtrlFirstInRowCount">
            <summary>
            是否管控首次进入行数，true为管控，false为不管控，默认为false。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ListFirstInRowCount">
            <summary>
            业务对象列表首次进入时每页行数，默认为200。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsUncheckAwsFileStorageDir">
            <summary>
            是否不检查亚马逊云存储目录合法性，true为不检查，false为检查，默认false检查。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloseMoveReportInBatchExport">
            <summary>
            是否关闭分页账表分批引出
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CloseInsecureSMSInterfaceChanel">
            <summary>
            关闭不安全短信接口通道
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxImportCount">
            <summary>
            引入最大限制数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.MaxExportCount">
            <summary>
            最大引出数量
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Context">
            <summary>
            登录上下文环境
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.ci">
            <summary>
            当前用户语言信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.AreaCacheKey">
            <summary>
            缓存隔离key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context._areaCacheKeyByDbId">
            <summary>
            缓存隔离key，仅DbId
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.CharacterSet">
            <summary>
            字符集（oracle与sqlserver字符集实现不一样，这里引用sqlserver字符集，oracle需做映射关系，并且需要KSQL支持）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DefaultLocale">
            <summary>
            系统默认语言
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.logLocale">
            <summary>
            日志等使用语言:理论上应该和操作系统CultureInfo一致
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Context.#ctor">
            <summary>
            debug使用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Context.GetAreaCacheKey">
            <summary>
            获得缓存隔离key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Context.GetDBCacheKey">
            <summary>
            获得缓存隔离key，仅DbId+是否多组织
            </summary>
            <p>应用场景：</p>
            1、系统参数缓存
            2、元数据缓存
            3、基础数据缓存等
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Context.GetQueryDBContext">
            <summary>
            获得查询数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Context.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            请务必注意，此处存在版本问题，您加的属性在以前系列化本对象后不存在的，
            故info.GetValue这样获取很可能会报错，请先判断变量是否存在再使用；
            </summary>
            <param name="info"></param>
            <param name="cntxt"></param>
        </member>
        <member name="M:Kingdee.BOS.Context.IsStandardEdition">
            <summary>
            判断产品是否为标准版
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Context.DatabaseCategory">
            <summary>
            //数据库类型  登录时设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ContextId">
            <summary>
            上下文ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.WeiboAuthInfo">
            <summary>
            微博AuthInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.Region">
            <summary>
            用户或当前业务的区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DBClientInfo">
            <summary>
            APM监控需要用到的相关属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsStartTimeZoneTransfer">
            <summary>
            是否启用时区转换
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LoginName">
            <summary>
            登录时输入的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.EntryRole">
            <summary>
            登陆时的角色：App/微信/云之家/...
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserName">
            <summary>
            当前Context对应的用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ClientType">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.Salt">
            <summary>
            密码调料
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserId">
            <summary>
            当前Context对应的用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserToken">
            <summary>
            用户认证令牌
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserPhone">
            <summary>
            用户手机
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserEmail">
            <summary>
            用户资料邮箱
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserAuthenticationMethod">
            <summary>
            用户认证方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserLoginType">
            <summary>
            用户登录类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserX509Certificate">
            <summary>
            用户的CA证书
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DatabaseType">
            <summary>
            数据库类型属性,登录时设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CustomName">
            <summary>
            客户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LightApp">
            <summary>
            云之家轻应用上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ThirdApp">
            <summary>
            第三方登录上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.WXApp">
            <summary>
            微信登录上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.TransIsolationLevel">
            <summary>
            事务隔离级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ServerUrl">
            <summary>
            应用服务器地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ConsoleFormId">
            <summary>
            主控表单唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ConsolePageId">
            <summary>
            主控页面标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserTransactionId">
            <summary>
            用户事务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DataCenterNumber">
            <summary>
            数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ContextResultType">
            <summary>
             上下文类型 判断是否可用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsDeployAsPublicCloud">
            <summary>
            是否公有云部署（公有云部署返回true)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.TenantId">
            <summary>
            租户标识；
            公有云使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.KDPassportId">
            <summary>
            金蝶通行证id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IpAddress">
            <summary>
            登陆ip
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.GateWayIp">
            <summary>
            网关IP
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ComputerName">
            <summary>
            登陆电脑名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CreateContextGuid">
            <summary>
            该属性提供context创建时候的一个唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsViewOnly">
            <summary>
            “仅查询用户”分组，打开单据、报表时，只能是查看状态，无法进行其他业务操作
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SessionId">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DisplayVersion">
            <summary>
            用来显示的版本号；之后再定义一个结构性的ProductVersion来显示完整的版本；
            显示版本号可能的格式如下：
            1:  5.0.0.1
            2:  5.0.0.1(sp1)
            3:  5.0.0.1(sp1+FIN 5.0.1.2) 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.QueryDBId">
            <summary>
            关联的查询库数据中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LogDbId">
            <summary>
            日志中心DBid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LogDBContext">
            <summary>
            日志中心上下文
            日志库不存在为null
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.GDCID">
            <summary>
            全局唯一数据中心标识(获取业务帐套上下文时赋值)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CurrentOrganizationInfo">
            <summary>
            当前组织信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CurrentUserTimeZone">
            <summary>
            当前用户时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SystemTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DBId">
            <summary>
            //数据库ID（帐套管理唯一标识）====由于目前为空值,此处设置为K3Makalu，主要为缓存测试使用 by eckel
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LogLocale">
            <summary>
            注意，获取用户国际化信息使用UserLocale，
            本属性可能为NULL，只用于记录日志用；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsMultiOrg">
            <summary>
            是否启用多组织
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UseLanguages">
            <summary>
            系统中用户数据语言
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UseLanguageIds">
            <summary>
            用户数据语言(如多语言字段)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsCH_ZH_AutoTrans">
            <summary>
            是否简繁自动转换
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SysLanguages">
            <summary>
            系统中语言总类别(设置为登录语言的语言)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SysLanguageIds">
            <summary>
            系统中语言ID(如多语言字段)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.NetCtrlMonitorIDForDataCenterM">
            <summary>
            数据中心独占监控信息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ServiceType">
            <summary>
            服务端类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.Gsid">
            <summary>
            用户访问标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.TRLevel">
            <summary>
            跟踪等级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ProductEdition">
            <summary>
            产品版本：1:标准版，0:企业版
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.FullClientIP">
            <summary>
            原始IP,如果有代理，为一个逗号隔开字符串
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.AutoFillLanWhenSave">
            <summary>
            保存时自动填充其他语言
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Normal">
            <summary>
            正常业务数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Archive">
            <summary>
            归档数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Report">
            <summary>
            报表数据库(只读)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.ManagementCenter">
            <summary>
            管理中心数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.MultiLanguageCenter">
            <summary>
            多语言中心数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.LogCenter">
            <summary>
            日志中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.QBoardClientType">
            <summary>
            轻分析大屏端方式
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ClientType">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.Mobile">
            <summary>
            移动终端
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.Html">
            <summary>
            HTML桌面浏览器客户端
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.WebApi">
            <summary>
            WebApi接口
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.Speaker">
            <summary>
            音箱类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.Guard">
            <summary>
            星空卫士
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WebType">
            <summary>
            服务端类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ContextResultType.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ContextResultType.UnActivation">
            <summary>
            未激活
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ContextResultType.UpdatePWD">
            <summary>
            修改用户密码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ContextConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写上下文Json数据
            </summary>
            <remarks>
            1、本次修改删除了操作编码属性
            </remarks>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="R"></typeparam>
            <typeparam name="L"></typeparam>
            <typeparam name="S"></typeparam>
            <typeparam name="C"></typeparam>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.RaiseEventSources">
            <summary>
            觸發此次操作的源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.DataEntities">
            <summary>
            實際影響的實體集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.RaiseEventTypeFlag">
            <summary>
            返回一個位枚舉，他搜集了所有的觸發源，然後將對應的位標注為true.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.ExcuteServiceParam">
            <summary>
            用於傳入實體服務規則執行的外部參數
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6">
            <summary>
            规则容器，通过分析规则依赖的字段，在字段或集合改变时正确调度规则。
            </summary>
            <typeparam name="T">Table類型</typeparam>
            <typeparam name="F">Field類型</typeparam>
            <typeparam name="R">Relation類型</typeparam>
            <typeparam name="L">Rule類型</typeparam>
            <typeparam name="S">RaiseEventSource類型</typeparam>
            <typeparam name="C">ActionExecuteContext類型</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.WalkItems(Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection,`0,Kingdee.BOS.Core.DependencyRules.RaiseEventType,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            將指定的數據全部更新，包括子實體，這發生在Initialized和ItemAdded,ItemReset
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.MapingRulesDataEntites(Kingdee.BOS.Core.DependencyRules.RaiseEventType,System.Collections.Generic.IEnumerable{`3},`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            根据事件源信息，推导出哪些规则以及对应的目标数据集需要执行。
            </summary>
            <param name="raiseEventType">触发的事件类型，用于提前过滤规则，减少不必要的计算。</param>
            <param name="rules">可能被执行的规则集合。</param>
            <param name="eventTable">发生事件的事件源。</param>
            <param name="eventDataEntities">事件发生时的实体。</param>
            <returns>一个数据结构，存放了规则和目标数据集合的关系。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.CanShip``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            根据实体级的数据，判断是否可以跳过运算。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetDataEntities(`0,`0,System.Collections.Generic.IEnumerable{System.Object},Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode@)">
            <summary>
            通過事件源于規則申明的位置，獲取與事件源實體相關的實體集合。
            </summary>
            <param name="activeTable">当前活动表，例如在规则中是事件觸發時的表</param>
            <param name="targetTable">目标表，在规则中，即規則申明的位置，</param>
            <param name="activeDataEntities">当前活动数据集，在规则中，即事件源的實體集合。</param>
            <param name="expansionMode">最终展开后，数据的来源方向。</param>
            <returns>最終與申明源相關的實體集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetItems(`2,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            已知一個關係，以及父表的對象集合，返回這個關係對應的所有明細。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6._manager">
            <summary>
            实体规则管理器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.#ctor">
            <summary>
            创建规则容器。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetTables">
            <summary>
            返回所有的表对象。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetRuleComparison">
            <summary>
            返回规则的排序委托，用于决定规则的执行顺序。
            </summary>
            <returns>规则的排序委托，默认为null，即不排序。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Build">
            <summary>
            在首次使用前，必须调用此方法，由于分析依赖关系。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetFieldDependencyRules(`1)">
            <summary>
            获取某个字段关联的所有规则。
            </summary>
            <param name="field">要检测的字段</param>
            <returns>与之关联的规则集合，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetTableDependencyRules(`0)">
            <summary>
            获取某个表关联的所有规则。
            </summary>
            <param name="table">要检测的表</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetRelationDependencyRules(`2)">
            <summary>
            获取某个关系关联的所有规则。
            </summary>
            <param name="relation">要检测的关系</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Raise(`4,`5)">
            <summary>
            触发指定的事件
            </summary>
            <param name="arg">事件参数</param>
            <param name="executeContext">执行上下文</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnItemSelected(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            当某个明细被选中
            </summary>
            <param name="arg"></param>
            <param name="taskContext"></param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnItemRemoved(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            当某个明细被删除后。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnInitialized(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            當整單在加載后觸發。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnValueChanged(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            當一個字段的值發生改變后調用此函數
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Suspend">
            <summary>
            通知规则引擎进入休眠状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Resume(`5)">
            <summary>
            唤醒规则引擎
            </summary>
            <param name="executeContext">需要外界自己组织一个执行上下文。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.BuildErrContext(`5)">
            <summary>
            输出错误的上下文，如在那个单据上，什么实体服务规则上，方便用户看到此错误日志后，及时修复
            </summary>
            <returns></returns>
            <remarks>
            本类缺少业务信息，无法生成错误详细信息，需要由派生类生成
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Close">
            <summary>
            清除对象引用对象的并释放资源
            <remarks>
            注意会释放_manager对象
            </remarks>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Rules">
            <summary>
            返回所有的規則集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RootTable">
            <summary>
            返回根表對象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.IsSuspend">
            <summary>
            是否处于休眠状态
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager">
            <summary>
            用于管理依赖性的工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._fieldDependencyRules">
            <summary>字段关联的规则</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._tableDependencyRules">
            <summary>表关联的规则。</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._relationDependencyRules">
            <summary>关系关联的规则。</summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.Build">
            <summary>
            構建數據的依赖性。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`1)">
            <summary>
            尋找所有依賴某個字段的所有規則。
            </summary>
            <param name="field">要檢索的字段</param>
            <returns>返回所有依賴此字段的規則。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDeclarationRules(`0)">
            <summary>
            返回在某个表上申明的所有规则。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyFields">
            <summary>
            獲取所有有依賴需求的字段。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`0)">
            <summary>
            返回依賴與某個表的所有規則。
            </summary>
            <param name="table">要檢索的表，他要求字段已經提前計算依賴項。</param>
            <returns>未合併過濾后的規則。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`2)">
            <summary>
            返回依赖某个关系的所有规则。
            </summary>
            <param name="relation">要检测的关系。不能为空</param>
            <returns>依赖此关系的规则集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetFieldDependencyRules(`1)">
            <summary>
            获取某个字段关联的所有规则。
            </summary>
            <param name="field">要检测的字段</param>
            <returns>与之关联的规则集合，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetTableDependencyRules(`0)">
            <summary>
            获取某个表关联的所有规则。
            </summary>
            <param name="table">要检测的表</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetRelationDependencyRules(`2)">
            <summary>
            获取某个关系关联的所有规则。
            </summary>
            <param name="relation">要检测的关系</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.Close">
            <summary>
            清除对象引用对象的并释放资源
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2">
            <summary>
            将源序列转换为目标序列的集合类。
            </summary>
            <typeparam name="S">源序列的元素类型</typeparam>
            <typeparam name="T">目标序列的元素类型。</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2.Convert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            派生类完成源序列到目标序列的转换工作。
            </summary>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2.TargetObjects">
            <summary>
            返回目標數據。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetItemsByRelation">
            <summary>
            通过关系寻找明细，本来可以使用匿名函数非常方便的处理，但是C#编译系统有BUG，只能手工编写类。
            关于此BUG可以参见 http://www.cnblogs.com/tansm/archive/2011/05/20/2051684.html
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities">
            <summary>
            一个数据结构，存放了规则和目标数据集合的关系。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities.Rule">
            <summary>
            一批规则，这些规则需要被执行。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities.DataEntities">
            <summary>
            目标数据集，Rule将应用到这些目标数据集上。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection">
            <summary>
            定义了一个集合，这个集合有个特点，允许ForEach的同时，再添加数据。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection._maxTaskCount">
            <summary>
            单次接收的最大任务数量，如果已经积累了超过此量的任务，强制中断
            </summary>
            <remarks>
            东药反馈内存溢出(32G内存)，
            通过dump查出来是RaiseEventSource及Tasks远远超过正常量，达到惊人的千万数量级，
            具体为何达到此数量，难以查知原因，需要增加一个强制平衡机制，
            当任务量开始累积到超出正常范围量时，强制中断，提醒用户，并记录错误日志
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.Clear">
            <summary>
            清除本集合持有的所有对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.AddRaiseEventSource(`4)">
            <summary>
            向集合中添加触发的事件源。
            </summary>
            <param name="eventSource">一个事件源对象。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.AddRange(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities})">
            <summary>
            添加一批新的待执行任务。这些任务会自动与当前的任务合并。
            </summary>
            <param name="newTasks">新的任务。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.TryGetTask(`3,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities@)">
            <summary>
            从当前可用集合中检索是否有指定的规则。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.Dequeue(Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities@)">
            <summary>
            弹出一个最前面的元素（规则+数据），并删除这个元素。
            </summary>
            <param name="result">当前集合中最前面的元素。</param>
            <returns>是否仍然有数据。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.RaiseEventSources">
            <summary>
            返回只读方式的所有触发源。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.Count">
            <summary>
            返回当前剩余的未执行的规则数目。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.ExcuteServiceParam">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ExcuteServiceParam.AllowActions">
            <summary>
            允许执行的服务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode">
            <summary>
            当进行数据展开时的模式，他作为GetDataEntities的返回值。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Peer">
            <summary>目标数据在平级的层，即当前表</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Parent">
            <summary>目标数据在父表</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Items">
            <summary>目标数据在他的子表</summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Field`4.Table">
            <summary>
            此字段所在的表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.LazyCollection`2">
            <summary>
            已知一個集合，通過一個運算可以
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Close">
            <summary>
            关闭本对象时，释放持有的子对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6._disposed">
            <summary>
            是否已经执行过销毁释放变量过程；
            此标记用于避免重复执行变量释放；
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Dispose">
            <summary>
            显式函数，用于外部调用，通知本组件强制释放变量
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Dispose(System.Boolean)">
            <summary>
            实际执行销毁，清除变量的过程；
            </summary>
            <param name="disposing">
            调用来源：
              true=外部强制调用，需要销毁全部变量，包括托管、非托管对象
              false=本对象销毁时，自动调用，需要销毁非托管代码；其他托管对象可能还有用，故不强制销毁；
            </param>
            <remarks>
            本函数为虚函数,支持重载; 派生类释放各自私有的对象即可
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Finalize">
            <summary>
            构销函数，调用对象销毁器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Field">
            <summary>
            返回觸發此次事件的源字段
            </summary>
            <remarks>例如當物料發生改變時，此字段就是物料，但如果是分錄刪除、新增和清除時，此字段就是關係的字段。當單據加載時，此處也為空。</remarks>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.DataEntity">
            <summary>
            返回觸發此次事件的參考實體
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.RaiseEventType">
            <summary>
            返回造成此次改變的類型，例如是值更新事件。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Relation">
            <summary>
            返回發生此次事件相關的關係，這發生在集合變更時使用。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RaiseEventType">
            <summary>
            觸發事件的類型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ValueChanged">
            <summary>
            當某個字段的值更新后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.Initialized">
            <summary>
            當初始化整個表單后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemAdded">
            <summary>
            當某個分錄添加后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemReset">
            <summary>
            當某個分錄重置后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemRemoved">
            <summary>
            當某個分錄被刪除后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.Reset">
            <summary>
            當某個分錄重新更新數據或全部刪除后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.SelectRowChanged">
            <summary>
            選擇的行發生改變時，這一般發生在單據體具有代理字段的情況下。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemAdding">
            <summary>
            當某個分錄正在添加中
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.SelectRowExtChanged">
            <summary>
            選擇的行發生改變時，這一般發生在單據體具有代理字段的情況下。(兼容以前的，以现在这个为准)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.Relation`4">
            <summary>
            关系,用于描述两个表之间的父子关系。
            </summary>
            <typeparam name="T">Table類型</typeparam>
            <typeparam name="F">Field類型</typeparam>
            <typeparam name="R">Relation類型</typeparam>
            <typeparam name="L">Rule類型</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Relation`4.GetItems(System.Object)">
            <summary>
            通过此关系，获取某个父表数据的所有子数据。
            </summary>
            <param name="dataEntity">父表的一条有效记录。</param>
            <returns>返回此父记录的所有明细记录。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Relation`4.GetParent(System.Object)">
            <summary>
            返回某个子表记录的父对象。
            </summary>
            <param name="dataEntity">子表的某条记录。</param>
            <returns>子表的某条记录。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Relation`4.ParentTable">
            <summary>
            返回此关系中的父表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Relation`4.ChildTable">
            <summary>
            返回此关系中的子表。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyIt(`1)">
            <summary>
            檢測此規則是否依賴某個字段。
            </summary>
            <param name="field">要檢測的字段</param>
            <returns>如果依賴此字段，返回true，否則返回false.</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.Execute(`5)">
            <summary>
            此規則觸發時，應執行的囘調操作。
            </summary>
            <param name="context">執行上下文。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.QueryExecute(Kingdee.BOS.Core.DependencyRules.RaiseEventType)">
            <summary>
            返回一個值，此值指示否則在某個觸發情況下執行此規則。
            </summary>
            <param name="raiseEventType">當前可能的觸發情況，是一個位枚舉，某個位為true時，表示可能觸發此事件。</param>
            <returns>返回在上述情況下，是否觸發規則的執行。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DeclarationSource">
            <summary>
            此規則申明的位置，例如申明到表頭或單據體
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyFields">
            <summary>
            此規則依賴的字段集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyRelations">
            <summary>
            返回規則依賴的關係集合。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Table`4.CompareTo(Kingdee.BOS.Core.DependencyRules.Table{`0,`1,`2,`3})">
            <summary>
            计算例外一个表与当前表的大小，
            如果当前表低于other的层次，例如this是主表，other是分录，返回小于0的值；
            如果当前表与other是一个层次，例如this是分录，other也是分录，返回0,注意，两个平级的分录也返回0;
            如果当前表低于other的层次，那么返回大于0的值；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.Fields">
            <summary>
            返回此表所有的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.ParentRelation">
            <summary>
            返回此表的父關係，當為null時
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.ChildRelations">
            <summary>
            返回此表所在的子關係
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.Level">
            <summary>
            此表所在的級別，當時根表時為0，他的子表為1（並行的都為1），以此類推。
            此值在BusinessInfo的具体实现中填充。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DatabaseType">
            <summary>
            数据库类型定义
            <seealso cref="!:Kingdee.BOS.SQL.DatabaseType"/> 
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DatabaseType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.ManagementCenter">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.BusinessDataCenter">
            <summary>
            业务数据中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.MultiLanguageCenter">
            <summary>
            多语言中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DBScriptListAccountType">
            <summary>
            脚本执行列表中注册的脚本分组类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.PDM">
            <summary>
            PDM中Table、View脚本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.BOS">
            <summary>
            BOS运行平台所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.MC">
            <summary>
            管理中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.BusinessDataCenter">
            <summary>
            标准业务数据中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.ML">
            <summary>
            多语言中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.DEV">
            <summary>
            开发类型的帐套所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.DEMO">
            <summary>
            DEMO类型的帐套所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.PDM_Constraint">
            <summary>
            PDM中的Constraint脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.K3ProductInfo">
            <summary>
            K3产品信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.K3ProductInfo.CurrentK3ProductVersion">
            <summary>
            当前产品版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.K3ProductInfo.K3ProductBeginVersion">
            <summary>
            产品初始版本信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.FullDatabaseBackups">
            <summary>
            完整数据库备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.PartialBackups">
            <summary>
            增量数据库备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.BookBackups">
            <summary>
            账簿备份
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ParseMetaDataFileType">
            <summary>
            元数据文件解析类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.ALL">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectMetaData">
             <summary>
            业务对象元数据
             </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectDependencyItem">
            <summary>
            业务对象依赖项
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectMetaDataAndGatherDependencyItem">
            <summary>
            业务对象元素据，同时收集依赖项元数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.ExecuteAndClearDependencyItem">
            <summary>
            执行并清理依赖项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DatabaseBusinessType">
            <summary>
            数据库业务类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterID">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterNumber">
            <summary>
            数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterName">
            <summary>
            数据中心名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.AcctType">
            <summary>
            帐套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.SysTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.OperationType">
            <summary>
            数据中心操作类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.ServerInstance">
            <summary>
            服务器实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.LogFileFullPath">
            <summary>
            数据中心脚本日志全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.ScriptLogContent">
            <summary>
            数据中心脚本执行日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DBBackupFileName">
            <summary>
            数据中心备份时，所选择的备份后的文件名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DBBackupFilePath">
            <summary>
            数据中心备份时，所选择的备份后的文件路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.TenantId">
            <summary>
            数据中心租户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.Sites">
            <summary>
            数据中心应映射站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IUpgradeDataCenter.CurrentProductVersion">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IUpgradeDataCenter.TargetProductVersion">
            <summary>
            目标版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IBackupDataCenter.BackupDateTime">
            <summary>
            备份日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IBackupDataCenter.BackupType">
            <summary>
            备份类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IRestoreDataCenter.DBRestoreFileFullPath">
            <summary>
            数据中心恢复时，所选择的备份文件的全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBAUser">
            <summary>
            DBA用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBAPassword">
            <summary>
            DBA密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.User">
            <summary>
            数据库连接用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.Password">
            <summary>
            数据库连接用户密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterID">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterNumber">
            <summary>
            数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterName">
            <summary>
            数据中心名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.AcctType">
            <summary>
            帐套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.SysTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.OperationType">
            <summary>
            数据中心操作类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.ServerInstance">
            <summary>
            服务器实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.IsCreateNewUser">
            <summary>
            是否创建新用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DatabaseBusinessType">
            <summary>
            数据库业务类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.TenantId">
            <summary>
            数据中心租户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.TenantTagId">
            <summary>
            数据中心租户tag ID
            创建，注册数据库时使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.Sites">
            <summary>
            数据中心映射站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.CurrentProductVersion">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.TargetProductVersion">
            <summary>
            目标版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.GDCID">
            <summary>
            全局数据库ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.BackupDateTime">
            <summary>
            备份日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBBackupFileName">
            <summary>
            数据中心备份时，所选择的备份后的文件名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBBackupFilePath">
            <summary>
            数据中心备份时，所选择的备份后的文件路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.BackupType">
            <summary>
            备份类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBRestoreFileFullPath">
            <summary>
            数据中心恢复时，所选择的备份文件的全路径
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DataCenter">
            <summary>
            数据中心基础类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataCenterInfo.DataCenter.ToString">
            <summary>
            转化为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.LocaleValueName">
            <summary>
            各语言集名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.AcctType">
            <summary>
            账套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.IsNeedValicationCode">
            <summary>
            是否需要验证码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.AuthenticationMethods">
            <summary>
            数据中心验证方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.DefaultMethods">
            <summary>
            默认登录方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.TenantId">
            <summary>
            租户ID 肖光杰 补丁安装改造，账套添加租户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.GUID">
            <summary>
            唯一ID(该数据中心在云端的唯一标识）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Sites">
            <summary>
            关联的站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.IsNotDefaultAdmin">
            <summary>
            登录用户名是否默认Administrator（管理中心）  
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DataCenterAcctType">
            <summary>
            数据中心业务类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterAcctType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterAcctType.Bussiness">
            <summary>
            标准业务中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterAcctType.Mc">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterAcctType.Log">
            <summary>
            日志中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCNewInfo">
            <summary>
            对应数据中心库中的T_BOS_Register表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.DCID">
            <summary>
            全局唯一账套ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.DataCenterID">
            <summary>
            存储在管理中心库的帐套ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.AttributeCode">
            <summary>
            管理中心特征码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.BOSVersion">
            <summary>
            产品版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.Number">
            <summary>
            帐套名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.PTNo">
            <summary>
            补丁号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.DBServer">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.DBName">
            <summary>
            服务器实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.CreateDate">
            <summary>
            建库时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCNewInfo.UploadDate">
            <summary>
            上传时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCHistory">
            <summary>
            对应数据中心库中的T_BOS_RegisterHistory表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCHistory.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCHistory.DCID">
            <summary>
            历史帐套ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCHistory.Date">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCPkgHistory">
            <summary>
            对应数据中心库中的T_BOS_RegisterPkgHistory表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCPkgHistory.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCPkgHistory.PTNo">
            <summary>
            补丁号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCPkgHistory.Date">
            <summary>
            补丁时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.UploadFullDCInfo">
            <summary>
            上传至Open网站的帐套完整信息（帐套、启用包、帐套历史、补丁历史）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.UploadFullDCInfo.DCInfo">
            <summary>
            帐套信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.UploadFullDCInfo.InstalledPkgItems">
            <summary>
            启用包信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.UploadFullDCInfo.DCHistorys">
            <summary>
            帐套历史
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.UploadFullDCInfo.DCPkgHistorys">
            <summary>
            补丁历史
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCListParam">
            <summary>
            Get DC List Param
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo">
            <summary>
            数据中心关联的站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo.Id">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo.DisplayName">
            <summary>
            站点显示名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCVersionInfo">
            <summary>
            数据中心版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCVersionInfo.Version">
            <summary>
            当前版本号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCVersionInfo.Majors">
            <summary>
            主版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCVersionInfo.CurPatchNum">
            <summary>
            当前补丁
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCVersionInfo.CurPatchDate">
            <summary>
            最近一次打补丁时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.MajorVerInfo">
            <summary>
            主版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.MajorVerInfo.MajorVer">
            <summary>
            当前主版本号(1,2,3,5,6,7)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.MajorVerInfo.MajorVerDate">
            <summary>
            主版本升级时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.MajorVerInfo.PatchNum">
            <summary>
            补丁号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.MajorVerInfo.PatchDate">
             <summary>
            补丁时间
             </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.None">
            <summary>
            默认值，支持xml持久化处理，兼容int为0时的强制转换
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Upgrade">
            <summary>
            升级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Backup">
            <summary>
            备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Restore">
            <summary>
            恢复
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Regist">
            <summary>
            注册
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Modify">
             <summary>
            修改
             </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.MySQLDataCenterInfo.DatabaseInstance">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.OracleDataCenterInfo.IsCreateNewTableSpace">
            <summary>
            是否创建新的表空间  
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.OracleTableSpace">
            <summary>
            Oracle表空间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.PostgreSQLDataCenterInfo.DatabaseInstance">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DatabaseEntity">
            <summary>
            数据库实体名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DBFileFullPath">
            <summary>
            数据库实体文件存储全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DBFileLogFullPath">
            <summary>
            数据库实体日志文件存储全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.IsWindiwsUser">
            <summary>
            是否使用Windows身份验证方式
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.SyncRecord">
            <summary>
            对应数据中心库中的T_BOS_SyncRecord表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.ID">
            <summary>
            Guid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.RecordType">
            <summary>
            记录类型，1-启用包信息,2-……（待定）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.RecordID">
            <summary>
            记录ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.RecordDate">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.SyncState">
            <summary>
            同步状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SyncRecord.PkgItem">
            <summary>
            启用包
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.InstalledPkgItem">
            <summary>
            启用包明细,T_BOS_InstalledPackage和T_BOS_InstalledPackage_L
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.PKGID">
            <summary>
            启用包ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.Date">
            <summary>
            启用日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.Version">
            <summary>
            启用包版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.ISVID">
            <summary>
            开发商ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.DevCode">
            <summary>
            开发商代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.InstalledPkgItem.Name">
            <summary>
            启用包名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDChartInfo">
            <summary>
            抽出图表信息类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Outsetbar">
            <summary>
            Outset Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Gradientbar">
            <summary>
            Gradient Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Borderlessbar">
            <summary>
            Gradient Borderless Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Simplebar">
            <summary>
            Simple Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Borderlesssimplebar">
            <summary>
            Borderless Simple Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Flatbar">
            <summary>
            Flat Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Flatglassbar">
            <summary>
            Flat Glass Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Steelcolumn">
            <summary>
            Steel Column
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Transparentbar">
            <summary>
            Transparent Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Quasibar">
            <summary>
            Quasi-3D Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Glasscylinder">
            <summary>
            Glass Cylinder
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.NumPerPage">
            <summary>
            依据SecondScaleType属性的设置，确定该NumPerPage值的单位。50以内，避免性能太慢。
            单位为：Day，Hour，Minute，Second，其他的Scale都归结到Day
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.IsCurrentTimeLineVisible">
            <summary>
            是否显示当前时间线
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.IsNonworkingTimeHighlighted">
            <summary>
            是否非工作时间高亮显示
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingWeekStart">
            <summary>
            每周开始工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingWeekEnd">
            <summary>
            每周结束工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingDayStart">
            <summary>
            每日开始工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingDayEnd">
            <summary>
            每日结束工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.StartTime">
            <summary>
            任务图开始时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.EndTime">
            <summary>
            任务图结束时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.FirstScaleType">
            <summary>
            第一时间单位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.SecondScaleType">
            <summary>
            第二时间单位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.Intervals">
            <summary>
            非工作时间列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.GetSpecDateTimeInDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取指定H:M:S的日期
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.GetStrategyKey">
            <summary>
            get the strategy key from this parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.RaisePropertyChanged(System.String)">
            <summary>
            触发属性改变事件
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.GetKDScaleType(System.Int32)">
            <summary>
            获取时间单位类型
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDGanttChartParameter.NonworkingTimeBackground">
            <summary>
            非工作时间背景颜色
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDTimeInterval.WorkingType">
            <summary>
            Is break time
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDTimeInterval.IntervalType">
            <summary>
            type of time slot
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.DialogResult">
            <summary>
            对话框返回结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.DialogResult.OK">
            <summary>
            确定
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.DialogResult.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.KDListRptTitleField">
            <summary>
            列表打印标题字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDListRptTitleField.Label">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDListRptTitleField.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.NotificationObject">
            <summary>
            消息通知的基类，用于把Model修改的消息通知给View，实现同步修改。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.NotificationObject.ChangedProperty(System.String)">
            <summary>
            消息通知
            </summary>
            <param name="name"></param>
        </member>
        <member name="E:Kingdee.BOS.DataEntity.NotificationObject.PropertyChanged">
            <summary>
            实现INotifyPropertyChanged
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.IKDPageSetupPara">
            <summary>
            列表打印页面设置数据接口
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPageSetupModelBase.PrintPages">
            <summary>
            打印页码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.KDListPageSettingBase">
            <summary>
            为了多端兼容，提取所有属性到基类Kingdee.BOS.DataEntity.KDListPageSettingBase,Kingdee.BOS中
            子类仅实现扩展方法即可
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDPrint.KDListPageSettingBase.Init">
            <summary>
            校验数据初始数据正确性
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDPrint.KDListPageSettingBase.CheckValues">
            <summary>
            校验应用数据正确性
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg">
            <summary>
            打印机信息查询参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg.PrintAddress">
            <summary>
            查询指定打印机名称或共享打印机地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg.IsDialog">
            <summary>
            需要弹出选择打印机对话框
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg.IsDefaultInfo">
            <summary>
            如果没有选择，则需要返回默认打印机信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg.IncludeAll">
            <summary>
            需要返回所有打印机信息,如果打印机比较多，可能存在比较慢的情况， 如非必要，请不起用。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoArg.JobId">
            <summary>
            查询任务编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult">
            <summary>
            打印机信息查询结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.Selected">
            <summary>
            指定打印机了吗
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.Printer">
            <summary>
            选定或默认的打印机信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.AllPrinters">
            <summary>
            所有打印机打印机信息列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.Error">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfoResult.JobId">
            <summary>
            查询任务编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo">
            <summary>
            打印机查询信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.PrinterName">
            <summary>
            指定打印机名称或共享打印机地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.IsDefaultPrinter">
            <summary>
            为默认打印机
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.Color">
            <summary>
            彩色打印
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.SupportsColor">
            <summary>
            支持彩色打印
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.IsValid">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.IsPlotter">
            <summary>
            是否为绘图仪
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.HardMarginX">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.HardMarginY">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.Landscape">
            <summary>
            true: 横向
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.PaperKindName">
            <summary>
            纸张类型名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.PaperName">
            <summary>
            纸张名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.PaperHeight">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.PaperWidth">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.MarginBottom">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.MarginLeft">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.MarginRight">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.KDPrinterQueryInfo.MarginTop">
            <summary>
            in hundredths of an inch
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.LayoutWay">
            <summary>
            布局方法
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.LayoutWay.FixedCellSize">
            <summary>
            固定单元格尺寸
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.LayoutWay.PageAuto">
            <summary>
            页面自动
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.LayoutWay.WholeAuto">
            <summary>
            全局自动
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.ListGroupModel">
            <summary>
            分组功能的Model，用于与界面的界面上Combox控件绑定取数，并在后续逻辑进行处理。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.ListGroupModel.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDPrint.ListGroupModel.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDPrint.PaperOrientationWay">
            <summary>
            页面方向
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.PaperOrientationWay.Portrait">
            <summary>
            纵向
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDPrint.PaperOrientationWay.Landscape">
            <summary>
            横向
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDRichEditAttachementInfo">
            <summary>
            富文本附件类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo">
            <summary>
            富文本编辑绑定数据源字段定义类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo.FieldInitialValue">
            <summary>
            默认初始值，用于记录初始默认值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo.FieldOldValue">
            <summary>
            记录改变前的值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDRichEditMergeFieldCollection.Add(Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo)">
            <summary>
            隐藏List类中add方法，重新定义Add方法,判断有重复列的时候报出异常
            </summary>
            <param name="dc"></param>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPort">
            <summary>
            金蝶串口类，2013-09-24，yaojunsong
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.Init(Kingdee.BOS.DataEntity.KDSerialPortConfig)">
            <summary>
            端口初始化
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.Close">
            <summary>
            关闭当前端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteLine(System.String)">
            <summary>
            端口写入字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            端口写入Byte数组
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            端口写入Char数组
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.GetErrMessage">
            <summary>
            获取错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDSerialPort.AfterReceived">
            <summary>
            数据到达回调接口
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPortConfig">
            <summary>
            金蝶串口配置类，2013-09-24，yaojunsong
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.PortName">
            <summary>
            端口名称，如COM2，COM4
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Rate">
            <summary>
            端口速率，一般是2400，4800，9600等
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Parity">
            <summary>
            //0,不校验;1,奇数;2,偶数;3,保留为 1;4,保留为 0;
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Bits">
            <summary>
            //比特位，一般是8;
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.StopBits">
            <summary>
            停止位的数目 0,不使用停止位;1,使用一个停止位;2,使用两个停止位;3,使用 1.5 个停止位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Timeout">
            <summary>
            操作未完成时发生超时之前的毫秒数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.RecDataEndingChars">
            <summary>
            一次指令接受完成标记，
            如果设置了该属性并且是ASCII编码格式，客户端串口控件将多次接受串口的数据知道发现0D0A数据组合后在发送到服务端；（解决在WLAN环境中服务端接受次序问题）
            如果该属性未设置或者不是ASCII编码格式，客户端串口控件将每次接受的数据按接受顺序原模样发往服务端；
            例如：一般的是回车换行符 0D0A
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPortConfig.GetTimeout">
            <summary>
            获取超时时间，默认为-1永不超时
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.EncodingName">
            <summary>
            ASCIIEncoding、UTF8Encoding、UTF32Encoding、UnicodeEncoding、Windows 单字节编码之一或 Windows 双字节编码之一。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPortConfig.GetEncoding">
            <summary>
            依据EncodingName获取编码，默认为ASCII
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPortEventArgs">
            <summary>
            串口数据接受事件事件
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.DataEntity.KDSerialPortEventArgs.ReceivedDataType”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity">
            <summary>
            右下角消息弹窗实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.ID">
            <summary>
            可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.Height">
            <summary>
            高度：默认170
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.Width">
            <summary>
            宽度：默认300
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.TitleIcon">
            <summary>
            标题图标http地址：默认images/biz/default/Common/icon_logo32.png，
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.LinkUrl">
            <summary>
            查看链接地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.LinkContent">
            <summary>
            链接显示内容：默认”查看链接“
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.Content">
            <summary>
            弹窗显示内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.CategoryTitle">
            <summary>
            副标题，默认“我知道了”
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.CategoryIsLink">
            <summary>
            副标题是否为链接，默认true
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.CategoryLinkTag">
            <summary>
            副标题触发服务端事件时，作为回传的数据发给服务端
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.CategoryNotPopAgainFun">
            <summary>
            是否用CategoryLink使用默认“不再提示”功能
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.StyleKey">
            <summary>
            显示样式，前端提供参考，默认：KDCloudNewStyle
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.StackBroad">
             <summary>
            是否开启堆栈式弹窗 
            true:开启堆栈式弹窗，生成弹窗消息面板放入堆栈，如果之前堆栈内容还有，则会加入堆栈等待该消息面板弹窗
            false:表示该生成的消息窗体面板不会进入堆栈式当中，会被立即弹出
            默认：true
             </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.StackBroadMillss">
             <summary>
             单位毫秒 ：默认10000，
            StackBroad为true才会有效，指自己被关闭时，控制下一个的弹窗延时（指堆栈里面的消息窗口面板）
             </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.AutoCloseInterval">
            <summary>
            延时弹窗自动关闭，该属性为0则不会自动关闭，需要手动关闭，默认30秒 单位：毫秒
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.FireLinkEvent">
            <summary>
            链接按钮是否触发服务端事件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.TargetPageId">
            <summary>
            事件响应窗体pageid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.LinkTag">
            <summary>
            触发服务端事件时，作为回传的数据发给服务端
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.LowerRightPopMsgEntity.UserBehaviorOpName">
            <summary>
            自定义用户收集的操作名称
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.MesButtonType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.MsgInnerInfo">
            <summary>
            消息提示中控件实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.key">
            <summary>
            点击事件key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.caption">
            <summary>
            显示caption
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.visible">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.enabled">
             <summary>
            是否可用
             </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.linkopen">
            <summary>
            如果直接是链接，那该为点击的链接地址
            该属性赋值后，链接地址可打开，同时也会发送一个事件到服务端
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDZipLib">
            <summary>
            基于zlib 1.1.3的.net版本，目前来看是够用的
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.Zip(System.Byte[])">
            <summary>
            对数据进行压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.CheckHasZip(System.Byte[])">
            <summary>
            判断是否用Zlib压缩过
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.UnZip(System.Byte[])">
            <summary>
            数据解压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.ZipText(System.Byte[])">
            <summary>
            将数据压缩为Base64编码的文本
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.UnZipText(System.String)">
            <summary>
            将数据从Base64文本进行解压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.ZipFiles(System.String,System.String[])">
            <summary>
            把多个文件压缩成一个zip文件
            注意：待压缩文件不存在自动跳过，不报错
            </summary>
            <param name="zipFilePath">zip文件绝对路径</param>
            <param name="files">待压缩文件绝对路径，文件不存在自动跳过，不报错</param>
        </member>
        <member name="T:Kingdee.BOS.CompressLevel">
            <summary>
            Zlib 压缩类型枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Default">
            <summary>
            The default compression level with a reasonable compromise between compression and speed
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.None">
            <summary>
            No compression at all. The data are passed straight through.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Best">
            <summary>
            The maximum compression rate available.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Fastest">
            <summary>
            The fastest available compression level.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:Kingdee.BOS.KDCancelException">
            <summary>
            KD系统内部使用的取消异常定义
            </summary>
            <remarks>
            取消异常定义：
            内部某一类异常，可以固定异常代码（也许命名不一定合适），但对异常代码统一控制很有必要（对用户调用透明）
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.KDCancelException.#ctor(System.String)">
            <summary>
            创建取消异常实例
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Kingdee.BOS.KDDuplicateNoException">
            <summary>
            单据编号重复异常，此异常便于插件重试
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDDuplicateNoException.#ctor(System.String,System.String)">
            <summary>
            单据编号重复异常
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionUploadDirNotSet">
            <summary>
            文件上传目录未设置。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDNotFoundException">
            <summary>
            404异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNotFoundException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Kingdee.BOS.KDSyntaxErrorException">
            <summary>
            公式语法校验异常类，yaojunsong,2011-10-08
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDUserFriendlyException">
            <summary>
            用户友好异常
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDUserFriendlyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDUserFriendlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Kingdee.BOS.KDUserFriendlyException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Error code</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Kingdee.BOS.KDUserFriendlyException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="code">Error code</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:Kingdee.BOS.KDUserFriendlyException.Code">
            <summary>
            An arbitrary error code.
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionContext">
            <summary>
            表达式执行所需上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.Set(System.String,System.Object)">
            <summary>
            定义一个表达式执行期所需的变量并赋值
            （此方法通常用来定义表达式执行所需的变量参数）
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.Set("name", "john").Set("age", "21")等等
            </para>
            </summary>
            <param name="key">变量名称</param>
            <param name="value">变量值</param>
            <returns>
            出于Fluent编程考虑而加入的快速接口，例如：
            <para>ctx.Set("name", "john").Set("age", "21")</para>
            </returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.Set(System.String)">
            <summary>
            定义一个表达式执行期所需的变量
            （此方法通常用来定义期望从脚本中获取值的变量）
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.Set("result1").Set("result2")等等
            </para>
            </summary>
            <param name="key">变量名称</param>
            <returns>为Fluent编程而加入的快速接口</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.TrySetValue(System.String,System.Object)">
            <summary>
            尝试进行赋值操作。将检测是否能够进行字段和变量赋值
            </summary>
            <param name="key">要赋值的键</param>
            <param name="newValue">新的值</param>
            <returns>是否赋值成功。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.TryGetValue(System.String,System.Object@)">
            <summary>
            获取给定变量名或字段的值，将尝试从字段和变量中。
            </summary>
            <param name="key">变量名</param>
            <param name="value">如果获取成功，返回其值，否则为null</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.BindGetField(Kingdee.BOS.Scripting.TryGetValueHandler)">
            <summary>
            设置表达式中字段的取值方法。
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.SetFieldEvaluator(GetFieldFromModel).Set("age", "21")等等
            </para>
            </summary>
            <param name="handler">取值方法体的委托</param>
        </member>
        <member name="P:Kingdee.BOS.Scripting.ExpressionContext.VariableDictionary">
            <summary>
            返回变量字典。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.ExpressionContext.VariableNames">
            <summary>
            获取所有变量名称的集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Scripting.ExpressionContext.ErrorTip">
            <summary>
            表达式解析出错提示
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaContext.RegisterFunctions(System.String,Kingdee.BOS.Formula.IFormulaFunction)">
            <summary>
            注册自定义函数
            </summary>
            <param name="key"></param>
            <param name="funcMeta"></param>
        </member>
        <member name="P:Kingdee.BOS.Formula.FormulaContext.CustomParams">
            <summary>
            运行时客户化参数结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.AbstractFormulaFunction">
            <summary>
            公式函数抽象类,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IFormulaFunction">
            <summary>
            函数接口 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaFunction.GetFunction(System.String)">
            <summary>
            函数代理接口
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaFunction.GetCacheKey(System.String)">
            <summary>
            获取缓存键值
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Category">
            <summary>
            函数类别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.FunctionName">
            <summary>
            函数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Assembly">
            <summary>
            组件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Contex">
            <summary>
            运行时上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.GetFunction(System.String)">
            <summary>
            获取函数调用句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.GetCacheKey(System.String)">
            <summary>
            获取缓存键值，空字符串则不缓存。
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.CreateNewInstance">
            <summary>
            创建新实例,如果确认为无状态类，可以直接 return this。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Category">
            <summary>
            函数分类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.FunctionName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Assembly">
            <summary>
            组件格式：TypeName,AssembleName
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Contex">
            <summary>
            运行时上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.AbstractFormulaParserProvider">
            <summary>
            公式解析提供者抽象基类 ,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IFormulaParserProvider">
            <summary>
            公式解析提供者接口 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetItems(System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            取的计算项和依赖项列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetItemsValue(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            公式运行时取公式依赖项的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetPrivateVars(System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            取得公式内部临时变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetPrivateVarsValue(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            公式运行时取公式临时变量的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetFunctions(System.Func{Kingdee.BOS.Formula.IFormulaParserProvider,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Formula.IFormulaFunction}})">
            <summary>
            取得公式内部使用的函数表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindSetField(System.Action{System.String,System.Object})">
            <summary>
            设置值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetField(System.Func{System.String,System.Object})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取公式Script
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetDependenceItems(System.String)">
            <summary>
            获取依赖项
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.FunctionRegex">
            <summary>
            函数匹配
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.DepItemReg">
            <summary>
            依赖项匹配
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.NumberReg">
            <summary>
            数字匹配
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.InitContext">
            <summary>
            初始化上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.SetFieldValue(System.String,System.Object)">
            <summary>
            设置运算结果
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFieldValue(System.String)">
            <summary>
            获取变量值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetItems">
            <summary>
            取的计算项和依赖项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetItemsValue">
            <summary>
            公式运行时取公式依赖项的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetPrivateVars">
            <summary>
            取得公式内部临时变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetPrivateVarsValue">
            <summary>
            公式运行时取公式临时变量的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFunctions">
            <summary>
            取得公式内部使用的函数表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取公式Script
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.CalcResult">
            <summary>
            运算结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.CustomParams">
            <summary>
            运行时客户化参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Context">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.ENUM_FUNCTYPE">
            <summary>
            函数类型枚举,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Formula.ENUM_FUNCTYPE.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.FormulaUtils">
            <summary>
            公式解析类,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.ParserXmlFormlaDisplay(System.String)">
            <summary>
            构造xml公式模型
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.ParserXmlFormalItem(System.Xml.Linq.XElement)">
            <summary>
            构造xml公式模型节点
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.Check(System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            校验公式
            </summary>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.Excute(Kingdee.BOS.Context,System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            执行公式
            </summary>
            <param name="ctx"></param>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetFormulaText(System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            获取公式文本
            </summary>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetProvider(System.String)">
            <summary>
            获取公式解析引擎提供者
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Formula.FormulaUtils._selfCreateLib">
            <summary>
            函数库缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetSelfCreatableObject``1(System.String)">
            <summary>
            获取自创建对象实例
            </summary>
            <param name="asmKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetTargetObject``1(System.String)">
            <summary>
            函数组件创建方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetReflectObject(System.String)">
            <summary>
            函数组件创建方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.DataType">
            <summary>
            数据类型，如果是函数则为object; 0:Object
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Type">
            <summary>
            0:变量;1:函数;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.DataType">
            <summary>
            数据类型，如果是函数则为object; 0:Object
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Type">
            <summary>
            0:变量;1:函数;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IronPythonFormulaProvider">
            <summary>
            IronPython脚本实现提供者 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取IronPython公式脚本
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetDependenceItems(System.String)">
            <summary>
            获取依赖项目
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetExpItemScript(Kingdee.BOS.Formula.KDExpressionDataItem,System.Int32)">
            <summary>
            解析当个表达式节点
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetLogicNodeTrans(System.String)">
            <summary>
            逻辑节点处理
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetLogicNodeTransSubFix(System.String)">
            <summary>
            逻辑节点后缀处理
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Formula.KDExpressionDataItem">
            <summary>
            公式的表达式行实体 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.KDExpressionDataItem.Check(System.Int32@)">
            <summary>
            校验模型表达式是否正确
            </summary>
            <param name="baseLine"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.KDExpressionDataItem.CheckExpression(System.String,System.String,System.String@)">
            <summary>
            表达式初步校验
            </summary>
            <param name="expNode"></param>
            <param name="exp"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Region">
            <summary>
            区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.Id">
            <summary>
            Id,主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.ReginName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.NumberFormat">
            <summary>
            数字（含货币）格式信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.DateTimeFormat">
            <summary>
            日期和时间格式信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.AuditStatus">
            <summary>
            已审核状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.UnForbidStatus">
            <summary>
            非禁用状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDTimeZone.#ctor(System.Int64,System.String,Kingdee.BOS.LocaleValue,System.TimeSpan,System.Boolean)">
            <summary>
            构造时区
            </summary>
            <param name="id">id</param>
            <param name="number">number</param>
            <param name="name">name</param>
            <param name="offset">offset</param>
            <param name="canBeUsed">是否可用</param>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.MinSystemDateTime">
            <summary>
            用户设定的系统时区的最小时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.MaxSystemDateTime">
            <summary>
            用户设定的系统时区的最大时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDTimeZone.FromDynamicObject(Kingdee.BOS.Orm.DataEntity.DynamicObject)">
            <summary>
            由动态领域对象来产生时区对象；
            </summary>
            <param name="curTimezone"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDTimeZone.ConvertTime(System.DateTime,Kingdee.BOS.KDTimeZone)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="destinationTimeZone"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.UtcOffset">
            <summary>
            与零时区的偏差时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.StandardName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.Id">
            <summary>
            Id,主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.ForbidStatus">
            <summary>
            禁用标记
            A:启用
            B:禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.DocumentStatus">
            <summary>
            状态
            A:创建
            B:提交
            C:审核
            ...
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.CanBeUsed">
            <summary>
            是否可用(=已审核+没有禁用）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.IOperationParameter">
            <summary>
            操作服务执行参数接口
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ISessionScope">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ISV">
            <summary>
            开发商
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ISV.IsKingdee">
            <summary>
            开发商是否是金蝶
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.Id">
            <summary>
            开发商ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.Name">
            <summary>
            开发商名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.ISVSignal">
            <summary>
            开发商签名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.PackageSignal">
            <summary>
            包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.DevCode">
            <summary>
            开发商代码。用于开发商组件前缀，长度为3位。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ISVPlugIn.PlugInLoader">
            <summary>
            插件加载器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ISVPlugIn.PlugInLoader.UpdatePluginByHot">
            <summary>
            热更新二开的插件
            </summary>
            <returns>更新结果</returns>
        </member>
        <member name="M:Kingdee.BOS.ISVPlugIn.PlugInLoader.LoadDll(System.String)">
            <summary>
            动态加载组件，替换插件
            </summary>
            <param name="dllPath">组件地址</param>
        </member>
        <member name="M:Kingdee.BOS.ISVPlugIn.PlugInLoader.GetStaticFieldValue``1(System.String,System.String)">
            <summary>
            获取静态字段
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="typeName">类型名称</param>
            <param name="fieldName">字段名称</param>
            <returns>字段的值</returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataRelationConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataRelation"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DecimalConverter">
            <summary>
            目前主要为万能报表所使用，由于newtonsoft转换的时候强制加了0，所以此处进行字符串转换
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction">
            <summary>
            描述一个差量化动作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Keyword_Action">
            <summary>关键字：动作</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Keyword_Oid">
            <summary>关键字：编号</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetValue_Name">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_Reset_Name">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetNull_Name">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Add_Name">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Edit_Name">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Remove_Name">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Clear_Name">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.#ctor(System.Int32,System.String)">
            <summary>
            内部初始化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(System.Object)">
            <summary>重载了相等判断</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction)">
            <summary>
            判断两个动作是否相等。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction,Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction)">
            <summary>静态的相等判断</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.GetHashCode">
            <summary>重载hashcode的获取</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ToString">
            <summary>输出动作名称</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetValue">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_Reset">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetNull">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Add">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Edit">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Remove">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Clear">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ActionName">
            <summary>
            返回动作名称
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.#ctor(Kingdee.BOS.Serialization.DcxmlBinder)">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="binder">绑定器</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.#ctor(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType})">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="dts">传递默认的类型列表，默认创建ListDcxmlBinder</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.DeserializeFromString(System.String,System.Object)">
            <summary>
            对指定的文本执行反序列化操作
            </summary>
            <param name="xml">数据来源</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.DeserializeFromBSON(System.Byte[],System.Object)">
            <summary>
            对指定的BSON执行反序列化操作
            </summary>
            <param name="xml">数据来源</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.Binder">
            <summary>
            返回/设置节点名称和实体类型的映射工具
            </summary>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.IsLocaleValueFull">
            <summary>
            设置是否完整序列化LocaleValue开关,确省为false
            </summary>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.SerializeComplexProperty">
            <summary>
            设置是否序列化复合属性的开关
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerReaderImplement">
            <summary>
            提供一种机制，提前分析属性操作的规律，以便优化性能。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerWriteImplement.Serialize(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Object,System.Object)">
            <summary>
            序列化实体数据，产生差量信息
            </summary>
            <param name="dt">当前实体的参考数据类型</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础实体，</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerWriteImplement.SerializeToBSON(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Object,System.Object)">
            <summary>
            序列化实体数据，产生差量信息
            </summary>
            <param name="dt">当前实体的参考数据类型</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础实体，</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerWriteImplement.ListItemEquatable(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Object,System.Object,System.Func{System.String})">
            <summary>
            判断两个元素的主键值是否相等。 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON数组数据
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写JSON数组数据
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象数据
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写JSON对象数据
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.AnsiString">
            <summary>
            非 Unicode 字符的可变长，范围在 1 到 8,000 个字符之间(varchar类型)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.AnsiStringFixedLength">
            <summary>
            非 Unicode 字符的固定长
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Binary">
            <summary>
            二进制数据的可变长，范围在 1 到 8,000 个字节之间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Byte">
            <summary>
            8 位无符号整数，范围在 0 到 255 之间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Date">
            <summary>
            日期值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.DateTime">
            <summary>
            日期和时间值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.DateTime2">
            <summary>
            日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.DateTimeOffset">
            <summary>
            显示时区的日期和时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Double">
            <summary>
            浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Int16">
            <summary>
            -32768 到 32767 之间的有符号 16 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Int32">
            <summary>
            -2147483648 到 2147483647 之间的有符号 32 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Int64">
            <summary>
            有符号 64 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.SByte">
            <summary>
             -128 到 127 之间的有符号 8 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Single">
            <summary>
            浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.String">
            <summary>
            表示 Unicode 字符串的类型(nvarchar类型)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.StringFixedLength">
            <summary>
            Unicode 字符的定长串
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.Time">
            <summary>
            一个表示 SQL Server DateTime 值的类型。 如果要使用 SQL Server time 值，请使用 Time
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.UInt16">
            <summary>
            0 到 65535 之间的无符号 16 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.UInt32">
            <summary>
            无符号 32 位整数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.VarNumeric">
            <summary>
            变长数值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.RefCursor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.udt_inttable">
            <summary>
            表变量Int类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.udt_varchartable">
            <summary>
            表变量Varchar类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDDbType.udt_nvarchartable">
            <summary>
            表变量NVarchar类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.Get">
            <summary>
            http get 辅助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Get.GetJson``1(System.String,System.Text.Encoding)">
            <summary>
            GET方式请求URL，并返回T类型
            </summary>
            <typeparam name="T">接收JSON的数据类型</typeparam>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Get.Download(System.String,System.IO.Stream)">
            <summary>
            从Url下载
            </summary>
            <param name="url"></param>
            <param name="stream"></param>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.HttpClinetRequest.Method.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.HttpWebClient">
            <summary>
            封装一个支持sesionid的WebClient
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.Post">
            <summary>
             http Post 辅助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.GetResult``1(System.String)">
            <summary>
            获取Post结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.PostFileGetJson``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="encoding"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="fileDictionary"></param>
            <param name="postDataDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.PostGetJson``1(System.String,System.IO.Stream,System.Text.Encoding,System.Net.CookieContainer,System.Int32,System.Boolean)">
            <summary>
            发起Post请求
            </summary>
            <typeparam name="T">返回数据类型（Json对应的实体）</typeparam>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="fileStream">文件流</param>
            <param name="encoding"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.PostGetJson``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            发起Post请求
            </summary>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="formData">post表单数据</param>
            <param name="encoding">编码</param>
            <param name="timeOut">超时时间（毫秒）</param>
            <typeparam name="T">类型</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.PostGetString(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            发起Post请求
            </summary>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="formData">post表单数据</param>
            <param name="encoding">编码，默认为utf-8</param>
            <param name="timeOut">超时时间（毫秒),默认为30秒</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.PostGetStringByFormatType(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.Text.Encoding,System.Int32,System.String)">
            <summary>
            发起Post请求
            </summary>
            <param name="url">请求Url</param>
            <param name="cookieContainer">CookieContainer，如果不需要则设为null</param>
            <param name="formData">post表单数据</param>
            <param name="encoding">编码，默认为utf-8</param>
            <param name="timeOut">超时时间（毫秒),默认为30秒</param>
            <param name="formatType">格式(Json,Binary等)</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.Post.Download(System.String,System.String,System.IO.Stream)">
            <summary>
            使用Post方法上传数据并下载文件或结果
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Kingdee.BOS.KDHttpUtility.RequestUtility">
            <summary>
            http请求辅助类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.RequestUtility.TIME_OUT">
            <summary>
            请求超时设置（以毫秒为单位），默认为30秒。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDHttpUtility.RequestUtility._arrFileNameReplace">
            <summary>
            特殊字符替换，防止浏览器下载乱码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.SetHttpProxy(System.String,System.String,System.String,System.String)">
            <summary>
            设置Web代理
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.RemoveHttpProxy">
            <summary>
            清除Web代理状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpGet(System.String,System.Text.Encoding)">
            <summary>
            使用Get方法获取字符串结果（没有加入Cookie）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpGet(System.String,System.Int32)">
            <summary>
            使用Get方法获取字符串结果
            </summary>
            <param name="url">网址地址</param>
            <param name="timeOut">GetResponse超时时间</param>
            <returns>网址内容</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPut(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            httpPut
            </summary>
            <param name="url">地址</param>
            <param name="formData">表单数据</param>
            <param name="contentType">数据格式</param>
            <param name="timeOut">超时时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPost(System.String,System.Byte[],System.String,System.Int32)">
            <summary>
            简单Post
            </summary>
            <param name="url"></param>
            <param name="content"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPost(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用Post方法提交表单
            </summary>
            <param name="url">表单地址</param>
            <param name="formData">表单内容</param>
            <param name="timeOut">超时时间</param>
            <returns>内容</returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpGet(System.String,System.Net.CookieContainer,System.Text.Encoding,System.Int32)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPostByFormatType(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            使用Post方法获取字符串结果，根据序列化方式formatType， 常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPost(System.String,System.Net.CookieContainer,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding,System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="postStream"></param>
            <param name="fileDictionary">需要上传的文件，Key：对应要上传的Name，Value：本地文件名</param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <param name="checkValidationResult">验证服务器证书回调自动验证</param>
            <param name="refererUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HttpPostWithFile(System.String,System.Net.CookieContainer,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            post 上传附件
            </summary>
            <param name="url"></param>
            <param name="cookieContainer"></param>
            <param name="formData"></param>
            <param name="fileDictionary"></param>
            <param name="refererUrl"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <param name="checkValidationResult"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.GetDataPagin(System.IO.Stream,System.Int64,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="maxlength"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            验证服务器证书
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            组装QueryString的方法
            参数之间用&amp;连接，首位没有符号，如：a=1&amp;b=2&amp;c=3
            </summary>
            <param name="formData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.FillFormDataStream(System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HtmlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlEncode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.HtmlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.HtmlDecode
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.UrlEncode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlEncode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.UrlDecode(System.String)">
            <summary>
            封装System.Web.HttpUtility.UrlDecode
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.GetFileStream(System.String)">
            <summary>
            根据完整文件路径获取FileStream
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.AddAttachmentHeader(System.Web.HttpContext,System.String)">
            <summary>
            添加下载文件时的文件名头信息（浏览器兼容处理）
            </summary>
            <param name="context">HttpContext</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Kingdee.BOS.KDHttpUtility.RequestUtility.GetFrameOptionsInfo(System.Web.HttpRequest)">
            <summary>
            获取安全配置信息
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.KDNetwork.Redirector.ResponseCallBackExceptionDelegate">
            <summary>
            访问异常是处理委托
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.SysncRequest(Kingdee.BOS.Log.AnalyseLogInfo,Kingdee.BOS.KDNetwork.RedirectorDelegate,System.String)">
            <summary>
            同步请求
            </summary>
            <param name="logInfo"></param>
            <param name="resultCallback"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.RedirectRequest(Kingdee.BOS.Log.AnalyseLogInfo,Kingdee.BOS.KDNetwork.RedirectorDelegate,System.String)">
            <summary>
            异步请求
            </summary>
            <param name="logInfo"></param>
            <param name="resultCallback"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.ToBase64(System.Byte[])">
            <summary>
            将Byte[]转换成Base64编码文本
            </summary>
            <param name="binBuffer">Byte[]</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDOAuthInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            已绑定微博后，通过客户KEY,SECRET来访微博。
            </summary>
            <param name="sAppKey">微博授权token key</param>
            <param name="sAppSecret">微博授权token key.</param>
            <remarks></remarks>
        </member>
        <member name="M:Kingdee.BOS.KDOAuthInfo.#ctor">
            <summary>
            初始化Oauth信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.WeiboUrl">
            <summary>
            微博地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.NetWorkID">
            <summary>
            网络地址：目前就是企业邮箱地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.CompanyNetworkID">
            <summary>
            企业网络ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Account">
            <summary>
            微博用户名：邮箱@符之前的部分
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.AppKey">
            <summary>
            微博客户KEY;
            在微博创建应用时分配。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.AppSecret">
            <summary>
            微博客户Secret;在微博创建应用时分配。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.TokenKey">
            <summary>
            微博授权token key，在用户绑定微博时生成.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.TokenSecret">
            <summary>
            微博授权 token secret，在用户绑定微博时生成..
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Verify">
            <summary>
            微博OAuth授权时，通过回调URL获取，提供给第三步获取授权KEY时使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.CallbackUrl">
            <summary>
            回调RUL：微博OAuth授权时，通过URL获取verify;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.UserId">
            <summary>
            用户ID，用于获取用户相关的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Charset">
            <summary>
            Gets or sets the charset.
            </summary>
            <value>The charset.</value>
            <remarks></remarks>
        </member>
        <member name="T:Kingdee.BOS.KDSContext">
            <summary>
             电子表格报表平台上下文
             独立于Kingdee.Bos.Context,后期该Context还会扩展
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.SubSystemName">
            <summary>
             子系统名称（KDS、CR等）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.IsFromCR">
            <summary>
            是否来自合并报表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.CustomParams">
            <summary>
             自定义参数
             使用CustomParams.Add(Key,Value)添加自定义参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDThread.KDTimerManager">
            <summary>
            定时器管理器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.KDTimerManager.UserExperienceTimer">
            <summary>
            用户体验定时器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.KDTimerManager.timers">
            <summary>
            定时器字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.KDTimerManager.AddTimer(System.String,System.Threading.Timer)">
            <summary>
            把定时器加入
            </summary>
            <param name="timerKey">定时器的Key</param>
            <param name="timer">定时器</param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.KDTimerManager.ObtainTimer(System.String)">
            <summary>
            获取定时器
            </summary>
            <param name="timerKey">定时器的Key</param>
            <returns>定时器</returns>
        </member>
        <member name="T:Kingdee.BOS.KDThread.AsynResult">
            <summary>
            任务处理的返回值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.AsynResult.CreateUnsuccess(System.Exception)">
            <summary>
            创建失败返回值
            </summary>
            <param name="ex">产生的异常</param>
            <returns>失败的返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.AsynResult.CreateSuccess(System.String)">
            <summary>
            创建成功的返回值
            </summary>
            <param name="msg">成功信息</param>
            <returns>成功的返回值</returns>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Message">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDThread.MainWorker">
            <summary>
            异步操作管理器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.mtask">
            <summary>
            线程管理器中的管理线程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.sync">
            <summary>
            通知
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.Start">
            <summary>
            启动所有任务队列中的任务。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.allTasks">
            <summary>
            异步任务队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.QuequeTask(System.Action,System.Action{Kingdee.BOS.KDThread.AsynResult})">
            <summary>
            将任务放入任务队列
            </summary>
            <param name="action">新线程所</param>
            <param name="callback"></param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.AddTaskToQueue(Kingdee.BOS.Context,System.Action{Kingdee.BOS.KDThread.AsynResult},System.Threading.Tasks.Task)">
            <summary>
            添加任务到任务队列中
            </summary>
            <param name="ctx"></param>
            <param name="callback">回调方法</param>
            <param name="task">任务</param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.DoCallback(Kingdee.BOS.Context,System.Action{Kingdee.BOS.KDThread.AsynResult},Kingdee.BOS.KDThread.AsynResult)">
            <summary>
            执行回调方法
            </summary>
            <param name="ctx"></param>
            <param name="callback"></param>
            <param name="result"></param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.QuequeTask(Kingdee.BOS.Context,System.Action,System.Action{Kingdee.BOS.KDThread.AsynResult})">
            <summary>
            设置当前任务线程语言环境， 并将任务放入任务队列
            </summary>
            <param name="ctx"></param>
            <param name="action"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.QuequeTask(Kingdee.BOS.Context,System.Action,System.Action{Kingdee.BOS.KDThread.AsynResult},System.Threading.CancellationToken)">
            <summary>
            设置当前任务线程语言环境， 并将任务放入任务队列
            </summary>
            <param name="ctx">上下文</param>
            <param name="action">需要执行的方法</param>
            <param name="callback">结果回调方法</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.AddToQueueTask``1(System.Func{``0},System.Action{Kingdee.BOS.KDThread.AsynResult},Kingdee.BOS.Context,System.Collections.Concurrent.ConcurrentBag{System.Threading.Tasks.Task})">
            <summary>
            将任务放入任务队列，返回任务，并设置当前任务线程语言环境
            </summary>
            <param name="func">多线程任务执行的方法</param>
            <param name="callback">回调方法</param>
            <param name="ctx">登陆上下午对象</param>
            <param name="tasks">任务队列，用于管理在一个业务中的所有任务，比如等待全部完成等</param>
            <returns>任务对象</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.AddToQueueTask``2(System.Func{``0},System.Action{Kingdee.BOS.KDThread.AsynResult},Kingdee.BOS.Context,System.Collections.Concurrent.ConcurrentDictionary{``1,System.Threading.Tasks.Task},``1)">
            <summary>
            将任务放入任务队列，返回任务，并设置当前任务线程语言环境
            </summary>
            <param name="func">多线程任务执行的方法</param>
            <param name="callback">回调方法</param>
            <param name="ctx">登陆上下午对象</param>
            <param name="tasks">任务队列字典，用于管理在一个业务中的所有任务，比如等待全部完成等</param>
            <param name="key">任务队列字典的键</param>
            <returns>任务对象</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.GetTaskResult``2(System.Collections.Concurrent.ConcurrentDictionary{``1,System.Threading.Tasks.Task},``1)">
            <summary>
            按键获取任务队列字典中的任务执行结果
            </summary>
            <param name="tasks">任务队列字典</param>
            <param name="key">键</param>
            <typeparam name="TResult">任务执行结果类型</typeparam>
            <typeparam name="TKey">键类型</typeparam>
            <returns>任务结果</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.AddToQueueTask``1(System.Func{``0},System.Action{Kingdee.BOS.KDThread.AsynResult},Kingdee.BOS.Context)">
            <summary>
            将任务放入任务队列，返回任务，并设置当前任务线程语言环境
            </summary>
            <param name="func">多线程任务执行的方法</param>
            <param name="callback">回调方法</param>
            <param name="ctx">登陆上下午对象</param>
            <returns>任务对象</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.BuildExceptionMessage(System.Exception,System.Text.StringBuilder)">
            <summary>
            构建错误信息
            </summary>
            <param name="ex"></param>
            <param name="strBuilder">返回错误信息到StringBuilder</param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.BuildExcptionMessageWithStack(System.Exception,System.Text.StringBuilder)">
            <summary>
            构建错误信息带上堆栈
            </summary>
            <param name="ex"></param>
            <param name="strBuilder"></param>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppResult">
            <summary>
            App启动结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppResult.IsMissVerify">
            <summary>
            判断是否没有命中校验器
            </summary>
            <param name="sar"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.Title">
            <summary>
            提示信息标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.MessageCode">
            <summary>
            提示信息编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.ResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.FailureCallBackType">
            <summary>
            失败后退出回调类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.RedirectUrl">
            <summary>
            失败后重定向URL,可以是相对路径也可以是绝对路径，相对路径已K3Cloud为基地址，例如：http://xxxx/k3cloud/
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.ExitType">
            <summary>
            返回结果退出类型，默认是Shutdown
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.UserToken">
            <summary>
            免登录的用户会话Token，如果返回该有效token，将直接登入系统。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.SessionId">
            <summary>
            免登录的用户会话SessionId，如果返回该有效SessionId，将直接登入系统。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.CustomArgs">
            <summary>
            主控台表单客制化参数，建议采用json格式，（或者|分割的字符串），尽量避免出现Unicode字符
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.Authentication.StartAppResult.CustomParam”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.BrandEntity">
            <summary>
            品牌资源实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.IsGuiOldLoginUI">
            <summary>
            客户端登录页改版，增加参数控制放在启动参数中返回  
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.SendUserBehaviorData">
            <summary>
            启用用户行为数据收集
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.Cancel">
            <summary>
            继续filter的校验，true：继续下一级校验，false：不进行下一级校验(default)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.GlobalWatermarkConfigStr">
            <summary>
            全局水印配置参数服务端传递JSON字符串，编码为Base64
            UTF8>Base64({"opacity":0.1,"fontfamily":"Microsoft YaHei","fontsize":12,"big_fontsize":16,"lictext":"","watermarktext":"","showtype":"1"})
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppResult.LicenseType">
            <summary>
            许可类型(网络传输):Kingdee.BOS.Licence.LicenseType
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppHomePageArgs">
            <summary>
            App启动主页传入参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.IsSingleMode">
            <summary>
            单独打开功能模式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.ToBase64String">
            <summary>
            序列化主页参数对象为json格式base64串
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.ToBase64String(System.Text.Encoding)">
            <summary>
            序列化主页参数对象为json格式base64串
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.GetObjectFromBase64(System.String)">
            <summary>
            反序列化主页参数json格式base64字符串为对象
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.GetObjectFromBase64(System.String,System.Text.Encoding)">
            <summary>
            反序列化主页参数json格式base64字符串为对象
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.StartAppHomePageArgs.GetJsonCustomArgs">
            <summary>
            转化自定义参数CustomArgs为json格式
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.AppId">
            <summary>
            第三方应用程序ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.FormId">
            <summary>
            需要默认打开或处理的表单ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.FormArgs">
            <summary>
            打开指定表单预设参数（JSON格式）,例如：人人报销首页 ERX_HomePage 的打开参数 {"KD_Html5_FormTheme_Name":"Galaxy"}
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.FormLayoutId">
            <summary>
            需要默认打开或处理的表单的布局ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.PkId">
            <summary>
            对应FormId需要载入的数据主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.OpenMode">
            <summary>
            打开功能模式：Empty=主控打开；Single=单独打开；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.FormType">
            <summary>
            表单类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.ReportType">
            <summary>
            打开的报表类型，主要针对万能报表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.CustomArgs">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.PageId">
            <summary>
            可以指定PageId，如果为空，则由使用者new一个guid替代
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.TargetKey">
            <summary>
            目标容器标识Key，如果为空，则由使用者默认一个或使用FormConst.ConsoleMAINTAB
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.EntryRole">
            <summary>
            入口角色
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.StartAppHomePageArgs.FormHeight">
            <summary>
            流式布局中，表单高度，0忽略
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResult">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginResult.Clone">
            <summary>
            创建一个登录结果的浅拷贝，管理员踢人警告提示被许可快到期提示覆盖时使用
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.MessageCode">
            <summary>
            提示信息代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.LoginResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.KDSVCSessionId">
            <summary>
            KDService-SessionID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.FormId">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.RedirectFormParam">
            <summary>
            登录后跳转表单参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.FormInputObject">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.ErrorStackTrace">
            <summary>
            增加一个服务端报错的堆栈信息，以便前端堆栈格式提示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.Lcid">
            <summary>
            语言id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.AccessToken">
            <summary>
            用户特征码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.CustomParam">
            <summary>
            增加一个自定义集合属性供扩展使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.KdAccessResult">
            <summary>
            云通行证验证结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.IsSuccessByAPI">
            <summary>
            使用API调用登录接口时，判断是否登录成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.RedirectFormParam.FormWidth">
            <summary>
            打开单据宽带
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.RedirectFormParam.FormHeight">
            <summary>
            打开单据长度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.RedirectFormParam.FormLayoutId">
            <summary>
            需要默认打开或处理的表单的布局ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppResultType">
            <summary>
            返回启动结果类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultType.Success">
            <summary>
            登录成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultType.Failure">
            <summary>
            登录失败
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppResultCallBackType">
            <summary>
            返回启动结果类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultCallBackType.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultCallBackType.ExitMsg">
            <summary>
            退出并提示
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultCallBackType.Exit_Redirect">
            <summary>
            退出并重定向到页面
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultCallBackType.ExitMsg_Redirect">
            <summary>
            提示后退出并重定向到页面
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.StartAppResultExitType">
            <summary>
            返回启动结果的退出类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultExitType.Shutdown">
            <summary>
            停止App
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.StartAppResultExitType.ExitLogin">
            <summary>
            退出到登录界面
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Success">
            <summary>
            登录成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWError">
            <summary>
            用户或密码错误
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Failure">
            <summary>
            登录失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWInvalid_Optional">
            <summary>
            密码验证不通过（可选的）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWInvalid_Required">
            <summary>
            密码验证不通过（强制的）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Wanning">
            <summary>
            登录警告
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.DealWithForm">
            <summary>
            需要表单处理
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.EntryCloudUnBind">
            <summary>
            云通行证未绑定Cloud账号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Activation">
            <summary>
            激活
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.NormalException">
            <summary>
            正常异常,不做任何操作
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.PassportBindResult">
            <summary>
            云通行证绑定结果信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.PassportBindResult.errcode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.PassportBindResult.description">
            <summary>
            结果或错误描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.PassportBindResult.data">
            <summary>
            绑定结果
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.PassportBindData">
            <summary>
            绑定结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.PassportBindData.isbind">
            <summary>
            是否绑定过金蝶云通行证
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.PassportBindData.bind_policy">
            <summary>
            绑定策略 0：未指定｜1：用户可选绑定｜2： 强制绑定
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AccessTokenResult">
            <summary>
            获取access_token结果信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AccessTokenResult.errcode">
            <summary>
            错误编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AccessTokenResult.description">
            <summary>
            结果或错误描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AccessTokenResult.data">
            <summary>
            绑定结果
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AccessTokenData">
            <summary>
            AccessToken信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResultTypeExt">
            <summary>
            登陆结果扩展
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.LoginResultTypeExt.IsSuccessfull(Kingdee.BOS.Authentication.LoginResultType)">
            <summary>
            是否成功
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Licence.VerifyResultInfo">
            <summary>
            验证结果对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Licence.VerifyResultInfo.CreateSuccessfulResult(System.String)">
            <summary>
            构造成功的验证结果
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Licence.VerifyResultInfo.CreateUnsuccessfulResult(System.String)">
            <summary>
            构造失败的验证结果
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Licence.VerifyResultInfo.Sucessful">
            <summary>
            是否验证成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Licence.VerifyResultInfo.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Licence.VerifyResultInfo.ModulName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Licence.VerifyResultInfo.ModulId">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Licence.VerifyResultInfo.IsNotBuy">
            <summary>
            是否未购买
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LightAppContext">
            <summary>
            云之家轻应用上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.ticket">
            <summary>
            云之家票据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.appid">
            <summary>
            轻应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.eid">
            <summary>
            企业ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.openid">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.username">
            <summary>
            用户姓名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.CloudContacts">
            <summary>
            云之家联系对象配置格式SEC_User,Phone
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LightAppContext.DeviceId">
            <summary>
            产品设备Id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.PlugInLogObject">
            <summary>
            插件日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.CreatorName">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.ObjectTypeId">
            <summary>
            业务对象名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.ClassName">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.Parameter">
            <summary>
            传入参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.PlugInLogObject.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.RunResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.RunResult.Success">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.RunResult.Failed">
            <summary>
            执行失败
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.ScheduleLogObject">
            <summary>
            执行计划统一日志实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.CreatorId">
            <summary>
             创建人ID
             </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.CreatorName">
            <summary>
            创建人名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.BeginTime">
            <summary>
            开始执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.EndTime">
            <summary>
            结束执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.RunResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.TrackCode">
            <summary>
            跟踪码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.LogPlatform.ScheduleLogObject.DBId”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.DataCenterName">
            <summary>
            账套名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.DatabaseType">
            <summary>
            帐套类别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.ScheduleId">
            <summary>
            执行计划ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.TaskId">
            <summary>
            任务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.TaskName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.TaskDesc">
            <summary>
            任务描述 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.TaskPlugIn">
            <summary>
            任务插件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.ExecuteTime">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.ScheduleLogObject.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.ScheduleLogType">
            <summary>
            执行计划日志类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.ScheduleLogType.Monitor">
            <summary>
            监控
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.ScheduleLogType.Business">
            <summary>
            业务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.ScheduleLogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.ScheduleLogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.WebApiLogObject">
            <summary>
            WebApi统一日志实体
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.LogPlatform.WebApiLogObject.CreatorId”忽略有格式错误的 XML 注释 -->
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.CreatorName">
            <summary>
            创建人名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.ObjectTypeId">
            <summary>
            业务对象编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.ObjectTypeName">
            <summary>
            业务对象名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.BeginTime">
            <summary>
            开始执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.EndTime">
            <summary>
            结束执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.RunResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.TrackCode">
            <summary>
            跟踪码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.SubSystemId">
            <summary>
            子系统ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.SubSystemName">
            <summary>
            子系统名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.OperationName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.OperationDesc">
            <summary>
            操作描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LogPlatform.WebApiLogObject.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LogPlatform.WebApiLogType">
            <summary>
            WebApi日志类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.WebApiLogType.Business">
            <summary>
            业务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.WebApiLogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.WebApiLogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LogPlatform.WebApiLogType.ReqData">
            <summary>
            请求报文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogConfigure">
            <summary>
            用户行为分析配置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.IsEqual(Kingdee.BOS.Log.AnalyseLogConfigure,Kingdee.BOS.Log.AnalyseLogConfigure)">
            <summary>
            是否相等
            </summary>
            <param name="configure1"></param>
            <param name="configure2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.GetDcxmlSerializer">
            <summary>
            获取序列化对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.GetDataEntityType">
            <summary>
            获取对象类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.ClientNo">
            <summary>
            可同时发送数据的客户端的量，默认10个
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.ClientDataNo">
            <summary>
            一次下载的量，默认20条
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.SingleDataSize">
            <summary>
            当次发送量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogConfigureBinder">
            <summary>
            用户行为分析配置绑定器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogInfo">
            <summary>
            日志分析的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.Url">
            <summary>
            发送的URL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.NeedCallBack">
            <summary>
            是否需要回掉
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.Content">
            <summary>
            发送内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.EventName">
            <summary>
            发送服务端eventName
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.ContentType">
            <summary>
            正文类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.IsBase64Call">
            <summary>
            根据访问返回的请求流，是否是base64形式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.IsCrypt">
            <summary>
            是否加密
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.OtherData">
            <summary>
            自定义携带其他数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.IsCallBackWithOtherData">
            <summary>
            是否携带其他数据发送
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.TimeOut">
            <summary>
            访问请求超时时间(毫秒)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.ToRctCaBak">
            <summary>
            ToRctCaBak
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.CollectPerfDataMode">
            <summary>
            收集性能数据的模式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.CollectPerfDataMode.Normal">
            <summary>
            普通模式，只是记录单次操作的时间；
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.CollectPerfDataMode.Append">
            <summary>
            追加模式，把之后运行的时间追加到之前的操作中；（用于提示之后的一些操作）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.CollectPerfDataMode.StrideOverOp">
            <summary>
            跨越操作模式，把预期重复的执行操作，记录第一个开始时间；（和EndOp配合使用）（用于进度条）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CollectorConfig.Lic">
            <summary>
            如果是null则收集全部的，如果是""则收集演示版的，如果是"0000000000"则收集限时lic的，如果是其它的则收集正式用户的；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CollectorConfig.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CollectorConfig.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.ICounter">
            <summary>
            计数器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.DealWithResidual">
            <summary>
            处理残余的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.Add(Kingdee.BOS.Log.CounterInfo)">
            <summary>
            增加一条记录
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.Commit">
            <summary>
            手动提交到数据库
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.RecordPagePreCounterKey(System.String,System.String)">
            <summary>
            把页面加入到堆栈
            </summary>
            <param name="pageID"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.#ctor(Kingdee.BOS.Context)">
            <summary>
            构造函数
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.RecordPagePreCounterKey(System.String,System.String)">
            <summary>
            记录打开Page的操作 暂时不需要
            </summary>
            <param name="pageID">当前页的ID</param>
            <param name="parentID">其父亲的ID</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.Add(Kingdee.BOS.Log.CounterInfo)">
            <summary>
            增加一个计数器
            </summary>
            <param name="info"></param>
            <param name="pageId">当前页面的ID</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.Persistence">
            <summary>
            持久化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.Persistence(System.Collections.Generic.List{Kingdee.BOS.Log.CounterInfo})">
            <summary>
            持久化；
            </summary>
            <param name="counterInfos"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.DealWithResidual">
            <summary>
            处理最后的残留记录
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.Counter.Commit">
            <summary>
            提交，其它客户主动提交动作；
            一般情况满足一定的阀值就会自动提交；
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.CounterInfo">
            <summary>
            日志分析的信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.CounterInfo.BeginCount">
            <summary>
            开始计数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.CounterInfo.EndCount">
            <summary>
            结束计数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.ExecuteTime">
            <summary>
            统计时间（精确到日期）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.FunctionKey">
            <summary>
            功能点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.PreFunctionKey">
            <summary>
            前置功能点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.ProcessTime">
            <summary>
            操作经历的时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.IsOnlyRecordTimeConst">
            <summary>
            是否只记录时间成本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.collectPerDataMode">
            <summary>
            性能数据收集模式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.PageId">
            <summary>
            当前的PageID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.FileLog">
            <summary>
            自定义文件日志类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.FileLog.WriteLogFile(System.String,System.String)">
            <summary>
            写日志内容到指定文件
            </summary>
            <param name="sLogFileName"></param>
            <param name="sFileInfo"></param>
        </member>
        <member name="T:Kingdee.BOS.Log.IInfoCollector">
            <summary>
            收集者接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.IInfoCollector.CollectDirectly(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Log.UserBehavior})">
            <summary>
            直接收集，这个地方处理的是
            限制：
            1. 单条记录大小不能超过云服务器定义的大小（现在定义为10K）
            2. 返回记录的条数不能超过云服务器定义的数量（现在定义为1W条）
            </summary>
            <param name="ctx"></param>
            <param name="behaviors"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.IInfoCollector.CollectInBackground(Kingdee.BOS.Context,System.Collections.Generic.List{Kingdee.BOS.Log.CollectorConfig})">
            <summary>
            后台收集的方法
            限制：
            1. 单条记录大小不能超过云服务器定义的大小（现在定义为10K）
            2. 返回记录的条数不能超过云服务器定义的数量（现在定义为1W条）
            </summary>
            <param name="ctx"></param>
            <param name="configs"></param>
            <returns>返回给平台，平台统一放在发送表中；</returns>
        </member>
        <member name="M:Kingdee.BOS.Log.IInfoCollector.AdjustContent(System.Object)">
            <summary>
            直接收集时(CollectDirectly)，调整内容。在统一处理时(IsCollectByManager返回为True)，对内容进行调整；
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Kingdee.BOS.Log.IInfoCollector.InfoCollector">
            <summary>
            收集者的类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.IInfoCollector.IsCollectByManager">
            <summary>
            直接收集（CollectDirectly）时，是否由统一有Manager进行处理；
            Manager进行处理会直接保存到发送表中；
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.InfoCollectorEnum">
            <summary>
            信息收集者的枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.CollectorConfig">
            <summary>
            用来标示信息收集者配置的枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.BaseDataCollector">
            <summary>
            基础资料采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.LicInfoCollector">
            <summary>
            许可采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.IDEBehaviorCollector">
            <summary>
            IDE操作采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.TimeCostCollector">
            <summary>
            性能监控信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.WebBankDataCollector">
            <summary>
            网银流水数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.CashBankBalanceCollector">
            <summary>
            现金银行余额表数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.CashBankAccrualCollector">
            <summary>
            现金银行发生额数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.UserOperationCollector">
            <summary>
            用户行为数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.ErrorInfoCollector">
            <summary>
            错误信息收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.UserMsgCollector">
            <summary>
            用户信息收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.SqlConsumCollector">
            <summary>
            Sql耗时信息收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.GLCheckDataCollector">
            <summary>
            总账检查数据收集者
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.SpecialBillDataCollector">
            <summary>
            特殊的表单数据收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.GoldenTaxIVDataCollector">
            <summary>
            金税接口开票数据收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.PatInfoCollector">
            <summary>
            巡检数据收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.CBPerformanceDiagnoseInfoCollector">
            <summary>
            成本性能诊断报告数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AcctgPerformanceCollector">
            <summary>
            核算性能指标收集器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AcctgDataInfoCollector">
            <summary>
            核算结帐日期以及相关信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.ClientTypeCollector">
            <summary>
            客户端类型收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.ForgetPwdCollector">
            <summary>
            忘记密码数据收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.GoldenTaxReceivedIVDataCollector">
            <summary>
            金税收票单数据收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.FINUserListCollector">
            <summary>
            财务人员列表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.InitImplementBigDataCollection">
            <summary>
            初始化实施工具收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.SMSSendCollector">
            <summary>
            云短信信息收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AmoebaUnitCollector">
            <summary>
            经营会计阿米巴单元收集对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AmoebaOrgStructCollector">
            <summary>
            经营会计阿米巴组织架构收集对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AmoebaProfitCollector">
            <summary>
            经营会计阿米巴利润收集对象
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.LoggedUserCollector">
            <summary>
            登陆用户采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.UIPatternCollector">
            <summary>
            用户界面模式采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.OnlineActionCollector">
            <summary>
            在线功能使用采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.PDMOperationCollector">
            <summary>
            PLM产品研发操作采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.ElectronicBillCollector">
            <summary>
            应收票据数据采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.UserAgreementAndPrivacyPolicyCollector">
            <summary>
            用户使用协议与隐私协数据采集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.HealthCenterCollector">
            <summary>
            健康中心数据收集者
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.AMReportStyleCollector">
            <summary>
            经营报表模板数据收集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorEnum.BASDiffBillBuildVchCollector">
            <summary>
            智能会计平台不同单据合并生成凭证数据收集
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.InfoCollectorKeyConst">
            <summary>
            信息收集的关键字
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorKeyConst.BaseDataInfo">
            <summary>
            基础资料信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorKeyConst.IDEBehavior">
            <summary>
            BOSIDE操作的信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorKeyConst.LicInfo">
            <summary>
            lic信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Log.InfoCollectorKeyConst.TimeCost">
            <summary>
            TimeCost信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.UserBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.UserBehavior.InfoCollector">
            <summary>
            信息采集者
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.UserBehavior.Content">
            <summary>
            Content -- JASON String
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.Logger">
            <summary>
            日志记录组件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Info(System.String,System.String,System.Boolean)">
            <summary>
            记录提示信息按日志模式
            </summary>
            <param name="subSystem"></param>
            <param name="message"></param>
            <param name="bByLogModel">为true，表示依据日志模式是否开启来决定是否记录日志</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Info(System.String,System.String)">
            <summary>
            记录提示信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Error(System.String,System.String,System.Exception)">
            <summary>
            记录错误信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Debug(System.String,System.String)">
            <summary>
            记录调试信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.GetSubSystemMessage(System.String,System.String)">
            <summary>
            拼装子系统标志和日志信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.EmailValidatorFactory">
            <summary>
            Email服务器配置校验器工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.EmailValidatorFactory.CreateEmailValidator(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            创建Email服务器配置校验器
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="enableSTARTTLS">是否支持STARTTLS</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.EmailValidatorFactory.CreateEmailValidator(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            创建Email服务器配置校验器
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="enableSTARTTLS">是否支持STARTTLS</param>
            <param name="userName">邮箱用户名</param>
            <param name="password">邮箱密码</param>
            <param name="receiver">收件人</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.IEmailValidator">
            <summary>
            邮箱服务器配置校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.IEmailValidator.Validate(System.String@)">
            <summary>
            执行校验
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.ISmtpClient">
            <summary>
            Smtp发送客户端
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.ISmtpClient.Send(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="toList">收件人列表</param>
            <param name="ccList">抄送人列表</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件列表</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Mail.ISmtpClient.IsMailBCC">
            <summary>
            是否密送
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.ISmtpClient.BCC">
            <summary>
            密送人员集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mail.MailChecker">
            <summary>
            Email服务器配置校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailChecker.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="enableSTARTTLS">是否支持STARTTLS</param>
            <param name="userName">邮箱用户名</param>
            <param name="password">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailChecker.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="enableSTARTTLS">是否支持STARTTLS</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">加密的邮箱密码</param>
            <param name="receiver">收件人</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailChecker.Validate(System.String@)">
            <summary>
            检测SMTP服务器配置
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.MailSender">
            <summary>
            邮件发送客户端
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailSender.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            邮件发送客户端构造函数
            </summary>
            <param name="emailHost">邮件服务器地址</param>
            <param name="port">端口号</param>
            <param name="enableSSL">启用标准SSL加密</param>
            <param name="enableSTARTTLS">启用STARTTLS加密</param>
            <param name="userName">用户名</param>
            <param name="pd">加密密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailSender.Send(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="toList">收件人列表</param>
            <param name="ccList">抄送人列表</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件列表(文件路径)</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailSender.Send(System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.MailSender.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachment">附件</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Mail.MailSender.IsMailBCC">
            <summary>
            是否密送
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.MailSender.BCC">
            <summary>
            密送人员集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mail.Sender.AbstractSmtpClient">
            <summary>
            Smtp发送客户基类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="smtpHost">Smtp服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.Send(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="toList">收件人列表</param>
            <param name="ccList">抄送人列表</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件列表</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.SmtpHost">
            <summary>
            Smtp服务器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.EnableSSL">
            <summary>
            是否支持SSL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.UserName">
            <summary>
            邮箱用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.Password">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.IsMailBCC">
            <summary>
            是否密送
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Sender.AbstractSmtpClient.BCC">
            <summary>
            密送人员集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mail.Sender.NetSmtpClient">
            <summary>
            基于System.Net.Mail技术实现的Stmp发送客户端
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.NetSmtpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="smtpHost">Smtp服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.NetSmtpClient.Send(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="toList">收件人列表</param>
            <param name="ccList">抄送人列表</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件列表</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.Sender.WebSmtpClient">
            <summary>
            基于System.Web.Mail技术实现的Stmp发送客户端
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.WebSmtpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="smtpHost">Smtp服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持SSL</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Sender.WebSmtpClient.Send(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人名称</param>
            <param name="toList">收件人列表</param>
            <param name="ccList">抄送人列表</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件列表</param>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.SmtpClientFactory">
            <summary>
            Smtp发送客户端工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.SmtpClientFactory.CreateSmtpClient(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            创建Smtp发送客户端
            </summary>
            <param name="smtpHost">Smtp服务器</param>
            <param name="port">端口号</param>
            <param name="enableSSL">是否支持标准SSL</param>
            <param name="enableSTARTTLS">是否支持STARTTLS</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.SmtpClientFactory.CustomSmtpClient(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            支持第三方邮件客户端
            </summary>
            <param name="smtpHost"></param>
            <param name="port"></param>
            <param name="enableSSL"></param>
            <param name="userName"></param>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.Validator.AbstractEmailValidator">
            <summary>
            邮箱服务器配置校验器基类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <param name="receiver">收件人</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.Validate(System.String@)">
            <summary>
            执行校验
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.CreateEmailStream(System.IO.Stream)">
            <summary>
            创建客户端与服务端的通讯网络流
            </summary>
            <param name="stream">标准流</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.ReadMessage">
            <summary>
            从网络流读取信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.WriteMessage(System.String)">
            <summary>
            向网络流写入信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.BeforeCheckIsReady(System.String@)">
            <summary>
            确认邮件服务是否就绪之前
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.IsServiceReady(System.String@)">
            <summary>
            确认邮件服务是否就绪
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.SayHello(System.String@)">
            <summary>
            向服务器表明身份
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.BeforeAuthLogin(System.String@)">
            <summary>
            校验用户名和密码之前
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.AuthLogin(System.String@)">
            <summary>
            校验用户名和密码
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.SendTestMail(System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.EmailStream">
            <summary>
            客户端与服务端的通讯网络流
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.EmailHost">
            <summary>
            邮箱服务器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.UserName">
            <summary>
            邮箱用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.Password">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mail.Validator.AbstractEmailValidator.Receiver">
            <summary>
            收件人
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mail.Validator.NormalEmailValidator">
            <summary>
            通用邮箱服务器配置校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.NormalEmailValidator.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.NormalEmailValidator.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <param name="receiver">收件人</param>
        </member>
        <member name="T:Kingdee.BOS.Mail.Validator.SslEmailValidator">
            <summary>
            标准SSL邮箱服务器配置校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.SslEmailValidator.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.SslEmailValidator.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <param name="receiver">收件人</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.SslEmailValidator.CreateEmailStream(System.IO.Stream)">
            <summary>
            创建客户端与服务端的通讯网络流
            </summary>
            <param name="stream">标准流</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.SslEmailValidator.BeforeCheckIsReady(System.String@)">
            <summary>
            确认邮件服务是否就绪之前
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Mail.Validator.StartTLSEmailValidator">
            <summary>
            STARTTLS邮箱服务器配置校验器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.StartTLSEmailValidator.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.StartTLSEmailValidator.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="emailHost">邮箱服务器</param>
            <param name="port">端口号</param>
            <param name="userName">邮箱用户名</param>
            <param name="pd">邮箱密码</param>
            <param name="receiver">收件人</param>
        </member>
        <member name="M:Kingdee.BOS.Mail.Validator.StartTLSEmailValidator.BeforeAuthLogin(System.String@)">
            <summary>
            校验用户名和密码之前
            </summary>
            <param name="error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.MergeStatement">
            <summary>
            Merge语句对象，用于merge语句在不同数据库系统中不同实现，MERGE 语句无法多次更新同一行，也无法更新和删除同一行
            语法：
            <code>
                MERGE :hint INTO :target_table AS :target_table_alias USING (:table_source) AS :source_alias ON (:condition)
                WHEN MATCHED THEN UPDATE SET :set_clause [WHERE :matched_where] [DELETE WHERE :delete_where]
                WHEN NOT MATCHED THEN INSERT (:insertcolumn) VALUES (:insertvalues) [WHERE :not_matched_where]
            </code>
            delete 必须带where条件（oracle限制），matched仅delete时也要有update，set仅设置1个字段（例如：target_table_alias.fdesc = target_table_alias.desc）
            delete条件： :condition and :matched_where and :delete_where（遵循oracle语法）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.MergeStatement.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            merge语句对象。必须指定
            </summary>
            <param name="TargetTable">目标表，需要merge的表名</param>
            <param name="tableAlias">目标表别名</param>
            <param name="tableSource">源表（可以是查询语句）</param>
            <param name="sourceAlias">源表别名</param>
            <param name="condition">源表目标表关联条件</param>
        </member>
        <member name="M:Kingdee.BOS.MergeStatement.AddMatchedClause(Kingdee.BOS.MatchedOption,System.String,System.String,System.String)">
            <summary>
            matched子句 根据oracle语法删除必须是update子句，仅删除时（option = MatchedOption.Delete）也需要指定不在关联条件（Condition）中的setClauses字段（注意set字段不能是关联条件（Condition）中的字段）
            </summary>
            <param name="option"></param>
            <param name="setClauses">matched update set子句，set字段不能是关联条件（Condition）中的字段。所有字段必须带表别名。格式：[target_table_alias.column1 = source_alias.column1][,][target_table_alias.column1 = Expression{source_alias.column1}]</param>
            <param name="updateWhere">更新条件，所有字段必须带表别名</param>
            <param name="deleteWhere">删除条件，所有字段必须带表别名</param>
            <example>
            <code>
            AddMatchedClause(MatchedOption.Update, "targetTableAlias.FQty = targetTableAlias.FQty", "targetTableAlias.FID = sourceAlias.FID", "");   //更新 匹配条件（Condition） and FID = sourceAlias.FID相同的数据。
            AddMatchedClause(MatchedOption.Delete, "targetTableAlias.fstatus = targetTableAlias.fstatus", "", "targetTableAlias.FID = sourceAlias.FID");   //删除匹配条件（Condition） and FID = sourceAlias.FID相同的数据。
            AddMatchedClause(MatchedOption.UpdateAndDelete, "targetTableAlias.FQty = sourceAlias.FQty", "", "targetTableAlias.FID = @FID");   //更新FQty，并且删除匹配条件（Condition）并且FID = @FID的数据。  
            </code>
            </example>
        </member>
        <member name="M:Kingdee.BOS.MergeStatement.AddNotMatchedClause(System.String,System.String,System.String)">
            <summary>
            Insert子句
            </summary>
            <param name="insertColumns">not matched insert column，目标表的列。格式：column1[, column2, ...]</param>
            <param name="insertValues"></param>
            <param name="insertWhere">insert的条件，该条件是在condition条件基础上，逻辑条件不能有重复数据。</param>
        </member>
        <member name="P:Kingdee.BOS.MergeStatement.SetClauses">
            <summary>
            matched update set子句，所有字段必须带表别名。格式：[target_table_alias.column1 = source_alias.column1][,][target_table_alias.column1 = Expression{source_alias.column1}]
            </summary>
        </member>
        <member name="P:Kingdee.BOS.MergeStatement.InsertColumns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.MergeStatement.InsertWhere">
            <summary>
            insert的条件，该条件是在condition条件基础上，并且要保证逻辑不能有重复数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.MergeStatement.SqlParams">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MatchedOption.None">
            <summary>
            不更新
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MatchedOption.Update">
            <summary>
            仅更新
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MatchedOption.Delete">
            <summary>
            仅删除
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MatchedOption.UpdateAndDelete">
            <summary>
            更新并删除
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mq.MqMessage`1">
            <summary>
            消息队列消息
            </summary>
            <typeparam name="TData">数据类型</typeparam>
        </member>
        <member name="P:Kingdee.BOS.Mq.MqMessage`1.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mq.MqMessage`1.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Mq.SimpleMq`1">
            <summary>
            简易消息队列
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.Mq.SimpleMq`1.Enqueue(Kingdee.BOS.Context,`0)">
            <summary>
            数据消息入列
            </summary>
            <param name="ctx">上下文</param>
            <param name="data">数据消息</param>
        </member>
        <member name="M:Kingdee.BOS.Mq.SimpleMq`1.Start(System.Action{Kingdee.BOS.Context,`0})">
            <summary>
            启动消息队列
            </summary>       
            <param name="funcProcessData">数据消息处理</param>
        </member>
        <member name="M:Kingdee.BOS.Mq.SimpleMq`1.StartMainTask(System.Action{Kingdee.BOS.Context,`0})">
            <summary>
            启动主处理线程
            </summary>
            <param name="funcProcessData"></param>
        </member>
        <member name="M:Kingdee.BOS.Mq.SimpleMq`1.StartCheckTask(System.Action{Kingdee.BOS.Context,`0})">
            <summary>
            启动检测线程
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Mq.SimpleMq`1.Stop">
            <summary>
            停止消息队列
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Mq.SimpleMq`1.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.AbstractXTMessage">
            <summary>
            讯通消息的抽象类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.AbstractXTMessage.ToEids">
            <summary>
            给多团队多用户发送消息时的键值对
            key 企业ID
            values 用户openid列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.PubAcctCode">
            <summary>
            发送消息的公共号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.PubAcctKey">
            <summary>
            发送消息公共号的密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.Users">
            <summary>
            接受消息的用户Id列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.SourceUsers">
            <summary>
            接受消息的用户id（外部调用云之家接口最原始的用户id）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.IsOpenUser">
            <summary>
            用户的类型，默认为cloud用户，false为cloud用户，true为讯通用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.Todo">
            <summary>
            是否推送代表消息,格式为整型,1=推送到待办消息;0=推送原公共号消息",
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.ToEid">
            <summary>
            接收消息企业ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.TodoMsgIds">
            <summary>
            需要改变的待办消息的id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.extendFields">
            <summary>
            私有云自定义参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.msgSource">
            <summary>
            消息来源 记录来自哪个领域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.msgSummary">
            <summary>
            消息附加信息
            消息摘要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.dbId">
            <summary>
            错误消息数据库Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.IsBackMsg">
            <summary>
            是否为后台轮训消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.AbstractXTMessage.MsgAppID">
            <summary>
            轻应用ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.ExtendFields">
            <summary>
            私有云自定义参数类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ExtendFields.pushTipTitle">
            <summary>
            自定义标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.id">
            <summary>
            数据库id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.msgSource">
            <summary>
            消息来源 记录来自哪个领域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.msgtime">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.msgType">
            <summary>
            消息类型 非必填项 记录消息类型 (单文本消息、多文本消息、待办转已办)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.msgBody">
            <summary>
            消息体信息 非必填项 记录消息体参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.errorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.isSuccess">
            <summary>
            是否发送成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.msgSummary">
            <summary>
            消息摘要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.IsBackMsg">
            <summary>
            是否为后台轮训消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorLogMessage.OriginalData">
            <summary>
            bos平台原始数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTMsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.AllMsg">
            <summary>
            所有消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.ChangeTodoMsg">
            <summary>
            待办转已办
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.PlainTextMsg">
            <summary>
            纯文本消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.SingleTextMsg">
            <summary>
            单文本消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.LightAppMsg">
            <summary>
            轻应用消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.TodoMsg">
            <summary>
            待办消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.SimpleTextMsg">
            <summary>
            纯文本消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFInitModelData">
            <summary>
            初始化模板数据 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFSendToDoMsg">
            <summary>
            发送待办消息 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFCopyMsg">
            <summary>
            抄送消息 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFDelTodoMsg">
            <summary>
            删除待办 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFChangeTodoStatusToHandled">
            <summary>
            标记待办为已办 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFChangeCopyDataToReaded">
            <summary>
            标记抄送为已读 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFChangeProssToDeleted">
            <summary>
            删除流程 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFChangeProssToCompleted">
            <summary>
            标记流程为已完成 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFChangeProcessToReset">
            <summary>
            标记流程为待发起 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFRegistCallBack">
            <summary>
            注册待阅已读通知 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFSaveDraft">
            <summary>
            存为草稿 - 云之家统一流程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.XTMsgType.UFDealToDoByActivityId">
            <summary>
            根据流程节点标记待办为已办
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.ErrorMessageHelper">
             <summary>
            接口错误信息翻译
             </summary>
        </member>
        <member name="M:Kingdee.BOS.Msg.ErrorMessageHelper.GetErrorMessage(System.Int32,System.String)">
            <summary>
            获取错误信息描述
            </summary>
            <param name="errorcode">错误ID</param>
            <param name="InterfaceProvider">厂商信息</param>
            <returns>返回错误信息</returns>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorMessageHelper.ErrorCode">
            <summary>
            错误ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorMessageHelper.ErrorMessage">
            <summary>
            错误信息描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorMessageHelper.InterfaceProvider">
            <summary>
            接口厂商
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.ErrorMessageHelper.SystemErrorMsgs">
            <summary>
            系统内置错误信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.LightAppMessage">
            <summary>
            轻应用消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.sourceId">
            <summary>
            待办消息id 需要自己上传 必填
            请使用32位GUID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.appId">
            <summary>
             轻应用id 必填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.senderid">
            <summary>
            待办的发送人ID 选填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.content">
            <summary>
            待办内容 选填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.url">
            <summary>
            点击待办跳转URL 必填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.title">
            <summary>
            来自字段的内容显示 必填
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.itemtitle">
            <summary>
            待办项标题内容显示,选填，如不填，则默认为title值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.headImg">
            <summary>
            待办在客户端显示的图URL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.isRead">
            <summary>
            目标处理状态，0表示未办，1表示已办 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.LightAppMessage.isDo">
            <summary>
            目标处理状态，0表示未办，1表示已办
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.TodoStatusMessage">
            <summary>
            待办消息状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.Status">
            <summary>
            要修改成的状态（现在支持undo, done）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.IsRead">
            <summary>
            判断消息是否已读(0 未读，1 已读)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.IsDelete">
            <summary>
            判断消息是否已删除(0 未删除，1 已删除,2 物理删除)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.MsgIds">
            <summary>
            需要改变的待办消息的id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.AppId">
            <summary>
            轻应用号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.IsSync">
            <summary>
            是否同步发送，默认为false
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.flowId">
            <summary>
            流程ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.TodoStatusMessage.activityId">
            <summary>
            流程节点ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTSendResult">
            <summary>
            发送讯通消息的结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSendResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSendResult.Msg">
            <summary>
            详情
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSendResult.Data">
            <summary>
            推送成功返回值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSendResult.MsgId">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSendResult.BodyInfo">
             <summary>
            消息体信息
             </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.SMSMessageType">
            <summary>
            短信类别
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.BusinessWarning">
            <summary>
            业务预警
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.VerificationCode">
            <summary>
            短信验证码
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.Workflow">
            <summary>
            工作流
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.Other">
            <summary>
            其他
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.Unknown">
            <summary>
            界面上不显示,默认值
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.BroadCast">
            <summary>
            广播消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.MessageTest">
            <summary>
            短信测试
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.CloudMessage">
            <summary>
            云短信
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.BussinessOper">
            <summary>
            业务操作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.SMSMessageType.IBPM">
            <summary>
            IBPM
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.SMSMessageInfo">
            <summary>
            发送短信对象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.SMSMessageInfo.PhoneInfos">
            <summary>
            收信人信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.SMSMessageInfo.SMSMessage">
            <summary>
            短信内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.SMSMessageInfo.MessageType">
            <summary>
            短信类别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.SMSMessageInfo.MessgeDetail">
            <summary>
            业务详情 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.SMSMessageInfo.SmsType">
            <summary>
            短信类型 0 通知类短信 1 营销类短信
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.PhoneInfo">
            <summary>
            收信人信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.PhoneInfo.ReceiverUser">
            <summary>
            发送人信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.PhoneInfo.Phone">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.PhoneInfo.ReceiverName">
            <summary>
            接收人名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTLogMessageInfo">
            <summary>
            云之家消息信息参数类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.UserIds">
            <summary>
            接受消息的用户Id列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.UserNames">
            <summary>
            接收消息的用户名称列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.TodoMsgIds">
            <summary>
            需要改变的待办消息的id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.IsRealMsg">
            <summary>
            是否获取数据成功
            解析此条信息是否正确
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.ErrorMsg">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.IsDelete">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMessageInfo.ResendList">
            <summary>
            重发消息记录
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTLogMsgEntity">
            <summary>
            重发消息记录信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgEntity.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgEntity.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgEntity.ErrorInfo">
            <summary>
            原因
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTLogMsgParam">
            <summary>
            获取云之家消息参数类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgParam.msgType">
            <summary>
            消息类型 默认为全部
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgParam.TodoMsgIds">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgParam.IsSuccess">
            <summary>
            是否发送成功
            0 失败
            1 成功
            2 全部
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgParam.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTLogMsgParam.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTMsgState">
            <summary>
            云之家消息当前状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.appid">
            <summary>
            对应请求参数中的sourcetype
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.sourceid">
            <summary>
            对应请求参数中的sourceitemid
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.check">
            <summary>
            检查结果，true：成功，false：失败
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.dealCount">
            <summary>
            表示生成已办成功的数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.undelCount">
            <summary>
            表示生成成功的数量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTMsgState.errormsg">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTPlainTextMessage">
            <summary>
            讯通纯正文消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTPlainTextMessage.Text">
            <summary>
            消息摘要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTPlainTextMessage.Url">
            <summary>
            链接，格式为经过URLENCODE编码的字符串，可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTPlainTextMessage.AppId">
            <summary>
            如果打开的链接是轻应用,必须传入轻应用号，否则可以为空
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.XTSingleTextMessage">
            <summary>
            讯通单文本消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.Date">
            <summary>
            发布日期，格式为包含了'年月日时分秒'字符串
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.Title">
            <summary>
            消息标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.Text">
            <summary>
            消息摘要
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.Zip">
            <summary>
            压缩包二进制字节流，经过BASE64编码，可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.Url">
            <summary>
            链接，格式为经过URLENCODE编码的字符串，可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XTSingleTextMessage.AppId">
            <summary>
            如果打开的链接是轻应用,必须传入轻应用号，否则可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.PKValue">
            <summary>
            关联的业务数据内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.AppId">
            <summary>
            如果打开的链接是轻应用,必须传入轻应用号，否则可以为空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.PassUrl">
            <summary>
            快捷处理操作url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.itemtitle">
            <summary>
            待办项标题内容显示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.headImg">
            <summary>
            待办在客户端显示的图URL，必填，可传空
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.IsSync">
            <summary>
            是否同步发送，默认为false
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.TagId">
            <summary>
            待办标签Id，指定后，可在通知中心处进行分类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.XunTongMessage.toDoData">
            <summary>
            统一流程中心实体对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.INumberResource.getNumber(System.Int32)">
            将阿拉伯数字转义成相应的字符
            
            @param i
                       转义前的数字
            @return 转义后的字符
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.INumberResource.getUnit(System.Int32)">
            获得相应的十分位、百分位、千分位 其中，1，2，3分别代表十、百、千
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.INumberResource.getGroup(System.Int32)">
            获得相应的万分位、亿分位、兆分位 其中，1，2，3分别代表万、亿、兆
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.INumberResource.getPoint">
            获得相应的小数点号
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.#ctor(Kingdee.BOS.NumFormatTran.INumberResource)">
            数字转义。可以将数字转成特定的语言表述
            
            @param resource
                       特定语言的数字资源
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.setNumberResource(Kingdee.BOS.NumFormatTran.INumberResource)">
            设置语言资源
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.isLangHabit">
            返回是否使用这样的语言习惯：13念作“十三（拾叁）”而非“一十三（壹拾叁）”
            @return
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.setLangHabit(System.Boolean)">
            设置是否使用这样的语言习惯：13念作“十三（拾叁）”而非“一十三（壹拾叁）”
            @param langHabit
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.toDirect(System.Numerics.BigInteger)">
            按位直接转义数字。不考虑语言习惯。 例如， <code>
            NumberTranslate trans = new NubberTranslate(PRCChineseNumberResource.getInstance());
            trans.toDirect(new BigInteger("12345"));
            </code>
            结果为：一二三四五
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.toDirect(System.String)">
            直接转义字串中的数字。不考虑语言习惯。 例如， <code>
            NumberTranslate trans = new NubberTranslate(PRCChineseNumberResource.getInstance());
            trans.toDirect("12345.678");
            </code>
            结果为：一二三四五.六七八
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.toNumber(System.String)">
            int类型的string值转化为特定语言的数字表述字符串
            
            @param intValue
            @return
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumberTranslate.toNumber(System.Decimal)">
            将数值转成特定语言的表述字串
            
            例如, <code>
            NumberTranslate trans = new NubberTranslate(PRCChineseNumberResource.getInstance());
            trans.toNumber(new BigDecimal("12345.678"));
            </code>
            结果为：一万二千三百四十五.六七八
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.getStrategy">
            ** 一种语言对应一种策略 */
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.formatNumber(System.Object,System.String)">
            用指定的语言读数字
            @param value 数值，调用者确保不为空
            @param lan 语言
            @return
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.formatCurrency(System.Object,System.String,System.String)">
            用指定的语言读金额
            @param value 数值，调用者确保不为空
            @param lan 语言
            @param currencyIsoCode 币别ISO
            @return
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.pickIntAndDec(System.String)">
            <summary>
            将传入字符按逗号划分，得到整数部分和小数部分
            </summary>
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.splitInt(System.String)">
            <summary>
            将传入整数按照逗号分隔string[]{"1","234","567"}
            </summary>
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.rightString(System.String,System.Int32)">
            <summary>
            取字符串从右向左第idx位，并转成int型，取不到则为0
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.IMultiLanguageSay”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.IMultiLanguageSay.sayNumber(System.Object)">
            数数
            @param value
            @return
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.IMultiLanguageSay.sayCurrency(System.Object,System.String)">
            数钱
            @param value
            @param currencyIsoCode
            @return
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.AbstarctEnglishSay">
            <summary>
            英文数数/数钱
            </summary>
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.AbstarctEnglishSay.sayCurrency(System.Object,System.String)">
            <summary>
            数钱
            </summary>
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.EnglishSay">
            <summary>
            英文美分样式
            <para>数钱:整数 AND CENTS 小数</para>>
            </summary>
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.EnglishPositionalCentsSay">
            <summary>
            英文美分样式，美分后置
            <para>数钱:整数 AND 小数 CENTS</para>> 
            </summary>
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.EnglishDollarsSay">
            <summary>
            英文美元样式，带美分后置
            <para>数钱:整数 DOLLARS AND 小数 CENTS</para>> 
            </summary>
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.EnglishPointSay">
            <summary>
            英文美点样式
            <para>数钱:整数 AND POINTS 小数</para>>
            </summary>
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.NumMultiLanFormat.EnglishFractionSay">
            <summary>
            英文分数样式
            <para>数钱:整数 AND 小数 分数表示</para>> 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.PRCChineseNumberResource.getInstance">
            获得简体中文数字的实例
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.PRCChineseNumberResource.getNumber(System.Int32)">
            获得相应数字。 0123456789分别代表 〇一二三四五六七八九
            
            @param i
                       阿拉伯数字
            @return 简体中文数字。
            @see com.kingdee.bos.ctrl.kdf.formatter.NumberResource#getNumber(int)
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.PRCChineseNumberResource.getUnit(System.Int32)">
            获取相应计数单位。 1、2、3分别代表十、百、千
            
            @see com.kingdee.bos.ctrl.kdf.formatter.NumberResource#getUnit(int)
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.PRCChineseNumberResource.getGroup(System.Int32)">
            获得相应的
            
            @see com.kingdee.bos.ctrl.kdf.formatter.NumberResource#getGroup(int)
        </member>
        <member name="M:Kingdee.BOS.NumFormatTran.PRCChineseNumberResource.getPoint">
            获得小数点号
            
            @see com.kingdee.bos.ctrl.kdf.formatter.NumberResource#getPoint()
        </member>
        <member name="T:Kingdee.BOS.NumFormatTran.FormatTranslate">
            <summary>
            格式转换类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.NumFormatTran.FormatTranslate.Resource">
            <summary>
            需要转换的值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.NumFormatTran.FormatTranslate.Type">
            <summary>
            目标格式类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Open.GSessionHelper">
            <summary>
            GLog Session助手
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Open.GSessionHelper.GetOpeLogSvr(Kingdee.BOS.Context)">
            <summary>
            获取Ope地址
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Open.HttpHelper">
            <summary>
            HTTP助手
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Open.HttpHelper.SimplePostRequest(System.String,System.String)">
            <summary>
            基本Post请求, 无返回值
            </summary>
            <param name="url"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Open.HttpHelper.GetRequest(System.String)">
            <summary>
            基本Get请求
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.OpeCypher">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.OpeCypher.FId">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.OpeCypher.FVersion">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.OpeCypher.FKey">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.OpeCypher.FExpire">
            <summary>
            是否过期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.OpeCypher.FServerUrl">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Open.OpeLogQueue`1">
            <summary>
             行为日志处理队列
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Queue.CommonQueue`1">
            <summary>
             处理普通实体的队列基类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Queue.IBaseQueue`1">
            <summary>
            处理普通实体的队列接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Kingdee.BOS.Queue.IBaseQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Kingdee.BOS.Queue.CommonQueue`1.myInstance">
            <summary>
            基本队列单例
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Queue.CommonQueue`1.queueOutLock">
            <summary>
            队列出队时的锁控制
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Queue.CommonQueue`1.queueRollLock">
            <summary>
            轮询队列时的锁控制
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Queue.CommonQueue`1.queueEnable">
            <summary>
            是否处理队列
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Queue.CommonQueue`1.businessQueue">
            <summary>
             队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.GetInstance(Kingdee.BOS.Context,System.Type,System.Object)">
            <summary>
              创建单例，指定类型和单例锁, 防止锁抢夺
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.BeginEnqueue">
            <summary>
            入队私有方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.DoBusiness(`0)">
            <summary>
            队列业务操作
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Kingdee.BOS.Queue.CommonQueue`1.Dispose">
            <summary>
            释放方法
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Queue.CommonQueue`1.BusinessQueue">
            <summary>
            队列属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Queue.CommonQueue`1.CurrentContext">
            <summary>
             上下文
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Open.OpeLogQueue`1.singletonLock">
            <summary>
            单例锁
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Open.OpeLogQueue`1.GetInstance(Kingdee.BOS.Context)">
            <summary>
            获取单例
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Open.OpeLogQueue`1.DoBusiness(`0)">
            <summary>
            队列业务操作
            </summary>
            <param name="objs"></param>
        </member>
        <member name="T:Kingdee.BOS.ProductLicType">
            <summary>
            产品购买类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ProductLicType.Package">
            <summary>
            分包
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ProductLicType.Group">
            <summary>
            分组
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ProxyContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetServiceChannel">
            <summary>
            获取所有代理的配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.TryGetRegisteredService``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceType"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetService``1(System.Type,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceType"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetService``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceName"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="interfaceName"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.Add(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="interfaceType"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="P:Kingdee.BOS.ProxyContainer.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BatchSqlParam">
            <summary>
            批量执行参数。仅用于单表批量执行，where只支持简单And逻辑
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.#ctor(System.String,System.Data.DataTable,System.String)">
            <summary>
            表名和更新的数据。sqlserver数据库dt的列名将做为临时表列名
            </summary>
            <param name="tableName"></param>
            <param name="dt"></param>
            <param name="createTempTableSQL">创建临时表sql,字段名必须与dt列名一致（仅在sqlserver使用，可不指定，默认只支持Varchar(200),decimal(23,10), bigint, datetime ）</param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddSetExpression(System.String,Kingdee.BOS.KDDbType,System.String)">
            <summary>
            update语句Set字段
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名(要set的字段)</param>
            /// <param name="editLen">字段编辑长度</param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddSetExpression(System.String,Kingdee.BOS.KDDbType,System.String,System.Int32)">
            <summary>
            update语句Set字段
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名(要set的字段)</param>
            /// <param name="editLen">字段编辑长度</param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddSetExpression(System.String,Kingdee.BOS.KDDbType,System.String,System.Byte,System.Byte)">
            <summary>
            update语句Set字段
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名(要set的字段)</param>
            <param name="precision">整体精度、或字符串长度</param>
            <param name="scale">小数精度（需要设置，不需要设置0）</param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddSetExpression(System.String,Kingdee.BOS.KDDbType,System.String,System.String)">
            <summary>
            update语句Set字段
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名</param>
            <param name="valFormat">设置值的格式化字符串，如："FQTY + {0}"</param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddWhereExpression(System.String,Kingdee.BOS.KDDbType,System.String,System.String)">
            <summary>
            where条件，只支持And逻辑
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名</param>
            <param name="tableAliases"></param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddWhereExpression(System.String,Kingdee.BOS.KDDbType,System.String,Kingdee.BOS.ComparisonOperators,System.String)">
            <summary>
            where条件，只支持And逻辑
            </summary>
            <param name="columnName">列名，必须与DataTable列名匹配</param>
            <param name="dbType">参数类型</param>
            <param name="fieldName">真实字段名</param>
            <param name="compOper">比较操作符，只支持等于、大于、小于、不等于</param>
            <param name="tableAliases"></param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.AddJoinExpression(System.String)">
            <summary>
            Join 语句
            </summary>
            <param name="joinExpr">完整join语句，例如： "left join t_bas_Object t2 on t1.fid = t2.fid " </param>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetSetField">
            <summary>
            获取Set字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetSetSqlForSQLServer(System.String)">
            <summary>
            获取Set字段(仅sqlserver使用。sqlserver批量更新是通过临时表实现)
            </summary>
            <param name="tempTabAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetWhereField(System.String)">
            <summary>
            获取Where字段(SQLServer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.ColumnTypeExprOfSetField">
            <summary>
            set字段的类型
            </summary>
            <returns>key：字段名  value：字段类型（varchar（20））</returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.ColumnTypeExprOfWhereField">
            <summary>
            where字段的类型
            </summary>
            <returns>key：字段名  value：字段类型（varchar（20））</returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetSetFieldExpression">
            <summary>
            获取set语句（仅Oracle使用）
            </summary>
            <returns>key:dt的ColumnName，与变量名相同； value：数组，set的字段 值（可以是表达式，表达式由ValFormat定义，需用ksql语法）</returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetWhereFieldExpression">
            <summary>
            获取Where语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BatchSqlParam.GetEachColumnParam">
            <summary>
            获取参数（DataTable的ColumnName和DataTable的值）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.BatchSqlParam.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BatchSqlParam.TableAliases">
            <summary>
            表别名，可以为空串表示不使用别名。update {0} from {0} 在某些数据库下必须要指定表别名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BatchSqlParam.data">
            <summary>
            要更新的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BatchSqlParam.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.FieldExpression.#ctor(System.String,Kingdee.BOS.KDDbType,System.String,Kingdee.BOS.ComparisonOperators,System.String)">
            <summary>
            字段表达式构造函数
            </summary>
            <param name="columnName">列名(数据库columnnmae)</param>
            <param name="dbType">列类型</param>
            <param name="fieldName"></param>
            <param name="compOper"></param>
            <param name="tableAliases"></param>
        </member>
        <member name="M:Kingdee.BOS.FieldExpression.#ctor(System.String,Kingdee.BOS.KDDbType,System.String,Kingdee.BOS.ComparisonOperators,System.String,System.Int32)">
            <summary>
            字段表达式构造函数
            </summary>
            <param name="columnName">列名(数据库columnnmae)</param>
            <param name="dbType">列类型</param>
            <param name="fieldName"></param>
            <param name="compOper"></param>
            <param name="tableAliases"></param>
        </member>
        <member name="M:Kingdee.BOS.FieldExpression.GetFieldExpress(System.String,Kingdee.BOS.KDDbType,System.String,Kingdee.BOS.ComparisonOperators,System.String,System.Int32)">
            <summary>
            得到字段表达式构造函数
            </summary>
            <param name="columnName"></param>
            <param name="dbType"></param>
            <param name="fieldName"></param>
            <param name="compOper"></param>
            <param name="tableAliases"></param>
            <param name="editLen">字段长度</param>
        </member>
        <member name="M:Kingdee.BOS.FieldExpression.ToExpr(System.String,System.String,System.String)">
            <summary>
            参数化调用
            </summary>
            <param name="tableAliases">源表别名（未定义别名时，直接用表名）</param>
            <param name="paramPrefix">sqlserver "@" , oracle ":"</param>
            <param name="valExpr">sqlserver "tmp_b.f1" , oracle "f1"</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.ComparisonOperators">
            <summary>
            比较符
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.Equal">
            <summary>
            等于 =
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ComparisonOperators.IsNotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ThirdSysContext">
            <summary>
            第三方登录上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.entryrole">
            <summary>
            入口来源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.eid">
            <summary>
            企业id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.thirdUserId">
            <summary>
            第三方系统用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.thirdUserName">
            <summary>
            第三方系统用户名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.accesstoken">
            <summary>
            企业级别Token
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.userticket">
            <summary>
            用户的ticket
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.appid">
            <summary>
            轻应用ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.option">
            <summary>
            其它参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.suiteid">
            <summary>
            第三方应用id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ThirdSysContext.agentid">
            <summary>
            企业内部ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.CommonTransactionScope">
            <summary>
            提供基于TransactionScope的事务功能。
            </summary>
            <remarks>
            事务操作类型由参数option指定，对于请求事务Required和RequiresNew使用ReadCommitted事务隔离级别。
            对于事务操作类型和事务隔离级别请参照msdn帮助。
            </remarks>
            <example>下面例子展示如何使用事务保存业务对象数据
            <code>
                 using (CommonTransactionScope trans = new CommonTransactionScope(TransactionScopeOption.Required))
                {
                    DynamicObject[] dynamicObjects = null;
                    BusinessDataWriter write = new BusinessDataWriter(ctx);
                    dynamicObjects = write.Save(dataEntities);
                    trans.Complete();
                }
            </code>
            </example>
        </member>
        <member name="M:Kingdee.BOS.CommonTransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            提供基于TransactionScope的事务功能。
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.CommonTransactionScope.Complete">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.UserSession">
            <summary>
            用户会话参数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.UserSession.GetValue(Kingdee.BOS.Context,System.String)">
            <summary>
            获取Session
            </summary>
            <param name="ctx"></param>
            <param name="key"></param>
        </member>
        <member name="M:Kingdee.BOS.UserSession.SetValue(Kingdee.BOS.Context,System.String,System.Object)">
            <summary>
            设置Session
            </summary>
            <param name="ctx"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.UserSession.IsLogUser(Kingdee.BOS.Context)">
            <summary>
            是否是统一日志平台用户
            </summary>
        </member>
        <member name="M:Kingdee.BOS.UserSession.SetLogUserFlag(Kingdee.BOS.Context)">
            <summary>
            设置统一日志平台用户标志
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Kingdee.BOS.Util.BigDataEncryption">
            <summary>
            大数据加密类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.BigDataEncryption.Encrypt(System.Byte[],System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="block">要加密的数据</param>
            <param name="privateKey">私钥</param>
            <param name="IsPath">是否为私钥地址 默认为true</param>
            <returns>加密后数据</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BigDataEncryption.Decrypt(System.Byte[],System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="block">要解密的数据</param>
            <param name="publicKey">公钥</param>
            <param name="IsPath">是否为私钥地址 默认为true</param>
            <returns>解密后数据</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BigDataEncryption.AESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            AES加密
            </summary>
            <param name="toEncrypt">待加密内容</param>
            <param name="key">AES密钥</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BigDataEncryption.AESDecrypt(System.Byte[],System.Byte[])">
            <summary>
            AES解密
            </summary>
            <param name="encryptData">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BigDataEncryption.GetFileContent(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="filePath">文件地址</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BrandResourceHelper.GetBrandResourceEntity(System.Boolean)">
            <summary>
            获取品牌信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.BrandResourceHelper.GetResourceByLcid(System.Object)">
            <summary>
            如资源途径根据多语言资源获取，规律：文件名_{0}.png （{0}为多语言ID）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BrandResourceHelper.GetDefaultBrandName">
            <summary>
            获取当前适用的品牌默认品牌名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.BrandResourceHelper.GetCloudSmsDefaultSignName">
            <summary>
            获取云短信的默认签名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IMCCASUtils.GetRequestIsAppropriateForCasAuthentication">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IMCCASUtils.ExtractSingleSignOutTicketFromSamlResponse(System.String)">
            <summary>
            Extracts the CAS ticket from the SAML message supplied.
            </summary>
            <param name="xmlAsString">SAML message from CAS server</param>
            <returns>The CAS ticket contained in SAML message</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetConfig(System.Web.HttpRequest)">
            <summary>
            获取配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsEnableAuthority(System.Web.HttpRequest)">
            <summary>
            域名是否激活集成IMC
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.InitCasCommConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            初始化cas相关的common的app的setting参数，支持多租户控制
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetDynaCasParam(System.Web.HttpRequest)">
            <summary>
            读取初始参数中的动态cas服务参数
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetCasBridgeUrl(System.Web.HttpRequest,System.String)">
            <summary>
            获取金蝶云星空服务地址
            获取Cas桥页面地址
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetSubApp(System.Web.HttpRequest)">
            <summary>
            获取子应用
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetPageName(System.Web.HttpRequest)">
            <summary>
            获取页面名 eg. index.aspx
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetCasLoginUrl(System.Web.HttpRequest)">
            <summary>
            获取Cas服务器登陆地址
            </summary>
            <param name="req"></param>
            <returns>https://smart-imc.com/cas/login?service=http%3a%2f%2flocalhost%3a3343%2fkdcasauthbridge.aspx</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsLoginUrl(System.Web.HttpRequest)">
            <summary>
            是登入请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsLogoutUrl(System.Web.HttpRequest)">
            <summary>
            是注销请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsEntryBridgeUrl(System.Web.HttpRequest)">
            <summary>
            是入口桥地址
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsAcctListSubmit(System.Web.HttpRequest)">
            <summary>
            是数据中心列表返回数据
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsAcctListUrl(System.Web.HttpRequest)">
            <summary>
            是数据中心列表地址
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.HasReturnValue(System.Web.HttpRequest)">
            <summary>
            存在返回数据returnvalue
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.HadTargetParams(System.Web.HttpRequest,System.String)">
            <summary>
            检测request存在某个可用参数
            </summary>
            <param name="req"></param>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.HasCasTicket(System.Web.HttpRequest)">
            <summary>
            存在cas服务的ticket参数
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.HasKDUD(System.Web.HttpRequest)">
            <summary>
            存在金蝶ud参数
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsTranToCasBridgeUrl(System.Web.HttpRequest)">
            <summary>
            跳转桥页面
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsDynCasServerInnerLink(System.Web.HttpRequest)">
            <summary>
            是指定动态服务器指定的登陆页嵌套连接
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsTranToDForm(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            存在cookie和匹配的登陆信息，直接进入具体用户的上下文主控
            </summary>
            <param name="req"></param>
            <param name="aspSid">out ASP.NET_SessionId</param>
            <param name="kdSid">out kdservice-sessionid</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsCasServerSameAs(System.Web.HttpRequest,System.String)">
            <summary>
            是否相同的Cas服务校验地址
            </summary>
            <param name="req"></param>
            <param name="userToken"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetDFormEntryUrl(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取通过UserToken免登的url的地址，
            例如： https://xxx/k3cloud/html5/index.aspx?ud=xxxxx
            </summary>
            <param name="baseUrl"></param>
            <param name="userToken"></param>
            <param name="kdsvcsid"></param>
            <param name="mainFormId">BOS_HtmlConsole</param>
            <param name="isSingle">无主控</param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsTranToCasServerUrl(System.Web.HttpRequest)">
            <summary>
            跳转Cas服务登录页面
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsCasValidate(System.Web.HttpRequest)">
            <summary>
            需要进行Cas的ticket校验
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsKDStartAppVerify(System.Web.HttpRequest)">
            <summary>
            跳转金蝶免登Web页面
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsKDXPFStartAppVerify(System.Web.HttpRequest)">
            <summary>
            跳转金蝶免登XPF页面
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsXPF(System.Web.HttpRequest)">
            <summary>
            是桌面应用
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.IsSilverlight(System.Web.HttpRequest)">
            <summary>
            是silverlight应用
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetTicket(System.Web.HttpRequest)">
            <summary>
            获取cas服务分配的票据
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetReqIsoKey(System.Web.HttpRequest)">
            <summary>
            获取cas服务分配的票据
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetResponseByTicket(System.Web.HttpRequest)">
            <summary>
            依据票据获取校验信息
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.PerformHttpGet(System.String,System.String)">
            <summary>
            高速获取Get请求的Response，返回200
            </summary>
            <param name="url"></param>
            <param name="aspSId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetResponseUrlByTicket(System.Web.HttpRequest)">
            <summary>
            依据票据获取校验地址
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetLogoutUrl(System.Web.HttpRequest)">
            <summary>
            获取登出地址
            </summary>
            <returns>https://smart-imc.com/cas/logout?service=http%3a%2f%2flocalhost%3a4952%2fHTML5%2fIndex.aspx</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.SetLogoutFlag(System.Web.HttpContext)">
            <summary>
            设置注销标记
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetLogoutFlag(System.Web.HttpContext)">
            <summary>
            提取注销标记
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetLogoutFlag(System.String)">
            <summary>
            通过UserToken提取注销标记
            </summary>
            <param name="userToken"></param>
            <returns>默认为注销</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.ClearLogoutFlag(System.Web.HttpContext)">
            <summary>
            清除注销标记
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.InitReqIsoKey(System.Web.HttpRequest)">
            <summary>
            ByReffer, ByRefferUserToken 初始化ReqIsoKey
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.InitReqIsoKeyByReffer(System.Web.HttpRequest)">
            <summary>
            通过UrlReffer的ReqIsoKey，url的kdcrisoid参数初始化到当前request的header中
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.InitReqIsoKeyByRefferUserToken(System.Web.HttpRequest)">
            <summary>
            通过UrlReffer的usertoken获取ReqIsoKey，url的usertoken获取state，然后参数kdcrisoid初始化到当前request的header中
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.SetHeadersWithReqIsoKey(System.Web.HttpRequest,System.String)">
            <summary>
            写入ReqIsoKey到当前请求缓存
            </summary>
            <param name="req"></param>
            <param name="reqIsoKey"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetDisposeUserTokenUrl(System.Web.HttpRequest,System.String)">
            <summary>
            获取userToken释放地址
            </summary>
            <param name="req"></param>
            <param name="userToken"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.DoLogoutByCasTicket(System.Web.HttpContext,System.String)">
            <summary>
            嵌入式的IMC应用回调App的Logout接口
            </summary>
            <param name="req"></param>
            <param name="casTicket"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.CreateHTMLDocument(System.String,System.String,System.String,System.String)">
            <summary>
            创建基本的HTML文档模板
            </summary>
            <param name="elems"></param>
            <param name="headers"></param>
            <param name="title"></param>
            <param name="cie"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.TranToAcctList(System.Web.HttpContext)">
            <summary>
            转向数据中心选择列表
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.TranToKDStartApp(System.Web.HttpContext)">
            <summary>
            转向金蝶云星空免登ud链接
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetBasePath(System.Web.HttpRequest)">
            <summary>
            获取基地址,不包含末尾 /
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GenUDUrl(System.Web.HttpRequest)">
            <summary>
            生成Ud参数地址
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetUDArgs(System.Web.HttpRequest)">
            <summary>
            获取自动登陆的UD参数
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetOriginUrlQueryString(System.Web.HttpRequest,System.String)">
            <summary>
            获取原始访问的裸地址
            </summary>
            <param name="req"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.DebugOutput2Response(System.String)">
            <summary>
            调试输出到response
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.DebugInfoToResponse(System.Web.HttpRequest)">
            <summary>
            调试信息输出Ticket的Request返回信息到页面Response
            </summary>
            <param name="req"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.GetDebugException(System.Exception,System.Int32@)">
            <summary>
            获取调试错误信息
            </summary>
            <param name="ex"></param>
            <param name="lvl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDCasUtils.DebugExceptionToResponse(System.Exception)">
            <summary>
            错误调试信息输出到Response
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.GetSqlKeys(System.String)">
            <summary>
            得到存在的sql关键字
            </summary>
            <param name="reqStr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.GetScriptKeys(System.String)">
            <summary>
            得到存在的script关键字
            </summary>
            <param name="reqStr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.GetIllegalKeys(System.String)">
            <summary>
            得到非法关键字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.HtmlEncode(System.String)">
            <summary>
            特殊字符编码
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.HtmlDecode(System.String)">
             <summary>
            特殊字符解码
             </summary>
             <param name="str">string</param>
             <returns>string</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.HtmlClear(System.String)">
            <summary>
             去除关键字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.IsPhone(System.String)">
            <summary>
            是否是电话号码
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.IsEmail(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.IsUrl(System.String)">
            <summary>
            是否是url地址
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CharCheckUtil.IsExceptValidate(System.String)">
            <summary>
            是否是排除的验证，IsEmail，IsUrl不验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.IgnoreWidthComparer">
            <summary>
            忽略全角/半角
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.MD5ComputeUtil.GetMD5String(System.String)">
            <summary>
            MD5算法默认为小写
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.MD5ComputeUtil.GetMD5UPString(System.String)">
            <summary>
            MD5算法默认为小写，该函数则直接转化大写
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.PacketUtil">
            <summary>
            二进制数据包辅助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.PacketUtil.EncodePacket(System.Byte[])">
            <summary>
            构造包(包头+包尾)
            </summary>
            <param name="data">封包的数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PacketUtil.EncodePacket(System.String)">
            <summary>
            构造包(包头+包尾)
            </summary>
            <param name="text">封包的数据</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PacketUtil.DecodePacket(System.Collections.Generic.List{System.Byte}@)">
            <summary>
            解析包
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.RecursionLimitUtils">
            <summary>
            递归层数限制工具
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RecursionLimitUtils.Run(System.Int32@,System.Int32,System.Action,System.String,System.String)">
            <summary>
            执行方法
            </summary>
            <example>
            递归调用处没有循环的情况
            public void Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    RecursionLimitUtils.Run(ref depth, 10, () => Dfs(tree.Left, depth));
                }
            }
            递归调用处有循环的情况
            public void Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    while (.....)
                    {
                        var currDepth = depth;
                        RecursionLimitUtils.Run(ref currDepth, 10, () => Dfs(tree.Left, currDepth));
                    }
                }
            }
            </example>
            <param name="currDepth">当前深度</param>
            <param name="maxDepth">最大深度</param>
            <param name="action">需要执行的方法</param>
            <param name="methodName">方法名字</param>
            <param name="param">计算异常参数</param>
        </member>
        <member name="M:Kingdee.BOS.Util.RecursionLimitUtils.Run``1(System.Int32@,System.Int32,System.Func{``0},System.String,System.String)">
            <summary>
            执行方法
            </summary>
            <example>
            递归调用处没有循环的情况
            public int Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    return RecursionLimitUtils.Run(ref depth, 10, () => Dfs(tree.Left, depth));
                }
                return tree.Value;
            }
            递归调用处有循环的情况
            public int Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    while (.....)
                    {
                        var currDepth = depth;
                        return RecursionLimitUtils.Run(ref currDepth, 10, () => Dfs(tree.Left, currDepth));
                    }
                }
                return tree.Value;
            }
            </example>
            <param name="currDepth">当前深度</param>
            <param name="maxDepth">最大深度</param>
            <param name="func">需要执行的方法</param>
            <param name="methodName">方法名字</param>
            <param name="param">计算异常参数</param>
        </member>
        <member name="M:Kingdee.BOS.Util.RecursionLimitUtils.Run(System.Int32@,System.Int32,System.String,System.String)">
            <summary>
            执行方法
            </summary>
            <example>
            递归调用处没有循环的情况
            public void Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    RecursionLimitUtils.Run(ref depth, 10, "Dfs");
                    Dfs(tree.Left, depth);
                }
            }
            递归调用处有循环的情况
            public void Dfs(Tree tree, int depth = 1)
            {
                if (tree.Left != null)
                {
                    while (.....)
                    {
                        var currDepth = depth;
                        RecursionLimitUtils.Run(ref currDepth, 10, "Dfs");
                        Dfs(tree.Left, currDepth);
                    }
                }
            }
            </example>
            <param name="currDepth">当前深度</param>
            <param name="maxDepth">最大深度</param>
            <param name="methodName">方法名字</param>
            <param name="param">计算异常参数</param>
        </member>
        <member name="T:Kingdee.BOS.Util.HotUpdate">
            <summary>
            热更新类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.HotUpdate.CallLastVersionOfThisMethod(System.Object,System.Object[])">
            <summary>
            调用当前方法的热更新版本，成功返回true
            示例：
            public override void ButtonClick(ButtonClickEventArgs e)
            {
                if (HotUpdate.CallLastVersionOfThisMethod(this, e)) return;
                ...
            }
            </summary>
            <param name="instance">当前类实例，传this即可</param>
            <param name="paras">当前方法的参数</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Util.HotUpdate.ReturnValue">
            <summary>
            热更新方法的返回值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.ImportQueueUtils">
            <summary>
            引入队列工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.SetImportRunning(Kingdee.BOS.Context,System.String)">
            <summary>
            设置引入记录为正在引入状态
            </summary>
            <param name="recId">引入记录ID</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.GetRunningImportCount(Kingdee.BOS.Context)">
            <summary>
            获取正在引入的操作数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.RemoveImport(Kingdee.BOS.Context,System.String)">
            <summary>
            从引入队列中移除
            </summary>
            <param name="recId">引入记录ID</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.ClearImportQueue(Kingdee.BOS.Context)">
            <summary>
            清除引入队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.CheckImportQueue(Kingdee.BOS.Context,System.String,System.Action{System.String})">
            <summary>
            判断是否可引入
            </summary>
            <param name="ctx">上下文</param> 
            <param name="recId">引入操作记录Id</param>    
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.CheckImportQueue(Kingdee.BOS.Context,System.String,System.Int32,System.Action{System.String})">
            <summary>
            判断是否可引入
            </summary>
            <param name="ctx">上下文</param> 
            <param name="recId">引入操作记录Id</param>    
            <param name="paralleNum">同时可引入人数</param>    
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.CheckImportQueue(Kingdee.BOS.Context,System.Action{System.String})">
            <summary>
            判断是否可引入
            </summary>
            <param name="ctx">上下文</param>   
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImportQueueUtils.CheckImportQueue(Kingdee.BOS.Context,System.Int32,System.Action{System.String})">
            <summary>
            判断是否可引入
            </summary>
            <param name="ctx"></param>
            <param name="paralleNum">同时可引入人数</param>
            <param name="notice"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.ExcelUtils">
            <summary>
            导入导出Excel工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ExcelUtils.SheetNameMaxLength">
            <summary>
            Excel Sheet名称最大长度31（Excel定义）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ExcelUtils.illegalExcelSheetName">
            <summary>
            Excel Sheet名称非法字符集
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.GetValidSheetName(System.String)">
            <summary>
            得到一个合法的Excel Sheet名：sheetName为空，返回sheet1名称
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.JoinToExportQueue(Kingdee.BOS.Context,System.Int64)">
            <summary>
            加入引出等待队列
            </summary>
            <param name="recId">引出记录ID</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.SetExportRunning(Kingdee.BOS.Context,System.Int64)">
            <summary>
            设置引出记录为正在引出状态
            </summary>
            <param name="recId">引出记录ID</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.GetRunningExportCount(Kingdee.BOS.Context)">
            <summary>
            获取正在引出的操作数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.GetRunningAndWaitingExportCount(Kingdee.BOS.Context)">
            <summary>
            获取正在引出和等待的操作数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.IsInExportQueue(Kingdee.BOS.Context,System.Int64)">
            <summary>
            检测是否在引出排队队列中
            </summary>
            <param name="recId">引出记录ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.GetExportWaitingPosition(Kingdee.BOS.Context,System.Int64)">
            <summary>
            取得引出等待位置
            </summary>
            <param name="recId">引出记录ID</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.RemoveExport(Kingdee.BOS.Context,System.Int64)">
            <summary>
            从引出队列中移除
            </summary>
            <param name="recId">引出记录ID</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ExcelUtils.ClearExportQueue(Kingdee.BOS.Context)">
            <summary>
            清除引出队列
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.FileUtil">
            <summary>
            文件相关帮助类。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.FileUtil.CommonFileHeaders">
            <summary>
            常见格式的文件头。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.FileUtil.RiskFileHeaders">
            <summary>
            高危格式文件头。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.FileUtil.ConvertMemoryStream(System.IO.Stream)">
            <summary>
            转换为内存流。
            </summary>
            <param name="stream">待转换的流。</param>
            <returns>返回转换后的内存流。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.FileUtil.CheckIsSameFileContentAndExtName(System.String,System.IO.Stream)">
            <summary>
            传入文件名及流对象，根据文件头判断并返回文件后缀与文件内容是否一致。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="stream">流对象。</param>
            <returns>返回文件后缀与文件内容是否一致。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.FileUtil.BytesToHexString(System.Byte[])">
            <summary>
            传入字节数组，返回转换后的十六进制字符串。
            </summary>
            <param name="bytes">待转换字节数组。</param>
            <returns>返回转换后的十六进制字符串。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.FileUtil.DeleteFile(System.String)">
            <summary>
            传入待删除文件路径，删除指定文件。
            </summary>
            <param name="filePath">待删除文件路径。</param>
        </member>
        <member name="T:Kingdee.BOS.Util.Hex">
            <summary>
            16进制
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.Hex.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            字节转换成16进制字符串
            </summary>
            <param name="data">字节述职</param>
            <param name="toLowerCase">是否小写</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="T:Kingdee.BOS.Util.HTMLReqUrlUtils">
            <summary>
            HTML5请求的URL地址工具类，支持缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetPageName">
            <summary>
            获取请求地址的最后Path：例如:index.aspx, dform.aspx
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetSubPath">
            <summary>
            获取页面的最后一级目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetPreUrlAbsolute">
            <summary>
            获取url地址的绝对前缀Paths
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetPreUrl">
            <summary>
            依据参数获取url地址的前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetParentUrl">
            <summary>
            获取子目录的二级目录，例如： http://xx/b2b/html5/index.aspx 中的 b2b
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.HTMLReqUrlUtils.ToCorrectDirPathXSSUrl(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetUrlRoot">
            <summary>
            获取根目录，例如 http://xx/b2b/html5/index.aspx 中的 http://xx/b2b/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetXForwardedProtocol">
            <summary>
            获取方向代理的请求协议, 目前仅支持http和https
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetXForwardedPort">
            <summary>
            获取外部代理的请求端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HTMLReqUrlUtils.GetXOriginalTo(System.String)">
            <summary>
            获取反向代理的原始请求服务器地址（暂时不实现，用相对地址代替）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.DbQueryUtils">
            <summary>
            数据库查询工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.DbQueryUtils.IsOracleDb(Kingdee.BOS.Context)">
            <summary>
            当前登录账套是否为Oracle账套
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DbQueryUtils.IsSqlServerDb(Kingdee.BOS.Context)">
            <summary>
            当前登录账套是否为SqlServer账套
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DbQueryUtils.OptimizeSelectSQL(Kingdee.BOS.Context,System.String,System.Boolean)">
            <summary>
            优化查询语句(增加并行处理优化脚本)
            </summary>
            <param name="ctx"></param>
            <param name="sql"></param>
            <param name="isParallelQeury"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DbQueryUtils.RemoveSqlEndSemicolon(System.String)">
            <summary>
            移除SQL结尾分号
            <p>应用场景：</p>
            SQL语句在结束的分号，兼容分号【;】之后有注释的情况
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.HuffmanHelper">
            <summary>
            哈夫曼编码解码帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.HuffmanEncode(System.String)">
            <summary>
            哈夫曼编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.HuffmanDecode(System.String)">
            <summary>
            哈夫曼解码
            </summary>
            <remarks>根据码表从二进制字符串中还原数据</remarks>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.BuildFrequenceTable(System.String)">
            <summary>
            构造频度表
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.CreateHuffmanTree(System.Collections.Generic.Dictionary{System.Char,System.Int32})">
            <summary>
            构造哈夫曼树
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.GetTwoMin(System.Collections.Generic.List{Kingdee.BOS.Util.HuffmanNode},Kingdee.BOS.Util.HuffmanNode@,Kingdee.BOS.Util.HuffmanNode@)">
            <summary>
            获取两个最小的节点，并移除
            </summary>
            <param name="lst"></param>
            <param name="nodea"></param>
            <param name="nodeb"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.HuffmanHelper.CreateHashTable_PreOrder_Visit(Kingdee.BOS.Util.HuffmanNode,System.String)">
            <summary>
            通过遍历哈夫曼树获得hash码表
            </summary>
            <param name="node"></param>
            <param name="s"></param>
        </member>
        <member name="T:Kingdee.BOS.Util.HuffmanNode">
            <summary>
            哈夫曼树的节点类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IBounchCastleRSAProvider">
            <summary>
            Bounch Castle RSA Provider
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IBounchCastleRSAProvider.EncryptByPrivateKey(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用私钥加密数据
            </summary>
            <param name="text">明文</param>
            <param name="xmlPrivateKey">私钥</param>
            <param name="coding">编码格式</param>
            <returns>
            base64格式
            </returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IBounchCastleRSAProvider.DecryptByPublicKey(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用公钥解密数据
            </summary>
            <param name="crypt">密文(base64格式）</param>
            <param name="xmlPublicKey">公钥</param>
            <param name="coding">编码格式</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.JsonUtil">
            <summary>
            Json处理工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.JsonUtil.nullSetting">
            <summary>
            Json空引用设置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.JsonUtil.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.JsonUtil.Serialize(System.Object,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="value"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.JsonUtil.SerializeWithOutNull(System.Object,System.Boolean)">
            <summary>
            序列化排除空值
            </summary>
            <param name="value">需要序列化的值</param>
            <param name="throwException">是否抛出异常，默认为是</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.JsonUtil.DeserializeObject``1(System.String)">
            <summary>
            反序列化字符串
            </summary>
            <param name="value">实体对象Json字符串</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.KDDESUtil">
            <summary>
            DES加密util类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.Encrypt(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            加密
            </summary>
            <param name="encryptString">待加密字符串</param>
            <param name="keyBytes">加密key值</param>
            <param name="encoding">加密使用编码</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptString">待加密字符串</param>
            <param name="sKey">加密key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.Decrypt(System.Byte[],System.Byte[],System.Text.Encoding)">
            <summary>
            解密
            </summary>
            <param name="decryptBytes">待解密数据</param>
            <param name="keyBytes">加密key值</param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="decryptString">待解密字符串,默认hex字符串</param>
            <param name="sKey">加密key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.ToHexString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.HexStringToArray(System.String)">
            <summary>
            
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.ToBase64(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.FromBase64String(System.String)">
            <summary>
            
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.De(System.Byte[])">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.GetProjectCertificate">
            <summary>
            获取所在工程的数字证书信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.ConfuseString(System.String,System.String)">
            <summary>
            自定义字典混淆字符串
            </summary>
            <param name="input"></param>
            <param name="version">混淆规则版本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.EncryptAppSecret(System.String)">
            <summary>
            加密AppSecret（第三方系统登录授权）
            </summary>
            <param name="appSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.DecryptAppSecret(System.String)">
            <summary>
            解密AppSecret（第三方系统登录授权）
            </summary>
            <param name="appSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.XOREncode(System.Byte[])">
            <summary>
            异或编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDDESUtil.ROT13Encode(System.String)">
            <summary>
            ROT13编码
            </summary>
            <param name="InputText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDFaceVerfiyRequest.MergeContent">
            <summary>
            合并请求数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDFaceVerfiyRequest.SetFieldValue(System.String,System.String)">
            <summary>
            设置表单数据字段
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDFaceVerfiyRequest.SetFieldValue(System.String,System.String,System.String,System.Byte[])">
            字段名
            字段值
            内容内型
            文件字节流
            
        </member>
        <member name="M:Kingdee.BOS.Util.KDFaceVerfiyRequest.Upload(System.String,System.String@)">
            <summary>
            上传
            </summary>
            <param name="requestUrl">请求url</param>
            <param name="responseText">响应</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.KDHMACSHA256SignUtil">
            <summary>
            HMACSHA256Sign 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDHMACSHA256SignUtil.HMACSHA256Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            hmacsha256 签名
            </summary>
            <param name="content"></param>
            <param name="secret"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.KDRASUtli">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.CreateKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="modulus"></param>
            <param name="publicExponent"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.RSAEncrypt(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="plainTextBArray"></param>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>   
            RAS加密   
            </summary>   
            <param name="encryptString">明文</param>   
            <param name="xmlPublicKey">
            公钥:
            <![CDATA[示例:<RSAKeyValue><Modulus>j5/oRkipKzDpHd0c7q9Jr/FaYjWgBdmMchJrxZdtRMO+aXkwVHpAyvp9RWyCUpGITp0p1wY</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>]]>
            </param>   
            <returns>密文</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>   
            RAS解密   
            </summary>   
            <param name="xmlPrivateKey">
            私钥:
            <![CDATA[示例:<RSAKeyValue><Modulus>j5/oRkipKzDpHd0c7q9Jr/FaYjWgBdmMchJrxZdtRMO+aXkwVHpAyvp9RWyCUpGITp0p1wY</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>]]>
            </param>   
            <param name="decryptString">密文</param>   
            <returns>明文</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.RSAKey">
            <summary>   
            产生公钥和私钥对   
            </summary>   
            <returns>string[] 0:私钥;1:公钥</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToJavaRSAPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->java  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToJavaRSAPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->java  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToRSAXmlPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，java->.net  
            </summary>  
            <param name="publicKey">java生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToRSAXmlPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，java->.net  
            </summary>  
            <param name="privateKey">java生成的RSA私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToPEMPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToPEMPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToXmlPublicKey(System.String)">
            <summary>  
            pem 公钥格式转换，.net
            </summary>  
            <param name="pemPublicKey"> pem 公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.ChangeToXmlPrivateKey(System.String)">
            <summary>  
            pem 私钥格式转换，.net
            </summary>  
            <param name="pemPrivateKey"> pem 私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.CreateRSAJavaConvert">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRASUtli.CreateRSAPemConvert">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.KDRSAUtli">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.CreateBounchCastleRSA">
            <summary>
            创建BounchCastle RSA
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.CreateKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="modulus"></param>
            <param name="publicExponent"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.RSAEncrypt(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="plainTextBArray"></param>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>   
            RAS加密   
            </summary>   
            <param name="encryptString">明文</param>   
            <param name="xmlPublicKey">
            公钥:
            <![CDATA[示例:<RSAKeyValue><Modulus>j5/oRkipKzDpHd0c7q9Jr/FaYjWgBdmMchJrxZdtRMO+aXkwVHpAyvp9RWyCUpGITp0p1wY</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>]]>
            </param>   
            <param name="encoding"></param>
            <returns>密文</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>   
            RAS解密   
            </summary>   
            <param name="xmlPrivateKey">
            私钥:
            <![CDATA[示例:<RSAKeyValue><Modulus>j5/oRkipKzDpHd0c7q9Jr/FaYjWgBdmMchJrxZdtRMO+aXkwVHpAyvp9RWyCUpGITp0p1wY</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>]]>
            </param>   
            <param name="decryptString">密文</param>   
            <param name="encoding"></param>
            <returns>明文</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.Sign(System.String,System.String,System.Text.Encoding)">
            <summary>   
            RAS 签名   
            </summary>   
            <param name="xmlPrivateKey">
            私钥:
            <![CDATA[示例:<RSAKeyValue><Modulus>j5/oRkipKzDpHd0c7q9Jr/FaYjWgBdmMchJrxZdtRMO+aXkwVHpAyvp9RWyCUpGITp0p1wY</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>]]>
            </param>   
            <param name="content">密文</param>   
            <param name="encoding"></param>
            <returns>明文</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.VerifySign(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA验签
            </summary>
            <param name="publicKey">RSA公钥</param>
            <param name="content">内容</param>
            <param name="signData">签名字段</param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.GetHash(System.String,System.Text.Encoding)">
            <summary>  
            获取Hash描述表  
            </summary>  
            <param name="strSource">待签名的字符串</param>  
            <param name="encoding">Hash描述</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.RSAKey">
            <summary>   
            产生公钥和私钥对   
            </summary>   
            <returns>string[] 0:私钥;1:公钥</returns>   
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToJavaRSAPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->java  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToJavaRSAPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->java  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToRSAXmlPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，java->.net  
            </summary>  
            <param name="publicKey">java生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToRSAXmlPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，java->.net  
            </summary>  
            <param name="privateKey">java生成的RSA私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToPEMPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToPEMPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToXmlPublicKey(System.String)">
            <summary>  
            pem 公钥格式转换，.net
            </summary>  
            <param name="pemPublicKey"> pem 公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.ChangeToXmlPrivateKey(System.String)">
            <summary>  
            pem 私钥格式转换，.net
            </summary>  
            <param name="pemPrivateKey"> pem 私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.CreateRSAJavaConvert">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.KDRSAUtli.CreateRSAPemConvert">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.IRSAJavaConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAJavaConvert.ChangeToJavaRSAPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->java  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAJavaConvert.ChangeToJavaRSAPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->java  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAJavaConvert.ChangeToRSAXmlPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，java->.net  
            </summary>  
            <param name="publicKey">java生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAJavaConvert.ChangeToRSAXmlPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，java->.net  
            </summary>  
            <param name="privateKey">java生成的RSA私钥</param>  
            <returns></returns>  
        </member>
        <member name="T:Kingdee.BOS.Util.IRSAPemConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAPemConvert.ChangeToPEMPrivateKey(System.String)">
            <summary>  
            RSA私钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPrivateKey">.net生成的私钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAPemConvert.ChangeToPEMPublicKey(System.String)">
            <summary>  
            RSA公钥格式转换，.net->pem  
            </summary>  
            <param name="xmlPublicKey">.net生成的公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAPemConvert.ChangeToXmlPublicKey(System.String)">
            <summary>  
            pem 公钥格式转换，.net
            </summary>  
            <param name="pemPublicKey"> pem 公钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Kingdee.BOS.Util.IRSAPemConvert.ChangeToXmlPrivateKey(System.String)">
            <summary>  
            pem 私钥格式转换，.net
            </summary>  
            <param name="pemPrivateKey"> pem 私钥</param>  
            <returns></returns>  
        </member>
        <member name="T:Kingdee.BOS.Util.KDSHA256">
            <summary>
            SHA256哈希
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.KDSHA256.Sha256Hex(System.String)">
            <summary>
            SHA256 转换为 Hex字符串（UTF8）
            </summary>
            <param name="data">源字符串</param>
            <returns>哈希Hex字符串</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.KDSHA256.Sha256Hex(System.String,System.Text.Encoding)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Util.KDSHA256.Sha256Hex(System.Byte[])”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Util.MonthUtil">
            <summary>
            月份转换工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.MonthUtil.ConvertToMonth(System.Int32)">
            <summary>
            从阿拉伯数字转月份
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.ProductVersionUtils">
            <summary>
            产品版本工具类。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ProductVersionUtils.GetProductVersion">
            <summary>
            获取产品版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ProductVersionUtils.GetProductVersionDesc">
            <summary>
            获取产品版本描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ProductVersionUtils.GetProductVersionDescFromFile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.RSAUtils">
            <summary>
            RSA帮助类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.RSAUtils.RSAKEY">
            <summary>
            KEY 结构体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.RSAUtils.RSAKEY.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.RSAUtils.RSAKEY.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.HotUpdateAttribute">
             <summary>
            启用热更新 
             </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.DisableHotUpdateAttribute">
             <summary>
            个别插件或Service热更新后不能正常工作，可使用此特性禁止热更新 
             </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.Tool.PlugInLoader">
            <summary>
            插件或Service热更新
            </summary>
        </member>
        <member name="M:Kingdee.BOS.VersonCompareUtil.CompareVersion(System.Version,System.Version,System.Boolean)">
            <summary>
            判断版本通用方法
            1安装包或是当前组件大于数据中心版本
            0相等
            -1安装包或是当前组件小于数据中心版本
            </summary>
            <param name="OutVersion"></param>
            <param name="DBVersion"></param>
            <param name="IsKingdee"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.DynamicObjectUtils">
            <summary>
            动态实体实例对象函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.DynamicObjectUtils.Contains(Kingdee.BOS.Orm.DataEntity.DynamicObject,System.String)">
            <summary>
            判断是否存在Key值
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EncryptDecryptUtil.Encode(System.Object)">
            <summary>
            加密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EncryptDecryptUtil.Decode(System.Object)">
            <summary>
            解密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EncryptDecryptUtil.Decode2(System.Object)">
            <summary>
            解密字符串类型
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EncryptDecryptUtil.HmacSHA256(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="message"></param>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EncryptDecryptUtil.AesEncrypt(System.String,System.String)">
            <summary>
            AES加密,采用Key值，然后SHA1对KEY随机生成AES新的秘钥方式加密-目前运用个人号对接
            </summary>
            <param name="str"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.MailUtils">
            <summary>
            邮件发送，目前只支持SMTP
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="dictStream">附件：名称、内容</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.String)">
            <summary>
            发送邮件。GMAIL要求指定支持SSL
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="port">端口</param>
            <param name="enableSSL">是否支持SSL</param>
            <param name="dictStream">附件：名称、内容</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.GetPasswordCipherText(Kingdee.BOS.Msg.EmailMessageInfo)">
            <summary>
            获取解密后的密码
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.GetDeliveryNotificationOptions(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            获取回执通知
            </summary>
            <param name="parametersJson"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.GetExchangeServiceUrl(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            获取Exchange服务地址
            </summary>
            <param name="parametersJson"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.GetExchangeTrace(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            开启Exchange日志
            </summary>
            <param name="parametersJson"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.GetSendMessagePlugIn(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            获取发送邮件插件
            </summary>
            <param name="parametersJson"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Util.NetworkConnector.maxRetryCount">
            <summary>
            最大尝试次数
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.NetworkConnector.checkInternal">
            <summary>
            重连间隔, 60min
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.NetworkConnector.CanConnect(System.Int32@,System.DateTime@,System.Int32)">
            <summary>
            校验是否能连接
            </summary>
            <param name="failCount"></param>
            <param name="lastFailTime"></param>
            <param name="retryCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.NetworkConnector.CheckConnect(System.String,System.Int32,System.Int32@,System.DateTime@,System.Int32)">
            <summary>
            尝试并检查连接
            </summary>
            <param name="usvr"></param>
            <param name="uport"></param>
            <param name="failCount"></param>
            <param name="lastFailTime"></param>
            <param name="retryCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.NetworkConnector.SetFail(System.Int32@,System.DateTime@)">
            <summary>
            设置失败
            </summary>
            <param name="failCount"></param>
            <param name="lastFailTime"></param>
        </member>
        <member name="F:Kingdee.BOS.Util.RegexUtil.FormatNumRegex">
            <summary>
            区域格式设置的数值格式（用于获取列表或者引出Excel取到数值部分，不能完全精确匹配数值）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsNumber(System.String)">
            <summary>
            判断输入的字符串只包含数字
            可以匹配整数和浮点数
            ^-?\d+$|^(-?\d+)(\.\d+)?$
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsEmail(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的Email地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsURL(System.String)">
            <summary>
            判断输入的字符串是否是一个超链接
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsHttpOrFtp(System.String)">
            <summary>
            判断输入的字符串是否是一个http地址或ftp地址
            </summary>
            <param name="input">输入的地址</param>
            <returns>是否为正确地址</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsIPv4(System.String)">
            <summary>
            判断输入的字符串是否是表示一个IP地址
            </summary>
            <param name="input">被比较的字符串</param>
            <returns>是IP地址则为True</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsMatch(System.String,System.String)">
            <summary>
            调用Regex中IsMatch函数实现一般的正则表达式匹配
            </summary>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="input">要搜索匹配项的字符串</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.GetAlertMsgKeyword(System.String)">
            <summary>
            获取双引号或者花括号内的关键字（用于提示支持提示信息中的关键字）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.TrimTailZero(System.String)">
            <summary>
            去尾零
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <returns>去掉尾零后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.RemoveControlChars(System.String)">
            <summary>
            去掉控制字符
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsSqlInSentence(System.String,System.String)">
            <summary>
            SQL语句中是否有where (not) in  
            </summary>
            <param name="input"></param>
            <param name="keyWord"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsIP(System.String)">
            <summary>
            检查IP地址格式
            </summary>
            <param name="ip">IP地址</param>
            <returns>是否是IP</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsMacAddress(System.String)">
            <summary>
            是否MacAddress
            </summary>
            <param name="macAddress">macAddress</param>
            <returns>是，否</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.GetSqlWhereFieldList(System.String)">
            <summary>
            获取sql where语句的字段列表
            </summary>
            <param name="whereSql"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Util.RegexUtil.SqlWhereWordList">
            <summary>
            where 语句可能的关键字
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.SequentialGuid">
            <summary>
            生成顺序的GUID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialGuid.NewGuid">
            <summary>
            生成顺序的GUID，并对取回的值做了高低位的互换，如果要做截断处理，不要调用此方法，请用NewNativeGuid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialGuid.NewNativeGuid">
            <summary>
            生成顺序的GUID，原生未进行高低位调整
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.SequentialObjectId">
            <summary>
            生成有序的字符串，作为数据内码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The value.</param>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_LessThan(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_LessThanOrEqual(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_Equality(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_Inequality(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_GreaterThanOrEqual(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.op_GreaterThan(Kingdee.BOS.Util.SequentialObjectId,Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.GenerateNewId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Pack(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Packs the components of an ObjectId into a byte array.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.TryParse(System.String,Kingdee.BOS.Util.SequentialObjectId@)">
            <summary>
            Tries to parse a string and create a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <param name="objectId">The new ObjectId.</param>
            <returns>True if the string was parsed successfully.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Unpack(System.Byte[],System.Int32@,System.Int32@,System.Int16@,System.Int32@)">
            <summary>
            Unpacks a byte array into the components of an ObjectId.
            </summary>
            <param name="bytes">A byte array.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.CompareTo(Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Equals(Kingdee.BOS.Util.SequentialObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Machine">
            <summary>
            Gets the machine.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Pid">
            <summary>
            Gets the PID.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.CreationTime">
            <summary>
            Gets the creation time (derived from the timestamp).
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Utils.TryParseHexString(System.String,System.Byte[]@)">
            <summary>
            Tries to parse a hex string to a byte array.
            </summary>
            <param name="s">The hex string.</param>
            <param name="bytes">A byte array.</param>
            <returns>True if the hex string was successfully parsed.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Utils.ParseHexString(System.String)">
            <summary>
            Tries to parse a hex string to a byte array.
            </summary>
            <param name="s">The hex string.</param>
            <param name="bytes">A byte array.</param>
            <returns>True if the hex string was successfully parsed.</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialObjectId.Utils.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Constants.DateTimeMaxValueMillisecondsSinceEpoch">
            <summary>
            Gets the number of milliseconds since the Unix epoch for DateTime.MaxValue.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Constants.DateTimeMinValueMillisecondsSinceEpoch">
            <summary>
            Gets the number of milliseconds since the Unix epoch for DateTime.MinValue.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.SequentialObjectId.Constants.UnixEpoch">
            <summary>
            Gets the Unix Epoch for BSON DateTimes (1970-01-01).
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.UpperStyle">
            <summary>
            金额大写样式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.ChineseRmbStyle">
            <summary>
            中文人民币样式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishDollarStyle">
            <summary>
            英文美元大写样式（美分）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishWithoutStyle">
            <summary>
            英文大写样式（美分）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.ChineseRmbZhengStyle">
            <summary>
            中文人民币带整样式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.ChineseRmbZhengYuanStyle">
            <summary>
            中文人民币带整样式（圆）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishUppercaseCentsStyle">
            <summary>
            英文大写样式（美分2）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishUppercaseDollarsStyle">
            <summary>
            英文大写样式（元）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishUppercasePointStyle">
            <summary>
            英文大写样式（美点）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.UpperStyle.EnglishUppercaseFractionStyle">
            <summary>
            英文大写样式（分数）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.FormatTranslateUtil">
            <summary>
            样式转换工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.FormatTranslateUtil.TransChineseRmb(System.String,System.String)">
            <summary>
            转换成中文人民币样式，例如：“1234.5678” 转换为 “壹仟贰佰叁拾肆元伍角柒分”
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SHA1Util.GetSignature(System.String[])">
            <summary>
            SHA1签名
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.WebActionUtils">
            <summary>
            创建客户端的指令
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateAction(System.String,Kingdee.BOS.JSON.JSONArray)">
            <summary>
            创建指令（数组）
            </summary>
            <param name="actName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateAction(System.String,Kingdee.BOS.JSON.JSONObject)">
            <summary>
            创建指令（单个）
            </summary>
            <param name="actName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateLogoutAction(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            创建注销指令
            </summary>
            <param name="otherAction">注销后指令</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateLogoutAction(Kingdee.BOS.JSON.JSONArray)">
            <summary>
            创建注销指令
            </summary>
            <param name="otherActions">注销后指令</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateWorkflowLogoutAction(Kingdee.BOS.JSON.JSONObject)">
            <summary>
            创建工作流注销指令
            </summary>
            <param name="otherActions"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebActionUtils.CreateBizTipsInfoAction(Kingdee.BOS.BizTipsInfo.IBizTipsInfo)">
            <summary>
            创建业务提示语指令
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.WebRequestHelper">
            <summary>
            All web requdst must create by Create
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.SetSecurityOnlyOneProtocol(System.Uri)">
            <summary>
            设置唯一一种安全策略
            </summary>
            <param name="uri">url地址</param>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.Create(System.String)">
            <summary>
            Create HttpWebRequest
            </summary>
            <param name="uri">
            e.g: http://localhost/K3Cloud
            or https://localhost/K3Cloud
            or http://localhost:8090/K3Cloud
            </param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.GetClientUserAgent">
            <summary>
            提取模拟的UserAgent，给到所有端统一调用，实现UserAgent的一致性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.Create(System.Uri)">
            <summary>
            Create HttpWebRequest
            </summary>
            <param name="uri">
            e.g: http://localhost/K3Cloud
            or https://localhost/K3Cloud
            or http://localhost:8090/K3Cloud
            </param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.CreateOnlyOneProtocol(System.Uri)">
            <summary>
            Create HttpWebRequest 只允许一种安全策略，默认为TLS12
            </summary>
            <param name="uri">
            e.g: http://localhost/K3Cloud
            or https://localhost/K3Cloud
            or http://localhost:8090/K3Cloud
            </param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.GetCerFile">
            <summary>
            交互环境:取当前目录或父组目录
            非交互环境:当前目录或App_Data目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.TryToGetCerFile(System.String)">
            <summary>
            优先： 机器名相同的证书
            其次： 通用证书 K3CloudCert.cer
            </summary>
            <param name="dirName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.ServerIsAvailable(System.String,System.Double)">
            <summary>
            快速检测服务器是否可用
            </summary>
            <param name="uri">
            e.g:
            1.http://www.ik3cloud.com/test.html
            2.https://www.ik3cloud.com/test.aspx
            3.http://www.ik3cloud.com:8021/test.aspx
            </param>
            <param name="timeout">最长检测等待时间，默认为1</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.PortIsOpen(System.String,System.Int32)">
            <summary>
            检查端口是否开启
            
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.WebRequestHelper.PortIsOpen(System.String,System.Int32,System.Double)">
            <summary>
            检查端口是否开启
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.WebRequestHelper.SecurityProtocolTypeEnum">
            <summary>
            Custom SecurityProtocolType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.WebRequestHelper.SecurityProtocolTypeEnum.Ssl3">
            <summary>
            SSL3
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.WebRequestHelper.SecurityProtocolTypeEnum.Tls">
            <summary>
            TLS 1.0
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.WebRequestHelper.SecurityProtocolTypeEnum.Tls11">
            <summary>
            TLS 1.1
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.WebRequestHelper.SecurityProtocolTypeEnum.Tls12">
            <summary>
            TLS 1.2
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.XmlUtils">
            <summary>
            XML读取工具类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlDocByReader(System.IO.StreamReader)">
            <summary>
            从reader转换成xmldoc安全方法
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlDocByStream(System.IO.Stream)">
            <summary>
            从数据流转换成xmldoc安全方法
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlDocByStr(System.String)">
            <summary>
            从文本转换成xmldoc安全方法
            </summary>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXPathDocByFile(System.String)">
            <summary>
            从文件转换成xpathdoc安全方法
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlDocByFile(System.String)">
            <summary>
            从文件转换成xmldoc安全方法
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlReaderByFile(System.String)">
            <summary>
            从文件转换成xmldoc安全方法
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.XmlUtils.LoadSecureXmlReaderByStream(System.IO.Stream)">
            <summary>
            从数据流转换成XmlReader安全方法
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.VersionInfor.DCVersion">
            <summary>
            数据中心版本
            </summary>
        </member>
        <member name="M:Kingdee.BOS.VersionInfor.VersionBase.GetProductEdition">
            <summary>
            获取当前环境产品的安装版本
            </summary>
            <returns>
            Enterprise:企业版（默认）
            Standard:标准版
            </returns>
        </member>
        <member name="M:Kingdee.BOS.VersionInfor.VersionBase.IsEduProductEdition">
            <summary>
            根据组件判断是否为教学版
            </summary>
            <returns>true:教学版</returns>
        </member>
        <member name="P:Kingdee.BOS.VersionInfor.VersionBase.Version">
            <summary>
            版本
            1. 通常格式为 1.0.0.1
            </summary>
        </member>
        <member name="P:Kingdee.BOS.VersionInfor.VersionBase.VersionDesc">
            <summary>
            版本描述
            </summary>
        </member>
        <member name="T:Kingdee.BOS.VersionInfor.Edition">
            <summary>
            产品版本
            </summary>  
        </member>
        <member name="F:Kingdee.BOS.VersionInfor.Edition.Enterprise">
            <summary>
            企业版
            </summary>
        </member>
        <member name="F:Kingdee.BOS.VersionInfor.Edition.Standard">
            <summary>
            标准版
            </summary>
        </member>
        <member name="T:Kingdee.BOS.VersionInfor.LocalEnvVersion">
            <summary>
            本地环境版本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.VersionInfor.ServerVersion">
            <summary>
            服务器版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.VersionInfor.ServerVersion.DCVer">
            <summary>
            数据中心版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.VersionInfor.ServerVersion.SiteVer">
            <summary>
            站点版本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.VersionInfor.SiteVersion">
            <summary>
            站点版本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WeiXinContext">
            <summary>
            微信上下文 
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WeiXinContext.AccType">
            <summary>
            公众号类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WeiXinContext.AppID">
            <summary>
            公众号ID，对于企业号，对应企业号的CorpID；对于服务号和订阅号，对应公众号的AppID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WeiXinContext.UserID">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WeiXinContext.OpenID">
            <summary>
            对于公众号会生成一个OpenID，对于企业号对应的是UserId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WeiXinContext.AgentID">
            <summary>
            企业应用ID，对应企业号应用才需要
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WeiXinAccountType">
            <summary>
            微信公众号类型 修改时需要同步修改 Kingdee.BOS.Core.Objects.WeiXin.WeiXinOfficialAccountType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WeiXinAccountType.Work">
            <summary>
            企业微信
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WeiXinAccountType.Enterprise">
            <summary>
            企业号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WeiXinAccountType.Service">
            <summary>
            服务号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WeiXinAccountType.Subscription">
            <summary>
            订阅号
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WeiXinAccountType.WX3rd">
            <summary>
            微信第三方登录
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WorkflowMember.IMember">
            <summary>
            参与人成员定义接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.IMember.MemberTypeId">
            <summary>
            成员类型内码，如User、Role等，以此与数据库中注册的成员类型匹配(T_WF_ParticipantType.FID)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.IMember.MemberTypeName(Kingdee.BOS.Context)">
            <summary>
            根据登陆语言，返回参与人类型名称，如"用户"，"角色"
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.IMember.Id">
            <summary>
            成员内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.IMember.Name">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.IMember.ParticipantTypeId">
            <summary>
            参与人类型ID，以此与数据库中注册的成员类型匹配(T_WF_ParticipantType.FID)
            与MemberTypeId的区别在于：MemberTypeId对于所有自定义参与人类型都是CustomParti，但是ParticipantTypeId会更详细区别各个自定义参与人类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1">
            <summary>
            消息发送信息(单据相关处理扩展)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMessageSendInfo`1">
            <summary>
            消息发送信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Receivers">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.SenderId">
            <summary>
            发件人ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.FFileUpdate">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1.KeyValue">
            <summary>
            业务数据主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1.ObjectTypeId">
            <summary>
            业务对象Id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMsgMember">
            <summary>
            收件人(用户、员工、部门、角色、组织等)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMsgUser">
            <summary>
            收件人(用户)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.WorkflowMessage">
            <summary>
            工作流消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.CommonMessage">
            <summary>
            普通消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.BusinessFlowMessage">
            <summary>
            业务流程普通消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.ReadStatus">
            <summary>
            阅读状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.ReadStatus.Unread">
            <summary>
            未读
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.ReadStatus.Readed">
            <summary>
            已读
            </summary>
        </member>
        <member name="M:Kingdee.BOS.OrganizationInfo.Clone">
            <summary>
            克隆一份
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.BOSExpression">
            <summary>
            BOS表达式定义。
            <remarks>
            <para>
            注意：此类型支持被二进制序列化和BOS序列化。
            但是由于LocaleValue无法支持XML序列化，因此此类型也无法支持。
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.op_Implicit(System.String)~Kingdee.BOS.Scripting.Expression">
            <summary>
            允许将string隐式转换为Expression
            </summary>
            <param name="expression">待转换的字符串</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.#ctor">
            <summary>
            构造一个BOS表达式对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.#ctor(System.String,Kingdee.BOS.Scripting.ExpressionKind,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据给定的表达式和字段映射表来构造一个BOS表达式对象
            </summary>
            <param name="expressionText">表达式</param>
            <param name="kind">指定表达式的代码类型</param>
            <param name="fieldMap">字段映射表</param>
            <param name="exprTextHadChecked">表达式已经校验过，无须重复校验</param>
        </member>
        <member name="F:Kingdee.BOS.Scripting.Expression._exprTextHadChecked">
            <summary>
            表达式已经检查过，可以直接使用：通过此选项，避免循环中计算公式时，重复检查表达式，提升性能
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.Expression.DisplayText">
            <summary>
            获取表达式的显示文本。类似于：
            [单据头.金额] > 200
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.MapField(System.String,System.String)">
            <summary>
            设置字段映射。用来将表达式中的字段翻译为显示文本或者真正的目标脚本
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            exp.MapField("name", "名称").MapField("age", "年龄")等等
            </para>
            </summary>
            <param name="fieldName">字段名</param>
            <param name="displayText">字段的显示名称</param>
            <returns>基于Fluent编程的快速接口</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.LookupVariables">
            <summary>
            查找出当前表达式包含的字段的集合。
            <para>
            【小提示】如果仅仅希望对一个单表达式做查找字段的动作。
            您也可以通过BOSExpression的静态方法：LookupVariables
            来达到同样的效果。
            </para>
            </summary>
            <returns>字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.LookupVariables(System.String)">
            <summary>
            查找出给定的表达式包含的字段的集合
            </summary>
            <param name="exp">待查找的表达式</param>
            <returns>字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.ProceedCompatiblity(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.Title">
            <summary>
            获取或者设置表达式的标题，可为空。
            用来给此表达式一个简短的业务描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.CodeKind">
            <summary>
            表达式的代码类型。默认为自动检测
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.ExpressionText">
            <summary>
            获取或者设置表达式的真正表达式文本。类似于：
            [BillNo.Amount] > 200
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.CompiledCode">
            <summary>
            在编译后会调用此方法缓存编译结果。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.ErrorTip">
            <summary>
            表达式解析出错提示
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.op_Implicit(System.String)~Kingdee.BOS.Scripting.BOSExpression">
            <summary>
            允许将string隐式转换为BOSExpression
            </summary>
            <param name="expression">待转换的字符串</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.#ctor">
            <summary>
            构造一个BOS表达式对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.#ctor(System.String,Kingdee.BOS.Scripting.ExpressionKind,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据给定的表达式和字段映射表来构造一个BOS表达式对象
            </summary>
            <param name="expressionText">表达式</param>
            <param name="fieldMap">字段映射表</param>
            <param name="exprTextHadChecked">表达式已经校验过，无须重复校验</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedCompatiblity(System.String)">
            <summary>
            对原生表达式进行兼容性处理。也可以重载此方法进行兼容性扩展
            </summary>
            <param name="expression">待处理的表达式</param>
            <returns> 处理后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedEqualCompatiblity(System.String@)">
            <summary>
            当代码为表达式类型时，可以将=替换为==
            </summary>
            <param name="expression">待分析的表达式</param>
            <returns>处理后的表达式</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedAtVariableCompatiblity(System.String@)">
            <summary>
            将代码中的@符号替换为系统变量
            </summary>
            <param name="expression">待分析的表达式</param>
            <returns>处理后的表达式</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.CompiledExpression">
            <summary>
            编译后的表达式结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration">
            <summary>
            表达式框架的配置类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration.SectionName">
            <summary>
            获取配置项的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration.Evaluators">
            <summary>
            获取可用的表达式解析器类型集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Configuration.ConfigurationInitializer.LoadConfig">
            <summary>
            加载配置
            </summary>
            <returns>返回BOS表达式框架配置</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.EvaluatorElement">
            <summary>
            扩展程序集配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.CacheCapacity">
            <summary>
            表达式缓存数量。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.MinCacheMinutes">
            <summary>
            表达式最小缓存时间（分钟）。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.MaxCacheMinutes">
            <summary>
            表达式最大缓存时间（分钟）。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.EvaluatorCollection">
            <summary>
            扩展程序集配置集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorPackage.Default">
            <summary>
            默认配置器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.DynamicText">
            <summary>
            动态文本的定义和解析。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.DynamicText.op_Implicit(System.String)~Kingdee.BOS.Scripting.DynamicText">
            <summary>
            允许将string隐式转换为DynamicText
            </summary>
            <param name="text">待转换的字符串</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.DynamicText.FormatValue(System.Object)">
            <summary>
            对变量值进行格式化后输出，增加动态文本的可读性
            </summary>
            <param name="variableValue"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.EvaluatorConfig">
            <summary>
            表达式解析器配置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.CreateInstance">
            <summary>
            获取一个解析器实例，如果这个实例已经存在，则将直接返回。
            </summary>
            <returns>解析器实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.CreateEvaluator">
            <summary>
            构造一个表达式解析器的实例
            </summary>
            <param name="path">基础函数库所在路径</param>
            <returns>返回表达式解析器的实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.LoadBaseFunctionScript(System.String)">
            <summary>
            加载基础函数库（BFL）定义脚本并返回内容
            </summary>
            <param name="path">脚本路径</param>
            <returns>返回脚本内容</returns>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.Name">
            <summary>
            配置名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.EvaluatorType">
            <summary>
            解析器的类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.BFL">
            <summary>
            解析器的基本函数库（可选）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.CacheCapacity">
            <summary>
            解析器中表达式的缓存容量（个数）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.MinCacheMinutes">
            <summary>
            解析器中表达式的最小缓存时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.MaxCacheMinutes">
            <summary>
            解析器中表达式的最大缓存时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.Default">
            <summary>
            默认配置项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionKind">
            <summary>
            表达式的代码类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.AutoDetect">
            <summary>
            在交给解析器执行的时候，由解析器自动检测
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.Script">
            <summary>
            脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionCache">
            <summary>
            表达式缓存获取类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionCache.maxAge">
            <summary>
            最大过期时间
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionCache.Get(Kingdee.BOS.Scripting.Expression)">
            <summary>
            获取表达式缓存
            </summary>
            <param name="key">表达式</param>
            <returns>编译结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionCache.Compile(Kingdee.BOS.Scripting.Expression)">
            <summary>
            python编译表达式
            </summary>
            <param name="expression">表达式</param>
            <returns>编译后的表达式结构</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.TryGetValueHandler">
            <summary>
            对一个对象进行 get 操作的委托定义。
            </summary>
            <param name="key">要获取的字段、属性、函数或变量的键值。</param>
            <param name="value">如果获取成功，返回其值。</param>
            <returns>如果在此对象中存在此字段、属性、函数或变量，返回true，否则返回false.</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.TrySetValueHandler">
            <summary>
            对一个对象进行 set 操作的委托定义。
            </summary>
            <param name="key">要设置的字段、属性、函数或变量的键值。</param>
            <param name="newValue">此字段、属性或变量新的值。</param>
            <returns>如果成功设置返回true，否则false</returns>
        </member>
        <member name="T:Kingdee.BOS.Formula.FormulaCustomParams">
            <summary>
            运行时客户化参数结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionFactory">
            <summary>
            表达式解析器构造工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Run(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            基于给定的上下文计算表达式的值。
            <remarks>将使用默认的解析器去解析</remarks>
            </summary>
            <param name="exp">表达式文本</param>
            <param name="ctx">表达式上下文</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Run``1(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            基于给定的上下文计算表达式的值。
            <remarks>将使用默认的解析器去解析</remarks>
            </summary> 
            <typeparam name="T">返回值的类型</typeparam>
            <param name="exp">表达式文本</param>
            <param name="ctx">表达式上下文</param>
            <returns>计算结果</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Scripting.ExpressionFactory.Create”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Create(System.String)">
            <summary>
            根据给定的组合实例名称创建一个表达式解析器
            </summary>
            <param name="instanceName">配置文件中定义了的组合实例名称</param>
            <returns>表达式解析器实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Initialize">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.IExpressionEvaluator">
            <summary>
            表达式解析器接口。 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.InitializeEvaluator(Kingdee.BOS.Scripting.EvaluatorConfig)">
            <summary>
            根据给定的配置项初始化表达式解析器，包括初始化基础函数库以及缓存等。
            </summary>
            <param name="config">配置项</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.Run(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            计算一条表达式，并返回计算的结果
            <para>
            注意：此表达式必须是带有返回值得单条表达式项，否则会抛出异常
            </para>
            </summary>
            <param name="expression">待执行的表达式</param>
            <param name="context">表达式执行所需的上下文</param>
            <returns>表达式计算结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.CheckGrammer(Kingdee.BOS.Scripting.Expression,System.String@)">
            <summary>
            验证表达式语法
            </summary>
            <param name="expression">待验证的表达式</param>
            <param name="errorMessages">错误信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.CheckGrammer(Kingdee.BOS.Scripting.Expression)">
            <summary>
            验证表达式语法，和少民讨论增加该接口
            </summary>
            <param name="expression">待验证的表达式</param>
            <returns>null:语法校验通过;no null:有语法错误</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.GetNameExpression(Kingdee.BOS.Scripting.Expression)">
            <summary>
            获取某个表达式中，出现的名称成员的结果。
            </summary>
            <param name="expression">要检查的表达式对象。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.GetFunctions(System.String)">
            <summary>
            获取某个表达式中，出现的名称成员的方法调用的结果。
            </summary>
            <param name="script">要检查的表达式文本。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.PyExpressionEvaluator">
            <summary>
            基于IronPython脚本引擎的表达式解析器实现
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.PyExpressionEvaluator.CompilePythonWithNoCache(Kingdee.BOS.Scripting.Expression,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            客户端编译（不读缓存）
            </summary>
            <param name="expression"></param>
            <param name="codeKind"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.PyExpressionEvaluator.GetNameExpression(Kingdee.BOS.Scripting.Expression)">
            <summary>
            获取某个表达式中，出现的名称成员的结果。
            </summary>
            <param name="expression">要检查的表达式对象。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetLongDate(System.Object[])">
            <summary>
            获取长日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetShortDate(System.Object[])">
            <summary>
            获取短 日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMaxDate(System.Object[])">
            <summary>
            获取最大日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMinDate(System.Object[])">
            <summary>
            获取最小日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetUser(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetServicetype(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMultiOrg(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetNullValue(System.Object[])">
            <summary>
            空变量
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.ServicesContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ServicesContainer.GetServiceChannel">
            <summary>
            获取所有服务的配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionAuthorize">
            <summary>
            授权相关错误，由于授权引发的错误 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionAuthorize.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            授权相关错误，由于授权引发的错误
            </summary>
            <param name="Code">错误编号</param>
            <param name="System">子系统</param>
            <param name="Module">模块</param>
            <param name="Function">功能点</param>
            <param name="Message">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.System">
            <summary>
            子系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.Function">
            <summary>
            所属功能
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionDatabase">
            <summary>
            数据库操作引发错误
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionDatabase.#ctor(System.String,System.String,System.String)">
            <summary>
            数据库操作引发错误
            </summary>
            <param name="sCode">错误代码</param>
            <param name="sSqlSource">SQL脚本</param>
            <param name="sMessage">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionDatabase.SqlSource">
            <summary>
            错误的SQL脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionValidate">
            <summary>
            验证信息类KDExceptionValidate
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionValidate.#ctor(System.String,System.String,System.String)">
            <summary>
            参数错误引发错误
            </summary>
            <param name="sCode">错误代码</param>
            <param name="sValidateString">错误的参数说明</param>
            <param name="sMessage">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionValidate.ValidateString">
            <summary>
            错误的参数说明
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Expression.ExpressionParser">
            描述: 表达式解析器
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.SplitVariables(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitVariables2(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitPropertise(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.isExpression(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.IsExpressionOrFunction(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitParameters(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitOperators(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitExtCompareOperator(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Expression.ExpressionParser.ParseFunction(System.String)">
            <summary>
            解析表达式中的函数名称, 参数列表
            </summary>
            <param name="expr">表达式</param>
            <returns>数组元素0为函数名称，其它元素为参数列表</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParsePropertyAfterFunction(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParseFunctions(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParseDateTimes(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.CastRegular(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.SplitBarVariables(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.IsBracesVariable(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.isTemporaryVariable(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Expression.SysFuncParser">
            <summary>
            该类放在此处不合适，后续需要重构。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetLongDate(System.Object[])">
            <summary>
            获取长日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetShortDate(System.Object[])">
            <summary>
            获取短 日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetMaxDate(System.Object[])">
            <summary>
            获取最大日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetMinDate(System.Object[])">
            <summary>
            获取最小日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetUser(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetNullValue(System.Object[])">
            <summary>
            空变量
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Globalization.IStringCultureUtil">
            <summary>
            主要功能: 
                1 对于System.Globalization.CompareInfo的封装
                2 对于字符串转化为数字等类型的判断的封装
                3 对于字符串数据相关的封装
                4 对于字符串大小写的封装
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Globalization.CultureManager">
            <summary>
            语言信息管理类,主要为国际化业务对象所调用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.UserContext">
            <summary>
            用户上下文,主要使用里面的UserID\Locale
            此处需要作废
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.CurrentCulture">
            <summary>
            记录当前用户的当前语言信息(用户级)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.CurrentLogCulture">
            <summary>
            记录日志的CultureInfo(系统级):默认为中文
            配置信息记录在Web.config中appsetting下logcultureinfo
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.JSONKEYS">
            <summary>
            Json数据包中的通用键值注册表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.XType">
            <summary>
            控件类型 xtype
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Key">
            <summary>
            小写 key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KEY">
            <summary>
            首字大写 Key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Value">
            <summary>
            值 发送"value"
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Title">
            <summary>
            字段 标题
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Store">
            <summary>
            待选存储
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.ShowEditButton">
            <summary>
            显示编辑按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TextEditable">
            <summary>
            文本可编辑
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.MustInput">
            <summary>
            必录
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Locals">
            <summary>
            设置多地区语种支持数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridColIndex">
            <summary>
            表格列索引 colIndex
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridColHidden">
            <summary>
            表格列隐藏hidden
            表格修改为可见属性了，这里统一调整
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridType">
            <summary>
            表格类型 GridType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridType">
            <summary>
            树表控件类型 kdtreegrid
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridKeyFieldName">
            <summary>
            树表控件主键字段名 primaryKey
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridParentFieldName">
            <summary>
            树表控件父级组件字段名 parentFieldName
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridRowTypeFieldName">
            <summary>
            树表控件行类型字段名 rowTypeFieldName
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridImageFieldName">
            <summary>
            树表控件节点图片字段名 imageFieldName
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys">
            <summary>
            甘特图表格对应的键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.dataIndex">
            <summary>
            列名称键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.header">
            <summary>
            列标题键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.colmap">
            <summary>
            甘特图表格内置列映射配置信息键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.propertyName">
            <summary>
            甘特图内置属性名键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.mapColumnName">
            <summary>
            甘特图内置属性对应的表格列名称键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_TaskName">
            <summary>
            内置列标识：任务名称
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_StartTime">
            <summary>
            内置列标识：开始时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_FinishTime">
            <summary>
            内置列标识：结束时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_IsMileStone">
            <summary>
            内置列标识：是否关键任务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Completion">
            <summary>
            内置列标识：进度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Predecessors">
            <summary>
            内置列标识：前置任务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Assignments">
            <summary>
            内置列标识：关联资源
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObject.GetValue``1(System.String,``0)">
            <summary>
            从JObject获取一个属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobj"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObject.TryGetValue(System.String,System.Object@,System.Boolean)">
            <summary>
            取数并移除item
            </summary>
            <param name="key"></param>
            <param name="v"></param>
            <param name="removeItem"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObject.TryGetValue``1(System.String,``0,``0@)">
            <summary>
            从JSONObject中尝试获取一个属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="retValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObject.ToHash256SignatureString">
            <summary>
            生成hash256签名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.LanguageInfo">
            <summary>
            系统支持的语言信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LanguageInfo.InvariantLocaleId">
            <summary>
            中性语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LocaleValue">
            <summary>
            多语言记录类，注意在BOS的商业处理中使用了其派生类，而不是当前类。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LocaleValue.langCapacity">
            <summary>
            目前3中语言
            </summary>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.SetByLocaleId(System.Int32,System.String)">
            <summary>
            设置指定LocaleId的值
            </summary>
            <param name="localeId">LocaleId</param>
            <param name="value">值</param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.TryGetValue(System.Int32,System.String@)">
            <summary>
            检测特定LCID的语言设置，注意此函数在检测到此LCID未填写内容时，不会自动返回中性语言的数据
            </summary>
            <param name="localeId">LCID值</param>
            <param name="value">如果此LCID下包含数据，将返回此字符串信息，否则返回null</param>
            <returns>此LCID下是否包含了字符串信息，如果有，返回true</returns>
            <remarks>
            注意此方法被BOS的派生类OrmLocaleValue重载。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ToString">
            <summary>
            转换成字符串的表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ToString(System.Globalization.CultureInfo)">
            <summary>
            根据时区信息返回字符串的形式。
            </summary>
            <param name="culture">当前时区信息</param>
            <returns>字符串的形式。</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.op_Implicit(Kingdee.BOS.LocaleValue)~System.String">
            <summary>
            支持LocaleValue转换为字符串。
            </summary>
            <param name="localeValue">一个LocaleValue对象</param>
            <returns>本地时区对应的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.op_Implicit(Kingdee.BOS.LocaleValue)~System.Int32">
            <summary>
            支持LocaleValue转换为int。
            </summary>
            <param name="localeValue">一个LocaleValue对象</param>
            <returns>本地时区对应的int值</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Merger(Kingdee.BOS.LocaleValue,System.String,System.Boolean)">
            <summary>
            传入一个localValue，进行合并处理
            </summary>
            <param name="localeValue"></param>
            <param name="sp"></param>
            <param name="bAfter"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Merger(System.String,System.String,System.Boolean)">
            <summary>
            传入一个value，进行合并处理
            </summary>
            <param name="sValue"></param>
            <param name="sp"></param>
            <param name="bAfter"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.GetEnumerator">
            <summary>
            返回所有有效的区域字符
            </summary>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Equals(System.Object)">
            <summary>
            判断两个对象是否相等
            </summary>
            <param name="obj">另外一个比较的对象</param>
            <returns>如果另外一个对象也是LocaleValue且内部存储的数据相等，将返回true</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.GetHashCode">
            <summary>
            返回重新计算的Hashcode值，他将所有的语言数据进行比对。
            </summary>
            <returns>新的Hash值</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ParseFromString(System.String,System.Globalization.CultureInfo)">
            <summary>
            解析字符串，将其数据附加到当前实例。
            </summary>
            <param name="source">字符串源对象</param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            从一个字符串转换成LocaleValue对象。
            </summary>
            <param name="source">字符串源</param>
            <param name="culture">进行转换时对应的时区</param>
            <returns>新的LocaleValue对象。</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
            <summary>
            当插入一笔多语言数据时调用此方法。注意：ORMLocaleValue重载了此方法。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Clear">
            <summary>
            当清除多语言数据时调用此方法。注意：ORMLocaleValue重载了此方法。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LocaleValue.Item(System.Int32)">
            <summary>
            通过给定区域编号，获取此区域的文本，如果函数在检测到此LCID未填写内容时，自动返回中性语言的数据
            </summary>
            <param name="localeId">区域编号</param>
            <returns>此区域的文本，如果未设置，自动返回中性语言的数据。</returns>
            <remarks>
            简体中文是默认的语言，因此如果填充简体中文（2052）的数据时，将自动填充到中性语言上。
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.LocaleValueConverter">
            <summary>
            LocaleValue的对象转换器，支持与字符串的互相转换。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.LogFactory.GetLog(System.Type)">
            <summary>
            (废弃无用的)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Rpc.FaultContractExceptionHandler">
            <summary>
            通过我们预定义好的契约处理服务器端抛出来的异常
            1 进行的我们规定的异常转换
            2 对于异常的扩展性进行支持，使开发人员感觉不到WCF的存在
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.attributes">
            <summary>
            异常属性对应关系
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.faultContractType">
            <summary>
            服务器端通用异常对象契约
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.exceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="faultContractType">服务器端通用异常对象契约</param>
            <param name="attributes">异常转换对应信息</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.#ctor(System.Type,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="faultContractType">服务器端通用异常对象契约</param>
            <param name="exceptionMessage">系统自定义固定的异常信息替换掉原有的异常的Message信息</param>
            <param name="attributes">异常属性对应关系</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            处理异常主函数
            按照我们的要求对于特定的异常（所有继承自KDException的类进行转换处理，其它的都认为是Unhandle Exception）
            </summary>
            <param name="exception">业务组件在服务器端抛出的错误.</param>
            <param name="handlingInstanceId">系统自动为该错误生成的"{Guid}".</param>
            <returns>An instance of <see cref="T:Kingdee.BOS.Rpc.FaultContractWrapperException"/>按照预定义的映射关系，
            将服务器端抛出来的错误转换成为预定义的作为服务器端TDetail的返回的FaultContractWrapperException</returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceCacheAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceCacheBehavior">
            <summary>
            实现IOperationBehavior，在客户端和服务器端进行方法的拦截和处理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceCacheOperataionInvoker">
            <summary>
            操作行为的侵入
            可以支持缓存和性能探针的接口
            1 基于方法级缓存获取设置
            2 RPC中基于方法级的性能探针的处理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcServiceCacheOperataionInvoker.InvokeName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExceptionShieldingErrorHandler"/> class.
            </summary>
            <param name="exceptionPolicyName">Name of the exception policy.</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.HandleError(System.Exception)">
            <summary>
            处理错误，如果返回true，系统将不会继续处理
            在异常返回给客户端之后被调用
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            由我们对于错误进行自定义处理Provides the fault.
            在异常发生后，异常信息返回前被调用
            </summary>
            <param name="error">The error.</param>
            <param name="version">The version.</param>
            <param name="fault">The fault.</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.BuildMessageFault(System.Exception,System.Guid)">
            <summary>
            Build the shielded MessageFault.
            </summary>
            <param name="serverException"></param>
            <param name="handlingInstanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.BuildMessageFault(Kingdee.BOS.Rpc.FaultContractWrapperException)">
            <summary>
            Build the unshielded MessageFault.
            </summary>
            <param name="faultContractWrapper"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcServiceErrorHandler.ExceptionPolicyName">
            <summary>
            Gets or sets the name of the exception policy.
            </summary>
            <value>The name of the exception policy.</value>
        </member>
        <member name="M:Kingdee.BOS.Rpc.ICommunication.CreateObject``1(System.String)">
            <summary>
            远程过程方法调用
            </summary>
            <param name="stypename">对象类型描述字符串："classname, assemblyname"</param>
            <param name="methodname">方法名称</param>
            <param name="pparams">参数列表</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.LocalAccess.CreateObject``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteAccess.CreateObject``1(System.String)">
            <summary>
            绑定方式、远程服务器地址均是配置完成，由外部配置工具完成
            支持不同方式编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName"></param>
            <param name="oParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteAccess.CloseObject``1(``0)">
            <summary>
            关闭WCF通讯对象，此处必须和CreateObject成对调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="closeOjbect"></param>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteAccess.BindingType">
            <summary>
            远程调用绑定方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteAccess.ServerUrl">
            <summary>
            服务器地址127.0.0.1
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Rpc.RemoteCommunication”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Rpc.RemoteCommunication.#ctor(System.String)">
            <summary>
            构造函数，主要传入APP的服务地址
            </summary>
            <param name="ServerUrl"></param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteCommunication.CreateObject``1(System.String)">
            <summary>
            建立远程代理对象，必须和CloseObject成对
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName">Kingdee.,Services</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteCommunication.dctComms">
            <summary>
            用于通讯信道的缓存，以url为Key，存入对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceErrorUtility">
            <summary>
            远程调用发生错误时的处理方法：记录日志、多语言处理、动态生成GUID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcSvcConst">
            <summary>
            Rpc远程调用服务地址配置类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcSvcConst.#ctor">
            <summary>
            构造函数，从配置文件中获取服务器端类与远程调用地址之间的关系，构造成字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcSvcConst.GetSvcByKey(System.String)">
            <summary>
            根据配置生成RPC调用地址
            </summary>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcSvcConst.SvcConstRelativeCollect">
            <summary>
            远程调用对应服务的相对地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcSvcConst.SvcConstValueCollect">
            <summary>
            远程调用对应服务描述的详细值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.ServiceLocator.getCurrentServiceURL">
            返回当前账套的RPC服务地址
            @return
        </member>
        <member name="M:Kingdee.BOS.Rpc.ServiceLocator.setCurrentServiceURL(System.String)">
            设置当前账套的RPC服务地址
            @param url
        </member>
        <member name="T:Kingdee.BOS.SqlParam">
            <summary>
            Sql参数对象
            </summary>
            <remarks>
            针对封装的KSQL参数化数据访问接口定义的参数对象。包含参数名称、类型、值、输入输出属性。
            </remarks>
            <example>
            示例显示如何使用SqlParam
            <code>
            <![CDATA[
            DBService dbService = new DBService();
            List<SqlParam> list = new List<SqlParam>();
            list.Add( new SqlParam("x", DbType.Xml, xml));
            dbService.Execute(oractx, "UPDATE t_meta_objecttype SET FKERNELXML = @x where FID = 'BD_FLEXVALUESET';", list);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor">
            <summary>
            数据访问参数对象默认构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,Kingdee.BOS.KDDbType,System.Object)">
            <summary>
            数据访问参数对象构造函数
            </summary>
            <param name="name">参数名。（在SQL语句中请使用@标识参数名）</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,Kingdee.BOS.KDDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            数据访问参数对象构造函数
            </summary>
            <param name="name">参数名。（在SQL语句中请使用@标识参数名）</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">值。</param>
            <param name="direction">参数输入输出类型。</param>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,System.Data.DbType,System.Object)">
            <summary>
            请使用SqlParam(string name, KDDbType dbType, object value) 方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            请使用SqlParam(string name, KDDbType dbType, object value, ParameterDirection direction) 方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.ConvertParamName(Kingdee.BOS.DatabaseType)">
            <summary>
            将参数化查询的的参数名进行转换
                对于Oracle数据库如果是@FName将转换为:FName
            </summary>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.CreateUdtParamter(System.String,System.Data.DbType,System.Object)">
            <summary>
            根据DbType创建Udt类型的SqlParam
            </summary>
            <param name="dbType">数据类型</param>
            <param name="value">值（具体的类型数组，如int[]）</param>
            <param name="paramterName">参数名</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.SqlParam.DBType">
            <summary>
            即将废弃，请使用CustemDbType
            </summary>
        </member>
        <member name="P:Kingdee.BOS.SqlParam.Size">
            <summary>
            输出的字符型参数最大长度；输入参数请不要设置此属性
            </summary>
            <remarks>
            输出字符串参数，如果不设置Size，默认为0，只会输出一位长度
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.SqlParam.EnableEncrpt">
            <summary>
            启用加密
            </summary>
        </member>
        <member name="P:Kingdee.BOS.SqlParam.EncryptType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.SqlStorageType">
            <summary>
            字段数据库存储类型
            </summary>
            <remarks>
            SELECT * FROM systypes
            </remarks>
        </member>
        <member name="F:Kingdee.BOS.SqlStorageType.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.IllegalSqlCheckType">
            <summary>
            非法SQL关键字检查类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.IllegalSqlCheckType.All">
            <summary>
            启用所有规则检查
            </summary>
        </member>
        <member name="F:Kingdee.BOS.IllegalSqlCheckType.Default">
            <summary>
            默认规则
            </summary>
        </member>
        <member name="F:Kingdee.BOS.IllegalSqlCheckType.CloudErp">
            <summary>
            云Erp
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Switches">
            <summary>
            系统内置的调试开关。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Switches.DisableCache">
            <summary>
            是否屏蔽缓存,当进行内存分析时，屏蔽缓存有助于分析内存的使用。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.AssemblyUtils">
            <summary>
            动态加载与卸载程序集常用的方法
            add by linus wang at 2010-04-22
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.AssemblyUtils.LoadAssembly(System.String,System.Boolean)">
            <summary>
            加载程序集
            </summary>
            <param name="sFilePath"></param>
            <param name="bRecusive">是否独占式访问，若文件较大，则建议使用独占式访问</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.CacheUtil">
            <summary>
            涉及到缓存的方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetCache(System.String,System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetCache(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取缓存对象集合
            </summary>
            <param name="area"></param>
            <param name="region"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.SetCache(System.String,System.String,System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <param name="value">缓存对象</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.SetCache(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <param name="value">缓存对象</param>
            <param name="timeSpan">缓存超时设置</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearCache(System.String,System.String)">
            <summary>
            清除区域缓存
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearCache(System.String,System.String,System.String)">
            <summary>
            清除某项缓存
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache区域</param>
            <param name="key">项标识</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetRCache(System.String,System.String,System.String)">
            <summary>
            获取Redis缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetRCache(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取Redis缓存对象集合
            </summary>
            <param name="area"></param>
            <param name="region"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.SetRCache(System.String,System.String,System.String,System.Object)">
            <summary>
            设置Redis缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <param name="value">缓存对象</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.SetRCache(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            设置Redis缓存对象
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <param name="value">缓存对象</param>
            <param name="timeSpan">缓存超时设置</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearRCache(System.String,System.String)">
            <summary>
            清除Redis区域缓存
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache标识</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearRCache(System.String,System.String,System.String)">
            <summary>
            清除某项缓存
            </summary>
            <param name="area">ctx.GetAreaCacheKey()</param>
            <param name="region">固定Cache区域</param>
            <param name="key">项标识</param>
        </member>
        <member name="T:Kingdee.BOS.Util.CalendarUtils">
            <summary>
            和日历相关的功能函数判断：如闰年、闰月、闰天
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.GetWeekOfMonth(System.DateTime)">
            <summary>
            获取当天在本月的第几周
            </summary>
            <param name="time">当前时间</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.IsLeapMonth(System.Int32,System.Int32)">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.IsLeapYear(System.Int32)">
            <summary>
            是否闰年
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.GetTypeKeyConfig(System.String)">
            <summary>
            获取配置文件中某个节点的值
            </summary>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.GetCurrentStackInfo(System.Int32)">
            <summary>
            获取调调用堆栈信息
            </summary>
            <param name="topLevel">最大层数，默认100</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.UpdateAppConfig(System.String,System.String,System.String)">
            <summary>
            更新指定config文件的指定值
            </summary>
            <param name="fileName"></param>
            <param name="newKey"></param>
            <param name="newValue"></param>
        </member>
        <member name="F:Kingdee.BOS.Util.CommonUtil.serviceClientSetting">
            <summary>
            缓存ServiceClientSetting
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.UpdateAppConfig(System.String,System.String)">
            <summary>
            在＊.exe.config文件中appSettings配置节增加一对键、值对
            </summary>
            <param name="newKey"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.LoadServiceClientSetting">
            <summary>
            从缓存中读取ServiceClientSetting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.GetClientIP">
            <summary>
            获取客户端IP地址
            </summary>
            <returns>若失败则返回回送地址</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.StartBrowser(System.String)">
            <summary>
            自动选择浏览器打开URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Kingdee.BOS.Util.ServiceClientSetting">
            <summary>
            服务器的客户端配置信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.LoadSetting(System.Boolean)">
            <summary>
            
            </summary>
            <param name="relative"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.GetAppExePath">
            <summary>
            获得应用程序路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.Save">
            <summary>
            保存登陆信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.ServiceClientSetting.ConfigRootFolder">
            <summary>
            本地配置根目录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.ServiceClientSetting.AppItems">
            <summary>
            保存键/值对
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.KeyValueData">
            <summary>
            其他可扩展项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.AppItem">
            <summary>
            应用程序项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.KDServiceSite">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.KeyValues">
            <summary>
            保存键/值对
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.AppPath">
            <summary>
            应用程序路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.TenanID">
            <summary>
            多租户ID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.ConfidentialDataSecurityUtil">
            <summary>
            密码加密算法类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CurrentVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.actions">
            <summary>
            密码算法的表函数,对密码进行版本管理。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.IsCurVerConfidentialDataSecurityKey(System.String)">
            <summary>
            是否是最新版的加密私钥
            </summary>
            <param name="confidentialDataSecurityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenSecurityPW(System.String,System.String)">
            <summary>
            区别版本的密码安全算法
            </summary>
            <param name="passWord">密码明文</param>
            <param name="salt">私钥，请务必用ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey生成</param>
            <returns>加密的密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenVSecurityPW(System.String,System.String)">
            <summary>
            区别版本的密码安全算法
            </summary>
            <param name="passWord">密码明文</param>
            <param name="salt">私钥，请务必用ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey生成</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CombineSecurityPW(System.Byte[],System.Byte[])">
            <summary>
            为密码加入Salt
            算法：把两个数据的字节一对一交叉嵌入进去，再把较长的数据剩余部分往后面拼接；
            </summary>
            <param name="b1">较短的数组</param>
            <param name="b2">较长的数组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenSecuritySHA256Password_V3(System.String,System.String)">
            <summary>
            生成SHA256哈希密码
            </summary>
            <param name="passWord">密码</param>
            <param name="salt">盐</param>
            <returns>哈希密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenSecurityPW_V0(System.String,System.String)">
            <summary>
            新的密码加密算法。
            </summary>
            <param name="passWord">密码</param>
            <param name="salt">调料</param>
            <returns>加密的密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.HashString(System.String)">
            <summary>
            为了保证兼容性/在登入时使用。
            </summary>
            <param name="str">输入的值</param>
            <returns>Hash</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CipherText(System.String)">
            <summary>
            对字符串进行加密
            </summary>
            <param name="proclaimText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.DoProclaimText(System.String)">
            <summary>
            对字符串进行解密
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CipherDataCenterText(Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo,System.Boolean)">
            <summary>
            对数据中心进行加密
            </summary>
            <param name="dataCenterInfo"></param>
        </member>
        <member name="P:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.CultureInfoUtils">
            <summary>
            主要是负责国际化相关的功能类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetOSSelectLanguageLocaleCode">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            string strLocaleCode = CultureInfoUtils.GetOSSelectLanguageLocaleCode()
            </example>
            <returns>LocaleCode : 例如 "zh-CN","en-US"</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetOSSelectLanguageLocaleID">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            int iLangID = GetSystemDefaultLangID();
            </example>
            <returns>LocaleID : 例如 "2052","1033"</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.SetCurrentLanguage(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置当前线程的语言
            </summary>
            <param name="language">zh-CN,zh-HK,en-US</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.SetCurrentLanguage(Kingdee.BOS.Context)">
            <summary>
            根据当前登陆上下文设置当前语言, 登陆用户调用这个方法
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetCulture(System.Int32)">
            <summary>
            获取指定语言的文化信息
            </summary>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetRunCulture(System.Int32)">
            <summary>
            获取指定后台系统运行语言的文化信息
            number format 格式：123,4.00
            </summary>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetMutiLanguageName(System.String,System.String)">
            <summary>
            按照指定的规则，获得指定的多语言名称
            </summary>
            <param name="sName"></param>
            <param name="LanguageID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetUserLangSilverlight(System.String)">
            <summary>
            获取客户端控件语言包
            </summary>
            <param name="localID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetRegionInfo(Kingdee.BOS.Region)">
            <summary>
            根据当前的时区，返回时区信息给客户端用
            </summary>
            <param name="curTimeZone">当前时区</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetLanguagsPackage(Kingdee.BOS.Context)">
            <summary>
            依据上下文获取语言列表数据包（非资源包）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Util.DateTimeFormatUtils”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.ToString(System.DateTime)">
            <summary>
            采用CultureInfo中标准日期格式进行输出
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.DateTimeFormatUtils.ToString(System.DateTime,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.ToKSQlFormat(System.DateTime)">
            <summary>
            输出ksql日期格式
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.IsValidDate(System.DateTime)">
            <summary>
            判断是否是真正的日期
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.BeginDateTimeOfDay(System.DateTime)">
            <summary>
            当天第一分钟  "2010-01-01 00:00:00"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.EndDateTimeOfDay(System.DateTime)">
            <summary>
            当天最后一分钟  "2010-01-01 23:59:59"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.GetTimestamp(System.DateTime)">
            <summary>
            (Unix时间戳,定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetString(System.Data.IDataReader,System.String)">
            <summary>
            获取string字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>string</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetStringIntern(System.Data.IDataReader,System.String)">
            <summary>
            获取DBReader的字符串列的值，并加入字符串池中
            </summary>
            <param name="dr">DBReader</param>
            <param name="fieldName">字符串列名称</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetInt(System.Data.IDataReader,System.String)">
            <summary>
            获取int字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>int</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetIntCompatibleNull(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            获取int字段值，兼容Null值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <param name="NullConvert">如果字段为null,强制返回的值</param>
            <returns>int字段值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            获取bool字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>bool</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            获取dateTime字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>dateTime</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetIntEx(System.Data.IDataReader,System.String)">
            <summary>
            获取int结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>int结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetBooleanEx(System.Data.IDataReader,System.String)">
            <summary>
            获取bool结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>bool的结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetDateTimeEx(System.Data.IDataReader,System.String)">
            <summary>
            获取dateTime结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>dateTime结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.String)">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="fieldName">字段的名称</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.String,System.Func{System.Object,``0})">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="fieldName">字段的名称</param>
            <param name="convertFunc">数据的强制转换函数</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="index">字段的所在的索引</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.Int32,System.Func{System.Object,``0})">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="index">字段的所在的索引</param>
            <param name="convertFunc">数据的强制转换函数</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ConvertTo``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            转换从数据库读取出来的数据到指定的类型
            </summary>
            <typeparam name="T">希望转换的数据类型</typeparam>
            <param name="value">希望转换的原始数据。</param>
            <param name="convertFunc">允许指定一个转换器函数，如果未指定，系统将试图寻找默认的转换器。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ConvertTo``1(System.Object,System.Func{System.Object,``0},``0)">
            <summary>
            转换从数据库读取出来的数据到指定的类型
            </summary>
            <typeparam name="T">希望转换的数据类型</typeparam>
            <param name="value">希望转换的原始数据。</param>
            <param name="convertFunc">允许指定一个转换器函数，如果未指定，系统将试图寻找默认的转换器。</param>
            <param name="defaultValue">如果原始数据是DbNull或null时，应该返回的值。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.CreateDefaultConvertFunc">
            <summary>
            创建转换器字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ToGuid(System.Object)">
            <summary>
            转换对象的值到Guid
            </summary>
            <param name="value">要转换的值，支持byte、string转换到guid</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ToBoolean(System.Object)">
            <summary>
            主要是处理 0,1 这种表示形式。
            </summary>
            <param name="value">需要处理对象</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.AddConvertFunc``1(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Func{System.Object,``0})">
            <summary>
            将指定类型转换器压入字典中
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="funcs">转换器</param>
            <param name="func">转换器集合</param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.DBReaderUtils.GetDefaultConvertFunc``1”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Util.Extentions">
            <summary>
            通用转换工具类,扩展类型方法的公用函数集，使用Using Kingdee.BOS.Util 即可。yaojunsong
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToMD5String(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetMD5String(System.String)">
            <summary>
            将字符串用MD5进行HASH。只取29位
            </summary>
            <param name="strtmp"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.Get32MD5String(System.String)">
            <summary>
            将字符串用MD5进行HASH。32位小写
            </summary>
            <param name="strtmp"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUtf8String(System.Byte[])">
            <summary>
            
            </summary>
            <param name="binBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.EncodingString(System.String)">
            <summary> 
            将字符串使用base64算法加密 
            </summary>
            <param name="text">待加密的字符串</param>
            <returns>编码后的文本字符串</returns> 
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.EncodingString(System.String,System.Text.Encoding)">
            <summary> 
            将字符串使用base64算法加密 
            </summary>
            <param name="text">待加密的字符串</param>
            <param name="encoding">字符集对象</param> 
            <returns>编码后的文本字符串</returns> 
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.DecodingString(System.String)">
            <summary> 
            从base64编码的字符串中还原字符串
            </summary> 
            <param name="base64str">Base64加密后的字符串</param> 
            <returns>还原后的文本字符串</returns> 
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.DecodingString(System.String,System.Text.Encoding)">
            <summary> 
            从base64编码的字符串中还原字符串
            </summary> 
            <param name="base64str">Base64加密后的字符串</param> 
            <param name="encoding">字符集对象</param> 
            <returns>还原后的文本字符串</returns> 
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToDistinctArray(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            去重并转换为数组
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUtf8Bytes(System.String)">
            <summary>
            
            </summary>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToBase64(System.Byte[])">
            <summary>
            将Byte[]转换成Base64编码文本
            </summary>
            <param name="binBuffer">Byte[]</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.Base64ToBytes(System.String)">
            <summary>
            将Base64编码文本转换成Byte[]
            </summary>
            <param name="base64">Base64编码文本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.IsBase64Formatted(System.String)">
            <summary>
            判断一个字符串是否为base64加密过的
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.NullValue(System.String,System.String)">
            <summary>
            判断字符串是否为空，为空取默认值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUnsigned(System.String)">
            <summary>
            解密GetSigned的字符串
            </summary>
            <param name="strSigned">密文字符串</param>
            <returns>明文base64字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetSigned(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="strSigned">明文base64字符串</param>
            <returns>加密字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUnGEF2(System.String)">
            <summary>
             解密GEF2的字符串
            </summary>
            <param name="strGEF2">GEF2的字符串</param>
            <returns>GEF2解密后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.EqualXmlString(System.String,System.String)">
            <summary>
            对比Xml字符串是否相同
            </summary>
            <param name="sourceXml">源Xml字符串</param>
            <param name="otherXml">其它Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToFormattedXmlString(System.String)">
            <summary>
            格式化Xml字符串
            </summary>
            <param name="unformattedXmlString">未格式化Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToUnixTimeMilliseconds(System.DateTimeOffset)">
            <summary>
            转换为时间戳
            </summary>
            <param name="dateTimeOffset"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Util.ImageUtil.CompressImageLock">
            <summary>
            图片压缩锁，防止并发执行图片压缩
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetRandomString(System.Int32)">
            <summary>  
            Generate random string  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetRandomColor">
            <summary>  
            Generate random Color  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CreateValidateCodeImage(System.Int32,System.String@)">
            <summary>  
            Create Validation Code Image  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CreateValidateCodeImage(System.String)">
            <summary>  
            Create Validation Code Image  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.drawLine(System.Drawing.Graphics,System.Drawing.Bitmap,System.Random)">
            <summary>  
            Draw Line for noise  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.drawPoint(System.Drawing.Bitmap,System.Random)">
            <summary>  
            Draw Point for noise  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.base64Crop(System.String,System.Int32,System.Int32)">
            <summary>
            压缩Base64图片流
            </summary>
            <param name="base64String">原始图片流</param>
            <param name="cropWidth">压缩后宽度</param>
            <param name="cropHeight">压缩后高度</param>
            <returns>压缩后Base64图片流</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.byteImageCropToBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            压缩2进制图片流,返回Base64编码
            </summary>
            <param name="imageBytes">原始2进制文件</param>
            <param name="cropWidth">压缩后宽度</param>
            <param name="cropHeight">压缩后高度</param>
            <returns>压缩后Base64图片流</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.ImageToBase64(System.Drawing.Image)">
            <summary>
            图片转化成base64字符串
            </summary>
            <param name="image">image</param>
            <returns>base64字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetImageSize(System.Byte[],System.Int32@,System.Int32@)">
             <summary>
            获取图片高宽(2进制文件) 
             </summary>
             <param name="imageBytes"></param>
             <param name="width"></param>
             <param name="height"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.ImageFileToBase64(System.String)">
            <summary>
            按图片文件物理路径，把图片转化成base64字符串
            </summary>
            <param name="filePath">图片文件物理路径</param>
            <returns>图片base64字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetBase64Img(System.Web.HttpContext,System.String)">
            <summary>
            按图片的相对路径获得图片BASE64字符串
            </summary>
            <param name="httpContext">HTTP上下文</param>
            <param name="path">图片的相对路径</param>
            <returns>图片BASE64字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.IsHtmlBase64Image(System.String)">
            <summary>
            是否是HTML的base6图片字符串
            </summary>
            <param name="base64String"></param>
            <returns>是否是HTML的base6图片字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CompressImage(System.String,System.Int32,System.Int32,Kingdee.BOS.Util.CompressImageType,System.Int32,System.Int32)">
            <summary>
            压缩图片 
            </summary>
            <param name="base64String">原图base64字符串</param> 
            <param name="toWidth">指定的宽度</param>
            <param name="toHeight">指定的高度</param>
            <param name="type">-1: Auto 自动按宽高最小值压缩比例， 
            0: WH 指定高宽缩放（可能变形）, 
            1: W 指定宽，高按比例, 
            2: H 指定高，宽按比例, 
            3: Cut 指定高宽裁减（不变形）</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>     
            <returns>无损压缩图片base64字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CompressImage(System.Byte[],System.Int32,System.Int32,Kingdee.BOS.Util.CompressImageType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            压缩图片 
            </summary>
            <param name="imageBytes">原图片字节流</param> 
            <param name="toWidth">指定的宽度</param>
            <param name="toHeight">指定的高度</param>
            <param name="type">-1: Auto 自动按宽高最小值压缩比例， 
            0: WH 指定高宽缩放（可能变形）, 
            1: W 指定宽，高按比例, 
            2: H 指定高，宽按比例, 
            3: Cut 指定高宽裁减（不变形）</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>     
            <param name="sfsc">是否是第一次调用</param>
            <param name="autoZoom">根据指定的的最大大小自动缩放</param>
            <returns>压缩图片</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetCompressImageSize(System.Drawing.Image,Kingdee.BOS.Util.CompressImageType,System.Int32@,System.Int32@)">
            <summary>
            依据图片压缩类型、指定宽高，得到实际的宽、高、TOP、LEFT
            </summary>
            <param name="iSource">原图</param>
            <param name="type">-1: Auto 自动按宽高最小值压缩比例， 
            0: WH 指定高宽缩放（可能变形）, 
            1: W 指定宽，高按比例, 
            2: H 指定高，宽按比例, 
            3: Cut 指定高宽裁减（不变形）</param>
            <param name="width">指定宽</param>
            <param name="height">指定高</param>
            <param name="x">压缩后图片相对原图的X轴</param>
            <param name="y">压缩后图片相对原图的Y轴</param>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CropImage(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            裁剪图片
            </summary>
            <param name="originImage">原图片</param>
            <param name="region">裁剪的方形区域</param>
            <returns>裁剪后图片</returns>
        </member>
        <member name="T:Kingdee.BOS.Util.CompressImageType">
            <summary>
            压缩图片类型枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.CompressImageType.Auto">
            <summary>
            -1: 自动判断压缩类型（默认按宽高值小的那个压缩）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.CompressImageType.WH">
            <summary>
            0: 指定高宽缩放（可能变形）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.CompressImageType.W">
            <summary>
            1: 指定宽，高按比例
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.CompressImageType.H">
            <summary>
            2: 指定高，宽按比例
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.CompressImageType.Cut">
            <summary>
            3: 指定高宽裁减（不变形）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.ListUtils">
            <summary>
            实现泛型集合类与DataTable间的互相转换，以及集合计算公共方法
            add by linus wang at 2010-04-27
            应用场景：Dev的表格控件虽然可以绑定一些集合类型的数据源，但是却不支持添加行这样的编辑，所以如果把集合转换成
                     DataTable之后再绑定，就会解决上述问题。
            </summary>
            <remarks>实现泛型集合类与DataTable间的互相转换，以及集合计算公共方法</remarks>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检测一个集合是否为空
            </summary>
            <typeparam name="T">集合元素的类型</typeparam>
            <param name="col">集合实例</param>
            <returns>如果集合未包含任何元素，那么返回true,否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.JoinEx(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            将一个字符的列表集合转化为带分隔符的字符串
            </summary>
            <param name="list"></param>
            <param name="seporator"></param>
            <param name="addquot"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.AddSqlParams(System.Collections.Generic.List{Kingdee.BOS.SqlParam},System.Collections.Generic.List{Kingdee.BOS.SqlParam})">
            <summary>
            添加SqlParams（重复的不添加）
            </summary>
            <param name="list"></param>
            <param name="sqlParams"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.ConvertQueryParameters(Kingdee.BOS.KDDbType,System.String[])">
            <summary>
            根据表变量的参数类型，对参数值进行合适的转换；使数据类型和值一致，才能有效使用索引，提高数据查询效率
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.Move``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Func{``0,System.Int32},System.Action{``0,System.Int32})">
            <summary>
            移动位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="currentIndex"></param>
            <param name="targetIndex"></param>
            <param name="getIndex"></param>
            <param name="setIndex"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetLocalComputerName">
            <summary>
            当前计算机的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetHostName">
            <summary>
            获取本机的机器名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetCpuUsedRate">
            <summary>
            获取CPU使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetMemoryUsedRate">
            <summary>
            获取内存使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetMemoryAvailable">
            <summary>
                获取可用内存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalIp.GetLocalIp">
            <summary>
            获得本地ip
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.MathUtil">
            <summary>
            数学运算工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MathUtil.mode">
            <summary>
            四舍五入模式，可配置
            暂时设置为四舍六入五成双
            </summary>
        </member>
        <member name="M:Kingdee.BOS.MathUtil.Round(System.Decimal,System.Int32,Kingdee.BOS.RoundMode)">
            <summary>
            十进制四舍五入
            </summary>
        </member>
        <member name="M:Kingdee.BOS.MathUtil.Round(System.Double,System.Int32,Kingdee.BOS.RoundMode)">
            <summary>
            双精度数四舍五入
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.AwayFromZero">
            <summary>
            四舍五入
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.ToEven">
            <summary>
            设置为四舍六入五成双
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.Carry">
            <summary>
            按精度进位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.Truncation">
            <summary>
            按精度舍尾
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsNullOrEmpty(System.Object)">
            <summary>
            判断指定的对象是否是空引用，或空字符串。
            </summary>
            <param name="value">需要测试的对象</param>
            <returns>如果 value 参数为空引用或空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsNullOrEmptyOrWhiteSpace(System.Object)">
            <summary>
            判断指定的对象是否是空引用，或空字符串， 或空白字符。
            </summary>
            <param name="value">需要测试的对象</param>
            <returns>如果 value 参数为空引用或空字符串 ("")或空白字符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.CreateCopy(System.Object)">
            <summary>
            为对象创建一个拷贝
            </summary>
            <param name="obj">需要创建拷贝的对象</param>
            <returns>新建立的拷贝对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.CreateCopy(System.Object,Kingdee.BOS.Util.FormatterType)">
            <summary>
            为对象创建一个拷贝
            </summary>
            <param name="obj">需要创建拷贝的对象</param>
            <param name="formatterType">格式类型</param>
            <returns>新建立的拷贝对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetObjectSream(System.Object)">
            <summary>
            将对象序列化为字节流
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns>序列化后的字节流</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetObject(System.Byte[])">
            <summary>
            将字节流反序列化为对象
            </summary>
            <param name="bytes">需要反序列化的字节流</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsEmptyPrimaryKey(System.Object)">
            <summary>
            判断返回主键值是否是一个无效的值。
            </summary>
            <param name="pkValue">主键值</param>
            <returns>主键值是一个无效的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2String(System.Object)">
            <summary>
            返回字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2Int(System.Object,System.Int32)">
            <summary>
            得到对象对应的数值
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="iDefaultValue">默认值</param>
            <returns>得到的int值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2Bool(System.Object,System.Boolean)">
            <summary>
            得到对象对应的数值
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="iDefaultValue">默认值</param>
            <returns>得到的bool值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2Int64(System.Object,System.Int64)">
            <summary>
            得到对象对应的数值
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="iDefaultValue">默认值</param>
            <returns>得到的int值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.ToDecimal(System.Object,System.Decimal)">
            <summary>
            得到对象对应的数值
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="iDefaultValue">默认值</param>
            <returns>得到的int值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsDynamicFromId(System.String)">
            <summary>
            判断FormId是否是动态构造
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetString(System.Object)">
            <summary>
            获取对象的字符串，如果对象为空，返回string.Empty
            </summary>
            <param name="obj">对象</param>
            <returns>对象的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.CloneByReflection(System.Object)">
            <summary>
            通过反射浅复制
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.DeepClone``1(``0)">
            <summary>
            对象深拷贝
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetBatchTimes(System.Int32,System.Int32)">
            <summary>
            得到分批次数
            </summary>
            <param name="allCount"></param>
            <param name="everyCount"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.AddT2``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            字典增加值
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Kingdee.BOS.Util.OperateOptionUtils">
            <summary>
            扩展OperateOption参数对象的方法；
            主要用来扩展属性，方便强命名访问
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIgnoreWarning(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetNotShowConfirmInfo(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取操作前是否显示提示信息
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIgnoreWarning(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetNotShowConfirmInfo(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置操作前是否显示提示信息
            </summary>
            <param name="option"></param>
            <param name="isConfirm"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetOnlyValidate(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <param name="onlyValidate"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetOnlyValidate(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否需要校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.OperateOptionUtils.GetValidateFlag(Kingdee.BOS.Orm.OperateOption)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetBOSValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否需要平台校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.OperateOptionUtils.GetBOSValidateFlag(Kingdee.BOS.Orm.OperateOption)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetOperateResultForwardDoFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否将处理操作结果提前到事务中进行，以便后续插件能用到
            </summary>
            <param name="option"></param>
            <param name="operateResultForwardDoFlag"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetOperateResultForwardDoFlag(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取将处理操作结果提前到事务中进行，以便后续插件能用到
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetOperationParameter(Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.IOperationParameter)">
            <summary>
            设置操作服务的参数
            </summary>
            <param name="option"></param>
            <param name="operationParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetOperationParameter(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获得操作服务的参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetRedoIds(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取需重做的单据Id集合
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetRedoIds(Kingdee.BOS.Orm.OperateOption,System.String[])">
            <summary>
            设置需重做的单据Id集合
            </summary>
            <param name="option"></param>
            <param name="ids"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.ClearRedoIds(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            清空需重做的单据Id集合
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIsThrowValidationInfo(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIsThrowValidationInfo(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <param name="isThrowValidation"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetCacheMetadata(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否缓存已处理过的元数据结果,默认值是true（内部变量名：CacheMetadata）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>当前选项的值</returns>
            <remarks>
            引擎在对实体进行CRUD操作前，需要分析实体的元数据信息已产生映射关系，为提高效率，引擎默认
            会缓存分析后的结果，以便后面操作相同类型的实体时不再重新分析。但是，如果你的实体类型仅使用一次
            且可能产生很多此类的临时类型，会造成缓存命中率下降。当对此情况请设置参数为false，以通知引擎不再
            缓存分析结果。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetThrowExceptionWhenNotFind(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否在没有找到指定编号的数据时，触发异常，默认为true。（内部变量名：ThrowExceptionWhenNotFind）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>是否触发异常。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIgnoreScopeValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置操作选项，是否忽略范围校验
            </summary>
            <param name="option"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIgnoreScopeValidateFlag(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回参数，是否忽略范围校验
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIsFromImport(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置操作选项，是否来源于引入:仅保存操作有效，其余操作无效
            </summary>
            <param name="option"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIsFromImport(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回参数，是否来源于引入:仅保存操作有效，其余操作无效
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetImportBuildType(Kingdee.BOS.Orm.OperateOption,System.Int32)">
            <summary>
            设置引入模式，0：追加；1：覆盖
            </summary>
            <param name="option"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetImportBuildType(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回引入模式
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetWorkflowSubmitOperation(Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            设置工作流提交操作代码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetWorkflowSubmitOperation(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回工作流提交操作代码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetWorkflowCancelOperation(Kingdee.BOS.Orm.OperateOption,System.String)">
            <summary>
            设置工作流撤销操作代码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetWorkflowCancelOperation(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回工作流撤销操作代码
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetForbidSaveFlexData(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否保存弹性域数据（获取参数）
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetForbidSaveFlexData(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否保存弹性域数据（设置参数）
            </summary>
            <param name="option"></param>
            <param name="forbidSaveFlexData"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetEntryDeleteRowsOperation(Kingdee.BOS.Orm.OperateOption,System.Int32[])">
            <summary>
            设置删除分录操作待删除的行索引
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetEntryDeleteRowsOperation(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取删除分录操作待删除的行索引
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetHash256Signatures(Kingdee.BOS.Orm.OperateOption,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            设置单据签名数据
            </summary>
            <param name="option"></param>
            <param name="hashSignatures"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetHash256Signatures(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取单据签名数据
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetClearCacheFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置清除缓存标志
            </summary>
            <param name="option"></param>
            <param name="flag"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetClearCacheFlag(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取清除缓存标志
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIsWFInvokeFlag(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取工作流调用标识
            </summary>
            <param name="option">为数据的操作提供额外的选项</param>
            <returns>工作流调用标识</returns>
            <remarks>
            1、目前只有在工作流调用时，有此标记
            2、此标记只代表是工作流中调用的操作，没包含其他业务含义
            3、业务插件用此标识判断时，需要考虑webapi、移动端、服务端、工作流引擎不同场景下的业务逻辑判断
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetNotWriteOperationLogFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置 不写入上机操作日志标志
            </summary>
            <param name="option"></param>
            <param name="notWriteOperationLogFlag">不写入上机操作日志</param>
        </member>
        <member name="F:Kingdee.BOS.Util.PathUtils.IllegalPathChar">
            <summary>
            返回非法路径字符
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetPhysicalPath(System.String,System.String)">
            <summary>
            传入Web应用程序中的虚拟路径及文件名，返回与之对应的物理文件路径。
            </summary>
            <remarks>
            此处传入文件名若包含特殊字符，将该特殊字符替换为空字符，原因是这里已经是返回实际的物理文件路径了，若包含特殊字符，
            后面进行读写操作一定过不去，而且看了不少用到这个方法的地方进来前也会清一下特殊字符，干脆直接在源头清除了。
            对于依赖于特殊文件名系统报错的情况，过于特殊，不做考虑，此处检测特殊文件名不记录日志，直接替换。
            </remarks>
            <param name="directory">Web应用程序中的虚拟路径。</param>
            <param name="fileName">文件名。</param>
            <returns>返回与之对应的物理文件路径。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetValidFileName(System.String)">
            <summary>
            得到一个合法的文件名：fileName为空，返回一个随机Guid作为文件名，否则移除掉文件名中的非法字符
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.TryCheckFileNameIsValid(System.String,System.String@)">
            <summary>
            检查并返回文件名是否包含非法字符。
            </summary>
            <param name="fileName">待检查文件名。</param>
            <param name="errMsg">错误提示信息。</param>
            <returns>返回是否包含非法字符。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetUrlValidFileName(System.String)">
            <summary>
            得到一个url可以访问的合法的文件名
            ASP.NET默认的拦截机制，保证页面URL传输的一定安全性
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetFileExtName(System.String)">
            <summary>
            返回文件扩展名，例如 .txt
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.ValidateWhiteList(System.String)">
            <summary>
            传入文件名，验证是否在 UploadWhiteList 文件上传白名单内。
            </summary>
            <param name="fileName">待验证的文件名。</param>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.ConvertPhysicalPathToDownloadUrl(Kingdee.BOS.Context,System.String)">
            <summary>
            传入登录上下文及文件物理路径，返回转换后的文件下载地址，注意是FileUpLoadServices相对路径。
            </summary>
            <param name="context">登录上下文。</param>
            <param name="physicalPath">文件物理路径。</param>
            <returns>返回转换后的文件下载地址，注意是FileUpLoadServices相对路径。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.ConvertPhysicalPathToUrl(Kingdee.BOS.Context,System.String)">
            <summary>
            传入登录上下文及文件物理路径，返回转换后的文件下载地址，注意是FileUpLoadServices相对路径。
            </summary>
            <param name="context">登录上下文。</param>
            <param name="physicalPath">文件物理路径。</param>
            <returns>返回转换后的文件下载地址，注意是FileUpLoadServices相对路径。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetDownloadUrl(Kingdee.BOS.Context,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            传入登录上下文及下载参数，返回文件下载URL。
            </summary>
            <param name="ctx">登录上下文。</param>
            <param name="payload">下载参数。</param>
            <returns>返回文件下载URL。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.EncodeJsonWebToken(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            传入需要携带的信息，返回JWT令牌。
            </summary>
            <param name="payload">需要携带的信息。</param>
            <returns>返回JWT令牌。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.DecodeJsonWebToken(System.String,System.Boolean)">
            <summary>
            传入JWT令牌，判断是否需要验证并返回携带的信息。
            </summary>
            <param name="token">JWT令牌。</param>
            <param name="verify">是否需要验证。</param>
            <returns>返回携带的信息。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetFileName(System.String)">
            <summary>
            从包含文件名的文件路径中获取文件名
            </summary>
            <param name="filePath">文件路径</param>
            <p>应用场景：</p>
            1. 包含有文件名的文件路径；
            <returns>文件名</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetFileDirPath(System.String)">
            <summary>
            从文件路径中获取文件所在目录
            </summary>
            <param name="filePath">文件路径</param>
            <p>应用场景：</p>
            1. 包含有目录的文件路径；
            <returns>文件所在目录</returns>
        </member>
        <member name="T:Kingdee.BOS.RegistryHelper">
            <summary>
            注册表访问帮助器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.RegistryHelper.ReadSubKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="view"></param>
            <param name="subkey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.RegistryHelper.LoadUnClickOncesCmd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.RequestUtils">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_LOGINURL">
            <summary>
            Login Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_KDSREPORTURL">
            <summary>
            kdsReportUrl
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_DESIGNERURL">
            <summary>
            DesignerUrl Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_DESIGNERURLX86">
            <summary>
            DesignerUrl UrlX86
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_REPORTIDEDESIGNERURLX86">
            <summary>
            ReportIDEDesignerUrlX86
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_CLOUDCLIENTURL">
            <summary>
            CloudClientUrl
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_CLOUDCLIENTURLX86">
            <summary>
            X86 Client Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_REPORTIDEDESIGNERURL">
            <summary>
            ReportIDEDesignerUrl
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_FORWRADLOGINURL">
            <summary>
            ForwardLoginUrl
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_CLOUDYZJAPPURL">
            <summary>
            云之家客户端Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_NETTOOLSURL">
            <summary>
            网络检测工具Url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_GUARDURL">
            <summary>
            星空卫士url
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.PUBLISHPORTKEY">
            <summary>
            发布端口Key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.PUBLISHHOSTNAMEKEY">
            <summary>
            发布主机
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.PUBLISHSCHEMEKEY">
            <summary>
            发布协议
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_BMREPORTURL">
            <summary>
            预算报表路径
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.ISREDIRECTCLIENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.RequestUtils.KEY_EXCELPRINTURL">
            <summary>
            ExcelPrint Url
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetApplicationPath">
            <summary>
            获得绝对路径前缀,例如http://192.168.18.169/k3cloud/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.ClearClientPageCache">
            <summary>
            清空浏览器客户端的缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.CheckRequestDotNet4">
            <summary>
            检查客户端是否安装了.net Net Frameowrk 4.0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.ShowDotNetAppUrl(System.String)">
            <summary>
            1.会判断客户端是否已安装了.net framework,如果没有安装，则直接显示net framework 下载地址
            2.如果用户是从外网访问，则将地址替换为请求Url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetLoginUrl">
            <summary>
            获取登陆地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetUrlKey(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取Url Key
            1. LoginUrl
            2.BOSIDE/WPFclient/reportide/kdsreport
            </summary>
            <param name="key">
             RequestUtils.KEY_KDSREPORTURL (KDSReport)
             RequestUtils.KEY_DESIGNERURL (DesignerUrl)
             RequestUtils.KEY_CLOUDCLIENTURL (CloudClientUrl)
             RequestUtils.KEY_REPORTIDEDESIGNERURL (ReportIDEDesignerUrl)
            </param>
            <param name="cSchme"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetUrlKey(System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            根据Key值从Common.Config获取URL
            </summary>
            <param name="key">Key值</param>
            <param name="isReplaceHost">是否替换主机名</param>
            <param name="cSchme">是否包含Scheme的转换</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetCustomUrl(System.String,System.Nullable{System.Boolean})">
            <summary>
            客户自定义的链接，进行urlformat，现在用于客户客户端二次开发下载功能
            </summary>
            <param name="customUrl">客户定义链接</param>
            <param name="cSchme"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetDotNetUrl">
            <summary>
            获取DotNet4下载地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.ConvertToRequestUrl(System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            转换规则
            </summary>
            <param name="url"></param>
            <param name="force">是否强制转换</param>
            <param name="cScheme">是否包含Scheme的转换</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.CheckNeedReplace(System.String)">
            <summary>
            是否需要转换
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.IsPrivateIP(System.Int64)">
            <summary>
            是否为私有地址
            </summary>
            <param name="ipVal"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.IsSecureRequest(System.Web.HttpRequest)">
            <summary>
            判断请求是否为https安全请求,或公有云内部转发的http请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.IsXForwardedSecureRequest(System.Web.HttpRequest)">
            <summary>
            
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.SetCookieSecure(System.Web.HttpRequest,System.Web.HttpCookie)">
            <summary>
            初始化安全Cookie（common.config配置项IsAspNetSecureCookie和IsSecureCookie控制）
            </summary>
            <param name="req"></param>
            <param name="cookie"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetGSInfo(Kingdee.BOS.KDGSRequest)">
            <summary>
            获取用户全局会话标识信息
            </summary>
            <param name="gsRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.UrlBlockVerify(System.Web.HttpRequest,System.Web.HttpResponse)">
            <summary>
            URL规则过滤
            </summary>
            <param name="req">请求</param>
            <param name="resp">响应</param>
            <returns>false校验不通过</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RpcUtils.GetBindingByType(System.Int32)">
            <summary>
            获取配置好的Rpc绑定方式
            </summary>
            <param name="iType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RpcUtils.GetHostNameByIp">
            <summary>
            获取本机的Ip地址，如果是多IP，返回第一个IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumDesc(System.Object)">
            <summary>
            获取枚举描述特性值
            </summary>
            <param name="_enum">枚举值</param>
            <returns>枚举值的描述</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumDescByKey``1(System.Int32)">
            <summary>
            通过Key获取枚举描述特性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetValueByKey``1(System.Int32)">
            <summary>
            通过Key得到Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumDescByValue``1(System.String)">
            <summary>
            通过Value获取枚举描述特性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumAllKeyValues``1">
            <summary>
            获取枚举所有keyValue值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumAllKeyDescs``1">
            <summary>
            获取枚举所有keyDesc值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.GetEnumAllValueDescs``1">
            <summary>
            获取枚举所有ValueDesc值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.IsContainKey``1(System.Int32)">
            <summary>
            是否包含Key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.IsContainValue``1(System.String)">
            <summary>
            是否包含Key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.EnumHelper.IsContain``2(``1)">
            <summary>
            是否包含Key或Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.TryGetStringFromBase64(System.String@)">
            <summary>
            判断是否经过base64编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.SerializeToXml``1(``0)">
            <summary>
            对象实例序列化为XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.DeserializeFromXml``1(System.String)">
            <summary>
            将XML序列化为对象实例
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.Deserialize(System.Byte[])">
            <summary>
            将二进制数据反序列化
            </summary>
            <param name="someBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.Serialize(System.Object)">
            <summary>
            返回二进制数据
            </summary>
            <param name="someBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.SerializeToBase64WithCompress(System.Object)">
            <summary>
            把对象序列化后压缩，然后返回Base64编码字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.DeserializeFromBase64WithDecompress``1(System.String)">
            <summary>
            BASE64解码后解压，然后在反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.Compress(System.Byte[])">
            <summary>
            压缩字节数组
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.Decompress(System.Byte[])">
            <summary>
            解压缩字节数组
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.GetChecksum(System.Byte[],System.String)">
            <summary>
            get data checksum hash code
            </summary>
            <param name="buffer">data</param>
            <param name="hashingAlgoType">MD5, SHA1, SHA256, SHA384, SHA512</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.IdObject">
            <summary>
            定义了直接使用的，作为返回值的对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdObject.Id">
            <summary>
            对象的编号
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNumberObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Number字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNumberObject.Number">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id和Name字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameObject.Name">
            <summary>
            对象的名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameNumberObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Code字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameNumberObject.Number">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameLocaleIdObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Code字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameLocaleIdObject.LocaleId">
            <summary>
            对象名称对应的语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameDescriptionObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Description字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameDescriptionObject.Description">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Description字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.LocaleId">
            <summary>
            对象名称对应的语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.StringUtils">
            <summary>
            字符串函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Traditional2Simplified(System.String)">
            <summary>
            将字符串由繁体中文转为简体中文
            </summary>
            <param name="text">需要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Simplified2Traditional(System.String)">
            <summary>
            将字符串7由简体中文转为繁体中文
            </summary>
            <param name="text">需要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToJSONObject(System.String)">
            <summary>
            将指定JSON字符串转成JSONObject
            </summary>
            <param name="parameters">字符串</param>
            <returns>JSONObject</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToJSONArray(System.String)">
            <summary>
            将指定JSON字符串转成JSONArray
            </summary>
            <param name="parameters">字符串</param>
            <returns>JSONArray</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.LengthOfChar(System.String)">
            <summary>
            统计字条串中字符的个数(区分Unicode)
            </summary>
            <param name="str">字符串</param>
            <returns>个数</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.SplitRegex(System.String,System.String)">
            <summary>
            在指定的正则表达式模式所定义的位置，拆分指定的输入字符串。
            </summary>
            <param name="str1">要拆分的字符串</param>
            <param name="strRegex">要匹配的正则表达式</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.SplitRegex(System.String,System.String,System.Int32)">
            <summary>
            在指定的正则表达式模式所定义的位置，将指定的输入字符串拆分指定的最大次数。
            </summary>
            <param name="str1">要拆分的字符串</param>
            <param name="strRegex">要匹配的正则表达式</param>
            <param name="limit">可拆分的最大次数</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToIntList(System.String,System.Char)">
            <summary>
            根据分隔符拆分字符串，并转换为整型集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.SubStr(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截取字符串，不报异常。
            </summary>
            <param name="input">等于null或Empty，返回input</param>
            <param name="startIndex">小于0或大于input.Length，返回input</param>
            <param name="length">小于或等于0，返回Input</param>
            <param name="last">超长的后缀，比如...</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            判断指定的字符串是否相等(忽略大小写)
            </summary>
            <param name="str1">要比较的第一个字符串</param>
            <param name="str2">要比较的第二个字符串</param>
            <returns>如果认为对象相等，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckContentType(System.String,System.String)">
            <summary>
            判断ContentType中是否存在指定参数
            </summary>
            <param name="contentType">Request.ContentType</param>
            <param name="param">指定参数，例如Json</param>
            <returns>如果存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckContentTypeWithJson(System.String)">
            <summary>
            判断ContentType中是否存在指定参数Json
            </summary>
            <param name="contentType">Request.ContentType</param>
            <returns>如果存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckContentTypeIsDesktopApp(System.String)">
            <summary>
            判断连接的ConentType来自桌面应用（WPF和Silverlight)
            </summary>
            <param name="contentType">start with "multipart/form-data;boundary="</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckUserAgent(System.String,System.String)">
            <summary>
            判断UserAgent中是否存在指定参数
            </summary>
            <param name="userAgent">Request.UserAgent</param>
            <param name="param">指定参数，例如Json</param>
            <returns>如果存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsDate(System.String)">
            <summary>
            判断指定的字符串是否是日期
            </summary>
            <param name="sInput">要判断的字符串</param>
            <returns>如果是日期， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsNumeric(System.String)">
            <summary>
            判断指定的字符串是否是数值
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是数值， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsInt(System.String)">
            <summary>
            判断指定的字符串是否是整数
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是整数， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsUnsign(System.String)">
            <summary>
            判断指定的字符串是否是无符号数值
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是无符号数值， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsEmpty(System.String)">
            <summary>
            判断指定的字符串是否是空引用，或空字符串
            </summary>
            <param name="str">要判断的字符串</param>
            <returns>如果字符串是NULL引用或者是Empty， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsNumberAndLetters(System.String)">
            <summary>
            判断指定的字符串是否是由数字及26个英文字母组成
            </summary>
            <param name="str">要判断的字符串</param>
            <returns>如果字符串是由数字及26个英文字母组成， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CustomReplace(System.String,System.String,System.String,System.Char)">
            <summary>
            字符串替换函数，可以指定替换时排除指定字符包含的部分
            </summary>
            <param name="source">字符串</param>
            <param name="subSrc">被替换字符串</param>
            <param name="subDest">替换字符串</param>
            <param name="tag">指定替换时排除指定字符包含的部分的字符标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            在指定输入字符串内，使用指定替换字符串替换第一个被替换字符串。 
            </summary>
            <param name="input">输入字符串</param>
            <param name="oldValue">被替换字符串</param>
            <param name="newValue">替换字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CharAt(System.String,System.Int32)">
            <summary>
            取得字符串中指定索引处的字符
            </summary>
            <param name="str">需要搜索的字符串</param>
            <param name="i">索引</param>
            <returns>指定索引处的字符</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetStringEx(System.String,System.String,System.String)">
            <summary>
            返回指定位置的特定分隔字符串中的以关键字命名的某段字符串
            如  a=1 | b=2| c=3
            输入 b 返回 2
            </summary>
            <param name="sString">按特定分隔字符串分割的字符串</param>
            <param name="sSegment">关键字</param>
            <param name="sP">分割字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetString(System.String,System.Int32,System.String)">
            <summary>
            返回指定位置的特定分隔字符串中的某段字符串
            </summary>
            <param name="sString">按特定分隔字符串分割的字符串</param>
            <param name="iPosition">位置</param>
            <param name="sP">分割字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Inside(System.String,System.String[])">
            <summary>
            判断字符串是否包含指定的字符集中
            </summary>
            <param name="key">需要判断的字符串</param>
            <param name="value">指定的字符集</param>
            <returns>如果定义的字符集中包含字符串， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetFirstString(System.Collections.Generic.List{System.String})">
            <summary>
            多字符串比较判断，返回第一个不为空的 所以list顺序很重要
            </summary>
            <param name="strs">字符串列表</param>
            <returns>第一个不为空的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Union``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>
            合并，去掉相同项
            </summary>
            <param name="lists"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.FixedOrcalXMLString(System.String)">
            <summary>
            将已转义的转义字符还原
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.EscapeXMLStr(System.String)">
            <summary>
            字符转义
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.JoinFilterString(System.String,System.String,System.String)">
            <summary>
            把两个过滤条件拼接到一起；  
            </summary>
            <param name="str1">过滤条件一</param>
            <param name="str2">过滤条件二</param>
            <param name="separator">默认以“AND”为逻辑连接符</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckSqlValidate(System.String)">
            <summary>
            验证SQL是否带有非法用法
            </summary>
            <param name="strsql"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CheckSqlValidateForCloudErp(System.String)">
            <summary>
            检查sql合法性(云erp)
            </summary>
            <param name="strsql"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetSqlWithCardinality(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            默认得到只有FID一列并被包含在括号里的带基数提示的子查询；如果不带括号，则得到别名为b子查询。
            /r/n 参数说明： count统计数量，不包含重复数；param参数名；IsContainC子查询是否包含括号内；
            type参数类型，1代表KDDbType.udt_inttable， 2代表KDDbType.udt_varchartable， 3代表KDDbType.udt_nvarchartable。
            </summary>
            <param name="count">统计数量，不包含重复数</param>
            <param name="param">参数</param>
            <param name="type">参数类型</param>
            <param name="IsContainC">子查询是否包含括号内</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsCountMatch(System.String,System.String)">
            <summary>
            判断一个字符串中全是某种组合字符的循环合集
            var a = false;
            a = Kingdee.BOS.Util.StringUtils.IsCountMatch("??????", "??"); // true
            a = Kingdee.BOS.Util.StringUtils.IsCountMatch("???????", "??"); //false
            a = Kingdee.BOS.Util.StringUtils.IsCountMatch("??1???", "?");//false
            a = Kingdee.BOS.Util.StringUtils.IsCountMatch("#1##1##1#", "#1#");//true
            a = Kingdee.BOS.Util.StringUtils.IsCountMatch("##1###", "#");//false
            string b = null;
            a = b.IsCountMatch("?");//false
            a = b.IsCountMatch(null);//false
            </summary>
            <param name="target">目标字符串</param>
            <param name="chars">匹配字符模式</param>
            <returns>bool</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Encrypt(System.String)">
            <summary>
            Dec加密
            </summary>
            <param name="decUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GZipCompress(System.Byte[])">
            <summary>
            GZip压缩函数
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetDecimalScale(System.String)">
            <summary>
            获取小数精度
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToDBC(System.String)">
            <summary>
            转为半角
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.WorkflowMember.BaseMember">
            <summary>
            参与人成员基类
            </summary>
            <remarks>
            实现成员接口，屏蔽接口变动对成员派生类的影响
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.BaseMember.MemberTypeId">
            <summary>
            成员类型内码，如User、Role等，以此与数据库中注册的成员类型匹配(T_WF_ParticipantType.FID)
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.BaseMember.MemberTypeName(Kingdee.BOS.Context)">
            <summary>
            返回当前语言的成员类型名称，如用户、角色，
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.BaseMember.GetDataEntityType">
            <summary>
            返回派生类的实体模型，用此模型进行序列化、反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.BaseMember.Id">
            <summary>
            参与人成员内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.BaseMember.Name">
            <summary>
            参与人成员名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.BaseMember.ParticipantTypeId">
            <summary>
            参与人类型ID，以此与数据库中注册的成员类型匹配(T_WF_ParticipantType.FID)
            与MemberTypeId的区别在于：MemberTypeId对于所有自定义参与人类型都是CustomParti，但是ParticipantTypeId会更详细区别各个自定义参与人类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WorkflowMember.UserMember">
            <summary>
            参与人成员-用户
            </summary>
        </member>
        <member name="F:Kingdee.BOS.WorkflowMember.UserMember._customerVariables">
            <summary>
            程序自定义变量值（而Variables是设计时界面定义的参数不可添加自定义参数）
            （定义为字段防止序列化）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.UserMember.SetCustomerVariable(System.String,System.Object)">
            <summary>
            设置程序自定义变量值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.UserMember.GetCustomerVariable(System.String)">
            <summary>
            获取程序自定义变量值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.UserMember.MemberTypeId">
            <summary>
            重载，返回本参与人成员类型内码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.UserMember.MemberTypeName(Kingdee.BOS.Context)">
            <summary>
            重载，返回本参与人类型名
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.UserMember.PostId">
            <summary>
            用户时来源岗位
            </summary>
            <remarks>
            由此岗位解析出本用户
            </remarks>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.UserMember.AssignId">
            <summary>
            待办任务id
            </summary> 
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.UserMember.ParticipantType">
            <summary>
            设计时定义的参与人类型内码（如： post），记录本用户成员是从那种类型解析来的
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Workflow.Enumeration.ConditionLogic.None">
            <summary>
            默认值，支持xml持久化处理，默认为0时的强制转换(使用时没有初始化）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Workflow.Enumeration.ConditionLogic.And">
            <summary>
            交集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Workflow.Enumeration.ConditionLogic.Or">
            <summary>
            并集
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Workflow.Enumeration.ConditionLogic.Ex">
            <summary>
            排除
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IActivityDefine">
            <summary>
            对外提供流程编程模型 - 流程节点定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityDefine.ActivityDefineId">
            <summary>
            节点定义ID（当前版本流程图唯一）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityDefine.ActivityName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IActivityInstance">
            <summary>
            对外提供流程编程模型 - 流程节点任务实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.ActivityInstanceId">
            <summary>
            流程节点实例ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.ActivityDefineId">
            <summary>
            节点定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.ProcessInstance">
            <summary>
            所属流程实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.ActivityName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.PreviousLineIds">
            <summary>
            流入本节点的前置连线ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.PreviousLines">
            <summary>
            流入本节点的前置连线
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.HistoryActivityIds">
            <summary>
            流入本节点的历史节点清单，结构：Key-节点实例ID，Value-节点定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.ReceiverList">
            <summary>
            所含接收人列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IActivityInstance.CurrentReceiver">
            <summary>
            当前接收人实例，即当前待办处理人的信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.ICustomizeMemberPlugIn">
            <summary>
            流程编程模型 - 自定义参与人成员解析器
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ICustomizeMemberPlugIn.ParticipantFormIds">
            <summary>
            用户在流程节点上设置自定义参与人时，可选的基础资料FormId
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.ILineDefine">
            <summary>
            对外提供流程编程模型 - 流程连线定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ILineDefine.LineDefineId">
            <summary>
            连线定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ILineDefine.SourceActivityId">
            <summary>
            起始节点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ILineDefine.TargetActivityId">
            <summary>
            目标节点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ILineDefine.LineName">
            <summary>
            连线名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ILineDefine.CustomizeConditionList">
            <summary>
            自定义条件列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IProcessDefine">
            <summary>
            对外提供流程编程模型 - 流程定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessDefine.ProcessDefineId">
            <summary>
            流程定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessDefine.ProcessDefineNumber">
            <summary>
            流程定义编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessDefine.ProcessDefineName">
            <summary>
            流程定义名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessDefine.VersionList">
            <summary>
            本流程所有版本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IProcessInstance">
            <summary>
            对外提供流程编程模型 - 流程实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessInstance.ProcessInstanceId">
            <summary>
            流程实例ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessInstance.VersionDefine">
            <summary>
            所用流程版本定义
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IProcessVersion">
            <summary>
            对外提供流程编程模型 - 流程版本定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessVersion.ProcessVersionId">
            <summary>
            流程版本定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessVersion.ActivityList">
            <summary>
            本流程版本所有节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IProcessVersion.LineList">
            <summary>
            本流程版本所有连线
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.IReceiverInstance">
            <summary>
            对外提供流程编程模型 - 流程节点任务接收人实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ReceiverInstanceId">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ActivityInstance">
            <summary>
            所属流程节点实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ReceiverUserId">
            <summary>
            接收人用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.TaskTitle">
            <summary>
            任务标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ActionItem">
            <summary>
            处理时所选的审批项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ActionOpinion">
            <summary>
            处理意见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.IReceiverInstance.ActionDate">
            <summary>
            处理时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.ObjectActivityInstance">
            <summary>
            对外提供流程编程模型 - 业务对象流程节点实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ObjectActivityInstance.ObjectKeyValue">
            <summary>
            业务对象主键内码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ObjectActivityInstance.ObjectFormId">
            <summary>
            业务对象单据FormId
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Interface.ObjectActivityInstance.ActivityInstance">
            <summary>
            流程节点任务实例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Interface.ObjectActivityInstanceCollection">
            <summary>
            对外提供流程编程模型 - 业务对象流程节点实例集合
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfActivityDefine">
            <summary>
            流程编程模型 - 流程节点定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityDefine.ActivityDefineId">
            <summary>
            节点定义ID（当前版本流程图唯一）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityDefine.ActivityName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfActivityInstance">
            <summary>
            流程编程模型 - 流程节点任务实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.ActivityInstanceId">
            <summary>
            流程节点实例ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.ActivityDefineId">
            <summary>
            节点定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.ProcessInstance">
            <summary>
            所属流程实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.ActivityName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.PreviousLineIds">
            <summary>
            流入本节点的前置连线ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.PreviousLines">
            <summary>
            流入本节点的前置连线
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.PreviousCustomizeConditions">
            <summary>
            根据流入本节点的前置连线，获取连线上的自定义条件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.HistoryActivityIds">
            <summary>
            流入本节点的历史节点清单，结构：Key-节点实例ID，Value-节点定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.ReceiverList">
            <summary>
            所含接收人列表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfActivityInstance.CurrentReceiver">
            <summary>
            当前接收人实例，即当前待办处理人的信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfLineDefine">
            <summary>
            流程编程模型 - 流程连线定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfLineDefine.LineDefineId">
            <summary>
            连线定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfLineDefine.SourceActivityId">
            <summary>
            起始节点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfLineDefine.TargetActivityId">
            <summary>
            目标节点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfLineDefine.LineName">
            <summary>
            连线名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfLineDefine.CustomizeConditionList">
            <summary>
            自定义条件列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfProcessInstance">
            <summary>
            流程编程模型 - 流程实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfProcessInstance.ProcessInstanceId">
            <summary>
            流程实例ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfProcessInstance.VersionDefine">
            <summary>
            所用流程版本定义
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfProcessVersion">
            <summary>
            流程编程模型 - 流程版本定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfProcessVersion.ProcessVersionId">
            <summary>
            流程版本定义ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfProcessVersion.ActivityList">
            <summary>
            本流程版本所有节点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfProcessVersion.LineList">
            <summary>
            本流程版本所有连线
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfReceiverInstance">
            <summary>
            流程编程模型 - 流程节点任务接收人实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ReceiverInstanceId">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ActivityInstance">
            <summary>
            所属流程节点实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ReceiverUserId">
            <summary>
            接收人用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.TaskTitle">
            <summary>
            任务标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ActionItem">
            <summary>
            处理时所选的审批项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ActionOpinion">
            <summary>
            处理意见
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfReceiverInstance.ActionDate">
            <summary>
            处理时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Workflow.Model.WfWriteBackDefine">
            <summary>
            工作流节点反写定义
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfWriteBackDefine.UserKey">
            <summary>
            审批人标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfWriteBackDefine.OptionKey">
            <summary>
            审批意见标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfWriteBackDefine.ItemKey">
            <summary>
            审批项标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfWriteBackDefine.TimeKey">
            <summary>
            审批时间标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Workflow.Model.WfWriteBackDefine.NodeNameKey">
            <summary>
            节点名称标识
            </summary>
        </member>
    </members>
</doc>
